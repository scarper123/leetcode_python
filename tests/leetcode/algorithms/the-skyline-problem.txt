An accepted three line solution in JAVA
    public List<Integer> grayCode(int n) {
        List<Integer> result = new LinkedList<>();
        for (int i = 0; i < 1<<n; i++) result.add(i ^ i>>1);
        return result;
    }

The idea is simple. G(i) = i^ (i/2).

----------------------------------------------------------------------------------------------------
Share my solution
My idea is to generate the sequence iteratively. For example, when n=3, we can get the result based on n=2. 
00,01,11,10 -> (000,001,011,010 ) (110,111,101,100). The middle two numbers only differ at their highest bit, while the rest numbers of part two are exactly symmetric of part one. It is easy to see its correctness.
Code is simple:

----------

    public List<Integer> grayCode(int n) {
        List<Integer> rs=new ArrayList<Integer>();
        rs.add(0);
        for(int i=0;i<n;i++){
            int size=rs.size();
            for(int k=size-1;k>=0;k--)
                rs.add(rs.get(k) | 1<<i);
        }
        return rs;
    }

----------------------------------------------------------------------------------------------------
What is the best solution for Gray Code problem? No extra space used and no recursion?
  I have a solution here which takes O(1) on space and no recursion used. Is this the best possible solution?  (I combined the base cases in the loop as mike3 does. Thanks mike3!)

    vector<int> grayCode(int n) 
    {         
        vector<int> result(1, 0);        
        for (int i = 0; i < n; i++) {
            int curCount = result.size();
            // push back all element in result in reverse order
            while (curCount) {
                curCount--;
                int curNum = result[curCount];
                curNum += (1<<i);
                result.push_back(curNum);
            } 
        }
        return result;
    }

----------------------------------------------------------------------------------------------------
One-liner Python solution (with demo in comments)
All you need is a bit of careful thought.

Btw, it's extremely useful to write down your thought/demo in comments before you actually start to write the code, especially during interview. 

Even if you do not solve the problem finally, the interviewer at least get to know what you're thinking. 

And if you don't get the problem right, he/she will have a chance to correct you.

    class Solution:
        # @return a list of integers
        '''
        from up to down, then left to right
        
        0   1   11  110
                10  111
                    101
                    100
                    
        start:      [0]
        i = 0:      [0, 1]
        i = 1:      [0, 1, 3, 2]
        i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]
        '''
        def grayCode(self, n):
            results = [0]
            for i in range(n):
                results += [x + pow(2, i) for x in reversed(results)]
            return results

----------------------------------------------------------------------------------------------------
What if I have no knowledge over Gray Code before?
A simple Google search will reveal the secret behind Gray Code, of course. Knowing the formula, this question can be solved within 5 minutes. But what if I've never known anything about Gray Code? Is it feasible for someone to derive the formula during an interview? I think I would just get stuck for 45 minutes trying to figure out how to generate an algorithm for it. Is this question intended to test one's knowledge base?

----------------------------------------------------------------------------------------------------
Share my simple way of this problem^_^
    class Solution {
    public:
        vector<int> grayCode(int n) {
            int N(1 << n), tmp;
            vector<int> result;
            for(int i(0); i < N; i++)
            {
                tmp = i << 1;
                result.push_back((tmp^i) >> 1);
            }
            return result;
        }
    };

As we known:

    Gi = Bi+1 xor Bi

For example, trans binay '001' to gray code:

    tmp = 001 << 1

then,

    bin 0 0 0 1
    tmp 0 0 1 0
    -xor------------
        0 0 1 1
and the gray code is:

    0 0 1 1 >> 1 (ignore last bit) => 0 0 1



----------------------------------------------------------------------------------------------------
4ms simple iterative solution
    vector<int> grayCode(int n) {
        vector<int> result = { 0 };
        int t = 1;
        for(int i = 0; i<n; i++) {
            for(int j = result.size() - 1; j >= 0; j--)
                result.push_back(result[j]^t);
            t <<= 1;
        }
        
        return result;
    }

----------------------------------------------------------------------------------------------------
4 lines C++ code.
You can also view more solution on [Github](https://github.com/flexwang/CodeTest)

    class Solution {
    public:
        vector<int> grayCode(int n) {
            vector<int> ans(1<<n);
            for (int i=0; i<(1<<n); i++) 
                ans[i] = i^(i>>1);
            return ans;
        }
    };

I try to give a simple proof here. Let's denote i^(i>>1) as f(i). To proof f(i) is the ith gray code, we only need to prove the following statements:

 1. f(0) = 0
 2. (i) and f(i+1) only differs in one digit
 3. f(i) is bijective, e.g. f(i) = f(j) if and only if i = j.

The first one is obvious. 

For the second , f(i) ^ f(i+1) = i^(i>>1)^(i+1)^((i+1)>>1) = (i^(i+1)) ^ ((i^(i+1)) >> 1). Let's denote g(i) = i^(i+1), g(i) has the form of 0000111...111. So f(i) ^ f(i+1) = g(i) ^ g(i)>>1 = 00001000...000.

The third part can be proved alike.

----------------------------------------------------------------------------------------------------
Backtracking C++ solution
    class Solution {
        void utils(bitset<32>& bits, vector<int>& result, int k){
            if (k==0) {
                result.push_back(bits.to_ulong());
            }
            else {
                utils(bits, result, k-1);
                bits.flip(k-1);
                utils(bits, result, k-1);
            }
        }
    public:
        vector<int> grayCode(int n) {
            bitset<32> bits;
            vector<int> result;
            utils(bits, result, n);
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
When n = 0, it should return &#91;&#93;
n = 0 mean the length is 0, so the program should return [].

Go fix the test case please.



----------------------------------------------------------------------------------------------------
JAVA-----------Easy Version To Understand!!!!!!
    public static List<Integer> grayCode(int n) {
		if (n < 0)
			return new ArrayList<Integer>();
		if (n == 0) {
			List<Integer> list = new ArrayList<Integer>();
			list.add(0);
			return list;
		}
		List<Integer> tmp = grayCode(n - 1);
		List<Integer> result = new ArrayList<Integer>(tmp);
		int addNumber = 1 << (n - 1);
		for (int i = tmp.size() - 1; i >= 0; i--) {
			result.add(addNumber + tmp.get(i));
		}

		return result;
	}

----------------------------------------------------------------------------------------------------
SIMPLEST, FASTEST, EASIEST SOLUTION
    public List<Integer> grayCode(int n) {
        int count = (int)Math.pow(2,n);
        List<Integer> res = new ArrayList<>();
        for(int i = 0; i < count; i++){
            res.add((i) ^ (i >> 1));
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
6-Line Java Solution, Very Concise
All we need to do is to add an '1' to the top digit of the binary string and reversely added the new number to the list.

    public List<Integer> grayCode(int n) {
        List<Integer> ans = new ArrayList<>();
        ans.add(0);
        
        for(int i = 0; i < n ; i++)
            for(int j = ans.size()-1; j>=0; j--)
                ans.add(ans.get(j)+(1<<i));
        
        return ans;
    }

----------------------------------------------------------------------------------------------------
One line Python solution with comments
These characteristics suggest a simple and fast method of translating a binary value into the corresponding Gray code. Each bit is inverted if the next higher bit of the input value is set to one. This can be performed in parallel by a bit-shift and exclusive-or operation if they are available: g(b) = x(b) XOR x(b+1)

    class Solution:
    # @param {integer} n
    # @return {integer[]}
    def grayCode(self, n):
        return [(i>>1)^i for i in xrange(2**n)]

----------------------------------------------------------------------------------------------------
Recursive solution c++ &#x2F; 6 ms with explaination
    class Solution {
    public:
        vector<int> grayCode(int n) {
            vector<int> result;
            if (n > 0) {
                grayCodeHelper(n, result);
            } else {
                result.push_back(0);
            }
            return result;
        }
        
        void grayCodeHelper(int n, vector<int>& res) {
            if (n == 1) {
                res.push_back(0);
                res.push_back(1);
                return;
            }
            
            grayCodeHelper(n-1, res);
            int size = res.size()-1;
            // n elements in res are already a part of
            // current gray code as they start with 0 as the MSB
            // we need to traverse the res in reverse order, or it 
            // with 1 to get the next numbers.
            // If dont understand, then try making gray code seq
            // with 1 and then see how to get graycode(2) from 1.
            
            for (int i = size; i >= 0; --i) {
                int num = res[i] | (1<<(n-1));
                res.push_back(num);
            }
        }
    };

----------------------------------------------------------------------------------------------------
1ms Java Solution with explaination
    public class Solution {
    //analyze the pattern
    //n=0  -> 0
    //n=1  -> 0, 1
    //n=2  -> (00,  01),  (10,  11)
    //n=3  -> (000, 001, 010, 011), (111, 110, 101, 100)
    
    //so the pattern is when n=n  -> add 0 in front of all the result of (n-1)'s binary value (This is just same as all the result of (n-1)
    //                               and add 1 in front of all the result of(n-1)'s binary value (This need to calculate.)
    

    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList();
        result.add(0);
        
        for(int i=1; i<=n; i++){
            int front=1;
            //Create the correct value for binary format (10...0) which the value has i digi
            //so shift 1 to right (i-1) times
            for(int j=1; j<i; j++){
                front = front<<1;
            }
            
            //add the new generated value to the result list
            //the new generated value is the last result add front value
            int size=result.size();
            //we want to loop through the (n-1) result from end to start. This is just because want to make the test case match the Leetcode answer. You can use other way loop through the (n-1) result.
            for(int k=size-1; k>=0; k--){
                result.add(result.get(k)+front);
            }
        }
        
        return result;
    }
}





----------------------------------------------------------------------------------------------------
Short and clear iterative c++ solution
Very easy to understand, just generate the results using already generated values. Used a few intermediate variables for clarity.

    class Solution {
    public:
        vector<int> grayCode(int n) {
            
            vector<int> out = {0};
            for (int i = 0; i < n ; ++i)
            {
                int p = 1<<i;
                int s = out.size();
                while (s)
                {
                    int v = p | out[--s];
                    out.push_back(v);
                }
            }
    
            return out;
        }
    };

----------------------------------------------------------------------------------------------------
11-lines C++ Solution 4ms
    class Solution {
    public:
        vector<int> grayCode(int n) {
            int  len = 1 << n;
            vector<int> res(len,0);
            for(int i = 0;i != len;++i){
                res[i] =i ^ (i >> 1); 
            }
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
Is this right answer?
Input: 	0
Output: 	[]
Expected: 	[0]

----------------------------------------------------------------------------------------------------
Few lines of Java code 1ms no recursion
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<Integer>();
        result.add(0);
		
		for(int i=1; i<=n; i++){
        	int size = result.size()-1;
        	for(int j=size; j>=0; j--){
        		result.add(result.get(j) | 1<<i-1);
        	}
        }
		return result;
    }

----------------------------------------------------------------------------------------------------
