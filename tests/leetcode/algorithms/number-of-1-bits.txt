Share my concise c++ solution - less than 20 lines
    vector<string> fullJustify(vector<string> &words, int L) {
        vector<string> res;
        for(int i = 0, k, l; i < words.size(); i += k) {
            for(k = l = 0; i + k < words.size() and l + words[i+k].size() <= L - k; k++) {
                l += words[i+k].size();
            }
            string tmp = words[i];
            for(int j = 0; j < k - 1; j++) {
                if(i + k >= words.size()) tmp += " ";
                else tmp += string((L - l) / (k - 1) + (j < (L - l) % (k - 1)), ' ');
                tmp += words[i+j+1];
            }
            tmp += string(L - tmp.size(), ' ');
            res.push_back(tmp);
        }
        return res;
    }

For each line, I first figure out which words can fit in. According to the code, these words are words[i] through words[i+k-1]. Then spaces are added between the words. The trick here is to use mod operation to manage the spaces that can't be evenly distrubuted: the first (L-l) % (k-1) gaps acquire an additional space.

----------------------------------------------------------------------------------------------------
Concise python solution, 10 lines.
    def fullJustify(self, words, maxWidth):
        res, cur, num_of_letters = [], [], 0
        for w in words:
            if num_of_letters + len(w) + len(cur) > maxWidth:
                for i in range(maxWidth - num_of_letters):
                    cur[i%(len(cur)-1 or 1)] += ' '
                res.append(''.join(cur))
                cur, num_of_letters = [], 0
            cur += [w]
            num_of_letters += len(w)
        return res + [' '.join(cur).ljust(maxWidth)]

How does it work? Well in the question statement, the sentence "Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right" was just a really long and awkward way to say *round robin*. The following line implements the round robin logic: 

    for i in range(maxWidth - num_of_letters):
                    cur[i%(len(cur)-1 or 1)] += ' '

What does this line do? Once you determine that there are only k words that can fit on a given line, you know what the total length of those words is num_of_letters. Then the rest are spaces, and there are (maxWidth - num_of_letters) of spaces. The "or 1" part is for dealing with the edge case len(cur) == 1.



--------------------------------------------

The following is my older solution for reference, longer and less clear. The idea is the same, but I did not figure out the nice way to distribute the space at the time.

    def fullJustify(self, words, maxWidth):
        res, cur, num_of_letters = [], [], 0
        for w in words:
            if num_of_letters + len(w) + len(cur) > maxWidth:
                if len(cur) == 1:
                    res.append( cur[0] + ' '*(maxWidth - num_of_letters) )
                else:
                    num_spaces = maxWidth - num_of_letters
                    space_between_words, num_extra_spaces = divmod( num_spaces, len(cur)-1)
                    for i in range(num_extra_spaces):
                        cur[i] += ' '
                    res.append( (' '*space_between_words).join(cur) )
                cur, num_of_letters = [], 0
            cur += [w]
            num_of_letters += len(w)
        res.append( ' '.join(cur) + ' '*(maxWidth - num_of_letters - len(cur) + 1) )
        return res


----------------------------------------------------------------------------------------------------
Simple Java Solution
    public class Solution {
        public List<String> fullJustify(String[] words, int L) {
            List<String> lines = new ArrayList<String>();
            
            int index = 0;
            while (index < words.length) {
                int count = words[index].length();
                int last = index + 1;
                while (last < words.length) {
                    if (words[last].length() + count + 1 > L) break;
                    count += words[last].length() + 1;
                    last++;
                }
                
                StringBuilder builder = new StringBuilder();
                int diff = last - index - 1;
                // if last line or number of words in the line is 1, left-justified
                if (last == words.length || diff == 0) {
                    for (int i = index; i < last; i++) {
                        builder.append(words[i] + " ");
                    }
                    builder.deleteCharAt(builder.length() - 1);
                    for (int i = builder.length(); i < L; i++) {
                        builder.append(" ");
                    }
                } else {
                    // middle justified
                    int spaces = (L - count) / diff;
                    int r = (L - count) % diff;
                    for (int i = index; i < last; i++) {
                        builder.append(words[i]);
                        if (i < last - 1) {
                            for (int j = 0; j <= (spaces + ((i - index) < r ? 1 : 0)); j++) {
                                builder.append(" ");
                            }
                        }
                    }
                }
                lines.add(builder.toString());
                index = last;
            }
            
            
            return lines;
        }
    }

----------------------------------------------------------------------------------------------------
What does this question aim to teach?
In some of the texts that I have been able to find I see that this problem admits a dynamic programming solution that is superior to greedy solutions. (MSWord vs LATEX). I think, that to solve this question specifically (meaning something that OJ accepts) requires a greedy solution. 

As far as I understand the "idea" of text justification is not to distribute spaces as evenly as possible within all the words of an individual line; But instead lower the overall cost of the way you justify text, which means that even though you may have some lines that have uneven spaces between words than others, but this lowers the overall cost of a justification in other lines. 

In this question's description the correct answer is described as a very specific way to do text justification that seems to be not what the superior solution is. 

Do you think its right to actually post this question as an exercise at all? What does this question aim to teach as far as good text justification algorithms are concerned?

----------------------------------------------------------------------------------------------------
Share my 2 ms, 30 lines solution
    class Solution {
    public:
        vector<string> fullJustify(vector<string> &words, int L) {
            vector<string> ans;
            int begin = 0;
            while (begin < words.size()) {
                int last = begin;
                int linesize = words[begin++].size();
                while (begin < words.size() && linesize + 1 + words[begin].size() <= L) {
                    linesize += 1 + words[begin].size();
                    begin++;
                }
                
                int spaces = 1, extra = 0;
                if (begin < words.size() && begin != last + 1) {
                    spaces = (L - linesize) / (begin - last - 1) + 1;
                    extra = (L - linesize) % (begin - last - 1);
                }
                
                ans.push_back(words[last++]);
                while (extra--) {
                    ans.back().append(spaces+1, ' ');
                    ans.back().append(words[last++]);
                }
                while (last < begin) {
                    ans.back().append(spaces, ' ');
                    ans.back().append(words[last++]);
                }
                ans.back().append(L-ans.back().size(), ' ');
            }
            
            return ans;
        }
    };

----------------------------------------------------------------------------------------------------
Wrong answer with input(&#91;&quot;&quot;&#93;,2);
Input:	[""], 2<br/>
Output:	[""]<br/>
Expected:	["  "]<br/>
As described ,the last line of text should be left justified and no extra space is inserted between words.Can anyone explain this?

----------------------------------------------------------------------------------------------------
Easy understanding solution
    vector<string> fullJustify(vector<string> &words, int L) {
        vector<string> ans, vs;
        string str;
        
        int len = 0;
        for (int i = 0; i < words.size(); ++i) {
            if (len + vs.size() + words[i].size() <= L) {
                // vs not full, need to get more words in the line
                vs.push_back(words[i]);
                len += words[i].size();
            }
            else {
                // vs full, get the whole line
                if (vs.size() == 1) {
                    // just one word, the left justify
                    str = vs[0];
                    str.append(L - str.size(), ' ');
                    ans.push_back(str);
                }
                else if (vs.size() > 1) {
                    // the first "mod" words get "div+1" spaces
                    // the remaining words get "div" spaces
                    int div = (L - len) / (vs.size() - 1);
                    int mod = (L - len) % (vs.size() - 1);
                    str = vs[0];
                    for (int j = 1; j < vs.size(); ++j) {
                        if (j <= mod) str.append(div+1, ' '); // one more space
                        else str.append(div, ' ');
                        str += vs[j];
                    }
                    ans.push_back(str);
                }
                
                vs.clear();
                vs.push_back(words[i]);
                len = words[i].size();
            }
        }
        
        // the last line, left justified and no extra space is inserted between words
        str = vs[0];
        for (int j = 1; j < vs.size(); ++j) str += ' ' + vs[j];
        str.append(L-str.size(), ' ');
        ans.push_back(str);
        return ans;
    }

----------------------------------------------------------------------------------------------------
Easy Java implementation
- I divide the solution to this question into two parts:
 - one is for counting the valid number of words which can fit into one line, i.e. helper() function does it and also passes the next index to be traversed in the next turn (it can be modified as iterative way if you are more comfortable with).

 - the other part serves as a string editor, i.e. addList() uses the actual valid words lengths (len) and index of start (i, inclusive) and end (j, exclusive) to count the spaces to be added.

-

    public class Solution {
    private List<String> result;
    
    public List<String> fullJustify(String[] words, int maxWidth) {
        result = new ArrayList<String>();
        if (words == null || words.length == 0 || maxWidth < 0) return result;
        if (maxWidth == 0) {
            result.add("");
            return result;
        }
        helper(words, 0, maxWidth);
        return result;
    }
    
    public void helper(String[] words, int start, int L) {
        if (start >= words.length) return;
        
        int i = start, len = 0, total = 0, next = -1;
        while (total < L && i < words.length) {
            total += words[i].length();
            if (total > L) { // only in this case we need skip i++
                next = i;
                break;
            }
            len += words[i].length();
            total++; // count space
            i++;
        }
        
        if (next == -1) next = i;
        addList(words, start, next, len, L);
        
        helper(words, next, L);
    }
    
    public void addList(String[] words, int i, int j, int len, int L) {
        StringBuilder sb = new StringBuilder("");
        int count = j-i-1, space = 0, more = 0, s = 0;
        if (count == 0 || j == words.length) { // the last line
            for (int k = i; k < j; k++) {
                sb.append(words[k]);
                if (k == j-1) break;
                sb.append(" ");
            }
            space = L - sb.length();
            s = 0;
            while (s++ < space) sb.append(" ");
        } else {
            space = (L - len) / count; more = (L - len) % count;
            for (int k = i; k < j; k++) {
                sb.append(words[k]);
                s = 0;
                if (k == j-1) break;
                while (s++ < space) sb.append(" ");
                if (more-- > 0) sb.append(" ");
            }
        }
        
        result.add(sb.toString());
    }
    }

----------------------------------------------------------------------------------------------------
15-line Python solution, 40ms
    def fullJustify(self, words, maxWidth):
        i, N, result = 0, len(words), []
        while i < N:
            # decide how many words to be put in one line
            oneLine, j, currWidth, positionNum, spaceNum = [words[i]], i + 1, len(words[i]), 0, maxWidth - len(words[i])
            while j < N and currWidth + 1 + len(words[j]) <= maxWidth:
                oneLine.append(words[j])
                currWidth += 1 + len(words[j])
                spaceNum -= len(words[j])
                positionNum, j = positionNum + 1, j + 1
            i = j
            # decide the layout of one line
            if i < N and positionNum:
                spaces = [' ' * (spaceNum / positionNum + (k < spaceNum % positionNum)) for k in range(positionNum)] + ['']
            else: # last line or the line only has one word
                spaces = [' '] * positionNum + [' ' * (maxWidth - currWidth)]
            result.append(''.join([s for pair in zip(oneLine, spaces) for s in pair]))
        return result

----------------------------------------------------------------------------------------------------
What if a single word length is larger than the pass-in length L ?
guess the assumption is this scenario won't happen? 

----------------------------------------------------------------------------------------------------
23 lines and clear python solution, can it be shorter?
    class Solution:
    # @param words, a list of strings
    # @param L, an integer
    # @return a list of strings
    def fullJustify(self, words, length):
        text = ' '.join(words)+' '
        if text == ' ':
            return [' '*length]
        res = []
        while text:
            idx = text.rfind(' ', 0, length+1)
            line = text[:idx].split()
            l, n = sum(len(w) for w in line), len(line)
            if n == 1:
                res.append(line[0].ljust(length))
            else:
                s, remainder = divmod(length-l, n-1)
                line[:-1] = [w+' '*s for w in line[:-1]]
                line[:remainder] = [w+' ' for w in line[:remainder]]
                res.append(''.join(line))
            text = text[idx+1:]
        res[-1] = ' '.join(res[-1].split()).ljust(length)
        return res

The only trick to use the text and rfind to find every line.

----------------------------------------------------------------------------------------------------
Confused by the expected output
    Input:	["What","must","be","shall","be."], 12
    MyOutput:	["What must be","shall    be."] 
    Expected:	["What must be","shall be.   "]


**(I think my output is expected according to the spec)**

----------------------------------------------------------------------------------------------------
Confusion about the rule:
Why should the results of the case be like this?Distribute evenly?then,how about the latter one?

    17 / 24 test cases passed.
    Status: Wrong Answer
    Submitted: 0 minutes ago
    Input:	["What","must","be","shall","be."], 12
    Output:	["What must be","shall    be."]
    Expected:	["What must be","shall be.   "]
    
    
    
    Input:	["Listen","to","many,","speak","to","a","few."], 6
    Output:	["Listen","to    ","many, ","speak ","to  a ","few.  "]
    Expected:	["Listen","to    ","many, ","speak ","to   a","few.  "]



----------------------------------------------------------------------------------------------------
C++ solution with comments
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
          int idx = 0;
          vector<string> ret;
          while (idx < words.size()) {
            // get the current line
            int end = idx;
            int total = 0;
            vector<string> line;
            while (end < words.size() \
        	   && total+line.size()+words[end].length() <= maxWidth) {
              line.push_back(words[end]);
              total += words[end].length();
              end ++;
            }
            // the last line or just a single word -> left alignment
            // just pad the end with spaces
            string l = words[idx];
            if (end == words.size() || line.size()==1) {      
              for (int i = idx+1; i < end; i ++)
                l += " " + words[i];
              l += string(maxWidth-(total+line.size()-1), ' ');
            }
            // distribute the spaces evenly
            else {
              int space_len = maxWidth - total;
              int left = space_len % (line.size()-1);
              int base = space_len / (line.size()-1);
              int cnt = 0;
              for (int i = idx+1; i < end; i ++) {
                l += string(base, ' ');
                // add extra
                if (cnt < left) {
                  l += " ";
                  cnt ++;
                }
                l += words[i];
              }
            }
            ret.push_back(l);
            idx = end;
          }
          return ret;
    }

----------------------------------------------------------------------------------------------------
OK in my Eclipse, but wrong in OJ
My code runs fine in Eclipse (JDK1.6), but keeps getting wrong answers in OJ. The "wrong" case is
[""], 2 
where ["  "] is expected but my code in OJ returns [""]. I tested this case in my machine and it is OK, with the correct ["  "] return. I wonder whether anythingis wrong in OJ or in my code.

    public class Solution {
    	String formLine(String[] words, int start, int end, int L) {/* start inclusive; end exclusive */
    		int numSpaces, lenWords=0;
    		for (int i=start;i<end;i++) {
    			lenWords += words[i].length();
    		}
    		StringBuffer sb = new StringBuffer(L);
    		numSpaces = L - lenWords;
    		sb.append(words[start]);
    		if (end-start!=1) {
    			int averageSpaces = numSpaces / (end-start-1);
    			int firstSpaces = numSpaces % (end-start-1);
    			char[] spaces = new char[Math.max(firstSpaces, averageSpaces)];
    			Arrays.fill(spaces, ' ');
    			sb.append(spaces, 0, firstSpaces);
    			for (int i=start+1;i<end;i++) {
    				sb.append(spaces, 0, averageSpaces);
    				sb.append(words[i]);
    			}
    		}
    		else {
    			char[] spaces = new char[numSpaces];
    			sb.append(spaces);
    		}
    		return sb.toString();
    	}
    	public ArrayList<String> fullJustify(String[] words, int L) {
    		ArrayList<String> al = new ArrayList<String>();
    		if (words.length==0) {
    			char[] ca = new char[L];
    			Arrays.fill(ca, ' ');
    			al.add(new String(ca));
    			return al;
    		}
    		int iw = 0; /* index in words */
    		int sum;
    		while (iw<words.length) {
    			sum = words[iw].length();
    			int iwi = iw + 1;
    			while (iwi<words.length && sum+words[iwi].length()+1<=L) {
    				sum += words[iwi++].length()+1;
    			}
    			if (iwi==words.length) {
    				al.add(formLine(words, iw, iwi,L));
    				return al;
    			}
    			al.add(formLine(words, iw, iwi, L));
    			iw = iwi;
    		}
    		return al;
    	}
    }

----------------------------------------------------------------------------------------------------
More explanation for the problem
For any two words, there is at least one space between them.
This is true for any lines, including the last line.

----------------------------------------------------------------------------------------------------
Share my C++ solution: about 30 lines
class Solution {
public:
    // 
    vector<string> fullJustify(vector<string> &words, int L) {
       
        vector<string> ret;
        int n = words.size();
        if(n == 0 || L == 0) { ret.push_back(""); return ret; }
        int i = 0;
        while(i < n){
           vector<string> ws;  // words of current line
           int ws_len = 0;
           while((i < n && ws.size() == 0) ||
                 (i < n && ws_len + ws.size() - 1 + words[i].size() + 1 <= L)){
                     ws.push_back(words[i]);
                     ws_len += words[i].size();
                     i++;
                 }
                 
            int space = L - ws_len;
            if(i == n || ws.size() == 1){ //special cases: last line / one word in a line
                for(int j = 0; j < ws.size() - 1 && space > 0; ++j, --space) ws[j] += " "; // bug: use "&&" !
                for( ; space > 0; --space) ws[ws.size()-1] += " ";
            }
            else{
                while(space > 0){
                    for(int j = 0; j < ws.size() - 1 && space > 0; ++j, --space) ws[j] += " ";
                }
            }
            
            string str;
            for(string tmp : ws) str += tmp;
            ret.push_back(str);
        }
        return ret;
    }
};

----------------------------------------------------------------------------------------------------
Share my AC python solution.
first distrabute words to lines, then add spaces between words. hope you like it.






    class Solution:
    # @param words, a list of strings
    # @param L, an integer
    # @return a list of strings
    def fullJustify(self, words, L):
        # distrabute words to lines.
        i,total,lineWords,lineWord=0,0,[],[];
        while(i<len(words)):            
            if(total+len(words[i])<=L):
                total+=len(words[i])+1;
                lineWord.append(words[i]);
            else:
                lineWords.append(lineWord);
                lineWord=[];
                lineWord.append(words[i]);
                total=len(words[i])+1;
            i+=1;
        if(len(lineWord)>0):
            lineWords.append(lineWord);
        
        # add spaces between words.
        lines=[];        
        for line in range(len(lineWords)):
            lineWord=lineWords[line];
            str="";
            if(line==len(lineWords)-1 or len(lineWord)==1):
                str=" ".join(lineWord);
                str+=" "*(L-len(str));
            else:
                gapCount=len(lineWord)-1;
                totalSpace=L - sum([len(i) for i in lineWord]);
                minSpace=totalSpace // gapCount;
                moreSpaceNum=totalSpace % gapCount;
                for i in range(len(lineWord)):
                    w=lineWord[i];
                    if(i==len(lineWord)-1): #last word.
                        str+=w;
                    else:
                        if(moreSpaceNum>0):
                            str+=w+" "*(minSpace+1);
                            moreSpaceNum-=1;
                        else:
                            str+=w+" "*(minSpace);
            
            lines.append(str);
        return lines;


----------------------------------------------------------------------------------------------------
I guess I just wrote an essay... but finally passed all test cases. ugh...
    public List<String> fullJustify(String[] words, int L) {
        int length = L;
        ArrayList<String> cur_line = new ArrayList<String>();
        List<String> res = new ArrayList<String>();
        if(words[0]=="")
        {
            String resNull ="";
            for(int i=0; i<L;i++)
                resNull=resNull+" ";
            res.add(resNull);
            return res;
        }
        for(int i=0; i<words.length; i++)
        {
            //there is room left for current line ex:"this is a bat  "
            if(length-(words[i].length()+1)>0)  
            {
                length=length-(words[i].length()+1); //get remainning available spaces in cur line
                cur_line.add(words[i]); //add the word to the list 
            }
            //just fit in current line   ex:"this is a book" or "this is a bat "
            else if(length-(words[i].length()+1)==-1 ||length-(words[i].length()+1)==0) 
            {
                cur_line.add(words[i]); //add the last word to the list
                //proccess line
                boolean lastLine;
                if(i==words.length-1) lastLine=true;
                else lastLine=false;
                res.add(processLine(cur_line, L, lastLine));
                //start a new line
                length=L; //recover length--next line
                cur_line = new ArrayList<String>();
            }
            //there is no room to fit this one
            else if(length-(words[i].length()+1)<-1)
            {
                //first proccess cur line
                res.add(processLine(cur_line, L, false));
                //start a new line
                length=L; //recover length--next line
                cur_line=new ArrayList<String>();
                //put this one it it
                length=length-(words[i].length()+1);
                cur_line.add(words[i]);
            }
        }
        if(cur_line.size()!=0)
            res.add(processLine(cur_line, L, true));
        return res;
    }
    public String processLine(ArrayList<String>words, int L, boolean lastLine)
    {
        String lineString="";
        if(words.size()==1)
        {
            String singleWord = words.get(0);
            int len =singleWord.length();
            for(int i=0;i<L-len;i++)
                singleWord = singleWord+" ";
            return singleWord;
        }
        int reminder = L;
        for(String word: words)
            reminder = reminder-word.length();
        if(lastLine==true)
        {
            for(String word:words)
            {
                if(reminder!=0)
                    lineString = lineString+word+" ";
                else
                    lineString = lineString+word;
                reminder--;
            }
            for(int i=0; i<reminder;i++)
                lineString = lineString+" ";
            return lineString;
        }
        //there is extra spaces-->reminder
        int flag = reminder % (words.size()-1);
        int commonSpace = reminder/(words.size()-1);
        int extra = flag>0? 1:0;
        for(int i=0; i<words.size()-1;i++)
        {
            String spaces="";
            for(int count =0; count<(commonSpace+extra);count++)
                 spaces = spaces+" ";
            lineString = lineString +words.get(i)+spaces;
            flag--;
            extra = flag>0? 1:0;
        }
        lineString = lineString +words.get(words.size()-1);
        return lineString;
    }

----------------------------------------------------------------------------------------------------
Accepted 0ms C++ in 28 lines
    class Solution {
    public:
        vector<string> fullJustify(vector<string>& words, int maxWidth) {
            int n = (int)words.size();
            int out = 0;
            vector<string> result;
            while (out < n) {
                int i = out;
                int curWidth = (int)words[i++].size();
                while (i < n && curWidth + 1 + (int)words[i].size() <= maxWidth) 
                    curWidth += 1 + (int)words[i++].size();
                int numExtraSpace = maxWidth - curWidth;
                stringstream ss;
                int j = out;
                ss << words[j++];
                for (; j < i; j++) {
                    int pad = 0;
                    if (i < n) 
                        pad = numExtraSpace / (i-j) + (numExtraSpace % (i-j) ? 1 : 0);
                    for (int k = 0; k < pad+1; k++)
                        ss << " ";
                    numExtraSpace -= pad;
                    ss << words[j];
                }
                for (int k = 0; k < numExtraSpace; k++)
                    ss << " ";
                result.push_back(ss.str());
                out = i;
            }
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
