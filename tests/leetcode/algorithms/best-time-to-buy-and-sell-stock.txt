My simple solution
I think we only need to handle four cases: 

 1. discards all leading whitespaces
 2. sign of the number
 3. overflow
 4. invalid input

Is there any better solution? Thanks for pointing out!

    int atoi(const char *str) {
        int sign = 1, base = 0, i = 0;
        while (str[i] == ' ') { i++; }
        if (str[i] == '-' || str[i] == '+') {
            sign = 1 - 2 * (str[i++] == '-'); 
        }
        while (str[i] >= '0' && str[i] <= '9') {
            if (base >  INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - '0' > 7)) {
                if (sign == 1) return INT_MAX;
                else return INT_MIN;
            }
            base  = 10 * base + (str[i++] - '0');
        }
        return base * sign;
    }

----------------------------------------------------------------------------------------------------
Such a shitty problem
The description is not clear not all unless you click on the hint. What's the point of testing all the "+-1" or "-+1" without any input spec nor any situation where input is obtained. 

----------------------------------------------------------------------------------------------------
Java Solution with 4 steps explanations
    public int myAtoi(String str) {
        int index = 0, sign = 1, total = 0;
        //1. Empty string
        if(str.length() == 0) return 0;

        //2. Remove Spaces
        while(str.charAt(index) == ' ' && index < str.length())
            index ++;

        //3. Handle signs
        if(str.charAt(index) == '+' || str.charAt(index) == '-'){
            sign = str.charAt(index) == '+' ? 1 : -1;
            index ++;
        }
        
        //4. Convert number and avoid overflow
        while(index < str.length()){
            int digit = str.charAt(index) - '0';
            if(digit < 0 || digit > 9) break;

            //check if total will be overflow after 10 times and add digit
            if(Integer.MAX_VALUE/10 < total || Integer.MAX_VALUE/10 == total && Integer.MAX_VALUE %10 < digit)
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;

            total = 10 * total + digit;
            index ++;
        }
        return total * sign;
    }

----------------------------------------------------------------------------------------------------
JAVA-------Easy  Version To Understand!!!!!!!!!!
    	public static int myAtoi(String str) {
		if (str == null || str.length() == 0)
			return 0;//
		str = str.trim();
		char firstChar = str.charAt(0);
		int sign = 1, start = 0, len = str.length();
		long sum = 0;
		if (firstChar == '+') {
			sign = 1;
			start++;
		} else if (firstChar == '-') {
			sign = -1;
			start++;
		}
		for (int i = start; i < len; i++) {
			if (!Character.isDigit(str.charAt(i)))
				return (int) sum * sign;
			sum = sum * 10 + str.charAt(i) - '0';
			if (sign == 1 && sum > Integer.MAX_VALUE)
				return Integer.MAX_VALUE;
			if (sign == -1 && (-1) * sum < Integer.MIN_VALUE)
				return Integer.MIN_VALUE;
		}

		return (int) sum * sign;
	}

----------------------------------------------------------------------------------------------------
8ms C++ solution, easy to understand
    int myAtoi(string str) {
        long result = 0;
        int indicator = 1;
        for(int i = 0; i<str.size();)
        {
            i = str.find_first_not_of(' ');
            if(str[i] == '-' || str[i] == '+')
                indicator = (str[i++] == '-')? -1 : 1;
            while('0'<= str[i] && str[i] <= '9') 
            {
                result = result*10 + (str[i++]-'0');
                if(result*indicator >= INT_MAX) return INT_MAX;
                if(result*indicator <= INT_MIN) return INT_MIN;                
            }
            return result*indicator;
        }
    }

----------------------------------------------------------------------------------------------------
My Nice Java Code 3ms
    public class Solution {
    	public int myAtoi(String str) {
    		if (str.isEmpty())
    			return 0;
    		str = str.trim();
    		int i = 0, ans = 0, sign = 1, len = str.length();
    		if (str.charAt(i) == '-' || str.charAt(i) == '+')
    			sign = str.charAt(i++) == '+' ? 1 : -1;
    		for (; i < len; ++i) {
    			int tmp = str.charAt(i) - '0';
    			if (tmp < 0 || tmp > 9)
    				break;
    			if (ans > Integer.MAX_VALUE / 10
    					|| (ans == Integer.MAX_VALUE / 10 && Integer.MAX_VALUE % 10 < tmp))
    				return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
    			else
    				ans = ans * 10 + tmp;
    		}
    		return sign * ans;
    	}
    }

----------------------------------------------------------------------------------------------------
Python solution based on RegEx
    class Solution:
        # @return an integer
        def atoi(self, str):
            str = str.strip()
            str = re.findall('(^[\+\-0]*\d+)\D*', str)
    
            try:
                result = int(''.join(str))
                MAX_INT = 2147483647
                MIN_INT = -2147483648
                if result > MAX_INT > 0:
                    return MAX_INT
                elif result < MIN_INT < 0:
                    return MIN_INT
                else:
                    return result
            except:
                return 0

----------------------------------------------------------------------------------------------------
8 line C++ concise solution
    int myAtoi(string str) {
        int ret = 0, sign = 1, i = str.find_first_not_of(' '), base = INT_MAX / 10;
        if (str[i] == '+' || str[i] == '-') sign = str[i++] == '+' ?: -1;
        while (isdigit(str[i])) {
            if (ret > base || (ret == base && str[i] - '0' > 7)) 
                return sign > 0 ? INT_MAX : INT_MIN;
            ret = 10 * ret + (str[i++] - '0');
        }
        return sign * ret;
    }



----------------------------------------------------------------------------------------------------
60ms python solution; OJ says this beats 100% python submissions
    class Solution(object):
        def myAtoi(self, s):
            """
            :type str: str
            :rtype: int
            """
            ###better to do strip before sanity check (although 8ms slower):
            #ls = list(s.strip())
            #if len(ls) == 0 : return 0
            if len(s) == 0 : return 0
            ls = list(s.strip())
            
            sign = -1 if ls[0] == '-' else 1
            if ls[0] in ['-','+'] : del ls[0]
            ret, i = 0, 0
            while i < len(ls) and ls[i].isdigit() :
                ret = ret*10 + ord(ls[i]) - ord('0')
                i += 1
            return max(-2**31, min(sign * ret,2**31-1))

----------------------------------------------------------------------------------------------------
Javascript &quot;seriously?&quot; code
    var myAtoi = function(str) {
        return Math.max(Math.min(parseInt(str) || 0, 2147483647), -2147483648)
    };

apparently the included `parseInt()` function does most of the requirements already

----------------------------------------------------------------------------------------------------
C++ 10 lines solution, easy understanding, clean code
      int myAtoi(string str) {
        if (str.empty()) return 0;
        int i = 0, sign = 1;
        while (i + 1 < str.size() && isspace(str[i])) ++i;
        long res = 0;
        if (str[i] == '-' || str[i] == '+') sign = 44 - str[i++];
        while (i < str.size()) {
            if (isdigit(str[i])) res = 10 * res + str[i++] - '0';
            else return res * sign;
            if (res > INT_MAX) return sign == -1 ? INT_MIN : INT_MAX;
        }
        return res * sign;
    }

----------------------------------------------------------------------------------------------------
It would be very helpful to let the user know &#x27;e&#x27; is invalid.
I was quite surprises to see this test case:

> Input:	"   -115579378e25"

> Output:	-2147483648

> Expected:	-115579378

since -115579378*10^25 definitely caused underflow. I tried `atoi("1e3")` which gives me 1. Based on those test cases, I believe 'e' is invalid. 

It would be very helpful to let the user know 'e' is invalid since in problem "Valid Number", 'e' is totally acceptable.

----------------------------------------------------------------------------------------------------
Easy to understand  5ms C code
    int myAtoi(char* str) {
        char *s = str;
    
        while (*s && isspace(*s)) /* skip spaces */
            s++;
    
        int n = 0;
        if (*s) {
            int sign = 1;
            if (*s == '+')
                s++;
            else if (*s == '-') {
                sign = -1;
                s++;
            }
        
            //while (*s && isspace(*s)) /* skip spaces */
            //    s++;
        
            while (*s && isdigit(*s)) {
                int oldn = n;
                n = n*10 + *s++ - '0';
                if (n/10 != oldn) { /* integer too large or too small */
                    if (sign < 0)
                        return INT_MIN;
                    else 
                        return INT_MAX;
                }
            }
        
            n *= sign;
        }
    
        return n;
    }

----------------------------------------------------------------------------------------------------
My python solution, cost 68ms.
    class Solution:
        # @return an integer
        def atoi(self, str):
            str = str.strip()
            if len(str) == 0:
                return 0
            tmp = "0"
            result = 0
            i = 0
            if str[0] in "+-":
                tmp = str[0]
                i = 1
            MAX_INT = 2147483647
            MIN_INT = -2147483648
            for i in xrange(i, len(str)):
                if str[i].isdigit():
                    tmp += str[i]
                else:
                    break
            if len(tmp) > 1:
                result = int(tmp)
            if result > MAX_INT > 0:
                return MAX_INT
            elif result < MIN_INT < 0:
                return MIN_INT
            else:
                return result

At first, I remove all whitspaces by using strip() function. Then, we should know only one operator is allowed, if there are two operator, for example, "+-2", the input is invalid for atoi() function, 0 should be returned. And we should put as many as possible numerical value into the 'tmp' string. If the length of 'tmp' is 1, it means the 'tmp' is '0' or '+' or '-', and we should return 0 in the function. If the length of 'tmp' is greater than 1, it means the 'tmp' is '0...(numbers)' or '+...(numbers)' or '-...(numbers)', then we can use integer force conversion to make 'tmp' to an integer. At last,  If the result is out of the range of representable values, MAX_INT (2147483647) or MIN_INT (-2147483648) is returned.

----------------------------------------------------------------------------------------------------
16ms C++ Solution, Easy to understand
    class Solution {
    public:
        int myAtoi(string str) {
            size_t index = str.find_first_not_of(' ');
            if(index == string::npos) return 0;
            long result = 0;
            bool negative = false;
            if(str[index] == '-') {
                negative = true;
                index++;
            } else if(str[index] == '+') {
                index++;
            }
            for(int i=index; i<str.size(); i++) {
                if(isdigit(str[i])) {
                    result = result * 10 + (str[i]-'0');
                    if(negative && -result <= INT_MIN) return INT_MIN;
                    if(!negative && result >= INT_MAX) return INT_MAX;
                } else {
                    break;
                }
            }
            if(negative) result = -result;
            
            return int(result);
        }
    };

----------------------------------------------------------------------------------------------------
My C++ code, with comment. 8ms
    class Solution {
    public:
    int myAtoi(string str) {
    
        int ret = 0, tmp;
        int i = 0, flag = 1;
        int len = str.length();
        
        // special case : ""
        if (len == 0) return 0;
        
        // special case : "   (+/-)123"
        while (str[i] == ' ') i++;
        if (str[i] == '-') {
            i++;
            flag = -1;
        }
        else if (str[i] == '+')
            i++;
            
        for (;i < len; i++) {
            if (str[i] < '0' || str[i] > '9') break;
            
            tmp = ret * 10 + str[i] - '0';
            if (tmp / 10 != ret) 
                if (flag == 1) return INT_MAX;
                else return INT_MIN;

            ret = tmp;
        }
        
        return ret * flag;
    }
    };

----------------------------------------------------------------------------------------------------
My C code accepted with 4ms
    int myAtoi(char* str) {
        long result = 0;
        int sign = 1;
        //discard the first sequence of whitespace characters.
        while(isspace(*str))
        {
            str++;
        }
        if((*str == '+') || (*str == '-'))
        {
            sign = (*str == '+') ? 1:0;
            str++;
        }
        if(!isdigit(*str))
        {
            return 0;
        }
        while(isdigit(*str) && (result <= INT_MAX))
        {
            result = result * 10 + *str - '0' + 0;
            str++;
        }
        if(result > INT_MAX)
        {
            return sign == 1 ? INT_MAX : INT_MIN;
        }
        return sign == 1 ? result : -result;
    }

----------------------------------------------------------------------------------------------------
8ms c++ solution
        long int res = 0;
        int size = str.size();
        int i, flag;
        
        i=0;flag = 1;
        i = str.find_first_not_of(' ');
        if(str[i]=='-'){
            flag = -1;
            i++;
        }
        else if(str[i]=='+'){
            i++;
        }
        for(; isdigit(str[i])&&res<=INT_MAX&&i<size; i++)
            res = res*10+(int)(str[i]-'0');
        if(flag*res>INT_MAX)
            return  INT_MAX;
        if(flag*res< INT_MIN)
            return  INT_MIN;
        return flag*res;

----------------------------------------------------------------------------------------------------
Java - Simple, clean and fast!


    public int myAtoi(String str) {
        str = str.trim();
        if (str.isEmpty()) 
        	return 0;
        int sign = 1; int i = 0;
        if (str.charAt(0) == '-' || str.charAt(0) == '+'){
        	sign = (str.charAt(0) == '-')? -1 : 1;
        	if (str.length() < 2 || !Character.isDigit(str.charAt(1))) {
        		return 0;
        	}
        	i++;
         }
        int n = 0;
        while (i < str.length()) {
        	if (Character.isDigit(str.charAt(i))) {
        		int d = str.charAt(i) - '0';
        		if (n > (Integer.MAX_VALUE - d) / 10) { //Detect the integer overflow.
        			n = (sign == -1)? Integer.MIN_VALUE : Integer.MAX_VALUE;
        			return n;
        		}
        		n = n*10 + d;
        	} else {
        		break;
        	}
        	i++;
        }
        return sign * n;
    }


----------------------------------------------------------------------------------------------------
My accepted Java code, looked redundant but considered all cases
    public class Solution {
    public int atoi(String str) {
        boolean neg = false; // flag to mark if the converted integer positive or negative. 
        StringBuilder buf = new StringBuilder(); // temp buffer to store the converted string
        
        // check if the string is null or empty
        if (str == null || str.isEmpty()) return 0;
        
        // trim the leading whitespaces
        str = str.trim();
        
        // if string contains only whitespace characters
        if (str.isEmpty()) return 0;
        
        // get length of the trimed string
        int length = str.length();
        
        // Check if the first character of the string
        if (isNeg(str.charAt(0))) neg = true;
        else if (isPos(str.charAt(0))) neg = false;
        else if (Character.isDigit(str.charAt(0))) buf.append(str.charAt(0));
        else return 0;
        
        // check the first sequence of digit characters in the string
        int start = 1;
        while (start < length && Character.isDigit(str.charAt(start))) {
            buf.append(str.charAt(start));
            start++;
        }
        
        // check if the buf is empty
        if (buf.length() == 0) return 0;
        
        // check if the converted integer is overflowed
        long result;
        if (buf.length() <= 10) {
            result = toInteger(buf, neg);
        } else if (neg) {
            return Integer.MIN_VALUE;
        } else
            return Integer.MAX_VALUE;
            
        // Post-processing the convert long to int
        if (neg && result <= Integer.MAX_VALUE) {
            return 0 - (int) result;
        } else if (!neg && result <= Integer.MAX_VALUE) {
            return (int) result;
        } else if (neg && result > Integer.MAX_VALUE) {
            return Integer.MIN_VALUE;
        } else return Integer.MAX_VALUE;
    }
    
    private boolean isPos(char ch) {
        return ch == '+';
    }
    
    private boolean isNeg(char ch) {
        return ch == '-';
    }
    
    private long toInteger(StringBuilder buf, boolean neg) {
        int len = buf.length();
        long result = 0;
        for (int i = 0; i < len; i++) {
            result += Character.getNumericValue(buf.charAt(i)) * Math.pow(10, len - i - 1);
        }
        
        return result;
    }
}

----------------------------------------------------------------------------------------------------
