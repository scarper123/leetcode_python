O(1) Space Solution
        public boolean hasCycle(ListNode head) {
            if(head==null) return false;
    		ListNode walker = head;
    		ListNode runner = head;
    		while(runner.next!=null && runner.next.next!=null) {
    			walker = walker.next;
    			runner = runner.next.next;
    			if(walker==runner) return true;
    		}
    		return false;
        }

 1. Use two pointers, **walker** and **runner**.
 2. **walker** moves step by step. **runner** moves two steps at time.
 3. if the Linked List has a cycle **walker** and **runner** will meet at some
    point.

----------------------------------------------------------------------------------------------------
Except-ionally fast Python
Took 88 ms and the "Accepted Solutions Runtime Distribution" doesn't show any faster Python submissions. The "trick" is to not check all the time whether we have reached the end but to handle it via an exception. ["Easier to ask for forgiveness than permission."](https://docs.python.org/3/glossary.html#term-eafp)

The algorithm is of course [Tortoise and hare](https://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare).

    def hasCycle(self, head):
        try:
            slow = head
            fast = head.next
            while slow is not fast:
                slow = slow.next
                fast = fast.next.next
            return True
        except:
            return False

----------------------------------------------------------------------------------------------------
My faster and slower runner solution
    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
     /**
     use faster and lower runner solution. (2 pointers)
     the faster one move 2 steps, and slower one move only one step.
     if there's a circle, the faster one will finally "catch" the slower one. 
     (the distance between these 2 pointers will decrease one every time.)
     
     if there's no circle, the faster runner will reach the end of linked list. (NULL)
     */
    class Solution {
    public:
        bool hasCycle(ListNode *head) {
            if(head == NULL || head -> next == NULL)    
                return false;
     
            ListNode *fast = head;
            ListNode *slow = head;
            
            while(fast -> next && fast -> next -> next){
                fast = fast -> next -> next;
                slow = slow -> next;
                if(fast == slow)
                    return true;
            }
     
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
By saying using no extra space, does it mean O(0) in space?
I cannot give a solution to make it possible. I can only do it in O(1) space using the two runner solution, which I think is the best one.

    

    // set two runners
    ListNode slow = head;
    ListNode fast = head;
    
    // fast runner move 2 steps at one time while slow runner move 1 step,
    // if traverse to a null, there must be no loop
    while (fast != null && fast.next != null) {
    	slow = slow.next;
    	fast = fast.next.next;
    	if (slow == fast) {
    		return true;
    	}
    }
    return false;

----------------------------------------------------------------------------------------------------
Simple and easy understanding java solution, Time  o(n) ,Space O(1)
    public class Solution {
        public boolean hasCycle(ListNode head) {
        	ListNode p = head,pre = head;
        	while(p != null && p.next != null){
        		if (p.next == head) return true;
        		p = p.next;
        		pre.next = head;
        		pre = p;
        	}
            return false;
        }
    }

----------------------------------------------------------------------------------------------------
Shorter Solution in Java
    class HasCycleInLinkedList{
       public boolean hasCycle(ListNode head){
           if(head == null || head.next == null) return false;
           if(head.next == head) return true;
           ListNode nextNode = head.next; 
           head.next = head;
           boolean isCycle = hasCycle(nextNode);
           return isCycle;
       }
    }


----------------------------------------------------------------------------------------------------
Accepted 6-line code in C
    bool hasCycle(struct ListNode *head) {
        struct ListNode *fast=head, *slow=head;
        while( slow && fast && fast->next ){
            fast=fast->next->next;
            slow=slow->next;
            if(fast==slow) return true;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
My easy 12ms C++ solution sharing.
    bool hasCycle(ListNode *head) 
    {
        ListNode *fast;
        fast = head;
        while (head)
        {
            head = head->next;
            if (fast->next && fast->next->next)
                fast = fast->next->next;
            else
                return false;
                
            if (fast == head)
                return true;
        }
        
        return false;
    }

----------------------------------------------------------------------------------------------------
Just reverse the list
    ListNode* reverseList(ListNode* head) 
    {
    	ListNode* prev = NULL;
    	ListNode* follow = NULL;
    	while (head)
    	{
    		follow = head->next;
    		head->next = prev;
    		prev = head;
    		head = follow;
    	}
	    return prev;
    }
    bool hasCycle(ListNode *head)
    {
    	ListNode* rev = reverseList(head);
    	if (head && head->next && rev == head)
    	{
    		return true;
    	}
    	return false;
    }

if the list has got a loop, then its reversed version must have got the same head pointer as its self;

----------------------------------------------------------------------------------------------------
AC Python 76ms Floyd loop detection in 7 lines
    def hasCycle(self, head):
        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if slow == fast:
                return True
        return False

    # 16 / 16 test cases passed.
    # Status: Accepted
    # Runtime: 76 ms
    # 96.56%


This way we do not need to check if head is null.

----------------------------------------------------------------------------------------------------
My C++ Solution
    class Solution {
    public:
        bool hasCycle(ListNode *head) {
            ListNode* slow = head;
    		ListNode* fast = head;
    		while (fast && fast->next){
    			fast = fast->next->next;
    			slow = slow->next;
    			if (slow == fast)
    				return true;
    		}
    		return false;
        }
    };

----------------------------------------------------------------------------------------------------
AC solution with O(1) space and O(n) time in C++
    class Solution {
    public:
    bool hasCycle(ListNode *head) {
        if(!head||!head->next)
            return false;
        ListNode* i = head; //slower pointer
        ListNode* j = i->next; //faster pointer
        while(i&&j&&j->next)
        {
            i = i->next;
            j = j->next->next;
            if(i==j)
                return true;
        }
        return false;
    }
    };

----------------------------------------------------------------------------------------------------
Java O(1) space solution with fast and slow pointer
    public class Solution {
        public boolean hasCycle(ListNode head) {
            if(head==null || head.next==null) return false;
            ListNode fast=head,slow=head;
            while(fast!=null&& fast.next!=null){
                fast=fast.next.next;
                slow=slow.next;
                if(fast==slow) return true;
            }
            return false;
        }
    }

----------------------------------------------------------------------------------------------------
In-place Python code beats 90%
Multiple pointers having different steps are our friend to solve Linked List problems. We can set two pointers to "run through" the linked list. Since they have different pace, if the list is cyclic, they **must** meet after the starting point. 

In this case I choose two pointers and steps are `1` and `2` respectively. I think assigning one step as `3` is also doable, but I have no ideas which one is better.
<br>

    def hasCycle(self, head):
        fast = slow = head

        while slow and fast and fast.next:
            slow = slow.next                # Step of 1
            fast = fast.next.next           # Setp of 2

            if slow is fast:                # Checking whether two pointers meet
                return True

        return False

----------------------------------------------------------------------------------------------------
Does everyone solved it with O(n) complexity?
My code is O(n<sup>2</sup>) and was told time exceeded.

I define a variable called *flags*, where *flags* is a big number, (ie: *flags*=2<sup>31</sup>)

As I iterate the list from head, I change the node's value to be *flags*. When i found the value of the current node is *flags*, that means the list has a cycle.

----------------------------------------------------------------------------------------------------
Very clear python solution where you don&#x27;t need to worry about the corner case
    class Solution:
        # @param head, a ListNode
        # @return a boolean
        def hasCycle(self, head):
            try:
                fast = head.next.next
                slow = head.next
                
                while fast != slow:
                    fast = fast.next.next
                    slow = slow.next
                
                return True
            except:
                return False

----------------------------------------------------------------------------------------------------
Share my C++ solution,easy to understand
    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
    class Solution {
    public:
        bool hasCycle(ListNode *head) {
            if (head == NULL || head->next == NULL) return false;
            
            ListNode *fast = head, *slow = head;
            
            while (fast != NULL && fast->next != NULL)
            {
                fast = fast->next->next;
                slow = slow->next;
                
                if (fast == slow)
                    return true;
            }
            
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
Java 1ms solution without extra space
	if(head == null || head.next == null) {
		return false;
	}
	
	ListNode node = head;
	while(node != null) {
		
		if(node.next == head) {
			return true;
		}
		
		ListNode temp = node.next;
		node.next = head;
		node = temp;
	}
	
	return false;
}

----------------------------------------------------------------------------------------------------
Simple Python solution!
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        slow = head
        fast = head
        while fast is not None and fast.next is not None:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
        return False

----------------------------------------------------------------------------------------------------
Accepted clean Java solution
    public boolean hasCycle(ListNode head) {
      ListNode slow = head, fast = head;
      
      while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
        
        if (slow == fast) 
            return true;
      }
      
      return false;
    }

----------------------------------------------------------------------------------------------------
