Simple Java solution with comment
/*
Basic idea: each time we take a look at the last four digits of
            binary verion of the input, and maps that to a hex char
            shift the input to the right by 4 bits, do it again
            until input becomes 0.

*/

public class Solution {
    
    char[] map = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
    
    public String toHex(int num) {
        if(num == 0) return "0";
        String result = "";
        while(num != 0){
            result = map[(num & 15)] + result; 
            num = (num >>> 4);
        }
        return result;
    }
    
    
}````

----------------------------------------------------------------------------------------------------
Concise C++ Solution
const string HEX = "0123456789abcdef";
class Solution {
public:
    string toHex(int num) {
        if (num == 0) return "0";
        string result;
        int count = 0;
        while (num && count++ < 8) {
            result = HEX[(num & 0xf)] + result;
            num >>= 4;
        }
        return result;
    }
};


----------------------------------------------------------------------------------------------------
1-liner in Python
class Solution(object):
    def toHex(self, num):
        return   ''.join(
                        '0123456789abcdef'[(num >> 4 * i) & 15] 
                        for i in range(8)
                        )[::-1].lstrip('0') or '0'


----------------------------------------------------------------------------------------------------
easy 10-line python solution with inline explanation
    def toHex(self, num):
        if num==0: return '0'
        mp = '0123456789abcdef'  # like a map
        ans = ''
        for i in range(8):
            n = num & 15       # this means num & 1111b
            c = mp[n]          # get the hex char 
            ans = c + ans
            num = num >> 4
        return ans.lstrip('0')  #strip leading zeroes


----------------------------------------------------------------------------------------------------
&#91;JAVA&#93; Clean Code with Explanations and Running Time &#91;2 Solutions&#93;
Integer.MAX_VALUE

----------------------------------------------------------------------------------------------------
Java solution
  public String toHex(int dec) {
      if (dec == 0) return "0";
      StringBuilder res = new StringBuilder();
      
      while (dec != 0) {
          int digit = dec & 0xf;
          res.append(digit < 10 ? (char)(digit + '0') : (char)(digit - 10 + 'a'));
          dec >>>= 4;
      }
      
    return res.reverse().toString();
  }


----------------------------------------------------------------------------------------------------
C++  0ms
class Solution {
public:
    string toHex(int num) {
        int count = 0;
        if(!num) return "0";
        string result;
        while (num && count < 8)
        {
            int temp = num & 15;
            if (temp<10)    result.push_back('0'+ temp);
            else result.push_back('a'+temp-10);
            num = num >> 4;
            count++;
        }
        reverse(result.begin(),result.end());
        return result;
    }
};


----------------------------------------------------------------------------------------------------
Python solution
  def toHex(self, num):
    ans = []
    dic = {10:"a", 11:"b", 12:"c", 13:"d", 14:"e", 15:"f"}
    if num == 0:
        return "0"
    if num < 0:
        num = num + 2**32

    while num > 0:
        digit = num % 16
        num = (num-digit)/16
        if  digit > 9 and digit < 16:
            digit = dic[digit]
        else:
            digit = str(digit)
        ans.append(digit)
    return "".join(ans[::-1]

Main ideal is to flip the negative number to positive by using following code:
# num = num + 2**32


----------------------------------------------------------------------------------------------------
Easy 5 Lines Python AC Solution
class Solution(object):
    def toHex(self, num):
        
        if num == 0: return "0"
        elif num < 0: num += 2 ** 32
        converthex, res = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"], ""
        while num: num, res = num//16, converthex[num%16]+res
        return res


----------------------------------------------------------------------------------------------------
Beat 90% Java solution. Long but easy understand. Any advice?
public class Solution {
    public String toHex(int num) {
        StringBuilder sb = new StringBuilder();
        if (num == 0) return sb.append(0).toString();
        int sign = 1;
        int bitNum = 8;
        if (num < 0) {
            num = -num - 1;
            sign = -1;
        }
        
        while (sign == 1 && num != 0) {  // num is positive
            int rest = num % 16;
            if (rest < 10) {
                sb.append(rest);
            }
            else {
                sb.append((char)('a' + rest - 10));
            }
            num /= 16;
        }
        
        while (sign == -1 && bitNum > 0) {  // num is negative
            int rest = num % 16;
            if (rest < 6) {
                sb.append((char)('f' - rest));
            }
            else {
                sb.append(15 - rest);
            }
            num /= 16;
            bitNum--;
        }
        
        return sb.reverse().toString();
    }
}


----------------------------------------------------------------------------------------------------
Simple C# solution
public class Solution {
    public string ToHex(int num) {
        // handle edge cases
        if (num == 0) {
            return "0";
        }
        
        string result = string.Empty;
        int count = 0;
        
        // Use f as mask to check every 4 bits from right to left.
        // when shift negative number to the right, C# adds 1 to fill in left part.
        // We need to use variable count to avoid infinite loop here.
        while(num != 0 && count < 8) {
            count ++;
            
            // save the result
            int tempNum = num & 15;
            result = GetHex(tempNum) + result;

            // Move to next 4 bits on left
            num = num >> 4;
        }
        
        return result;
    }
    
    public char GetHex(int num) {
        if (num >= 0 && num <= 9) {
            return (char)(num + '0');
        } else {
            return (char)((num - 10) + 'a');
        }
    }
}


----------------------------------------------------------------------------------------------------
Java solution num &amp; 0xffffffffL to long
public class Solution {
    public String toHex(int num) {
        return num == 0 ? "0" : toHex(num & 0xffffffffL);
    }
    
    public String toHex(long num) {
        return num < 16 ? hexdigit(num) : toHex(num / 16) + hexdigit(num % 16);
    }
    
    private String hexdigit(long num) {
        assert num < 16;
        return num < 10 ? Character.toString((char)(num + '0')) : Character.toString((char)(num - 10 + 'a'));
    }
}


----------------------------------------------------------------------------------------------------
Two Python solutions
    def toHex(self, num):
        ret = ''
        letter = ('0', '1','2','3','4','5','6','7','8','9','a','b','c','d','e','f')
        if num == 0: return '0'
        if num < 0: num += 2**32
        while num != 0:
            ret = letter[num&15] + ret
            num >>= 4
        return ret


----------------------------------------------------------------------------------------------------
Java arithmetic solution
public class Solution {
    public String toHex(int num) {
        if (num == 0) return "0";
        
        char[] d2h = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        
        StringBuilder res = new StringBuilder();
        
        long l = num;
        if (l < 0)
            l = (1L<<32)+l;
        
        while (l != 0) {
            res.append(d2h[(int)(l % 16)]);
            l /= 16;
        }
        
        return res.reverse().toString();
    }
}


----------------------------------------------------------------------------------------------------
Java solution without bit manipulation
<p>Don&#39;t know how to add space<br/>
public class Solution {<br/>
public String toHex(int num) {<br/>
StringBuilder sb=new StringBuilder();<br/>
boolean neg=false;<br/>
if(num==0) return &#34;0&#34;;<br/>
if(num&lt;0){<br/>
neg=true;<br/>
if(num==Integer.MIN_VALUE) return &#34;80000000&#34;;<br/>
else num=0-num-1;<br/>
}<br/>
while(num&gt;0){<br/>
int mod=num%16;<br/>
if(mod&lt;10){<br/>
sb.append(mod);<br/>
}<br/>
else {<br/>
char c=(char)(&#39;a&#39;+(mod-10));<br/>
sb.append(c);<br/>
}<br/>
num=(num-mod)/16;<br/>
}<br/>
if(neg){<br/>
String s=sb.reverse().toString();<br/>
sb=new StringBuilder();<br/>
for(int i=s.length()-1;i&gt;=0;i--){<br/>
char c=s.charAt(i);<br/>
if(Character.isDigit(c)){<br/>
int mod=&#39;9&#39;-c+6;<br/>
if(mod&lt;10){<br/>
sb.append(mod);<br/>
}<br/>
else {<br/>
c=(char)(&#39;a&#39;+(mod-10));<br/>
sb.append(c);<br/>
}<br/>
}<br/>
else sb.append(&#39;f&#39;-c);<br/>
}<br/>
for(int i=0;i&lt;8-s.length();i++){<br/>
sb.append(&#39;f&#39;);<br/>
}<br/>
}<br/>
return sb.reverse().toString();<br/>
}<br/>
}</p>


----------------------------------------------------------------------------------------------------
Easy c 0ms solution
char* toHex(int num) {
    if(num==0) return "0";
    unsigned int* unum = &num;
    char *res = (char*)malloc(9);
    res[8] = 0;
    int tmp;
    int i = 0;
    while(*unum){
        tmp = *unum & 0x0000000f;
        *(res+7-i) = tmp + ((tmp>9)?('a'-10):'0');
        *unum = *unum >> 4;
        i++;
    }
    return res+7-i+1;
}


----------------------------------------------------------------------------------------------------
Python 35 ms solution 95th%
class Solution(object):
    def toHex(self, num):
        """
        :type num: int
        :rtype: str
        """
        if num == 0: return '0'
        ret = ''
        map = ['a', 'b', 'c', 'd', 'e', 'f']
        
        # 32 bit == 4 byte each x char represents 4 bits, half a byte
        for i in xrange(8): # at max we have 32 bit integer, so 8 iterations of computing 4 bits in each iteration == 32 bits
            cur = num & 0b1111 # get least significant 4 bits, this corresponds to least significant hex char
            char = cur if cur < 10 else map[cur - 10] # fetch hex char
            ret = str(char) + ret # append hex char to return
            num = num >> 4 # erase the 4 bits we just computed for next iteration
            
        pos = 0
        while pos < len(ret) and ret[pos] == '0':
            pos += 1
        
        return ret[pos:]


----------------------------------------------------------------------------------------------------
1-Line JavaScript Code Solution
<p>/**</p>
<ul>
<li>&#64;param {number} num</li>
<li>&#64;return {string}<br/>
*/<br/>
var toHex = function(num) {<br/>
return num &gt;= 0 ? num.toString(16) : (4294967296 + num).toString(16);<br/>
};</li>
</ul>


----------------------------------------------------------------------------------------------------
Swift solution
class Solution {
    func toHex(_ num: Int) -> String {
        if num == 0 {
            return "0"
        }

        let map = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]
        var result = ""
        var num = num
        
        for _ in 0..<8 {
            result = map[num & 15] + result
            num >>= 4
        }
        
        return removeLeadingZero(result)
    }
    
    private func removeLeadingZero(_ str: String) -> String {
        return str.replacingOccurrences(of: "^0+(?!$)", with: "", options: .regularExpression, range: str.range(of: str))
    }
}


----------------------------------------------------------------------------------------------------
Simple JavaScript Solution
/**
 * @param {number} num
 * @return {string}
 */
var toHex = function(num) {
  if (num === 0) return '0';
  const numMap = {
    '10': 'a',
    '11': 'b',
    '12': 'c',
    '13': 'd',
    '14': 'e',
    '15': 'f'
  }
  let result = [];
  let isNegative = false;
  if (num < 0) {
    isNegative = true;
    num = -num - 1;
  }
  while (num > 0) {
    result.push(num%16);
    num = Math.floor(num/16);
  }
  if (isNegative) {
    result = result.map(num => {
      num = 15-num;
      if (num >= 10) {
        return numMap[num];
      } else {
        return num;
      }
    });
    for(let i = result.length; i < 8; ++i) {
      result.push('f');
    }
  } else {
    result = result.map(num => {
      if (num >= 10) {
        return numMap[num];
      } else {
        return num;
      }
    });
  }
  return result.reverse().join('');
};

----------------------------------------------------------------------------------------------------
