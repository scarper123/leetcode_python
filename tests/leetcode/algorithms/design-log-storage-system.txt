Java Solution, 6 lines, Tree Traversal
public class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null) return null;
        
        int val = (t1 == null ? 0 : t1.val) + (t2 == null ? 0 : t2.val);
        TreeNode newNode = new TreeNode(val);
        
        newNode.left = mergeTrees(t1 == null ? null : t1.left, t2 == null ? null : t2.left);
        newNode.right = mergeTrees(t1 == null ? null : t1.right, t2 == null ? null : t2.right);
        
        return newNode;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def mergeTrees(self, t1, t2):
    if not t1 and not t2: return None
    ans = TreeNode((t1.val if t1 else 0) + (t2.val if t2 else 0))
    ans.left = self.mergeTrees(t1 and t1.left, t2 and t2.left)
    ans.right = self.mergeTrees(t1 and t1.right, t2 and t2.right)
    return ans


----------------------------------------------------------------------------------------------------
Short Recursive Solution w&#x2F; Python &amp; C++
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if ( t1 && t2 ) {
            TreeNode * root = new TreeNode(t1->val + t2->val);
            root->left = mergeTrees(t1->left, t2->left);
            root->right = mergeTrees(t1->right, t2->right);
            return root;
        } else {
            return t1 ? t1 : t2;
        }
    }
};


----------------------------------------------------------------------------------------------------
C++ Clean Code - Unique Node | Shared Node
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if (!t1) return t2;
        if (!t2) return t1;

        TreeNode* node = new TreeNode(t1->val + t2->val);
        node->left = mergeTrees(t1->left, t2->left);
        node->right = mergeTrees(t1->right, t2->right);
        return node;
    }
};


----------------------------------------------------------------------------------------------------
A few lines of JavaScript
var mergeTrees = function(t1, t2) {
    if (!t1 && !t2) return null;
    const root = new TreeNode(((t1 || 0).val || 0) + ((t2 || 0).val || 0));
    root.left = mergeTrees(t1 && t1.left, t2 && t2.left);
    root.right = mergeTrees(t1 && t1.right, t2 && t2.right);
    return root;
};


----------------------------------------------------------------------------------------------------
Simple Python recursive
class Solution(object):
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if not t1 and not t2: return None
        if t1:
            v1, L1, R1 = t1.val, t1.left, t1.right
        else:
            v1, L1, R1 = 0, None, None
        if t2:
            v2, L2, R2 = t2.val, t2.left, t2.right
        else:
            v2, L2, R2 = 0, None, None
        node = TreeNode(v1+v2)
        node.left = self.mergeTrees(L1, L2)
        node.right = self.mergeTrees(R1, R2)
        return node


----------------------------------------------------------------------------------------------------
C++ O(n) space iterative solution, no new tree!
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t2==NULL) return t1;
        if(t1==NULL) return t2;
        TreeNode* res=t1;
        stack<TreeNode*> s1, s2;
        s1.push(t1), s2.push(t2);
        while(!s1.empty()) {
            TreeNode* c1=s1.top();
            TreeNode* c2=s2.top();
            s1.pop(), s2.pop();
            c1->val+=c2->val;
            if(c1->right==NULL&&c2->right!=NULL) c1->right=c2->right;
            else if(c1->right!=NULL&&c2->right!=NULL) s1.push(c1->right), s2.push(c2->right);
            if(c1->left==NULL&&c2->left!=NULL) c1->left=c2->left;
            else if(c1->left!=NULL&&c2->left!=NULL) s1.push(c1->left), s2.push(c2->left);
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
Simple Java recursive solution - O(n)
public class Solution {
    public TreeNode merge(TreeNode t1, TreeNode t2) {
        if(t1 == null && t2 == null) {
            return null;
        }
        
        TreeNode newNode = new TreeNode(-1);
        if(t1 == null) {
            newNode.val = t2.val;
            newNode.left = merge(null, t2.left);
            newNode.right = merge(null, t2.right);
        }
        else if(t2 == null) {
            newNode.val = t1.val;
            newNode.left = merge(t1.left, null);
            newNode.right = merge(t1.right, null);
        }
        else {
            newNode.val = t1.val + t2.val;
            newNode.left = merge(t1.left, t2.left);
            newNode.right = merge(t1.right, t2.right);
        }
        
        return newNode;
    }
}


----------------------------------------------------------------------------------------------------
Runtime beat 100%, 6 lines JAVA recursive solution
public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
	if (t1 == null) return t2;
	if (t2 == null) return t1;

	TreeNode temp = new TreeNode(t1.val + t2.val);
	temp.left = mergeTrees(t1.left, t2.left);
	temp.right = mergeTrees(t1.right, t2.right);

	return temp;
}

----------------------------------------------------------------------------------------------------
Simple C# solution
public class Solution {
    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null) { return t2; }
        if (t2 == null) { return t1; }
        var root = t1.val + t2.val;
        var result = new TreeNode(root);
        result.left = MergeTrees(t1.left, t2.left);
        result.right = MergeTrees(t1.right, t2.right);
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Python BFS Solution
class Solution(object):
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if not (t1 and t2):
            return t1 or t2
        queue1, queue2 = collections.deque([t1]), collections.deque([t2])
        while queue1 and queue2:
            node1, node2 = queue1.popleft(), queue2.popleft()
            if node1 and node2:
                node1.val = node1.val + node2.val
                if (not node1.left) and node2.left:
                    node1.left = TreeNode(0)
                if (not node1.right) and node2.right:
                    node1.right = TreeNode(0)
                queue1.append(node1.left)
                queue1.append(node1.right)
                queue2.append(node2.left)
                queue2.append(node2.right)
        return t1


----------------------------------------------------------------------------------------------------
C++ version
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1 == NULL && t2 == NULL) return NULL;
        else if(t1 != NULL && t2 == NULL) return t1;
        else if(t1 == NULL && t2 != NULL) return t2;
        else t1->val = t1->val + t2->val;
        t1->left = mergeTrees(t1->left, t2->left);
        t1->right = mergeTrees(t1->right, t2->right);
        return t1;
    }
};


----------------------------------------------------------------------------------------------------
JavaScript Solution Here
var mergeTrees = function(t1, t2) {
    var root = null
    if (t1 && t2) {
        root =  new TreeNode(null);
        root.val = (t1.val) + (t2.val);
        root.left = mergeTrees(t1.left, t2.left);
        root.right = mergeTrees(t1.right, t2.right);
    } else if (t1) {
        root = t1
    } else if (t2){
        root = t2
    } 
    return root;
};


----------------------------------------------------------------------------------------------------
DFS solution,same idea with &quot;Q100. Same Tree&quot;
public class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        TreeNode p1=new TreeNode(0);
        TreeNode p2=new TreeNode(0);
        p1.left=t1;
        p2.left=t2;
        dfs(t1,t2,p1,p2);
        
        return p1.left;
    }
    
    public void dfs(TreeNode t1,TreeNode t2,TreeNode p1,TreeNode p2){
        if(t2==null){
            return;
        }else{
            if(t1==null){
                if(p2.left==t2){
                    p1.left=t2;
                }else{
                    p1.right=t2;
                }
            }else{
                t1.val+=t2.val;
                dfs(t1.left,t2.left,t1,t2);
                dfs(t1.right,t2.right,t1,t2);
            }
        }
    }
}


----------------------------------------------------------------------------------------------------
5 lines Elegant Solution
    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {
        if(t1 == null || t2 == null) return t1 == null ? t2:t1;
        t1.val += t2.val;
        t1.left = MergeTrees(t1.left, t2.left);
        t1.right = MergeTrees(t1.right, t2.right);
        return t1;
    }

----------------------------------------------------------------------------------------------------
Java O(n) Recursive Solution
public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
    if (t1 == null) return t2;
    if (t2 == null) return t1;
    t1.val += t2.val;
    t1.left = mergeTrees(t1.left, t2.left);
    t1.right = mergeTrees(t1.right, t2.right);
    return t1;
}


----------------------------------------------------------------------------------------------------
Straightforward AC Code: Java, Recursive
public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        TreeNode newNode;
    	if(t1 ==null && t2==null || t2==null){
    	    return t1;
    	}
    	else if(t1 == null){
    	    return t2;
    	}
    	else{
    		newNode = new TreeNode(t1.val + t2.val);
    		newNode.left =  mergeTrees(t1.left,t2.left);
    		newNode.right = mergeTrees(t1.right,t2.right); 
    	}
    	return newNode;
    }


----------------------------------------------------------------------------------------------------
Java Recursive Solution | Beats 100% of Java Solutions till now
public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 != null) {
            return t2;
        } else if (t1 != null && t2 == null) {
            return t1;
        } 
        
        return mergeTreesUtil(t1, t2);
        
    }
    
    private TreeNode mergeTreesUtil(TreeNode t1, TreeNode t2) {
        if (t1 == null || t2 == null) {
            return null;
        }
        
        if (t1 != null && t2 != null) {
            t1.val += t2.val;
        }
        
        if (mergeTreesUtil(t1.left, t2.left) == null) {
            if (t1.left == null) t1.left = t2.left;
        }
        
        if (mergeTreesUtil(t1.right, t2.right) == null) {
            if (t1.right == null) t1.right = t2.right;
        }
        
        return t1;
    }


----------------------------------------------------------------------------------------------------
Java easy to understand solution
public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        TreeNode newNode;
        if(t2==null)
            return t1;
        else if(t1==null)
            return t2;
        else
        {
            newNode=new TreeNode(t1.val+t2.val);
            newNode.left=mergeTrees(t1.left,t2.left);
            newNode.right=mergeTrees(t1.right,t2.right);
        }
        return newNode;
    }


----------------------------------------------------------------------------------------------------
