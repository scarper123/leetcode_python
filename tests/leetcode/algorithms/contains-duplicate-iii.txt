DP Solution (Java) for reference
    public class Solution {
        public int numDecodings(String s) {
            int n = s.length();
            if (n == 0) return 0;
            
            int[] memo = new int[n+1];
            memo[n]  = 1;
            memo[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
            
            for (int i = n - 2; i >= 0; i--)
                if (s.charAt(i) == '0') continue;
                else memo[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? memo[i+1]+memo[i+2] : memo[i+1];
            
            return memo[0];
        }
    }

----------------------------------------------------------------------------------------------------
Java clean DP solution with explanation
I used a dp array of size n + 1 to save subproblem solutions.  `dp[0]` means an empty string will have one way to decode, `dp[1]` means the way to decode a string of size 1.  I then check one digit and two digit combination and save the results along the way.  In the end, `dp[n]` will be the end result.

    public class Solution {
        public int numDecodings(String s) {
            if(s == null || s.length() == 0) {
                return 0;
            }
            int n = s.length();
            int[] dp = new int[n+1];
            dp[0] = 1;
            dp[1] = s.charAt(0) != '0' ? 1 : 0;
            for(int i = 2; i <= n; i++) {
                int first = Integer.valueOf(s.substring(i-1, i));
                int second = Integer.valueOf(s.substring(i-2, i));
                if(first >= 1 && first <= 9) {
                   dp[i] += dp[i-1];  
                }
                if(second >= 10 && second <= 26) {
                    dp[i] += dp[i-2];
                }
            }
            return dp[n];
        }
    }

----------------------------------------------------------------------------------------------------
A concise dp solution
    int numDecodings(string s) {
        if (!s.size() || s.front() == '0') return 0;
        // r2: decode ways of s[i-2] , r1: decode ways of s[i-1] 
        int r1 = 1, r2 = 1;
        
        for (int i = 1; i < s.size(); i++) {
            // zero voids ways of the last because zero cannot be used separately
            if (s[i] == '0') r1 = 0;

            // possible two-digit letter, so new r1 is sum of both while new r2 is the old r1
            if (s[i - 1] == '1' || s[i - 1] == '2' && s[i] <= '6') {
                r1 = r2 + r1;
                r2 = r1 - r2;
            }

            // one-digit letter, no new way added
            else {
                r2 = r1;
            }
        }

        return r1;
    }

----------------------------------------------------------------------------------------------------
My c++ 0ms DP solution O(n)
     int n = s.size();
        if(n == 0 || s[0] == '0') return 0;
        if(n == 1) return 1;
        int res = 0,fn_1 = 1,fn_2 = 1;
        for(int i = 1;i < n;i++){
            int temp = fn_1;
            if(isValid(s[i])&&isValid(s[i-1],s[i]))  res+=fn_1+fn_2;
            if(!isValid(s[i])&&isValid(s[i-1],s[i])) res+=fn_2;
            if(isValid(s[i])&&!isValid(s[i-1],s[i])) res+=fn_1;
            if(!isValid(s[i])&&!isValid(s[i-1],s[i]))  return 0;
            fn_1 = res;
            fn_2 = temp;
            res = 0;
        }
        return fn_1;
    }
    bool isValid(char a,char b){
        return a == '1'||(a == '2' && b <='6');
    }
    bool isValid(char a){
        return a != '0';
    }

----------------------------------------------------------------------------------------------------
1-liner, O(1) space
[This is the Python](https://xkcd.com/353/).

    def numDecodings(self, s):
        return reduce(lambda(v,w,p),d:(w,(d>'0')*w+(9<int(p+d)<27)*v,d),s,(0,s>'',''))[1]*1

---

More readable version:

    def numDecodings(self, s):
        v, w, p = 0, int(s>''), ''
        for d in s:
            v, w, p = w, (d>'0')*w + (9<int(p+d)<27)*v, d
        return w

- `w` tells the number of ways
- `v` tells the previous number of ways
- `d` is the current digit
- `p` is the previous digit

----------------------------------------------------------------------------------------------------
Input &quot;&quot; should return 1 instead of 0
There is 1 way to decoding "", the decoding result is "".

----------------------------------------------------------------------------------------------------
Accpeted Python DP solution
    class Solution:
        # @param s, a string
        # @return an integer
        def numDecodings(self, s):
            #dp[i] = dp[i-1] if s[i] != "0"
            #       +dp[i-2] if "09" < s[i-1:i+1] < "27"
            if s == "": return 0
            dp = [0 for x in range(len(s)+1)]
            dp[0] = 1
            for i in range(1, len(s)+1):
                if s[i-1] != "0":
                    dp[i] += dp[i-1]
                if i != 1 and s[i-2:i] < "27" and s[i-2:i] > "09":  #"01"ways = 0
                    dp[i] += dp[i-2]
            return dp[len(s)]




----------------------------------------------------------------------------------------------------
7 lines cpp solution
    int numDecodings(string s) {
          int n = s.size();
          if(!n || s[0] == '0')
              return 0;
          int f[n+1] = {1, 1}, i;
          for(i = 2; i <= n; ++i)
               f[i] = (int)(s[i-1] != '0')*f[i-1] + (int)((s[i-2] == '1') || (s[i-2] == '2' && s[i-1] < '7'))*f[i-2];
        return f[n];
    }


Slightly Modified O(1) space method:

    int numDecodings(string s) {
          int n = s.size();
          if(!n || s[0] == '0')
              return 0;
          int f0 = 1, f1 = 1, f2, i;
          for(i = 2; i <= n; ++i)
          {
               f2 = (int)(s[i-1] != '0')*f1 + (int)((s[i-2] == '1') || (s[i-2] == '2' && s[i-1] < '7'))*f0;
               f0 = f1;
               f1 = f2;
          }
        return f1;
    }

----------------------------------------------------------------------------------------------------
Concise cpp solution with O(1) space and O(n) time
    int numDecodings(string s) {
        // empty string or leading zero means no way
        if (!s.size() || s.front() == '0') return 0;
    
        // r1 and r2 store ways of the last and the last of the last
        int r1 = 1, r2 = 1;
    
        for (int i = 1; i < s.size(); i++) {
            // zero voids ways of the last because zero cannot be used separately
            if (s[i] == '0') r1 = 0;
            
            // possible two-digit letter, so new r1 is sum of both while new r2 is the old r1
            if (s[i - 1] == '1' || s[i - 1] == '2' && s[i] <= '6') {
                r1 = r2 + r1;
                r2 = r1 - r2;
            }
    
            // one-digit letter, no new way added
            else {
                r2 = r1;
            }
        }
    
        return r1;
    }



----------------------------------------------------------------------------------------------------
The question is not clear on single letter &#x27;0&#x27;
For example,  "2706". When we read '0', shall we return zero decode way? Most solutions seem to combine it with the next letter and treats it as 6 instead of 06. More clarification should be given.

----------------------------------------------------------------------------------------------------
Evolve from recursion to dp
    int numDecodings(string s) {
        int p = 1, pp, n = s.size();
        for(int i=n-1;i>=0;i--) {
            int cur = s[i]=='0' ? 0 : p;
            if(i<n-1 && (s[i]=='1'||s[i]=='2'&&s[i+1]<'7')) cur+=pp;
            pp = p;
            p = cur;
        }
        return s.empty()? 0 : p;   
    }


----------------------------------------------------------------------------------------------------
Simple java solution with O(1) space
    public int numDecodings(String s) {
        int n1 =1, n2=1, n3=0;
        if(s.length()==0||s.charAt(0)=='0') return 0;
        for(int i=2; i<=s.length(); i++)
        {
            n3=0;
            if(s.charAt(i-1)!='0') n3=n2;
            int num = Integer.parseInt(s.substring(i-2,i));
            if(num>=10 && num<=26) n3+=n1;
            n1=n2;
            n2=n3;
        }
        return n2;
    }


----------------------------------------------------------------------------------------------------
Share my 4 ms simple C++ code
I use n1 to record the ways to the index i, and n0 to record the ways to the index i-1;
O(n) time and O(1) space.

    class Solution {
    public:
        int numDecodings(string s) {
            int n=s.size();
            if(n==0)
                return 0;
            int n0=1;
            int n1=(s[0]=='0')?0:1;
            for(int i=1;i<n;i++)
            {
                int tmp=n1;
                if(s[i]=='0')
                    n1=0;
                if((s[i-1]=='2'&&s[i]<='6')||s[i-1]=='1')
                    n1+=n0;
                if(n1==0)
                    return 0;
                n0=tmp;
            }
            return n1;
        }
    };

----------------------------------------------------------------------------------------------------
Sharing my java memoized solution
    public class Solution {
        public int numDecodings(String s) {
            
            if (s == null || s.length() == 0)
                return 0;
                
            Set<String> symbols = new HashSet<String>();
            for (int i=1; i<=26; i++){
            	symbols.add(String.valueOf(i));
            }
          
            Map<Integer, Integer> map = new HashMap<Integer, Integer>();
            return numDec(s, 0,  map, symbols);
        }
        
        private int numDec(String str, int start,  Map<Integer, Integer> map, Set<String> symbols) {
            Integer count = map.get(start);
            if (count != null){
                return count;
            }
    
            if (start == str.length()){
                return 1;
            }
            
            int numWays = 0;
            if ((start + 1 <= str. length()) &&
                symbols.contains(str.substring(start, start + 1)) && symbols.contains(str.substring(start, start + 1)))   
                numWays += numDec(str, start + 1, map, symbols);
    
            if ((start + 2 <= str. length()) &&
                    symbols.contains(str.substring(start, start + 2)) && symbols.contains(str.substring(start, start + 2)))   
                numWays += numDec(str, start + 2, map, symbols);
                
            map.put(start, numWays);
            
            return numWays;
        }
    }

----------------------------------------------------------------------------------------------------
DP with easy understand Java Solution

    public class Solution {
        public int numDecodings(String s) {
            int n = s.length();
            if (n == 0 || s.startsWith("0")) {
                return 0;
            }
            int[] ways = new int[n+1];
            ways[0] = 1;
            ways[1] = 1;
            for (int i = 2; i <= n; i++) {
                int first = Integer.parseInt(s.substring(i-2, i));
                int prev = (first <= 26 && first > 9) ? ways[i-2]:0;
                int plus = (Integer.parseInt(s.substring(i-1, i)) == 0) ? 0:ways[i-1];
                ways[i] = prev + plus;
            }
            return ways[n];
        }
    }

----------------------------------------------------------------------------------------------------
Java 2ms DP solution with detailed explanation and inline comments
This solution certainly isn't brand new, see similar concepts [here][1], [here][2], [here][3], and probably a few other top rated.  Mine also isn't the shortest.  However, that is kind of the point. Dynamic Programming is one of my weaknesses and making the solution shorter usually makes it more abstract and difficult to understand.  My solution below is a bit more drawn out with more descriptive variable names to help make it a bit easier to understand.  

The basic concept is to build up the number of ways to get to state `i` from all the previous states less than `i`.  We can do this by initializing a cache with a size of `s.length() + 1`.  We always set `waysToDecode[0]` to 1 because there is only 1 way to decode an empty string.  We can then build up the number of ways to decode starting from the first value and work our way to the end.

We only ever need to look at the character at `i - 1` because we can't have values greater than 26, so three digits is never possible.  There are four possibilities to consider: 1) The previous value is 0 and the current value is 0, we can't make progress, return 0.  2) The current value is 0, we have to use the previous value, if it is greater than 2, we can't make progress, return 0, otherwise we have to transition to this state from `waysToDecode[i - 1]`.  3) The previous value is 0, we can't use the previous, so the only way to transition to the current state is from the previous, so use `waysToDecode[i]`.  4) lastly, both previous and `curr` can be used so there are two ways to transition to the current state, thus at `waysToDecode[i + 1]` we can get here by using all the ways we can get to `waysToDecode[i]` + all the ways to get to `waysToDecode[i - 1]`.  

Keep in mind that the indices are adjusted for the cache because its size differs from the string size. 

    public class Solution {
    public int numDecodings(String s) {
        if (s.isEmpty() || s.charAt(0) - '0' == 0)
        {
            return 0;
        }
        
        int[] waysToDecode = new int[s.length() + 1];
        waysToDecode[0] = 1;
        waysToDecode[1] = 1;
        for (int i = 1; i < s.length(); i++)
        {
            int curr = s.charAt(i) - '0';
            int prev = s.charAt(i - 1) - '0';
            
            // can't make progress, return 0
            if (prev == 0 && curr == 0 || (curr == 0 && (prev * 10 + curr > 26)))
            {
                return 0;
            }
            // can't use the previous value, so can only get to this state from the previous
            else if (prev == 0 || (prev * 10 + curr) > 26)
            {
                waysToDecode[i + 1] = waysToDecode[i];
            }
            // can't use current state, can only get to this state from i - 1 state
            else if (curr == 0)
            {
                waysToDecode[i + 1] = waysToDecode[i - 1];
            }
            // can get to this state from the previous two states
            else
            {
                waysToDecode[i + 1] = waysToDecode[i] + waysToDecode[i - 1];
            }
        }
        
        return waysToDecode[waysToDecode.length - 1];
    }
}


  [1]: https://leetcode.com/discuss/8527/dp-solution-java-for-reference
  [2]: https://leetcode.com/discuss/21090/a-concise-dp-solution
  [3]: https://leetcode.com/discuss/38735/my-c-0ms-dp-solution-o-n

----------------------------------------------------------------------------------------------------
Accepted solution to &lt;decode ways&gt; no need to take care of &#x27;0&#x27; case
This is my accepted solution. Please let me if there is any problem.


  

    int numDecodings(string s) {
        int rows = s.size()+1;
        if (rows == 1) return 0;
        vector<int> A(rows, 0);
        A[0] = 1;
        for(int i = 1; i < rows; i++){
            // from one-digit number , range is from 1 to 9
            if (s[i-1] >= '1' && s[i-1] <= '9') A[i] += A[i-1];
            // form two-digit number, the range is from 10 to 26
            if (i-2 >= 0 && s.substr(i-2, 2) <= "26" && s.substr(i-2, 2) >= "10"){
                A[i] += A[i-2];
            }
        }
        return A[rows-1];
    }



----------------------------------------------------------------------------------------------------
