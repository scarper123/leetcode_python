11-line simple Java solution, O(n) with explanation
the basic idea is, keep a hashmap which stores the characters in string as keys and their positions as values, and keep two pointers which define the max substring. move the right pointer to scan through the string , and meanwhile update the hashmap. If the character is already in the hashmap, then move the left pointer to the right of the same character last found. Note that the two pointers can only move forward. 

       public int lengthOfLongestSubstring(String s) {
            if (s.length()==0) return 0;
            HashMap<Character, Integer> map = new HashMap<Character, Integer>();
            int max=0;
            for (int i=0, j=0; i<s.length(); ++i){
                if (map.containsKey(s.charAt(i))){
                    j = Math.max(j,map.get(s.charAt(i))+1);
                }
                map.put(s.charAt(i),i);
                max = Math.max(max,i-j+1);
            }
            return max;
        }

----------------------------------------------------------------------------------------------------
C++ code in 9 lines.
    int lengthOfLongestSubstring(string s) {
            vector<int> dict(256, -1);
            int maxLen = 0, start = -1;
            for (int i = 0; i != s.length(); i++) {
                if (dict[s[i]] > start)
                    start = dict[s[i]];
                dict[s[i]] = i;
                maxLen = max(maxLen, i - start);
            }
            return maxLen;
        }




----------------------------------------------------------------------------------------------------
Share my Java solution using HashSet
The idea is use a hash set to track the longest substring without repeating characters so far, use a fast pointer j to see if character j is in the hash set or not, if not, great, add it to the hash set, move j forward and update the max length, otherwise, delete from the head by using a slow pointer i until we can put character j to the hash set.

    public int lengthOfLongestSubstring(String s) {
        int i = 0, j = 0, max = 0;
        Set<Character> set = new HashSet<>();
        
        while (j < s.length()) {
            if (!set.contains(s.charAt(j))) {
                set.add(s.charAt(j++));
                max = Math.max(max, set.size());
            } else {
                set.remove(s.charAt(i++));
            }
        }
        
        return max;
    }


----------------------------------------------------------------------------------------------------
Shortest O(n) DP solution with explanations
    /**
     * Solution (DP, O(n)):
     * 
     * Assume L[i] = s[m...i], denotes the longest substring without repeating
     * characters that ends up at s[i], and we keep a hashmap for every
     * characters between m ... i, while storing <character, index> in the
     * hashmap.
     * We know that each character will appear only once.
     * Then to find s[i+1]:
     * 1) if s[i+1] does not appear in hashmap
     *    we can just add s[i+1] to hash map. and L[i+1] = s[m...i+1]
     * 2) if s[i+1] exists in hashmap, and the hashmap value (the index) is k
     *    let m = max(m, k), then L[i+1] = s[m...i+1], we also need to update
     *    entry in hashmap to mark the latest occurency of s[i+1].
     * 
     * Since we scan the string for only once, and the 'm' will also move from
     * beginning to end for at most once. Overall complexity is O(n).
     *
     * If characters are all in ASCII, we could use array to mimic hashmap.
     */

    int lengthOfLongestSubstring(string s) {
        // for ASCII char sequence, use this as a hashmap
        vector<int> charIndex(256, -1);
        int longest = 0, m = 0;

        for (int i = 0; i < s.length(); i++) {
            m = max(charIndex[s[i]] + 1, m);    // automatically takes care of -1 case
            charIndex[s[i]] = i;
            longest = max(longest, i - m + 1);
        }

        return longest;
    }


Hope you like it :)

----------------------------------------------------------------------------------------------------
A Python solution - 85ms - O(n)
    class Solution:
        # @return an integer
        def lengthOfLongestSubstring(self, s):
            start = maxLength = 0
            usedChar = {}
            
            for i in range(len(s)):
                if s[i] in usedChar and start <= usedChar[s[i]]:
                    start = usedChar[s[i]] + 1
                else:
                    maxLength = max(maxLength, i - start + 1)
    
                usedChar[s[i]] = i
    
            return maxLength

----------------------------------------------------------------------------------------------------
My O(n) Solution
if only use DP, it's an O(n*n) solution, adding a map to get O(n).
    
    class Solution {
        public:
            int lengthOfLongestSubstring(string s) {
                if(s.size()<2) return s.size();
                int d=1, maxLen=1;
                unordered_map<char,int> map;
                map[s[0]]=0;
                for(int i=1;i<s.size();i++)
                {
                    if(map.count(s[i])==0 || map[s[i]]<i-d)
                        d++;
                    else
                        d= i- map[s[i]];
                    map[s[i]]=i;
                    if(d>maxLen)
                        maxLen = d;
                }
                return maxLen;
            }
        };

----------------------------------------------------------------------------------------------------
4ms C code in 12 lines
    int lengthOfLongestSubstring(char* s)
    {
    	int len=0;
        char *end=s,*temp;
    	char* addressTable[128]={NULL};
    	while(*end){
    		temp = addressTable[*end];
    		addressTable[*end]=end;
    		if(temp>=s){
    		len=end-s>len?end-s:len;
    		s = temp+1;
    		}end++;
    	}
    	len=end-s>len?end-s:len;
    	return len;
    }

----------------------------------------------------------------------------------------------------
Python solution with comments.
        
    def lengthOfLongestSubstring(self, s):
        dic, res, start, = {}, 0, 0
        for i, ch in enumerate(s):
            if ch in dic:
                # update the res
                res = max(res, i-start)
                # here should be careful, like "abba"
                start = max(start, dic[ch]+1)
            dic[ch] = i
        # return should consider the last 
        # non-repeated substring
        return max(res, len(s)-start)

----------------------------------------------------------------------------------------------------
O(n) time O(1) space solution using Kadane&#x27;s algo in Java
Idea is that, while we traverse form left to right if we see a character at position j is a duplicate of a character at a position i < j on the left then we know that we can't start the substring from i anymore. So, we need to start a new substring from i+1 position. While doing this we also need to update the length of current substring and start of current substring. Important part of this process is to make sure that we always keep the latest position of the characters we have seen so far. Below is a simple O(n) implementation of this logic.


    public class Solution {
        public int lengthOfLongestSubstring(String s) {
            int lastIndices[] = new int[256];
            for(int i = 0; i<256; i++){
                lastIndices[i] = -1;
            }
            
            int maxLen = 0;
            int curLen = 0;
            int start = 0;
            int bestStart = 0;
            for(int i = 0; i<s.length(); i++){
                char cur = s.charAt(i);
                if(lastIndices[cur]  < start){
                    lastIndices[cur] = i;
                    curLen++;
                }
                else{
                    int lastIndex = lastIndices[cur];
                    start = lastIndex+1;
                    curLen = i-start+1;
                    lastIndices[cur] = i;
                }
                
                if(curLen > maxLen){
                    maxLen = curLen;
                    bestStart = start;
                }
            }
            
            return maxLen;
        }
    }

----------------------------------------------------------------------------------------------------
My O(n) solution , runtime: 5ms
    int lengthOfLongestSubstring(char *s) {
        int m[129] = {0};
        int i, j;
        int cnt = 0, pre = 0;
        int max = 0;
        int c;
    
        for (i = 0; c = s[i]; i++) {
            if (pre < m[c]) {
                if (max < cnt)
                    max = cnt;
    
                cnt = i-m[c];
                pre = m[c];
            }
    
            cnt++;
            m[c] = i+1;
        }
        return max > cnt ? max : cnt;
    }

----------------------------------------------------------------------------------------------------
9 line JavaScript solution
    function lengthOfLongestSubstring(s) {
        const map = {};
        var left = 0;
        
        return s.split('').reduce((max, v, i) => {
            left = map[v] >= left ? map[v] + 1 : left;
            map[v] = i;
            return Math.max(max, i - left + 1);
        }, 0);
    }

----------------------------------------------------------------------------------------------------
O(N) runtime , constant space solution.

Keep track of the last index of each char. Scan s from left to right, if hit a previously encountered char, then reset the longest substring to start just after the last index of the seen char.

        int lengthOfLongestSubstring(const string& s) {
            int idx[256]; // indices of each char.
            memset(idx,-1,sizeof idx);
            int i,j,best=0,start=0;
            for(i=0;i<s.size();i++){
                const unsigned char c=(unsigned char)s[i];
                j=idx[c];
                idx[c]=i;
                if(start<=j){
                    start=j+1;
                }
                best=max(best,i-start+1);
            }
            return best;
        }
   

----------------------------------------------------------------------------------------------------
Accepted 16ms c++ DP solution, O(n), with bitmask to record the last position of each letter appears
    class Solution {
    public:
        int lengthOfLongestSubstring(std::string s) {
            std::vector<int> flag(256, -1);
            int start = 0, longest = 0;
            for (int i = 0; i != s.size(); ++i) {
                start = std::max(start, flag[s[i]] + 1);
                flag[s[i]] = i;
                longest = std::max(longest, i - start + 1);
            }
            return longest;
        }
    };

Updated **Jun 30**: In fact, there is no need to update `longest` evey time:

    class Solution {
    public:
        int lengthOfLongestSubstring(std::string s) {
            std::vector<int> flag(256, -1);
            int start = 0, longest = 0, len = s.size();
            for (int i = 0; i != len; ++i) {
                if (flag[s[i]] >= start) {
                    longest = std::max(longest, i - start);
                    start = flag[s[i]] + 1;
                }
                flag[s[i]] = i;
            }
            return std::max(longest, len - start);
        }
    };

----------------------------------------------------------------------------------------------------
My easy solution in JAVA (O(N)) .
    public class Solution {
        public int lengthOfLongestSubstring(String s) {
            int[] mOccur = new int[256];
            int maxL = 0;
            for(int i = 0, j = 0; i < s.length(); ++i){
                char ch = s.charAt(i);
                ++mOccur[ch];
                while(mOccur[ch] > 1){
                    --mOccur[s.charAt(j++)];
                }
                maxL = Math.max(maxL, i - j + 1);
            }
            return maxL;
        }
    }

----------------------------------------------------------------------------------------------------
My simple c++ solution
    class Solution {
    public:
    int lengthOfLongestSubstring(string s) {
        vector<int> table(256, 0);
        int maxstr=0, track=0;
        for(int i=0;i<s.length();i++)
        {
            while(table[s[i]])table[s[track++]]=0;
            table[s[i]]=1;
            maxstr=max(maxstr, i-track+1);
            
        }
        return maxstr;
    }
};

----------------------------------------------------------------------------------------------------
My 10 lines O(N) precise and easy c++ code
      class Solution {
    public:
        int lengthOfLongestSubstring(string s) {
            vector<int> mymap(256,-1);
            int i,last=0,ans=0;
            for(i=0;i<s.length();i++) {
                if(mymap[s[i]]==-1 || mymap[s[i]]<last)
                    ans = max(ans,i-last+1);
                else
                    last = mymap[s[i]]+1;
                mymap[s[i]]=i;
            }
            return ans;
        }
    };

----------------------------------------------------------------------------------------------------
Simple java solution
    public class Solution {
        public int lengthOfLongestSubstring(String s) {
            Map<Character,Integer> indices = new HashMap<Character,Integer>();
            int length = 0;
            int start = -1;
            int end = 0;
            for(end=0; end < s.length(); end++){
                char c = s.charAt(end);
                if(indices.containsKey(c)){
                    int newstart = indices.get(c);
                    start = Math.max(start,newstart);
                }
                length = Math.max(length,end-start);
                indices.put(c,end);
            }
            return length;
        }
    }

----------------------------------------------------------------------------------------------------
DP java solution O(n) time complexity
    public int lengthOfLongestSubstring(String s) {
      if (s.length()==0) return 0;
         //keep a hashmap which stores the characters in string as keys and their positions as values
         HashMap<Character, Integer> map = new HashMap<Character, Integer>();
         int max=0;
         for (int i=0, j=0; i<s.length(); ++i){
               if (map.containsKey(s.charAt(i))){
     //if found in hashmap that value,then update j i.e pointer to the right of the same character last found.
                j = Math.max(j,map.get(s.charAt(i))+1);  
               }
    //else put in map and get max pointer update with the current longest string
              map.put(s.charAt(i),i);
              max = Math.max(max,i-j+1);
          }
    return max;
    }

----------------------------------------------------------------------------------------------------
My accepted O(n) Java solution
As soon as we see a duplicated character, calculate the length of the substring and start the search one character away from the previous start.

    class Solution {
        public int lengthOfLongestSubstring(String s) {
            int n = s.length();
            if (n == 0) return 0;
            
            int start = 0;
            int max = 0;
            Map<Character, Integer> lastSeens = new HashMap<Character, Integer>();
            for (int i = 0; i < n; i++) {
                Integer lastSeen = lastSeens.get(s.charAt(i));
                
                if (lastSeen != null)  {
                    if (lastSeen >= start) {
                        max = Math.max(max, i - start);
                        start = lastSeen + 1;
                    }
                }
                lastSeens.put(s.charAt(i), i);
            }
            max = Math.max(max, n - start);
            
            return max;
        }
    }

----------------------------------------------------------------------------------------------------
Easy Java solution 5ms
The idea is almost the same with a Hashmap solution, which costs about 20ms. To speed up,1) replace Hashmap with an array, and the index is the int value of its asicii code.  2) use char array instead of string.


        int[] map = new int[128];
        int max = 0, j = 0;
        char[] str = s.toCharArray();
        int length = s.length();

        for(int i = 0; i < length; i++) {
            if(map[str[i]] > 0)
                j =  Math.max(j, map[str[i]]);
            map[str[i]] = i + 1;
            max = Math.max(max, i - j + 1);
        }
        return max;

----------------------------------------------------------------------------------------------------
