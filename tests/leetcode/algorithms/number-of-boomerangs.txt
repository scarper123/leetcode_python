Java O(n) solution with explanation
int allSum = 0;
int len = A.length;
int F = 0;
for (int i = 0; i < len; i++) {
    F += i * A[i];
    allSum += A[i];
}
int max = F;
for (int i = len - 1; i >= 1; i--) {
    F = F + allSum - len * A[i];
    max = Math.max(F, max);
}
return max;   


----------------------------------------------------------------------------------------------------
Java Solution O(n) with non mathametical explaination
    public int maxRotateFunction(int[] A) {
        if(A.length == 0){
            return 0;
        }
        
        int sum =0, iteration = 0, len = A.length;
        
        for(int i=0; i<len; i++){
            sum += A[i];
            iteration += (A[i] * i);
        }
        
        int max = iteration;
        for(int j=1; j<len; j++){
            // for next iteration lets remove one entry value of each entry and the prev 0 * k
            iteration = iteration - sum + A[j-1]*len;
            max = Math.max(max, iteration);
        }
        
        return max;
    }


----------------------------------------------------------------------------------------------------
Java solution
public class Solution {

	public int maxRotateFunction(int[] A) {
		int n = A.length;
		int sum = 0;
		int candidate = 0;

		for (int i = 0; i < n; i++) {
			sum += A[i];
			candidate += A[i] * i;
		}
		int best = candidate;

		for (int i = n - 1; i > 0; i--) {
			candidate = candidate + sum - A[i] * n;
			best = Math.max(best, candidate);
		}
		return best;
	}
}


----------------------------------------------------------------------------------------------------
C++ solution
	int maxRotateFunction(vector<int>& A) {
		if (A.size() == 0) return 0;

		long long allsum = 0;
		long long sum2 = 0;
		for (int i = 0; i < A.size(); i++) {
			allsum += A[i] * i;
			sum2 += A[i];
		}

		long long result = allsum;
		for (int i = 0; i < A.size(); i++) {
			allsum -= sum2;
			allsum += A[i];
			allsum += A[i] * int(A.size() - 1);
			result = max(allsum, result);
		}

		return result;
	}


----------------------------------------------------------------------------------------------------
Python 59ms simple solution
class Solution(object):
    def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if len(A) == 0:
            return 0
        totalSum = sum(A)
        lMax = 0 
        for i in range(len(A)):
            lMax += i * A[i]
        gMax = lMax
        for i in range(len(A)-1, 0, -1):
            lMax += (totalSum - A[i] * len(A))
            gMax = max(gMax, lMax)
        return gMax


----------------------------------------------------------------------------------------------------
My O(n) Simple C++ Solution
class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        int F = 0, sum = 0, n = A.size();
        for (int i = 0; i < n; ++i){
            F += i * A[i];
            sum += A[i];
        }
        int m = F;
        for (int i = n - 1; i >= 0; --i){
            F = F + sum - n * A[i];
            m = max(m, F);
        }
        return m;
    }
};


----------------------------------------------------------------------------------------------------
C# - same solution but different take on explaination
public int MaxRotateFunction(int[] A) {
    
    int sum = 0;
    for (int i = 0; i < A.Length; i++) sum += A[i];
    
    int prev = 0;
    for (int i = 0; i < A.Length; i++) prev += i * A[i];
    
    int max = prev;
    for (int i = 1; i < A.Length; i++)
    {
        int curr = prev - sum + A[i-1]*A.Length;
        max = curr > max ? curr : max;
        prev = curr;
    }
    
    return max;
}

----------------------------------------------------------------------------------------------------
Java Solution
public class Solution {
    public int maxRotateFunction(int[] A) {
        int n = A.length;
	int sum = 0;
	int candidate = 0;

	for (int i = 0; i < n; i++) {
		sum += A[i];
		candidate += A[i] * i;
	}
	int best = candidate;

	for (int i = 1; i < n; i++) {
		candidate = candidate - sum + A[i - 1] * n;
		best = Math.max(best, candidate);
	}
	return best;
    }
}


----------------------------------------------------------------------------------------------------
matrix is a good way to understand this problem
<p>The function is a product of matrices ,like:<br/>
F(k) =   &#91;k,  k+1...n-2,n-1,0,....k-1&#93; * A&#91;n&#93;<br/>
F(k+1) = &#91;k+1,k+2...n-1,0,  1,.....k&#93; * A&#91;n&#93;<br/>
so<br/>
F(k+1) - F(k) = &#91;1,1,1...-n+1,1,1,1&#93; * A&#91;n&#93; = sum(A&#91;n&#93;) - n * A&#91;n - 1 - k&#93;;</p>


----------------------------------------------------------------------------------------------------
Simple c solution &#91;O(n) time and O(1) space&#93;
int maxRotateFunction(int* A, int ASize) {
    int i, last, sum,m;
    
    if(ASize<=1) return 0;
    
    last=0;
    sum=0;
    for(i=0;i<ASize;i++){
        last += A[i]*i;
        sum+=A[i];
    }
    m=last ;
    for(i=ASize-1;i>=1;i--){
        last += sum - (ASize*A[i]);
        if (last > m) m= last;
    }
    
    return m;
}


----------------------------------------------------------------------------------------------------
clean O(n) C++ solution
class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        if (A.empty())
            return 0;
        
        int s = 0, candidate = 0, n = A.size();
        for (int i = 0; i < n; ++i) {
            s += A[i];
            candidate += i * A[i];
        }
        
        int ans = candidate;
        for (int i = n - 1; i > 0; --i) {
            candidate += s - n * A[i];
            ans = max(ans, candidate);
        }
        return ans;
    }
};


----------------------------------------------------------------------------------------------------
Short Python solution
class Solution(object):
    def maxRotateFunction(self, A):
        s = 0; n = len(A)
        for i in range(n):
            s += i*A[i]
        sumA = sum(A); m = s
        for num in A:
            s += n*num - sumA
            m = max(m, s)
        return m


----------------------------------------------------------------------------------------------------
Share my C++ solution with explanation, easy to understand
class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        int n = A.size();
        int ret = 0;
        int sum = 0;
        int f = 0;
        
        for (int i = 0; i < n; i++)
        {
            sum += A[i];
            f += i * A[i];
        }
        
        ret = f;
        for (int i = 1; i < n; i++)
        {
            f = f + sum - n * A[n - i];
            ret = max(ret, f);
        }
        
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
4 lines in Python
class Solution(object):
    def maxRotateFunction(self, nums):
        now, sums, res, n = sum(i * nums[i] for i in range(len(nums))), sum(nums), float('-inf'), len(nums)
        for i in range(n):
            res, now = max(now, res), now + sums - n * nums[n - i - 1]
        return res if res != float('-inf') else 0


----------------------------------------------------------------------------------------------------
Python O(n), Math with explaination
class Solution(object):
    def maxRotateFunction(self, A):
        sumA=sum(A)
        temp=0
        for i,c in enumerate(A):
            temp+=i*c
        maxx=temp
        for j in xrange(len(A)):
            temp+=(len(A)*A[j]-sumA)
            maxx=max(temp,maxx)
        return maxx


----------------------------------------------------------------------------------------------------
My JavaScript Solution
/**
 * @param {number[]} A
 * @return {number}
 */
var maxRotateFunction = function(A) {
    if(A.length===0) return 0;

    var res = [],
       n = A.length,
       sum=0,
       f=0;
      
    for(var i=0;i<n;i++){
          sum += A[i];
          f += i*A[i];
    }
    
    res[0] = f;
    for (var j = 1; j < n; j++) {
        res[j] = res[j-1] + sum - n*A[n-j];
    }
    return Math.max(...res);
}


----------------------------------------------------------------------------------------------------
Like this non math method
<p>Re: <a href="/topic/58616/java-solution-o-n-with-non-mathametical-explaination">Java Solution O(n) with non mathametical explaination</a></p>


----------------------------------------------------------------------------------------------------
best explanation
<p>Re: <a href="/topic/58410/simple-c-solution-o-n-time-and-o-1-space">Simple c solution &#91;O(n) time and O(1) space&#93;</a></p>


----------------------------------------------------------------------------------------------------
Python O(n)
class Solution(object):
    def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        # We should compute F[i+1] based on F[i]
        n = len(A)
        s = sum(A)
        F0 = sum(i * j for i, j in zip(range(n), A))
        max_F = F0
        F = F0
        for last_item in reversed(A[1:]): # last_item in B0, B1, ..
            F += s - n * last_item
            max_F = max(max_F, F)
        return max_F

----------------------------------------------------------------------------------------------------
C++ Solution
