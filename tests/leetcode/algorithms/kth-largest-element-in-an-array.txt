Very concise one pass solution
    ListNode *partition(ListNode *head, int x) {
        ListNode node1(0), node2(0);
        ListNode *p1 = &node1, *p2 = &node2;
        while (head) {
            if (head->val < x)
                p1 = p1->next = head;
            else
                p2 = p2->next = head;
            head = head->next;
        }
        p2->next = NULL;
        p1->next = node2.next;
        return node1.next;
    }

----------------------------------------------------------------------------------------------------
Concise java code with explanation, one pass
the basic idea is to maintain two queues, the first one stores all nodes with val less than x , and the second queue stores all the rest nodes. Then concat these two queues. Remember to set the tail of second queue a null next, or u will get TLE.

    public ListNode partition(ListNode head, int x) {
        ListNode dummy1 = new ListNode(0), dummy2 = new ListNode(0);  //dummy heads of the 1st and 2nd queues
        ListNode curr1 = dummy1, curr2 = dummy2;      //current tails of the two queues;
        while (head!=null){
            if (head.val<x) {
                curr1.next = head;
                curr1 = head;
            }else {
                curr2.next = head;
                curr2 = head;
            }
            head = head.next;
        }
        curr2.next = null;          //important! avoid cycle in linked list. otherwise u will get TLE.
        curr1.next = dummy2.next;
        return dummy1.next;
    }

----------------------------------------------------------------------------------------------------
10 lines concise C++ Solution
    class Solution {
    public:
        ListNode* partition(ListNode* head, int x) {
            ListNode left(0), right(0);
            ListNode *l = &left, *r = &right;

            while(head){
                ListNode* & ref = head->val < x ? l : r;
                ref->next = head;
                ref = ref->next;
                
                head = head->next;
            }
            l->next = right.next;
            r->next = NULL;
            return left.next;
        }
    };

----------------------------------------------------------------------------------------------------
Python concise solution with dummy nodes.
        
    def partition(self, head, x):
        h1 = l1 = ListNode(0)
        h2 = l2 = ListNode(0)
        while head:
            if head.val < x:
                l1.next = head
                l1 = l1.next
            else:
                l2.next = head
                l2 = l2.next
            head = head.next
        l2.next = None
        l1.next = h2.next
        return h1.next

----------------------------------------------------------------------------------------------------
My accepted solution. Any improvement?
This is my accepted solution:

    public class Solution {
        public ListNode partition(ListNode head, int x) {
            ListNode cur=head;
            
            ListNode smaller_sentinel=new ListNode(0);
            ListNode smaller_cur=smaller_sentinel;
            ListNode larger_sentinel=new ListNode(0);
            ListNode larger_cur=larger_sentinel;
    //Now, go along the list, partitioning into two halves.        
            while(cur!=null){
                if(cur.val<x){
                        smaller_cur.next=cur;
                        smaller_cur=smaller_cur.next;
                    
                }else{
                        larger_cur.next=cur;
                        larger_cur=larger_cur.next;
                }
                cur=cur.next;
            }
    //Now, do the concatenation of two havles. Make sure the last node points to null 
            larger_cur.next=null;
            smaller_cur.next=larger_sentinel.next;
            return smaller_sentinel.next;
        }
    }

It's pretty straightforward. I used multiple references (including sentinels), first to get the two halves, and then link them together. It took 400+ ms to pass the tests (in Java). I guess it's not the optimal solution. Any idea improving it? 

----------------------------------------------------------------------------------------------------
Concise and simple C++ solution.
    ListNode *partition(ListNode *head, int x) {
            
            ListNode *head1 = new ListNode(0);
            ListNode *head2 = new ListNode(0);
            ListNode *h1 = head1;
            ListNode *h2 = head2;
            while(head)
            {
                int v = head->val;
                if(v < x)
                {
                    head1->next = head;
                    head1 = head1->next;
                } else {
                    head2->next = head;
                    head2 = head2->next;
                }
                head = head->next;
            }
            head2->next = NULL;
            head1->next = h2->next;;
            return h1->next;
        }

----------------------------------------------------------------------------------------------------
My O(n)&#x2F;O(1) Solution
I use tail to keep track of the end point where the nodes before it are smaller than x.

----------

    public ListNode partition(ListNode head, int x) {
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode p=dummy;
        ListNode tail=dummy;
        while(p!=null && p.next!=null){
            if(p.next.val>=x)
                p=p.next;
            else{
                if(p==tail){  // don't forget the edge cases when p==tail
                    tail=tail.next;
                    p=p.next;
                }
                else{
                    ListNode tmp=p.next;
                    p.next=tmp.next;
                    tmp.next=tail.next;
                    tail.next=tmp;
                    tail=tmp; // don't forget to move tail.
                }
            }
        }
        return dummy.next;
    }

----------------------------------------------------------------------------------------------------
Share my 3 ms C solution, it&#x27;s very clean and easy to understand
more codes see:  [https://github.com/lightmen/leetcode.git][1]

struct ListNode* partition(struct ListNode* head, int x) {

    struct ListNode left,right;
    struct ListNode *left_cursor,*right_cursor;

    left_cursor = &left;
    right_cursor = &right;

    while(head){
        if(head->val < x){
            left_cursor->next = head;
            left_cursor = left_cursor->next;
        }else{
            right_cursor->next = head;
            right_cursor = right_cursor->next;
        }
        head = head->next;
    }
    
    right_cursor->next = NULL;
    left_cursor->next = right.next;
    
    return left.next;
}


  [1]: https://github.com/lightmen/leetcode.git

----------------------------------------------------------------------------------------------------
Share my solution 10ms in c++


    class Solution {
    public:
        ListNode *partition(ListNode *head, int x) {
            ListNode *newHead = new ListNode(0);
            newHead->next = head;
            ListNode *p1 = newHead;
            while (p1->next) {    
                if((p1->next->val)<x)
                    p1 = p1->next;   //find the beginning
                else
                    break;
            }
            ListNode *p2 = p1;
            
            ListNode *nextOne;
            while (p2->next) {
                nextOne = p2->next;
                if (nextOne->val<x){
                    p2->next = nextOne->next;
                    nextOne->next = p1->next;
                    p1->next = nextOne;
                    p1 = p1->next;
                }else{
                    p2 = p2->next;
                }
            }
            return newHead->next;
        }
    };

----------------------------------------------------------------------------------------------------
My ac java code
public ListNode partition(ListNode head, int x) {
		
		ListNode firstHead = new ListNode(0);
		firstHead.next = head;
		ListNode secondHead = new ListNode(x);
	
		
		ListNode first = firstHead;
		ListNode second = secondHead;
		ListNode curNode = head;
		while(curNode!=null){
			ListNode tmp = curNode.next;
			if(curNode.val<x){
				
				first.next = curNode;
				first = curNode; 
			}else{
				second.next = curNode;
				second = curNode;
				second.next = null;// important
			}
			curNode = tmp;
		}
		first.next = secondHead.next;
		return firstHead.next;
	}

----------------------------------------------------------------------------------------------------
8ms c++, easy to understand
    class Solution {
    public:
        ListNode* partition(ListNode* head, int x) {
            ListNode *l1 = new ListNode(0),*l2 = new ListNode(0); /*create two list for two partitions*/
            ListNode *p1=l1,*p2=l2,*p=head;
            while(p!=NULL){
                if((p->val)<x) p1 = p1->next = p;
                else p2 = p2->next = p;
                p = p->next;
            }
            p2->next = NULL;
            p1->next = l2->next;
            return l1->next;
        }
    };

----------------------------------------------------------------------------------------------------
Java solution -- pick out larger nodes and append to the end
    public ListNode partition(ListNode head, int x) {
        if(head==null || head.next==null) return head;
        
        ListNode l1 = new ListNode(0); 
        ListNode l2 = new ListNode(0);
        ListNode p1=l1, p2=l2;
        
        p1.next = head;
        while(p1.next!=null) {
            // keep moving larger node to list 2;
            
            if(p1.next.val>=x) {
                ListNode tmp = p1.next;
                p1.next = tmp.next;
                
                p2.next = tmp;
                p2 = p2.next;
            }
            else {
                p1 = p1.next;
            }
        }
        
        // conbine lists 1 and 2;
        p2.next = null;
        p1.next = l2.next;
        return l1.next;
    }

----------------------------------------------------------------------------------------------------
11-line one-pass, easy to understand Python solution
class Solution(object):
    def partition(self, head, x):
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """
        left, right = ListNode(None), ListNode(None)
        left_cur, right_cur = left, right
        while head:
            if head.val < x:
                left_cur.next, head = head, head.next
                left_cur, left_cur.next = left_cur.next, None
            else:
                right_cur.next, head = head, head.next
                right_cur, right_cur.next = right_cur.next, None
        left_cur.next = right.next
        return left.next


----------------------------------------------------------------------------------------------------
My Accepted solution
Solution:
 
Keep going along our list.  When we at node that greater or equal x, we remove this node from our list and move it to list of nodes greater than x.

Then we need connect tail our list and list of nodes greater than x.

    class Solution {
    public:
        ListNode *partition(ListNode *head, int x) {
            if (!head) return NULL;
            ListNode * iterator = head; 
            
            ListNode * start = new ListNode(0); // list of nodes greater than x
            ListNode * tail = start;
            
            ListNode * newHead = new ListNode(0); 
            newHead -> next = head;
            ListNode * pre = newHead; // previous node, we need it for removing
            
            
            while (iterator) {
                if (iterator -> val >= x) {
                    pre -> next = iterator -> next; // remove from our list
                    tail -> next = iterator; // add to list of nodes greater than x
                    tail = tail -> next;
                    iterator = iterator -> next;
                    tail -> next = NULL;
                }
                else
                    pre = iterator, iterator = iterator -> next;
            }
            pre -> next = start -> next;
            return newHead -> next;
        }
    };

----------------------------------------------------------------------------------------------------
My Accepted solution using pointer to pointers
It looks as simple as i could think of. Going along our list, all nodes with a value less than x are appended to  list left, while nodes with a value greater than or equal to x are appended to list right. Finally join right to the tail of left and left is the answer.

    ListNode *partition(ListNode *head, int x)
     {
            ListNode *left = NULL, *right = NULL, **p = &left, **q = &right, *entry = head;
    	
        	while (entry) {
    		    if (entry->val < x) {
    		    	*p = entry; p = &(entry->next); entry = *p;
    	    	    }
    	    	    else {
    		    	*q = entry; q = &(entry->next); entry = *q;
    	    	}
        	}
    	    *p = right; *q = NULL;
            return left;
     }


----------------------------------------------------------------------------------------------------
Is the example wrong? Am I missing something?
"For example,

Given 1->4->3->2->5->2 and x = 3,

return 1->2->2->4->3->5."

In the return, why does 4 come before 3 if it's larger???


Also, my code fails this test:
"Input:	{2,1}, 1

Output:	{1,2}

Expected:	{2,1}"

If x is 1, why would the expected output have 2 come before 1?

Thanks.

----------------------------------------------------------------------------------------------------
C++ concise solution.
        
    ListNode* partition(ListNode* head, int x) {
        ListNode *dummy1 = new ListNode(0), *dummy2 = new ListNode(0), *node1, *node2;
        node1 = dummy1;
        node2 = dummy2;
        while (head) {
            if (head->val < x) {
                node1->next = head;
                node1 = node1->next;
            } else {
                node2->next = head;
                node2 = node2->next;
            }
            head = head->next;
        }
        node2->next = NULL;
        node1->next = dummy2->next;
        return dummy1->next;
    }

----------------------------------------------------------------------------------------------------
WHY: Input: {2,1}, 1 Output: {1,2} Expected: {2,1}
Input: {2,1}, 1  
Output: {1,2}  
Expected: {2,1} 

Why?

----------------------------------------------------------------------------------------------------
Simple Python Solution and Easy to Understand
    def partition(self, head, x):
        if not head:
            return None
        dy = ListNode(0)
        dy.next = head
        a = dy
        while a.next and a.next.val < x:
            a = a.next
        b = a.next
        c = b
        while c and c.next:
            if c.next.val < x:
                d = c.next
                c.next = c.next.next
                a.next = d
                d.next = b
                a = d
            else:
                c = c.next
        return dy.next

----------------------------------------------------------------------------------------------------
Simple Java solution
    public class Solution {
        public ListNode partition(ListNode head, int x) {
            ListNode fake1 = new ListNode(0);  
            ListNode fake2 = new ListNode(0);  
            ListNode t1 = fake1;
            ListNode t2 = fake2;
            
            ListNode n = head;
            while (n!=null){
                if (n.val<x){
                    t1.next = n;
                    t1 = t1.next;
                }
                else{
                    t2.next = n;
                    t2 = t2.next;
                }
                n = n.next;
            }
            t2.next = null;
            t1.next = fake2.next;
            return fake1.next;
        }
    }

----------------------------------------------------------------------------------------------------
