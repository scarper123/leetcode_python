Very Simple Java Solution with detail explanation
    public class Solution {
	public int wiggleMaxLength(int[] nums) {
		if (nums.length == 0 || nums.length == 1) {
			return nums.length;
		}
		int k = 0;
		while (k < nums.length - 1 && nums[k] == nums[k + 1]) {  //Skips all the same numbers from series beginning eg 5, 5, 5, 1
			k++;
		}
		if (k == nums.length - 1) {
			return 1;
		}
		int result = 2;     // This will track the result of result array
		boolean smallReq = nums[k] < nums[k + 1];       //To check series starting pattern
		for (int i = k + 1; i < nums.length - 1; i++) {
			if (smallReq && nums[i + 1] < nums[i]) {
				nums[result] = nums[i + 1];
				result++;
				smallReq = !smallReq;    //Toggle the requirement from small to big number
			} else {
				if (!smallReq && nums[i + 1] > nums[i]) {
					nums[result] = nums[i + 1];
					result++;
					smallReq = !smallReq;    //Toggle the requirement from big to small number
				}
			}
		}
		return result;
	}
}


----------------------------------------------------------------------------------------------------
Easy understanding DP solution with O(n), Java version
public class Solution {
    public int wiggleMaxLength(int[] nums) {
        
        if( nums.length == 0 ) return 0;
        
        int[] up = new int[nums.length];
        int[] down = new int[nums.length];
        
        up[0] = 1;
        down[0] = 1;
        
        for(int i = 1 ; i < nums.length; i++){
            if( nums[i] > nums[i-1] ){
                up[i] = down[i-1]+1;
                down[i] = down[i-1];
            }else if( nums[i] < nums[i-1]){
                down[i] = up[i-1]+1;
                up[i] = up[i-1];
            }else{
                down[i] = down[i-1];
                up[i] = up[i-1];
            }
        }
        
        return Math.max(down[nums.length-1],up[nums.length-1]);
    }
}


----------------------------------------------------------------------------------------------------
Two solutions. One is DP, the other is greedy (8 lines).
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int size=nums.size(), f=1, d=1;
        for(int i=1; i<size; ++i){
                 if(nums[i]>nums[i-1]) f=d+1;
            else if(nums[i]<nums[i-1]) d=f+1;
        }
        return min(size, max(f, d));
    }
};


----------------------------------------------------------------------------------------------------
C++ 0ms O(N) dynamic programming solution
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int size = nums.size();
        
        if (size == 0) {
            return 0;
        }
        
        /** up[i] is the length of a longest wiggle subsequence of {nums[0],...,nums[i]}, with a
            positive difference between its last two numbers. This subsequence may or may not
            include nums[i] and there may be several such subsequences (of the same length).
            We call this a subsequence of type U.
         */
        vector<int> up(size, 0);
        /** down[i] is the length of a longest wiggle subsequence of {nums[0],...,nums[i]}, with a
            negative difference between its last two numbers. This subsequence may or may not
            include nums[i] and there may be several such subsequences (of the same length).
            We call this a subsequence of type D.
         */
        vector<int> down(size, 0);
        
        // At i=0, there is only one number and we can use it as a subsequence, i.e up[0]=down[0]=1
        up[0] = 1;
        down[0] = 1;
        for(int i=1; i<size; ++i){
            
            if (nums[i] > nums[i-1]) {
                /** If nums[i] > nums[i-1], then we can use nums[i] to make a longer subsequence of type U
                    Proof: We consider a subsequence of type D in {0,...,i-1} (its length is down[i-1]).
                    Let N be the last number of this subsequence.
                    - If nums[i] > N, then we can add nums[i] to the subsequence and it gives us a longer
                    valid subsequence of type U.
                    - If nums[i] <= N, then:
                    (1) N cannot be nums[i-1], because nums[i-1] < nums[i] <= N i.e. nums[i-1] < N
                    (2) We can replace N with nums[i-1] (we still have a valid
                    subsequence of type D since N >= nums[i] > nums[i-1] i.e. N > nums[i-1]),
                    and then add nums[i] to the subsequence, and we have a longer subsequence of type U.
                    Therefore up[i] = down[i-1] + 1
                    
                    There is no gain in using nums[i] to make a longer subsequence of type D.
                    Proof: Let N be the last number of a subsequence of type U
                    in {0,...,i-1}.
                    Assume we can use nums[i] to make a longer subsequence of type D. Then:
                    (1) N cannot be nums[i-1], otherwise we would not be able to use nums[i]
                    to make a longer subsequence of type D as nums[i] > nums[i-1]
                    (2) Necessarily nums[i] < N, and therefore nums[i-1] < N since nums[i-1] < nums[i].
                    But this means that we could have used nums[i-1] already to make a longer
                    subsequence of type D.
                    So even if we can use nums[i], there is no gain in using it, so we keep the old value of
                    down (down[i] = down[i-1])
                */
                up[i] = down[i-1] + 1;
                down[i] = down[i-1];
            }
            else if (nums[i] < nums[i-1]) {
                /** The reasoning is similar if nums[i] < nums[i-1] */
                down[i] = up[i-1] + 1;
                up[i] = up[i-1];
            }
            else {
                /** if nums[i] == nums[i-1], we cannot do anything more than what we did with
                     nums[i-1] so we just keep the old values of up and down
                */
                up[i] = up[i-1];
                down[i] = down[i-1];
            }
        }
        return max(up[size-1], down[size-1]);
    }
};


----------------------------------------------------------------------------------------------------
3 lines O(n) Python with explanation&#x2F;proof
def wiggleMaxLength(self, nums):
    norep = [num for num, _ in itertools.groupby(nums)]
    triples = zip(norep, norep[1:], norep[2:])
    return sum((b>a) == (b>c) for a, b, c in triples) + len(norep[:2])

def wiggleMaxLength(self, nums):
    norep = [num for num, _ in itertools.groupby(nums)]
    if len(norep) < 2: return len(norep)
    triples = zip(norep, norep[1:], norep[2:])
    return 2 + sum(a<b>c or a>b<c for a, b, c in triples)

----------------------------------------------------------------------------------------------------
Java Greedy solution O(n) time complexity, O(1) space complexity
public int wiggleMaxLength(int[] nums) {
        if (nums == null) return 0;
        if (nums.length <= 1) return nums.length;
        int f = 1, b = 1; //the first number can be a smaller number or larger number depends on what the next number it is. 
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i-1]) f = b + 1;
            else if (nums[i] < nums[i-1]) b = f + 1;
        }
        return Math.max(f, b);
    }


----------------------------------------------------------------------------------------------------
Java O(n) greedy solution
public class Solution {
    public int wiggleMaxLength(int[] nums) {
        if(nums.length <= 1) return nums.length;
        int count = 1;
        Boolean prevInc = null;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] > nums[i - 1] && (prevInc == null || !prevInc)) {
                prevInc = true;
                count++;
            } else if(nums[i] < nums[i - 1] && (prevInc == null || prevInc)) {
                prevInc = false;
                count++;
            }
        }
        return count;
    }
}

----------------------------------------------------------------------------------------------------
JAVA O(n) solution, quite simple idea with explanation, everyone can get it
public int wiggleMaxLength(int[] nums) {
    if (nums.length <= 1) return nums.length;
    
    int count = nums.length;
    Boolean positive = null;
    
    for (int i = 0; i < nums.length-1; i++){
        int temp = nums[i+1] - nums[i];
        if (temp == 0) count--;
        else if (positive == null) positive = temp > 0;
        else if ((temp > 0 && positive) || (temp < 0 && !positive))
            count--;
        else
            positive = !positive;
    }
    return count;
}


----------------------------------------------------------------------------------------------------
O(n) solution (no code)
<p>Your array can be abstracted like this:<br/>
<a href="http://i.imgur.com/FDCjFBq.png" rel="nofollow">solution LC376</a></p>
<p>Consider the number of turning points: they are DIRECTLY related to the length of wiggle subsequence..<br/>
So you only need to scan once, that&#39;s O(n) :)</p>


----------------------------------------------------------------------------------------------------
Python solution - 48ms
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # trivial case
        if (len(nums) < 2):
            return len(nums)
        # create array of diffs
        diffs = []
        for i in range(1, len(nums)):
            x = nums[i] - nums[i - 1]
            # ignore diffs of 0 as they don't count as turning points
            if (x != 0):
                diffs.append(x)
        # if there were diffs of only 0, then seq length is 1
        if (not diffs):
            return 1
            
        cnt = 1 # min seq length at this stage
        # now count the number of times the sign of diff between consecutive numbers changes
        # that will be equal to the max wiggle subseq length
        for i in range(1, len(diffs)):
            prod = diffs[i] * diffs[i - 1]
            if (prod < 0):
                cnt += 1
                
        return cnt + 1


----------------------------------------------------------------------------------------------------
Concise C++ 0ms O(n) solution with explanation
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int flag = 0, count = 1;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i-1] && (flag == -1 || flag == 0)) {
                ++count;
                flag = 1;
            } 
            else if (nums[i] < nums[i-1] && (flag == 1 || flag == 0)) {
                ++count;
                flag = -1;
            }
        }
        return nums.size() == 0 ? 0 : count;
    }
};


----------------------------------------------------------------------------------------------------
Short Java O(n) Greedy Solution
public int wiggleMaxLength(int[] nums) {
    if (nums == null || nums.length == 0) return 0;
    int ans = 1, tail = nums[0];
    Boolean inc = null;
    for (int x: nums) {
        if (x == tail) continue;
        if (inc == null || inc != x > tail) {
            inc = x > tail;
            ans++;
        }
        tail = x;
    }
    return ans;
}


----------------------------------------------------------------------------------------------------
20 lines O(n) greedy java solution, easy to understand
public class Solution {
    public int wiggleMaxLength(int[] nums) {
        if(nums.length < 2)return nums.length; 
        int dir = -2; 
        int count = 1;
        for(int i = 1;i< nums.length;i++){
            if(nums[i-1] < nums[i]){
               if(dir == 1){continue;}
               else {dir = 1; count++; }
               
            }
            
            else if(nums[i-1] > nums[i]){
                if(dir == -1){continue;}
                else{dir = -1; count++;}
            }
        }
        return count;
    }
}


----------------------------------------------------------------------------------------------------
Python 40ms O(n) with Math Intuition - Local Max, Local Min and Saddle points
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        peaks, troughs, n = [], [], len(nums)
        if n == 1:
            return 1
        for i in range(n):
            if i == 0:
                if nums[i] > nums[i+1]:
                    peaks.append(i)
                if nums[i] < nums[i+1]:
                    troughs.append(i)
            elif i == n-1:
                if nums[i] > nums[i-1]:
                    peaks.append(i)
                if nums[i] < nums[i-1]:
                    troughs.append(i)
            else:
                if nums[i] >= nums[i-1] and nums[i] > nums[i+1]:
                    if nums[i] == nums[i-1]:
                        k = i
                        while k > 0 and nums[k] == nums[k-1]:
                            k -= 1
                        if k == 0 or nums[k] > nums[k-1]:
                            peaks.append(i)
                    else:
                        peaks.append(i)
                if nums[i] <= nums[i-1] and nums[i] < nums[i+1]:
                    if nums[i] == nums[i-1]:
                        k = i 
                        while k > 0 and nums[k] == nums[k-1]:
                            k -= 1
                        if k == 0 or nums[k] < nums[k-1]:
                            troughs.append(i)
                    else:
                        peaks.append(i)            
            
        return len(peaks)+len(troughs)


----------------------------------------------------------------------------------------------------
Java 0ms solution
public int wiggleMaxLength(int[] nums) {
    if(nums.length<=1) return nums.length;
    for(int i=0;i<nums.length-1;i++){
       nums[i]=nums[i+1]-nums[i];
       if(nums[i]>0) nums[i]=1;
       else if(nums[i]<0) nums[i]=-1;
       else nums[i]=0;
    }
    int k=-1;
    int res=2;
    while(++k<nums.length-1&&nums[k]==0);
    if(k==nums.length-1) return 1;
    int temp=nums[k];
    for(int i=k;i<nums.length-2;i++){
        if(nums[i+1]+temp==0){
            temp=nums[i+1];
            res++;
        }
    }
    return res;
}


----------------------------------------------------------------------------------------------------
c++ easy-understanding solution with O(n) time and O(1) space, 0ms
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.size() < 2) return nums.size();
        int ans = 1;
        int i = 1;
        while(i < nums.size() && nums[i] == nums[i-1]) i++;
        if(i >= nums.size()) return ans;
        bool increase = nums[i] > nums[i-1];
        //ans++;
        while(i < nums.size()){
            if(increase){
                while(i+1 < nums.size() && nums[i+1] >= nums[i])  i++;
            }
            else{
                while(i+1 < nums.size() && nums[i+1] <= nums[i])  i++;
            }
            increase = increase? false : true;
            ans++;
            i++;
        }
        return ans;
    }
};


----------------------------------------------------------------------------------------------------
easy Java O(n) solution ,0ms
    public int wiggleMaxLength(int[] nums) {
    int size = nums.length;
        if(size<=1)return size;
        int temp = 1,sign = 0,i = 0;
            while(i<size-1){
            if(nums[i]>nums[i+1] && (sign==-1 || sign == 0)){
                sign=1;
                temp++;
            }
            if(nums[i]<nums[i+1] && (sign==1 || sign == 0)){
                sign=-1;
                temp++;
            }
            i++;
            }
        return temp;
    }

----------------------------------------------------------------------------------------------------
Simple C++ solution, the core idea is to skip elements that will not increase the subsequence.
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        
        if(nums.size()<=1) return nums.size();
        
        int dir=-1;
        int res=1;
        dir=nums[1]<nums[0]?0:dir;
        dir=nums[1]>nums[0]?1:dir;
        
        for(int i=1; i<nums.size(); i++)
        {
            if(nums[i]>nums[i-1] && dir==1 )
            {
                res++;
                dir=0;
            }
            else if(nums[i]<nums[i-1] && dir==0)
            {
                res++;
                dir=1;
            }
        }
        
        return res;
    }
};


----------------------------------------------------------------------------------------------------
C++ straight forward solution, easy to understand
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) 
    {
        int size = nums.size();
        if(size<2) return size;
        int ans = 1, left, right;
        for(int i = 1; i < size; i++ )
        {
            if(nums[i]==nums[i-1]) continue;
            left = right = i;
            while(left>0 && nums[--left]==nums[i]){};
            while(right<size-1 && nums[++right]==nums[i]){};
            if((nums[i]>nums[left] && nums[i]>nums[right])||
                (nums[i]<nums[left] && nums[i]<nums[right])) ans++;
        }
        if(nums[size-2]!=nums[size-1]) ans++;
        return ans;
    }
};

----------------------------------------------------------------------------------------------------
Concise 10 lines code, 0ms acepted!
public int wiggleMaxLength(int[] a) {
       if(a.length<2) return a.length;
       int prev = a[0], maxLen=1
       boolean increasing = a[1]>a[0];   // denoting if we are expecting increased relative to prev
 
       for(int i=1; i<a.length; i++){
           if ( (increasing && (a[i] >prev)) || (!increasing && (a[i] < prev) ) ) {
                   increasing = !increasing;
                   maxLen++;
           }
           prev = a[i];
       }
       return maxLen;
}


----------------------------------------------------------------------------------------------------
