Java O(1)
class Solution {
    public int flipLights(int n, int m) {
        if(m==0) return 1;
        if(n==1) return 2;
        if(n==2&&m==1) return 3;
        if(n==2) return 4;
        if(m==1) return 4;
        if(m==2) return 7;
        if(m>=3) return 8;
        return 8;
    }
}


----------------------------------------------------------------------------------------------------
C++, concise code, O(1)
class Solution {
public:
    int flipLights(int n, int m) {
        if (m == 0 || n == 0) return 1;
        if (n == 1) return 2;
        if (n == 2) return m == 1? 3:4;
        if (m == 1) return 4;
        return m == 2? 7:8;
    }
};


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def flipLights(self, n, m):
    seen = set()
    for cand in itertools.product((0, 1), repeat = 4):
        if sum(cand) % 2 == m % 2 and sum(cand) <= m:
            A = []
            for i in xrange(min(n, 3)):
                light = 1
                light ^= cand[0]
                light ^= cand[1] and i % 2
                light ^= cand[2] and i % 2 == 0
                light ^= cand[3] and i % 3 == 0
                A.append(light)
            seen.add(tuple(A))

    return len(seen)


----------------------------------------------------------------------------------------------------
Short and Clean Java O(1) Solution
class Solution {
    public int flipLights(int n, int m) {
        if (m == 0) return 1;
        if (n <= 0 || m < 0) return 0;
        
        if (n == 1) return 2;
        else if (n == 2) return (m == 1) ? 3 : 4;
        else return (m == 1) ? 4 : ((m == 2) ? 7 : 8);
    }
}


----------------------------------------------------------------------------------------------------
Java O(1) solution
n

----------------------------------------------------------------------------------------------------
Easy to understand Java BFS solution O(m),
public int flipLights(int n, int m) {
        n = n <= 6? n: (n % 6 + 6);
        
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        int init = (1 << n) - 1;
        queue.offer(init);
        for (int i=0; i<m; i++) {
            int size = queue.size();
            visited.clear();
            for (int k=0; k<size; k++) {
                int s = queue.poll();
                int[] next = new int[] {flipAll(s, n), 
                     flipEven(s, n), flipOdd(s, n), flip3k1(s, n)};
                for (int s1: next) {
                    if (!visited.contains(s1)) {
                        queue.offer(s1);
                        visited.add(s1);
                    }
                }
            }
        }
        return queue.size();
    }
    
    private int flipAll(int s, int n) {
        int x = (1 << n) - 1;
        return s ^ x;
    }

    private int flipEven(int s, int n) {
        for (int i=0; i<n; i+=2) {
            s ^= 1 << i;
        }
        return s;
    }

    private int flipOdd(int s, int n) {
        for (int i=1; i<n; i+=2) {
            s ^= 1 << i;
        }
        return s;
    }

    private int flip3k1(int s, int n) {
        for (int i=0; i<n; i+=3) {
            s ^= 1 << i;
        }
        return s;
    }


----------------------------------------------------------------------------------------------------
Simple Math Python O(1)
def flipLights(self, n, m):
    if m == 0:      
        return 1
    if n == 1:
        return 2
    if m == 1 and n == 2:
        return 3
    if m == 1 or n == 2:
        return 4
    if m == 2:
        return 7
    return 8

----------------------------------------------------------------------------------------------------
Python solution (this is not a programming questions IMO)
class Solution:
    def flipLights(self, n, m):
        """
        :type n: int
        :type m: int
        :rtype: int
        """
        if m == 0:
            return 1
        if n >= 3:
            return 4 if m == 1 else 7 if m == 2 else 8
        if n == 2:
            return 3 if m == 1 else 4
        if n == 1:
            return 2


----------------------------------------------------------------------------------------------------
2 short lines, simple formula
1+m*n

----------------------------------------------------------------------------------------------------
Mathematical Solution with Explanation
m == 2

----------------------------------------------------------------------------------------------------
Python O(1), with detailed analysis.
class Solution(object):
    def flipLights(self, n, m):
        """
        :type n: int
        :type m: int
        :rtype: int
        """
        if m == 0: 
            return 1
        elif n == 1:
            return 2
        elif n == 2:
            return 3 if m<2 else 4
        else:
            if m == 1:
                return 4
            elif m == 2:
                return 7
            else:
                return 8


----------------------------------------------------------------------------------------------------
Intuitive solution
public int flipLights(int n, int m) {
        HashSet<List<Boolean>> hs = new HashSet<>();
        
        for(int k = 0; k < 16; k++){
            //n bulbs
            Boolean[] curr = new Boolean[n];
            Arrays.fill(curr, false);
            int count = 0;
            
            for(int i = 0; i < 4; i++){
                //check how many methods will be used in this loop
                if( (k&(1<<i)) > 0 )  count++;  
            }
            
            //if we are going to pick more than m methods, then we skip current loop
            if(count > m) continue;
            //count < m will also work, since we can apply a same method multiple times
            //so that we need to check if m and count are both even or both odd.
            //duplicate operations + count = m
            //if count = 2, m = 3, then there is no way that we can use 3 operations to achieve the same effect of two operations
            //if count = 1, m = 3, then we can apply a method twice to achieve the same result
            //if count = 1, m = 2, then there is no way that we can use 1 operation to achieve the same effect of two operations
            //if count = 2 or count = 0, m = 2, we can just apply two methods or a method twice to achieve count = 2 or count = 0
            if( count%2 != m%2 ) continue;
            
            if( (k&1) > 0){
                for(int i = 0; i < n; i++) curr[i] = !curr[i]; 
            }
            
            if( (k&2) > 0){
                for(int i = 0; i < n; i+=2) curr[i] = !curr[i];
            }
            
            if( (k&4) > 0){
                for(int i = 1; i < n; i+=2) curr[i] = !curr[i];
            }
            
            if( (k&8) > 0){
                //3k+1, k = 0,1,2 => now we are 0 based, so it is 3k, k = 0,1,2
                for(int i = 0; i < n; i += 3 ) curr[i] = !curr[i];
            }            
            List<Boolean> list = Arrays.asList(curr);
            hs.add(list);
        }
        
        //System.out.println(hs);
        return hs.size();
 }


----------------------------------------------------------------------------------------------------
C# solution
public class Solution {
    public int FlipLights(int n, int m) {
        if(m == 0)
            return 1;
        if(n == 0)
            return 1;
        else if(n == 1)
            return 2;
        
        if(n > 4)
            n=4;
        
        HashSet<int> pool = new HashSet<int>();
        int max = 1 << n;
        pool.Add(max-1);
        int b1 = 15 >> (4-n);
        int b2 = 10 >> (4-n);
        int b3 = 5 >> (4-n);
        int b4 = 9 >> (4-n);
        while(m > 0 && pool.Count() < max){
            HashSet<int> newpool = new HashSet<int>();
            foreach(var item in pool){
                newpool.Add(item ^ b1);
                newpool.Add(item ^ b2);
                newpool.Add(item ^ b3);
                newpool.Add(item ^ b4);
            }
            pool = newpool;
            m--;
        }
        
        return pool.Count();
    }
}


----------------------------------------------------------------------------------------------------
O(1) Java bit operation
public int flipLights(int n, int m) {
        int odd = 0b101;
        int even = 0b010;
        int three = 0b001;
        if (n > 3) n = 3;
        Set<Integer> res = new HashSet<>();
        for (int i = 0; i < 16; ++i) {
            int cnt = 0;

            for (int k = 0; k < 4; ++k) if ((i&(1<<k)) != 0)++cnt;
            if (cnt % 2 != m % 2 || m < cnt) continue;
            int v = (1 << n) - 1;
            int mask = v;
            if ((i & 1) != 0) v = ~v;
            if ((i & 2) != 0) v = even&~v|v&~even;
            if ((i & 4) != 0) v = odd&~v|v&~odd;
            if ((i & 8) != 0) v = three&~v|v&~three;
            res.add(v&mask);
        }
        return res.size();
    }


----------------------------------------------------------------------------------------------------
DFS, BFS - Swift
class Solution {
    func flipLights_BFS(_ n: Int, _ m: Int) -> Int {
        if n <= 0 || m <= 0 {
            return 1
        }
        
        let status = [String](repeatElement("1", count: n))
        var queue = [[String]]()
        var level = 0
        var result = 0
        
        queue.append(status)
        while !queue.isEmpty {
            let count = queue.count
            var visited = Set<String>()
            level += 1
            for _ in 0..<count {
                let status = queue.removeFirst()
                let statusArray = [action1(status), action2(status), action3(status), action4(status)]
                
                for status in statusArray {
                    if !visited.contains(status.joined()) {
                        if level != m {
                            queue.append(status)
                        }
                        visited.insert(status.joined())
                    }
                }
                
                if level == m {
                    result = visited.count
                }
            }
        }
        
        return result
    }
    
    func flipLights_DFS(_ n: Int, _ m: Int) -> Int {
        if n <= 0 || m <= 0 {
            return 1
        }
        
        let status = [String](repeatElement("1", count: n))
        var kinds = Set<String>()
        var cache = Set<String>()
        
        helper(m, status, &kinds, &cache)
        
        return kinds.count
    }
    
    private func helper(_ remain: Int, _ status: [String], _ kinds: inout Set<String>, _ cache: inout Set<String>) {
        if remain == 0 {
            kinds.insert(status.joined())
            return
        }
        
        let statusArray = [action1(status), action2(status), action3(status), action4(status)]
        
        for status in statusArray {
            if !cache.contains("\(remain)_\(status.joined())") {
                helper(remain - 1, status, &kinds, &cache)
                cache.insert("\(remain)_\(status.joined())")
            }
        }
    }
    
    private func action1(_ status: [String]) -> [String] {
        var result = [String]()
        
        for i in 0..<status.count {
            result.append(flip(status[i]))
        }
        
        return result
    }
    
    private func action2(_ status: [String]) -> [String] {
        var result = [String]()
        
        for i in 0..<status.count {
            if (i + 1) % 2 == 0 {
                result.append(flip(status[i]))
            } else {
                result.append(status[i])
            }
        }
        
        return result
    }
    
    private func action3(_ status: [String]) -> [String] {
        var result = [String]()
        
        for i in 0..<status.count {
            if (i + 1) % 2 == 1 {
                result.append(flip(status[i]))
            } else {
                result.append(status[i])
            }
        }
        
        return result
    }
    
    private func action4(_ status: [String]) -> [String] {
        var result = [String]()
        
        for i in 0..<status.count {
            if (i + 1) % 3 == 1 {
                result.append(flip(status[i]))
            } else {
                result.append(status[i])
            }
        }
        
        return result
    }
    
    private func flip(_ status: String) -> String {
        return status == "1" ? "0" : "1"
    }
}


----------------------------------------------------------------------------------------------------
Java Solution
public int flipLights(int n, int m) {
    int[][] tab = new int[][]{
            {1, 1, 1, 1},
            {1, 2, 2, 2},
            {1, 3, 4, 4},
            {1, 4, 7, 8}};
    if (n > 3) n = 3;
    if (m > 3) m = 3;
    return tab[n][m];
}


----------------------------------------------------------------------------------------------------
Java O(1) solution with explanation
class Solution {
    public int flipLights(int n, int m) {
        // for the 4 operations(labeled 1-4, also suppose the original condition is 0):
        // 1 + 2 -> 3
        // 1 + 3 -> 2
        // 2 + 3 -> 1
        // So if n <= 2 and m == 1, the conditions are 1,2,3
        // if m >= 2, the conditions are 0,1,2,3
        // if n > 2, we need to also count condition 4
        // if m == 1, the conditions are 1,2,3,4
        // if m == 2, the conditions are 0,1,2,3,1+4,2+4,3+4
        // if m > 2, the conditions are 0,1,2,3,0+4,1+4,2+4,3+4
        if (n == 0) return 0;
        if (m == 0) return 1;
        if (n == 1) return 2;
        if (n <= 2) {
            if (m == 1) return 3;
            else return 4;
        }
        else if (m == 1) return 4;
        else if (m == 2) return 7;
        else return 8;
    }
}


----------------------------------------------------------------------------------------------------
Java verbose solution using hashmap, just do the flip step by step
public int flipLights(int n, int m) {     
    StringBuilder status = new StringBuilder();
    Map<String, String[]> memo = new HashMap<>();
    for (int i = 0; i < n; i++) {
        status.append(1);
    }
    Queue<String> current = new LinkedList<>();
    current.offer(status.toString());
    for (int i = 0; i < m; i++) {
        Set<String> visited = new HashSet<>();
        while (current.peek() != null) {
            String cs = current.poll();
            if (memo.containsKey(cs)) {
                for (int j = 0; j < 4; j++) {
                    visited.add(memo.get(cs)[j]);
                }
            }
            else {
                char[] c1 = cs.toCharArray();
                char[] c2 = cs.toCharArray();
                char[] c3 = cs.toCharArray();
                char[] c4 = cs.toCharArray();
                for (int j = 0; j < n; j++) {
                    c1[j] = flip(c1[j]);
                    if (j%2 == 0) {
                        c2[j] = flip(c2[j]);
                    }
                    if (j%2 == 1) {
                        c3[j] = flip(c3[j]);
                    }
                    if ( j % 3 == 0) {
                        c4[j] = flip(c4[j]);
                    }
                }
                StringBuilder s1 = new StringBuilder();
                StringBuilder s2 = new StringBuilder();
                StringBuilder s3 = new StringBuilder();
                StringBuilder s4 = new StringBuilder();
                for (int j = 0; j < n; j++) {
                    s1.append(c1[j]);
                    s2.append(c2[j]);
                    s3.append(c3[j]);
                    s4.append(c4[j]);
                }
                visited.add(s1.toString());
                visited.add(s2.toString());
                visited.add(s3.toString());
                visited.add(s4.toString());
                String[] temp = {s1.toString(),s2.toString(),s3.toString(),s4.toString()};
                memo.put(cs, temp);
            }
        }
        for (String str: visited) {
            current.offer(str);
        }
    }
    return current.size();
}
private char flip(char i) {
    if (i == '1') return '0';
    else return '1';
}

----------------------------------------------------------------------------------------------------
A C++ Solution using Bit manipulation
int flipLights(int n, int m) {
    char s0,mask;
    const int maxStates = 8;
    vector<char> buttons = {1,2,5,7};

    switch(n){
        case 1:
            s0 = mask = 1;
            break;
        case 2:
            s0 = mask = 3;
            break;
        default:
            s0 = mask = 7;
    }
    
    set<char> states;
    states.insert(s0);
    for (int i = 1; i<=m && states.size() < maxStates; i++){
        set <char> newStates;
        for (auto s : states)
            for (auto b: buttons) 
                newStates.insert(s^b&mask);
        states = newStates;
    }
    
    return states.size();
}


----------------------------------------------------------------------------------------------------
Very easy to understand C++ with detailed explanation
        if (n>=3){
            if (m==1) { return 4; }
            if (m==2) { return 7; }
            if (m>=3) { return 8; }
        }


----------------------------------------------------------------------------------------------------
