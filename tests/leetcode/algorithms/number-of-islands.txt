C++ 10-lines solution
C++ also have  *getline* which acts like Java's *split*. I guess the code can comment itself.

    string simplifyPath(string path) {
        string res, tmp;
        vector<string> stk;
        stringstream ss(path);
        while(getline(ss,tmp,'/')) {
            if (tmp == "" or tmp == ".") continue;
            if (tmp == ".." and !stk.empty()) stk.pop_back();
            else if (tmp != "..") stk.push_back(tmp);
        }
        for(auto str : stk) res += "/"+str;
        return res.empty() ? "/" : res;
    }


----------------------------------------------------------------------------------------------------
Java 10-lines solution with stack
Hi guys!

The main idea is to push to the stack every valid file name (not in {"",".",".."}), popping only if there's smth to pop and we met "..". I don't feel like the code below needs any additional comments.

    public String simplifyPath(String path) {
        Deque<String> stack = new LinkedList<>();
        Set<String> skip = new HashSet<>(Arrays.asList("..",".",""));
        for (String dir : path.split("/")) {
            if (dir.equals("..") && !stack.isEmpty()) stack.pop();
            else if (!skip.contains(dir)) stack.push(dir);
        }
        String res = "";
        for (String dir : stack) res = "/" + dir + res;
        return res.isEmpty() ? "/" : res;
    }

Hope it helps!

----------------------------------------------------------------------------------------------------
Can someone please explain what does simplify means in this context?
Hi, I need more explanation about the question, how does the question define simplify here?

----------------------------------------------------------------------------------------------------
9 lines of Python code
    class Solution(object):
        def simplifyPath(self, path):
            places = [p for p in path.split("/") if p!="." and p!=""]
            stack = []
            for p in places:
                if p == "..":
                    if len(stack) > 0:
                        stack.pop()
                else:
                    stack.append(p)
            return "/" + "/".join(stack)

----------------------------------------------------------------------------------------------------
My O(n) AC code . just need to handle two special cases.
