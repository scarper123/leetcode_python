Java 7 lines solution 29ms
public class Solution {
    public int firstUniqChar(String s) {
        int freq [] = new int[26];
        for(int i = 0; i < s.length(); i ++)
            freq [s.charAt(i) - 'a'] ++;
        for(int i = 0; i < s.length(); i ++)
            if(freq [s.charAt(i) - 'a'] == 1)
                return i;
        return -1;
    }
}


----------------------------------------------------------------------------------------------------
C++ 2 solutions
class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, pair<int, int>> m;
        int idx = s.size();
        for(int i = 0; i < s.size(); i++) {
            m[s[i]].first++;
            m[s[i]].second = i;
        }
        for(auto &p : m) {
            if(p.second.first == 1) idx = min(idx, p.second.second);
        }
        return idx == s.size() ? -1 : idx;
    }
};


----------------------------------------------------------------------------------------------------
Python 3 lines beats 100% (~ 60ms) !
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        letters='abcdefghijklmnopqrstuvwxyz'
        index=[s.index(l) for l in letters if s.count(l) == 1]
        return min(index) if len(index) > 0 else -1


----------------------------------------------------------------------------------------------------
Java two pointers (slow and fast) solution (18 ms)
public class Solution {
    public int firstUniqChar(String s) {
        if (s==null || s.length()==0) return -1;
        int len = s.length();
        if (len==1) return 0;
        char[] cc = s.toCharArray();
        int slow =0, fast=1;
        int[] count = new int[256];
        count[cc[slow]]++;
        while (fast < len) {
            count[cc[fast]]++;
            // if slow pointer is not a unique character anymore, move to the next unique one
            while (slow < len && count[cc[slow]] > 1) slow++;  
            if (slow >= len) return -1; // no unique character exist
            if (count[cc[slow]]==0) { // not yet visited by the fast pointer
                count[cc[slow]]++; 
                fast=slow; // reset the fast pointer
            }
            fast++;
        }
        return slow;
    }
}


----------------------------------------------------------------------------------------------------
1-liners in Python, 76ms
class Solution(object):
    def firstUniqChar(self, s):
        return min([s.find(c) for c,v in collections.Counter(s).iteritems() if v==1] or [-1])


----------------------------------------------------------------------------------------------------
Java One Pass Solution with LinkedHashMap
public int firstUniqChar(String s) {
        Map<Character, Integer> map = new LinkedHashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            if (set.contains(s.charAt(i))) {
                if (map.get(s.charAt(i)) != null) {
                    map.remove(s.charAt(i));
                }
            } else {
                map.put(s.charAt(i), i);
                set.add(s.charAt(i));
            }
        }
        return map.size() == 0 ? -1 : map.entrySet().iterator().next().getValue();
    }


----------------------------------------------------------------------------------------------------
my 4 lines Java solution
public static int firstUniqChar(String s) {
        
		char[] a = s.toCharArray();
		
		for(int i=0; i<a.length;i++){
			if(s.indexOf(a[i])==s.lastIndexOf(a[i])){return i;}
		}
		return -1;
    }

----------------------------------------------------------------------------------------------------
JavaScript solution
 var firstUniqChar = function(s) 
    var map=new Map();
    for(i=0;i<s.length;i++){
         if(map.has(s[i])){
             map.set(s[i],2);
         }
         else{
             map.set(s[i],1);
         }
     }

    for(i=0;i<s.length;i++){
        if(map.has(s[i]) && map.get(s[i])===1){
            return i;
        }
    }
    return -1;
 } ;

----------------------------------------------------------------------------------------------------
my C++ 6 lines Solution
class Solution {
public:
    int firstUniqChar(string s) {
        int list[256] = {0};
        for(auto i: s)
            list[i] ++;
        for(int i=0; i<s.length();i++)
            if(list[s[i]]==1) return i;
        return -1;
    }
};


----------------------------------------------------------------------------------------------------
Java using twice scans
public class Solution {
    public int firstUniqChar(String s) {
        if (s == null || s.isEmpty()) {
            return -1;
        }
        int[] letters = new int[26];
        for (int i = 0; i < s.length(); i++) {
            letters[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s.length(); i++) {
            if (letters[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }
        return -1;
    }
}


----------------------------------------------------------------------------------------------------
C++ 56ms 5 lines
class Solution {
public:
    int firstUniqChar(string s) {
        int alphabet[26] = {0};
        for (int i = 0; i < s.size(); ++i){++alphabet[s[i] -'a'];}
        int i = 0;
        while (i < s.size() && alphabet[s[i]-'a'] > 1) ++i;
        return i == s.size() ? -1 : i;
    }
};


----------------------------------------------------------------------------------------------------
Java solution O(n)
public class Solution {
    public int firstUniqChar(String s) {
		if (s == null || s.equals("")) return -1;
		char[] c = s.toCharArray();
		int[] cnt = new int[256];
				
		for (int i = 0; i < c.length; i++) {
			cnt[c[i]]++;
		}

		for (int i = 0; i < c.length; i++) {
			if (cnt[c[i]] == 1) return i; 
		}
		return -1;
    }
}


----------------------------------------------------------------------------------------------------
Python Dictionary, collections.Counter and count 3 ways
class Solution(object):
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """

        for i in range(len(s)):
            c = s[i]
            if s.count(c)==1:
                return i

        return -1

    def firstUniqChar2(self, s):

        from collections import Counter
        sc = Counter(s)
        for i in range(len(s)):
            c = s[i]
            if sc.get(c,0)==1:
                return i

        return -1

    def firstUniqChar3(self, s):

        d = {}
        for c in s:
            if c in d.keys():
                d[c] += 1
            else:
                d[c] = 1

        for i in range(len(s)):
            c = s[i]
            if d[c]==1:
                return i

        return -1 


----------------------------------------------------------------------------------------------------
Python very easy solution
class Solution(object):
    def firstUniqChar(self, str1):
        """
        :type s: str
        :rtype: int
        """
        for x in str1:
            if str1.find(x)==str1.rfind(x):
                return str1.find(x)
        return -1


----------------------------------------------------------------------------------------------------
Simple Solution, Single Pass
public int firstUniqChar(String s) {
	if(s==null || s.length()==0) {
		return -1;
	}
	char[] chars = s.toCharArray();
	Map<Character,Integer> charsPositions = new HashMap<>();
	List<Integer> uniqsPositions = new ArrayList<>();
	for(int i=0; i<chars.length; i++) {
		char c = chars[i];
		if(charsPositions.containsKey(c)) {
			Integer charFirstPosition = charsPositions.get(c);
			uniqsPositions.remove(charFirstPosition);
		} else {
			charsPositions.put(c,i);
			uniqsPositions.add(i);
		}
	}
	return uniqsPositions.isEmpty()?-1:uniqsPositions.get(0);
}


----------------------------------------------------------------------------------------------------
C++ 46ms 4 lines. Easy to understand
class Solution {
public:
    int firstUniqChar(string s) {
        int cnt[26] = {0} , ans = -1,j = 0;
        for(int i = 0; i < s.length(); i++)  cnt[s[i] - 'a']++;
        for(j; j < s.length() && cnt[s[j] - 'a'] != 1; j++);
        return j == s.length() ? -1 : j;
    }
};


----------------------------------------------------------------------------------------------------
Short and concise 16ms, O(2n) speed with mapping.
public class Solution {
    public int firstUniqChar(String s) {
        char[] arr = s.toCharArray();
        int[] temp = new int[26];
        
        for(int i : arr) temp[i - 'a']++;
        for(int i = 0; i < arr.length; i++){
            if(temp[arr[i] - 'a'] == 1) return   i;
        }
        return -1;
    }
}






----------------------------------------------------------------------------------------------------
Java Straightforward O(n) runtime O(1) space solution
public int firstUniqChar(String s) {
    int n = s.length();
    int[] alp = new int[26];
    int[] loc = new int[26];
    
    for (int i = 0; i < n; ++i) {
        alp[s.charAt(i) - 'a']++;
        loc[s.charAt(i) - 'a'] = i;
    }
    
    int ret = -1;
    for (int i = 0; i < 26; ++i) {
        if (alp[i] == 1) {
            ret = ret == -1 ? loc[i] : Math.min(ret, loc[i]);
        }
    }
    
    return ret;
}

----------------------------------------------------------------------------------------------------
javascript | beats 98% | O(n) time | O(1) space
/**
 * @param {string} s
 * @return {number}
 */

let firstUniqChar = s => {
    let states = Array(26).fill(-1)
    let order = []
    
    for (let i = 0; i < s.length; i++) {
        let char = s.charCodeAt(i) - 97
        
        if (states[char] === -1) {
            order.push(char)
            states[char] = i
        } else {
            states[char] = -2
        }
    }
    
    for (let i = 0; i < order.length; i++) {
        let char = order[i]
        let index = states[char]
        if (index > -1) return index
    }
    
    return -1
};


----------------------------------------------------------------------------------------------------
C++ Concise and Easy Understanding Solution
class Solution {
public:
    int firstUniqChar(string s) {
        int cnt[256] = {0};
        for (char c : s) cnt[c]++;
        for (int i = 0; i < s.length(); i++) {
            if (cnt[s[i]] == 1) return i;
        } 
        return -1;
    }
};


----------------------------------------------------------------------------------------------------
