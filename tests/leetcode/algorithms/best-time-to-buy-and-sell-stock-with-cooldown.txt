3 line recursive solution
    public ListNode removeElements(ListNode head, int val) {
            if (head == null) return null;
            head.next = removeElements(head.next, val);
            return head.val == val ? head.next : head;
    }



----------------------------------------------------------------------------------------------------
AC Java solution
    public class Solution {
        public ListNode removeElements(ListNode head, int val) {
            ListNode fakeHead = new ListNode(-1);
            fakeHead.next = head;
            ListNode curr = head, prev = fakeHead;
            while (curr != null) {
                if (curr.val == val) {
                    prev.next = curr.next;
                } else {
                    prev = prev.next;
                }
                curr = curr.next;
            }
            return fakeHead.next;
        }
    }

----------------------------------------------------------------------------------------------------
Iterative short Java solution
Hi guys!

Here's an iterative solution without dummy head. 
First, we shift a head of a list while its' value equals to val. 
Then, we iterate through the nodes of the list checking if the next node's value equals to val and removing it if needed.  

----------

    public class Solution {
        public ListNode removeElements(ListNode head, int val) {
            while (head != null && head.val == val) head = head.next;
            ListNode curr = head;
            while (curr != null && curr.next != null)
                if (curr.next.val == val) curr.next = curr.next.next;
                else curr = curr.next;
            return head;
        }
    }

----------------------------------------------------------------------------------------------------
Simple and elegant solution in C++
    ListNode *removeElements(ListNode *head, int val)
    {
        ListNode **list = &head;

        while (*list != nullptr)
        {
            if ((*list)->val == val)
            {
                *list = (*list)->next;
            }
            else
            {
                list = &(*list)->next;
            }
        }

        return head;
    }

Original recursive version:

    void removeHelper(ListNode *&head, int val)
    {
        if (head == nullptr)
        {
            return;
        }
        else if (head->val == val)
        {
            head = head->next;
        }
        else
        {
            removeHelper(head->next, val);
        }
    }

----------------------------------------------------------------------------------------------------
Accepted 7 line clean java solution
    public ListNode removeElements(ListNode head, int val) {
        if (head == null) return null;
        ListNode pointer = head;
        while (pointer.next != null) {
            if (pointer.next.val == val) pointer.next = pointer.next.next;
            else pointer = pointer.next;
        }
        return head.val == val ? head.next : head;
    }

----------------------------------------------------------------------------------------------------
Concise C++ solution with pseudo ListHead
    class Solution {
    public:
        ListNode* removeElements(ListNode* head, int val) {
            ListNode *pseudo_head = new ListNode(0);
            pseudo_head->next = head;
            ListNode *cur = pseudo_head;
            while(cur){
                if(cur->next && cur->next->val == val)   cur->next = cur->next->next;
                else    cur = cur->next;
            }
            return pseudo_head->next;
        }
    };

----------------------------------------------------------------------------------------------------
Java remove linked list elements solution
public class Solution {

    public ListNode removeElements(ListNode head, int val) {

        ListNode dummy = new ListNode(1);
        ListNode i = dummy;
        ListNode j = head;
        dummy.next = head;
        
        while(j != null){
            if(j.val == val){
                i.next = i.next.next;
                j = j.next;
            }else{
                i = i.next;
                j = j.next;
            }
        }
        
        return dummy.next;
    }
}

----------------------------------------------------------------------------------------------------
An easy-understand solution with pretty fast speed
    public class Solution {
        public ListNode removeElements(ListNode head, int val) {
            while(head != null && head.val == val) {
                head = head.next;
            }
            if(head == null) {
                return head;
            }
            ListNode p = head;
            while(p.next != null) {
                if(p.next.val == val) {
                    p.next = p.next.next;
                } else {
                    p = p.next;
                }
            }
            return head;
        }
    }

----------------------------------------------------------------------------------------------------
Simple 12ms C solution
Just for your reference, welcome any comment.
    
    struct ListNode* removeElements(struct ListNode* head, int val) 
    {
        struct ListNode **pp, *p;
    
        pp = &head;
        while (*pp) {
            p = *pp;
            if ((*pp)->val == val) { /* found one */
                *pp = p->next;
                free(p);
            } else
                pp = &p->next;
        }
    
        return head;
    }

----------------------------------------------------------------------------------------------------
Python solution
    class Solution:
    # @param {ListNode} head
    # @param {integer} val
    # @return {ListNode}
    def removeElements(self, head, val):
        dummy = ListNode(-1)
        dummy.next = head
        next = dummy
        
        while next != None and next.next != None:
            if next.next.val == val:
                next.next = next.next.next
            else:
                next = next.next
            
        return dummy.next

----------------------------------------------------------------------------------------------------
Pointer of Level two
It's only intresting when implemented by "[Two star programming][1]"!

    class Solution {
    public:
        ListNode* removeElements(ListNode* head, int val) {
    		ListNode **p = &head;
    		while(*p != NULL)
    		{
    			if((*p)->val == val) 
    				*p = (*p)->next;
    			else
    				p = &((*p)->next);
    		}
    		return head;
        }
    };


  [1]: http://wordaligned.org/articles/two-star-programming

----------------------------------------------------------------------------------------------------
32ms C++ AC solution
    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
    class Solution {
    public:
        ListNode* removeElements(ListNode* head, int val) {
            if (head==NULL){
                return head;
            }
            ListNode* p=head;
            while(p->next!=NULL){
                if (p->next->val == val){
                    p->next = p->next->next;
                }
                else{
                    p=p->next;
                }
            }
            if (head->val==val)
                head=head->next;
            return head;
        }
    };

----------------------------------------------------------------------------------------------------
Java solution with brief explanation
basic idea is to have two pointers, one for previous node and one for current, if current node.val == val 
we want to set our previous.next to current.next.

but one problem is what if the head.val == val, I used a while loop to get ride of this situation. So I can be sure that head is always a valid node.



public ListNode removeElements(ListNode head, int val)
 {

        while(head != null && head.val == val){
            head = head.next;
        }    
        if(head == null)
            return null;
        ListNode pre = head, cur = head.next;
        while(cur != null){
            if(cur.val == val){
                pre.next = cur.next;
            }else {
                pre = pre.next;
            }
            cur = cur.next;
        }
        return head;
    }

----------------------------------------------------------------------------------------------------
C++ 4 lines recursive solution
    ListNode* removeElements(ListNode* head, int val) {
        if (head == NULL) return NULL;
        if (val == head->val) return removeElements(head->next,val);
        head->next = removeElements(head->next,val);
        return head;
    }

----------------------------------------------------------------------------------------------------
The answer you are wished to offer when in an interview!!
    ListNode* removeElements(ListNode* head, int val) {
        ListNode **pp = &head;
        while (*pp)
            if ((*pp)->val == val)
                *pp = (*pp)->next;
            else
                pp = &(*pp)->next;
        return head;
    }

----------------------------------------------------------------------------------------------------
My easy c++ solution



    ListNode* removeElements(ListNode* head, int val) {
        ListNode** tmp = &head;
        while(*tmp){
            if((*tmp)->val == val) *tmp = (*tmp)->next;
            else tmp = &((*tmp)->next);
        }
        return head;
    }


----------------------------------------------------------------------------------------------------
Simple &amp; clear python solution
First we remove all (if any) target nodes from the beginning (we do it because the removing logic is slightly different from when the node is not in the head). After that we just loop over all nodes, if the next one is one that should be removed, just get it out of the list by moving the next pointer to the next-next node. Otherwise just move along the list.

    class Solution(object):
        def removeElements(self, head, val):
            while head is not None and head.val == val:
                head = head.next
            current = head
            while current is not None:
                if current.next is not None and current.next.val == val:
                    current.next = current.next.next
                else:
                    current = current.next
            return head

----------------------------------------------------------------------------------------------------
Simple Python Solution
def removeElements(self, head, val):
        
        dummy = ListNode(-1)
        dummy.next = head
        pointer = dummy
        
        while(pointer.next):
            
            if pointer.next.val == val:
                pointer.next = pointer.next.next
            else:
                pointer = pointer.next
                
        return dummy.next

----------------------------------------------------------------------------------------------------
Java Solved Recursively
    public class Solution {
        public ListNode removeElements(ListNode head, int val) {
            ListNode result = head;
            if (result == null) {
                return null;
            } else if (result.val == val) {
                return removeElements(result.next, val);
            } else {
                result.next = removeElements(result.next, val);
            }
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
My Java solution in 1ms
Here is what I did.

    public ListNode removeElements(ListNode head, int val) {
        while (head != null && head.val == val) {
            head = head.next;
        }
        
        if (head == null) {
            return null;
        }
        
        ListNode current = head;
        while (current.next != null) {
            if (current.next.val == val) {
                current.next = current.next.next;    
            } else {
                current = current.next;
            }
        }
        return head;
    }

----------------------------------------------------------------------------------------------------
