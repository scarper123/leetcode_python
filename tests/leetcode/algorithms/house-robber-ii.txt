My concise C++ solution, AC 90 ms
I push a sentinel node back into the end of height to make the code logic more concise.
  

      class Solution {
        public:
            int largestRectangleArea(vector<int> &height) {
                
                int ret = 0;
                height.push_back(0);
                vector<int> index;
                
                for(int i = 0; i < height.size(); i++)
                {
                    while(index.size() > 0 && height[index.back()] >= height[i])
                    {
                        int h = height[index.back()];
                        index.pop_back();
                        
                        int sidx = index.size() > 0 ? index.back() : -1;
                        if(h * (i-sidx-1) > ret)
                            ret = h * (i-sidx-1);
                    }
                    index.push_back(i);
                }
                
                return ret;
            }
        };

----------------------------------------------------------------------------------------------------
O(n) stack based JAVA solution
For explanation, please see http://www.geeksforgeeks.org/largest-rectangle-under-histogram/

    public class Solution {
        public int largestRectangleArea(int[] height) {
            int len = height.length;
            Stack<Integer> s = new Stack<Integer>();
            int maxArea = 0;
            for(int i = 0; i <= len; i++){
                int h = (i == len ? 0 : height[i]);
                if(s.isEmpty() || h >= height[s.peek()]){
                    s.push(i);
                }else{
                    int tp = s.pop();
                    maxArea = Math.max(maxArea, height[tp] * (s.isEmpty() ? i : i - 1 - s.peek()));
                    i--;
                }
            }
            return maxArea;
        }
    }

----------------------------------------------------------------------------------------------------
Simple Divide and Conquer AC solution without Segment Tree
The idea is simple: for a given range of bars, the maximum area can either from left or right half of the bars, or from the area containing the middle two bars. For the last condition, expanding from the middle two bars to find a maximum area is `O(n)`, which makes a typical Divide and Conquer solution with `T(n) = 2T(n/2) + O(n)`. Thus the overall complexity is `O(nlgn)` for time and `O(1)` for space (or `O(lgn)` considering stack usage). 

Following is the code accepted with 44ms. I posted this because I didn't find a similar solution, but only the RMQ idea which seemed less straightforward to me.

    class Solution {
        int maxCombineArea(const vector<int> &height, int s, int m, int e) {
            // Expand from the middle to find the max area containing height[m] and height[m+1]
            int i = m, j = m+1;
            int area = 0, h = min(height[i], height[j]);
            while(i >= s && j <= e) {
                h = min(h, min(height[i], height[j]));
                area = max(area, (j-i+1) * h);
                if (i == s) {
                    ++j;
                }
                else if (j == e) {
                    --i;
                }
                else {
                    // if both sides have not reached the boundary,
                    // compare the outer bars and expand towards the bigger side
                    if (height[i-1] > height[j+1]) {
                        --i;
                    }
                    else {
                        ++j;
                    }
                }
            }
            return area;
        }
        int maxArea(const vector<int> &height, int s, int e) {
            // if the range only contains one bar, return its height as area
            if (s == e) {
                return height[s];
            }
            // otherwise, divide & conquer, the max area must be among the following 3 values
            int m = s + (e-s)/2;
            // 1 - max area from left half
            int area = maxArea(height, s, m);
            // 2 - max area from right half
            area = max(area, maxArea(height, m+1, e));
            // 3 - max area across the middle
            area = max(area, maxCombineArea(height, s, m, e));
            return area;
        }
    public:
        int largestRectangleArea(vector<int> &height) {
            if (height.empty()) {
                return 0;
            }
            return maxArea(height, 0, height.size()-1);
        }
    };

----------------------------------------------------------------------------------------------------
5ms O(n) Java solution explained (beats 96%)
For any bar `i` the maximum rectangle is of width `r - l - 1` where r - is the last coordinate of the bar to the **right** with height `h[r] >= h[i]` and l - is the last coordinate of the bar to the **left** which height `h[l] >= h[i]`

So if for any `i` coordinate we know his utmost higher (or of the same height) neighbors to the right and to the left, we can easily find the largest rectangle:

    int maxArea = 0;
    for (int i = 0; i < height.length; i++) {
        maxArea = Math.max(maxArea, height[i] * (lessFromRight[i] - lessFromLeft[i] - 1));
    }

The main trick is how to effectively calculate `lessFromRight` and `lessFromLeft` arrays. The trivial solution is to use **O(n^2)** solution and for each `i` element first find his left/right heighbour in the second inner loop just iterating back or forward:

    for (int i = 1; i < height.length; i++) {
              if (height[i] > height[i - 1]) {
                  lessFromLeft[i] = i - 1;
              }
              else  {
                  int p = i - 1;
                  while (p >= 0 && height[p] >= height[i]) {
                      p--;
                  }
                  lessFromLeft[i] = p;
              }
         }

The only line change shifts this algorithm from **O(n^2)** to **O(n)** complexity: we don't need to rescan each item to the left - we can reuse results of previous calculations and "jump" through indices in quick manner:

    while (p >= 0 && height[p] >= height[i]) {
          p = lessFromLeft[p];
    }

Here is the whole solution:

    public int largestRectangleArea(int[] height) {
        if (height == null || height.length == 0) {
            return 0;
        }
        int[] lessFromLeft = new int[height.length]; // idx of the first bar the left that is lower than current
        int[] lessFromRight = new int[height.length]; // idx of the first bar the right that is lower than current
        lessFromRight[height.length - 1] = height.length;
        lessFromLeft[0]  = -1;

        for (int i = 1; i < height.length; i++) {
            if (height[i] > height[i - 1]) {
                lessFromLeft[i] = i - 1;
            }
            else  {
                int p = i - 1;
                while (p >= 0 && height[p] >= height[i]) p = lessFromLeft[p];                
                lessFromLeft[i] = p;
            }
        }

        for (int i = height.length - 2; i >= 0; i--) {
            if (height[i] > height[i + 1]) {
                lessFromRight[i] = i + 1;
            }
            else  {
                int p = i + 1;
                while (p < height.length && height[p] >= height[i]) p = lessFromRight[p];                
                lessFromRight[i] = p;
            }
        }

        int maxArea = 0;
        for (int i = 0; i < height.length; i++) {
            maxArea = Math.max(maxArea, height[i] * (lessFromRight[i] - lessFromLeft[i] - 1));
        }
        return maxArea;
 }

----------------------------------------------------------------------------------------------------
My concise code (20ms, stack based, O(n)), one trick used
The idea is simple, use a stack to save the index of each vector entry in a ascending order; once the current entry is smaller than the one with the index s.top(), then that means the rectangle with the height height[s.top()] ends at the current position, so calculate its area and update the maximum. 
The only trick I use to avoid checking whether the stack is empty (due to pop) and also avoiding emptying the stack at the end (i.e. after going through the vector, s is not empty and we have to consider those in the stack) is to put a dummy "0" at the beginning of vector "height" and the end of "height": the first one makes sure the stack will never be empty (since all the height entries are >=0) and the last one will flush all the remaining non-zero entries of the stack at the end of "for" iteration. This trick helps us keep the code concise.

    class Solution {
    public:
        int largestRectangleArea(vector<int>& height) {
            height.insert(height.begin(),0); // dummy "0" added to make sure stack s will never be empty
            height.push_back(0); // dummy "0" added to clear the stack at the end
            int len = height.size();
            int i, res = 0, idx;
            stack<int> s; // stack to save "height" index
            s.push(0); // index to the first dummy "0"
            for(i=1;i<len;i++)
            {
                while(height[i]<height[idx = s.top()]) // if the current entry is out of order
                {
                    s.pop();
                    res = max(res, height[idx] * (i-s.top()-1) ); // note how the width is calculated, use the previous index entry
                }
                s.push(i);
            }
            height.erase(height.begin()); // remove two dummy "0"
            height.pop_back();
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
AC Python clean solution using stack 76ms
    def largestRectangleArea(self, height):
        height.append(0)
        stack = [-1]
        ans = 0
        for i in xrange(len(height)):
            while height[i] < height[stack[-1]]:
                h = height[stack.pop()]
                w = i - stack[-1] - 1
                ans = max(ans, h * w)
            stack.append(i)
        height.pop()
        return ans



    # 94 / 94 test cases passed.
    # Status: Accepted
    # Runtime: 76 ms
    # 97.34%

The stack maintain the indexes of buildings with ascending height. Before adding a new building pop the building who is taller than the new one. The building popped out represent the height of a rectangle with the new building as the right boundary and the current stack top as the left boundary. Calculate its area and update ans of maximum area. Boundary is handled using dummy buildings.

----------------------------------------------------------------------------------------------------
My modified answer from GeeksforGeeks, in JAVA
I was stuck and took an eye on Geeks4Geeks. I got the idea and tried to figure it out by myself...
It takes me a lot of time to make it through....

**EDITED:** Now it is pretty concise....

    public class Solution {
    public int largestRectangleArea(int[] height) {
        if (height==null) return 0;//Should throw exception
        if (height.length==0) return 0;
        
        Stack<Integer> index= new Stack<Integer>();
        index.push(-1);
        int max=0;
        
        for  (int i=0;i<height.length;i++){
                //Start calculate the max value
            while (index.peek()>-1)
                if (height[index.peek()]>height[i]){
                    int top=index.pop();                    
                    max=Math.max(max,height[top]*(i-1-index.peek()));  
                }else break;
                
            index.push(i);
        }
        while(index.peek()!=-1){
        	int top=index.pop();
            max=Math.max(max,height[top]*(height.length-1-index.peek()));
        }        
        return max;
    }
}

----------------------------------------------------------------------------------------------------
AC clean Java solution using stack
    public int largestRectangleArea(int[] h) {
      int n = h.length, i = 0, max = 0;
        
      Stack<Integer> s = new Stack<>();
        
      while (i < n) {
        // as long as the current bar is shorter than the last one in the stack
        // we keep popping out the stack and calculate the area based on
        // the popped bar
        while (!s.isEmpty() && h[i] < h[s.peek()]) {
          // tricky part is how to handle the index of the left bound
          max = Math.max(max, h[s.pop()] * (i - (s.isEmpty() ? 0 : s.peek() + 1)));
        }
        // put current bar's index to the stack
        s.push(i++);
      }
        
      // finally pop out any bar left in the stack and calculate the area based on it
      while (!s.isEmpty()) {
        max = Math.max(max, h[s.pop()] * (n - (s.isEmpty() ? 0 : s.peek() + 1)));
      }
        
      return max;
    }


----------------------------------------------------------------------------------------------------
C++ solution, clean code
    int largestRectangleArea(vector<int>& height) {
        height.push_back(0);
        const int size_h = height.size();
        stack<int> stk;
        int i = 0, max_a = 0;
        while (i < size_h) {
            if (stk.empty() || height[i] >= height[stk.top()]) stk.push(i++);
            else {
                int h = stk.top();
                stk.pop();
                max_a = max(max_a, height[h] * (stk.empty() ? i : i - stk.top() - 1));
            }
        }
        return max_a;
    }

----------------------------------------------------------------------------------------------------
Share my 2ms Java solution. Beats 100% Java submissions
    public class Solution {
        public int largestRectangleArea(int[] heights) {
            if (heights == null || heights.length == 0) return 0;
            return getMax(heights, 0, heights.length);
        }    
        int getMax(int[] heights, int s, int e) {
            if (s + 1 >= e) return heights[s];
            int min = s;
            boolean sorted = true;
            for (int i = s; i < e; i++) {
                if (i > s && heights[i] < heights[i - 1]) sorted = false;
                if (heights[min] > heights[i]) min = i;
            }
            if (sorted) {
                int max = 0;
                for (int i = s; i < e; i++) {
                    max = Math.max(max, heights[i] * (e - i));
                }
                return max;
            }
            int left = (min > s) ? getMax(heights, s, min) : 0;
            int right = (min < e - 1) ? getMax(heights, min + 1, e) : 0;
            return Math.max(Math.max(left, right), (e - s) * heights[min]);
        }
    }

----------------------------------------------------------------------------------------------------
Java O(n) left&#x2F;right arrays solution, 4ms beats 96%
Basically, you run 3 passes:

1. Scan from left to right to compute left[], which represents the left most boundary of current height.

2. Scan from right to left to compute right[], which represents the right most boundary of current height.

3. Scan from left to right again to compute rectangle area based on the height of that each position.


----------


    public class Solution {
        public int largestRectangleArea(int[] heights) {
            // validate input
            if(heights == null || heights.length == 0) {
                return 0;
            }
            
            // init
            int n = heights.length;
            int[] left = new int[n];
            int[] right = new int[n];
            int result = 0;
            
            // build left
            left[0] = 0;
            for(int i = 1; i < n; i++) {
                int currentLeft = i-1;
                while(currentLeft >= 0 && heights[currentLeft] >= heights[i]) {
                    currentLeft = left[currentLeft]-1;
                }
                    
                left[i] = currentLeft+1;
            }
            
            // build right
            right[n-1] = n-1;
            for(int i = n-2; i >= 0; i--) {
                int currentRight = i+1;
                while(currentRight < n && heights[i] <= heights[currentRight]) {
                    currentRight = right[currentRight]+1;
                }
                    
                right[i] = currentRight-1;
            }
            
            // compare height
            for(int i = 0; i < n; i++) {
                result = Math.max(result, (right[i]-left[i]+1)*heights[i]);
            }
            
            // return
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
TLE for test case 3000 consecutive 1s
It passes the custom testcase in 24ms, but when I submit it's TLE..

Code:

    public class Solution {
        public int largestRectangleArea(int[] height) {
            Stack<Integer> maxIdx = new Stack<Integer>();
            int area = 0;
            for (int i = 0; i < height.length; i++) {
                if (maxIdx.isEmpty() || height[maxIdx.peek()] <= height[i]) {
                    maxIdx.push(i);
                } else {
                    int idx = maxIdx.pop();
                    int width = maxIdx.isEmpty() ? i : i - maxIdx.peek() - 1;
                    area = Math.max(area, width * height[idx]);
                    i--;
                }
            }
            while(!maxIdx.isEmpty()) {
                int idx = maxIdx.pop();
                int width = maxIdx.isEmpty() ? height.length : height.length - maxIdx.peek() - 1;
                area = Math.max(area, width * height[idx]);
            }
        return area;
        }
    }

Thanks!

----------------------------------------------------------------------------------------------------
16ms &#91;c++&#93; 10-line code with stack
    int largestRectangleArea(vector<int>& height) {
        height.push_back(0); 
        int len = height.size(),res = 0, cur=1;
        int s[len+1]={0};
        s[0]=-1;
        for(int i=1;i<len;i++){
            while(cur && height[i]<height[s[cur]])
                res = max(res, height[s[cur]] * (i-s[--cur]-1));
            s[++cur]=i;
        }
        return res;
    }
The idea is simply to insert position -1 to the beginning of the stack s, therefore we don't need to check whether the stack is empty or not. 
For the height, push a "0" to the end to update the result until the last element in the height.
Here I use an int array to simulate the stack for better time performance.



----------------------------------------------------------------------------------------------------
What is the best run-time for this problem?
What is the best run-time for this problem?

----------------------------------------------------------------------------------------------------
Short C++ solution use stack AC 28ms
    class Solution {
    public:
        int largestRectangleArea(vector<int>& height) {
            height.push_back(0);
            int result=0;
            stack<int> indexStack;
            for(int i=0;i<height.size();i++){
                while(!indexStack.empty()&&height[i]<height[indexStack.top()]){
                    int top=indexStack.top();
                    indexStack.pop(); 
                    int nextTop=indexStack.size()==0?-1:indexStack.top();
                    result=max((i-nextTop-1)*height[top],result);
                }
                indexStack.push(i);
            }
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
My C++ DP solution, 16ms, easy to understand!
I think it might be O(n), or very close to O(n), it cannot be O(n^2).
Can anybody help to prove?


    int largestRectangleArea(vector<int>& height) {
        int n = height.size(), ans = 0, p;
        vector<int> left(n,0), right(n,n);
        for (int i = 1;i < n;++i) {
            p = i-1;
            while (p >= 0 && height[i] <= height[p])
                p = left[p] - 1;
            left[i] = p + 1;
        }
        for (int i = n-2;i >= 0;--i) {
            p = i+1;
            while (p < n && height[i] <= height[p])
                p = right[p];
            right[i] = p;
        }
        for (int i = 0;i < n;++i)
            ans = max(ans,height[i]*(right[i]-left[i]));
        return ans;
    }

----------------------------------------------------------------------------------------------------
Easy-to-understand 92ms Python solution, linear time and space.
    class Solution(object):
    # Helper function calculating how far each bar can be extended to the right.
    def calmax(self, height):
        stack = []
        n = len(height)
        rec = [0] * n
        for i in xrange(len(height)):
            while len(stack) > 0 and height[stack[-1]] > height[i]:
                top = stack.pop()
                rec[top] = i
            stack.append(i)
        for i in stack:
            rec[i] = n
        return rec
    def largestRectangleArea(self, height):
        # How far can each bar be extended to the right?
        rec1 = self.calmax(height)
        # How far can each bar be extended to the left?
        rec2 = self.calmax(height[::-1])[::-1]
        maxa = 0
        n = len(height)
        for i in xrange(n):
            # Add the left and right part together
            new = height[i] * (rec1[i] + rec2[i] - n)
            maxa = max(new, maxa)
        return maxa

This solution can be made faster. But who cares if the complexity is still \Theta(n)?

----------------------------------------------------------------------------------------------------
10 line c++ solution


    class Solution {
    public:
        int largestRectangleArea(vector<int>& heights) {
            int res = 0;
            for (int i = 0; i < heights.size(); ++i) {
                if (i + 1 < heights.size() && heights[i] <= heights[i+1]) continue; // find the local max (greater than left and right)
                int minh = heights[i];
                for (int j = i; j >= 0; --j) {
                    minh = min(minh, heights[j]);
                    res = max(res, minh * (i - j + 1));
                }
            }
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
16 ms beat 94% c++ solution
    class Solution {
    public:
        int largestRectangleArea(vector<int>& heights) {
            int n = heights.size(),Area=0;
            vector<int> left(n,0),right(n,0);
            for(int i=1;i<n;i++){ 
                int j = i-1;
                while(j>=0 && heights[i]<=heights[j]){
                    j -= (left[j]+1);
                }
                left[i] = i-j-1;  //starts from i, how far the rectangle can go toward left
            }
            for(int i=n-2;i>=0;i--){
                int j=i+1;
                while(j<n && heights[i]<=heights[j]){
                    j += (right[j]+1);
                }
                right[i] = j-i-1; //starts from i, how far the rectangle can go toward right
            }
            for(int i=0;i<n;i++) Area = max(Area,heights[i]*(right[i]+1+left[i])); //Bottom: left[i]+right[i]+1
            return Area;
        }
    };

----------------------------------------------------------------------------------------------------
My 16ms C++ O(n) code without a stack
Basically, I find the range (left[i], right[i]) within which the height of every element is at least height[i]. For each i, there is a rectangular with area height[i] * (right[i]-left[i]+1), and the largest area must be one of them. Then run all i to find the largest area. Please notice it takes O(n) time to fill left[i] and right[i] if we use DP. We can use amortization analysis to find this out. If you think about the worst case for a certain i, if it takes k steps in the while loop to get left[i]. Then it means there are k indices (for each j update below) which only take 1 step each in the loop to find left item for these indices. Then the average number of steps of these k+1 indices is const. So it takes O(n) to fill left and right arrays.

    class Solution {
    public:
        int largestRectangleArea(vector<int>& height) {
            int N=height.size(), i, j, l, r, area=0, temp;
            if(N==0) return 0;
            vector<int> left(N), right(N);
            left[0]=0;  //fill left[i] in the for loop
            for(i=1; i<N; ++i){
                l=i;
                j=i-1;
                while(j>=0&&height[j]>=height[i]){   // amortization shows const steps for this loop
                    if(height[j]==height[i]){
                        l=left[j];
                        break;
                    }
                    l=left[j];
                    j=left[j]-1;
                }
                left[i]=l;
            }
            right[N-1]=N-1;  //fill right[i] in the for loop
            for(i=N-2; i>=0; --i){
                r=i;
                j=i+1;
                while(j<N && height[j]>=height[i]){ 
                    if(height[j]==height[i]){
                        r=right[j];
                        break;
                    }
                    r=right[j];
                    j=right[j]+1;
                }
                right[i]=r;
            }
            for(i=0; i<N; ++i){
                temp=height[i]*(right[i]-left[i]+1);
                if(temp>area) area = temp;
            }
            return area;
        }
    };

----------------------------------------------------------------------------------------------------
