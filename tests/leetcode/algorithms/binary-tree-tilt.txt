Two solutions and thoughts
class Codec:

    alphabet = string.ascii_letters + '0123456789'

    def __init__(self):
        self.url2code = {}
        self.code2url = {}

    def encode(self, longUrl):
        while longUrl not in self.url2code:
            code = ''.join(random.choice(Codec.alphabet) for _ in range(6))
            if code not in self.code2url:
                self.code2url[code] = longUrl
                self.url2code[longUrl] = code
        return 'http://tinyurl.com/' + self.url2code[longUrl]

    def decode(self, shortUrl):
        return self.code2url[shortUrl[-6:]]


----------------------------------------------------------------------------------------------------
A true stateless one in C++ (joke)
class Solution {
public:

    // Encodes a URL to a shortened URL.
    string encode(string longUrl) {
        return longUrl;
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) {
        return shortUrl;
    }
};


----------------------------------------------------------------------------------------------------
Easy solution in java, 5 line code.
public class Codec {
    List<String> urls = new ArrayList<String>();
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        urls.add(longUrl);
        return String.valueOf(urls.size()-1);
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        int index = Integer.valueOf(shortUrl);
        return (index<urls.size())?urls.get(index):"";
    }
}


----------------------------------------------------------------------------------------------------
C++ solution
public:
    string dict = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int id = 0;
    unordered_map<string,string> m;  //key is longURL, value is shortURL
    unordered_map<int, string> idm;  //key is id in DB, value is longURL
    // Encodes a URL to a shortened URL.
    string encode(string longUrl) {
        if(m.find(longUrl) != m.end())return m[longUrl];
        string res = "";
        id++;
        int count = id;
        while(count > 0)
        {
            res = dict[count%62] + res;
            count /= 62;
        }
        while(res.size() < 6)
        {
            res = "0" + res;
        }
        m[longUrl] = res;
        idm[id] = longUrl;
        return res;
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) {
        int id = 0;
        for(int i = 0; i < shortUrl.size(); i++)
        {
            id = 62*id + (int)(dict.find(shortUrl[i]));
        }
        if(idm.find(id) != idm.end())return idm[id];
        return "";
    }
};

// Your Solution object will be instantiated and called as such:
// Solution solution;
// solution.decode(solution.encode(url));

----------------------------------------------------------------------------------------------------
Three different approaches in java
public class Codec {
    Map<Integer, String> map = new HashMap<>();
    Random r=new Random();
    int key=r.nextInt(10000);
    public String encode(String longUrl) {
        while(map.containsKey(key))
            key= r.nextInt(10000);
        map.put(key,longUrl);
        return "http://tinyurl.com/"+key;
    }
    public String decode(String shortUrl) {
        return map.get(Integer.parseInt(shortUrl.replace("http://tinyurl.com/", "")));
    }
}


----------------------------------------------------------------------------------------------------
Can anyone help me to understand the question?
Note: Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.

----------------------------------------------------------------------------------------------------
Easy to Understand in Python
class Codec:
    import string
    letters = string.ascii_letters + string.digits
    full_tiny = {}
    tiny_full = {}
    global_counter = 0
    def encode(self, longUrl):
        """Encodes a URL to a shortened URL.
        
        :type longUrl: str
        :rtype: str
        """
        def decto62(dec):
            ans = ""
            while 1:
                ans = self.letters[dec % 62] + ans
                dec //= 62
                if not dec:
                    break
            return ans
                
        suffix = decto62(self.global_counter)
        if longUrl not in self.full_tiny:
            self.full_tiny[longUrl] = suffix
            self.tiny_full[suffix] = longUrl
            self.global_counter += 1
        return "http://tinyurl.com/" + suffix
        
        

    def decode(self, shortUrl):
        """Decodes a shortened URL to its original URL.
        
        :type shortUrl: str
        :rtype: str
        """
        idx = shortUrl.split('/')[-1]
        if idx in self.tiny_full:
            return self.tiny_full[idx]
        else:
            return None```

----------------------------------------------------------------------------------------------------
Javascript solution
let urls = {};

var encode = function(longUrl) {
    let uniqueKey = Date.now().toString(36);
    urls[uniqueKey] = longUrl;
    return "http://tinyurl.com/" + uniqueKey;
};

var decode = function(shortUrl) {
    return urls[shortUrl.split("com/")[1]];
};


----------------------------------------------------------------------------------------------------
Simple 4 lines in Java, 6ms
public class Codec {
    // Encodes a URL to a shortened URL.
    HashMap<String, String> map = new HashMap<String, String>();
    
    public String encode(String longUrl) {
        map.put(Integer.toString(map.size()), longUrl);
        return Integer.toString(map.size() - 1);
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return map.get(String.valueOf(shortUrl));
    }
}



----------------------------------------------------------------------------------------------------
Complete C++ solution with base62 conversions.
class Solution {
    vector<string> indexEncodes; 
    const string base = "http://tinyurl.com/";
    
    public:
    char map62(int x) {
        if(x < 10) return (char)('0' + x);
        else if(x < 36) return (char)(x + 'a' - 10);
        else return (char)(x + 'A' - 36);
    }
    
    int rev62(char c) {
        if(c >= '0' && c <= '9') return (c - '0');
        else if(c >= 'a' && c <= 'z') return (c - 'a' + 10);
        else if(c >= 'A' && c <= 'Z') return (c - 'A' + 36);
    }
    
    string encode62(int x){
        string res;
        while(x) {
            int rem = x % 62;
            res += map62(rem);
            x /= 62;
        }
        return res;
    }
    
    int decode62(string s) {
        int x = 0;
        for(int i = s.size() - 1; i >= 0; i--) {
            x *= 62;
            x += rev62(s[i]);
        }
        return x;
    }

    string encode(string longUrl) {
        indexEncodes.push_back(longUrl);
        return base + encode62(indexEncodes.size() - 1);
    }

    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) {
        return indexEncodes[decode62(shortUrl.substr(19))];
    }
};

// Your Solution object will be instantiated and called as such:
// Solution solution;
// solution.decode(solution.encode(url));


----------------------------------------------------------------------------------------------------
Straight forward accepted Java Solution
[[topic:post_is_deleted]]

----------------------------------------------------------------------------------------------------
maybe Base64?
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Codec {
    public String encode(String longUrl) {
        return Base64.getUrlEncoder().encodeToString(longUrl.getBytes(StandardCharsets.UTF_8));
    }

    public String decode(String shortUrl) {
        return new String(Base64.getUrlDecoder().decode(shortUrl));
    }
}


----------------------------------------------------------------------------------------------------
Accepted Python Solution(152ms)
import random

class Codec:
    STRING = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    map = {}

    def encode(self, longUrl):
        tag = self.gen_tag()
        self.map[tag] = longUrl
        return "http://tinyurl.com/" + tag

    def gen_tag(self):
        tag = self.gen_random_str()
        while self.map.has_key(tag):
            tag = self.gen_random_str()
        return tag

    def gen_random_str(self):
        result = ""
        for i in xrange(6):
            result += self.STRING[random.randint(0,61)]
        return result

    def decode(self, shortUrl):
        return self.map[shortUrl[-6:]]


----------------------------------------------------------------------------------------------------
Python Solution
class Codec:
    def __init__(self):
        self.d = {}
        self.r = {}

    def encode(self, longUrl):
        self.d[longUrl] = longUrl.__hash__()
        self.r[longUrl.__hash__()] = longUrl
        return longUrl.__hash__()

    def decode(self, shortUrl):
        return self.r[shortUrl]


----------------------------------------------------------------------------------------------------
Directly return the given String got passed and beat 90%+
// Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        return longUrl;
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return shortUrl;
    } 


----------------------------------------------------------------------------------------------------
Python Solution with comments 45ms
import random
import string

class Codec:
    def __init__(self):
        self.url_pair = {}

    def encode(self, longUrl):
        """Encodes a URL to a shortened URL."""
        # Get a set of characters that will make up the suffix
        suffix_set = string.ascii_letters + string.digits

        # Make a tinyurl template
        tiny_url = "http://tinyurl.com/".join(random.choice(suffix_set) for _ in range(6))
        
        # Store the pair in the dictionary
        self.url_pair[tiny_url] = longUrl

        return tiny_url

    def decode(self, shortUrl):
        """Decodes the shortened URL to its original URL."""
        # Return the value from a given key from the dictionary
        return self.url_pair.get(shortUrl)


----------------------------------------------------------------------------------------------------
C++ sol base62 (no randomness)
string index2ShortBase62(int num) const {
    string ret;
    while(ret.length()!=6) {
        ret += candidate[num%62];
        num /= 62;
    }
    return ret;
}


----------------------------------------------------------------------------------------------------
HAHA,JavaScript...... : )
var encode = function(longUrl) {
    return longUrl;
};

var decode = function(shortUrl) {
    return shortUrl;
};


----------------------------------------------------------------------------------------------------
Four lines,boring solution
public class Codec {

    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        int i = longUrl.indexOf(":");
        return longUrl.substring(0,i)+longUrl.substring(i+2);
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        int i = shortUrl.indexOf("/");
        return shortUrl.substring(0,i)+ ":/"+shortUrl.substring(i);
    }
}


----------------------------------------------------------------------------------------------------
Regular Java Solution with Random 6 Long Char
// Encodes a URL to a shortened URL.
public String encode(String longUrl) {
    String tiny = getTiny();
    //generate the permutation.
    while(tiny2longMap.containsKey(tiny)) {
        tiny = getTiny();
    }

    long2tinyMap.put(longUrl, tiny);
    tiny2longMap.put(tiny, longUrl);
    return tiny;
}

// Decodes a shortened URL to its original URL.
public String decode(String shortUrl) {
    String longurl = tiny2longMap.get(shortUrl);
    return longurl;
}

private String getTiny() {
    Random random = new Random();
    char[] tinyArray = new char[6];
    for(int i = 0; i < 6; i++) {
        tinyArray[i] = str.charAt(random.nextInt(26));
    }
    return new String(tinyArray);
}


----------------------------------------------------------------------------------------------------
