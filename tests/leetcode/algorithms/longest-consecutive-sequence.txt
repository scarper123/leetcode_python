Concise O(N^2) Java solution
Hi guys!

The idea is to sort an input array and then run through all indices of a possible first element of a triplet. For each possible first element we make a standard bi-directional 2Sum sweep of the remaining part of the array. Also we want to skip equal elements to avoid duplicates in the answer without making a set or smth like that.   

    public List<List<Integer>> threeSum(int[] num) {
        Arrays.sort(num);
        List<List<Integer>> res = new LinkedList<>(); 
        for (int i = 0; i < num.length-2; i++) {
            if (i == 0 || (i > 0 && num[i] != num[i-1])) {
                int lo = i+1, hi = num.length-1, sum = 0 - num[i];
                while (lo < hi) {
                    if (num[lo] + num[hi] == sum) {
                        res.add(Arrays.asList(num[i], num[lo], num[hi]));
                        while (lo < hi && num[lo] == num[lo+1]) lo++;
                        while (lo < hi && num[hi] == num[hi-1]) hi--;
                        lo++; hi--;
                    } else if (num[lo] + num[hi] < sum) lo++;
                    else hi--;
               }
            }
        }
        return res;
    }

Have a nice coding!

----------------------------------------------------------------------------------------------------
Share my AC C++ solution, around 50ms, O(N*N), with explanation and comments
the key idea is the same as the `TwoSum` problem. When we fix the `1st` number, the `2nd` and `3rd` number can be found following the same reasoning as `TwoSum`. 

The only difference is that, the `TwoSum` problem of LEETCODE has a unique solution. However, in `ThreeSum`, we have multiple duplicate solutions that can be found. Most of the OLE errors happened here because you could've ended up with a solution with so many duplicates.

The naive solution for the duplicates will be using the STL methods like below :


    std::sort(res.begin(), res.end());
    res.erase(unique(res.begin(), res.end()), res.end());


But according to my submissions, this way will cause you double your time consuming almostly.

A better approach is that, to jump over the number which has been scanned, no matter it is part of some solution or not.

If the three numbers formed a solution, we can safely ignore all the duplicates of them.

We can do this to all the three numbers such that we can remove the duplicates. 

Here's my AC C++ Code:


    vector<vector<int> > threeSum(vector<int> &num) {
        
        vector<vector<int> > res;

        std::sort(num.begin(), num.end());

        for (int i = 0; i < num.size(); i++) {
            
            int target = -num[i];
            int front = i + 1;
            int back = num.size() - 1;

            while (front < back) {

                int sum = num[front] + num[back];
                
                // Finding answer which start from number num[i]
                if (sum < target)
                    front++;

                else if (sum > target)
                    back--;

                else {
                    vector<int> triplet(3, 0);
                    triplet[0] = num[i];
                    triplet[1] = num[front];
                    triplet[2] = num[back];
                    res.push_back(triplet);
                    
                    // Processing duplicates of Number 2
                    // Rolling the front pointer to the next different number forwards
                    while (front < back && num[front] == triplet[1]) front++;

                    // Processing duplicates of Number 3
                    // Rolling the back pointer to the next different number backwards
                    while (front < back && num[back] == triplet[2]) rear--;
                }
                
            }

            // Processing duplicates of Number 1
            while (i + 1 < num.size() && num[i + 1] == num[i]) 
                i++;

        }
        
        return res;
        
    }

----------------------------------------------------------------------------------------------------
Easiest Java Solution
Sort the array, iterate through the list, and use another two pointers to approach the target. Runtime: `7ms`
  
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums == null || nums.length < 3) return result;
        Arrays.sort(nums);
    
        int len = nums.length;
        for(int i = 0; i < len; i++) {
            if(i > 0 && nums[i] == nums[i - 1]) continue;        // Skip same results
            int target = 0 - nums[i];
            int j = i + 1, k = len - 1;
            while(j < k) {
                if(nums[j] + nums[k] == target) {
                    result.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    while(j < k && nums[j] == nums[j + 1]) j++;  // Skip same results
                    while(j < k && nums[k] == nums[k - 1]) k--;  // Skip same results
                    j++; k--;
                } else if(nums[j] + nums[k] < target) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
Python easy to understand solution (O(n*n) time).
        
    def threeSum(self, nums):
        res = []
        nums.sort()
        for i in xrange(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            l, r = i+1, len(nums)-1
            while l < r:
                s = nums[i] + nums[l] + nums[r]
                if s < 0:
                    l +=1 
                elif s > 0:
                    r -= 1
                else:
                    res.append((nums[i], nums[l], nums[r]))
                    while l < r and nums[l] == nums[l+1]:
                        l += 1
                    while l < r and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1; r -= 1
        return res

----------------------------------------------------------------------------------------------------
Share my simple java solution
    public class Solution {
        public List<List<Integer>> threeSum(int[] nums) {
            List<List<Integer>> result = new ArrayList<>();
            if(nums.length < 3) return result;
            Arrays.sort(nums);
            int i = 0;
            while(i < nums.length - 2) {
                if(nums[i] > 0) break;
                int j = i + 1;
                int k = nums.length - 1;
                while(j < k) {
                    int sum = nums[i] + nums[j] + nums[k];
                    if(sum == 0) result.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    if(sum <= 0) while(nums[j] == nums[++j] && j < k);
                    if(sum >= 0) while(nums[k--] == nums[k] && j < k);
                }
                while(nums[i] == nums[++i] && i < nums.length - 2);
            }
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
Simple O(n^2) two pointers Java solution
**Runtime = O(n^2); Space = O(1)**

    public List<List<Integer>> threeSum(int[] A) {
    	List<List<Integer>>res = new ArrayList<List<Integer>>();
    	if (A == null || A.length == 0)
    		return res;
    	Arrays.sort(A);
    	for (int i = 0; i < A.length; i++) {
    		if (i - 1 >= 0 && A[i] == A[i - 1]) continue;// Skip equal elements to avoid duplicates
    		  
    		int left = i + 1, right = A.length - 1; 
    		while (left < right) {// Two Pointers
    			int sum = A[i] + A[left] + A[right];
    			if (sum == 0) { 
    				res.add(Arrays.asList(A[i], A[left], A[right]));
    				while (left + 1 < right && A[left] == A[left+1])// Skip equal elements to avoid duplicates
    					left++;
    				while (right -1 > left && A[right] == A[right-1])// Skip equal elements to avoid duplicates
    					right--;
    				left++; 
    				right--;
    			} else if (sum < 0) { 
    				left++;
    			} else {
    				right--;
    			}
    		}
    	}
    	return res;
    }

----------------------------------------------------------------------------------------------------
~20 lines. 68ms. c++ solution. Used two pointers similar to 2sum
    vector<vector<int> > threeSum(vector<int>& nums) {
        if(nums.size() <=2) return {};
        vector<vector<int> > rtn;
        sort(nums.begin(), nums.end());
        
        for(int i =0; i < nums.size();){
            int start = i+1, end = nums.size()-1;
    
            while(start < end){
                if(nums[i]+nums[start]+nums[end] == 0){
                    rtn.push_back({nums[i],nums[start],nums[end]});
                    start++;
                    end--;
                    while((start < end) && nums[start] == nums[start-1]) start++;
                    while((start < end) && nums[end] == nums[end+1]) end--;
    
                }else if(nums[i]+nums[start]+nums[end]<0){
                    start++;
                    while((start < end) && nums[start] == nums[start-1]) start++;
                }else{
                    end--;
                    while((start < end) && nums[end] == nums[end+1]) end--;
                }
            }
            
            i++;
            while((i < nums.size()) && nums[i] == nums[i-1])
                i++;
            
        }
        return rtn;
    }

Thanks to my friend Yang Li inspired me of using two pointers

----------------------------------------------------------------------------------------------------
Simple Java Solution - Without using Hash&#x2F;Set
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        for(int i = 0; i < nums.length-2; i++) {
            if(i > 0 && (nums[i] == nums[i-1])) continue; // avoid duplicates
            for(int j = i+1, k = nums.length-1; j<k;) {
                if(nums[i] + nums[j] + nums[k] == 0) {
                    list.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    j++;k--;
                    while((j < k) && (nums[j] == nums[j-1]))j++;// avoid duplicates
                    while((j < k) && (nums[k] == nums[k+1]))k--;// avoid duplicates
                }else if(nums[i] + nums[j] + nums[k] > 0) k--;
                else j++;
            }
        }
        return list;
    }

----------------------------------------------------------------------------------------------------
C++ two-pointes solution (easy way to handle duplicaiton).
        
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        for (unsigned int i=0; i<nums.size(); i++) {
            if ((i>0) && (nums[i]==nums[i-1]))
                continue;
            int l = i+1, r = nums.size()-1;
            while (l<r) {
                int s = nums[i]+nums[l]+nums[r];
                if (s>0) r--;
                else if (s<0) l++;
                else {
                    res.push_back(vector<int> {nums[i], nums[l], nums[r]});
                    while (nums[l]==nums[l+1]) l++;
                    while (nums[r]==nums[r-1]) r--;
                    l++; r--;
                }
            }
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
My accepted O(n^2) solution without hashmap
    public class Solution {
        
        int a, b, c;
        List<List<Integer>> result = new ArrayList();
    
        public List<List<Integer>> threeSum(int[] num) {
            Arrays.sort(num);
            
            for (int i = 0 ; i <= num.length - 3; i++) {
                a = num[i];
                for (int j = i+1, k = num.length - 1; j < k;) {
                    b = num[j];
                    c = num[k];
                    if (b + c == -1*a) {
                        List list = new ArrayList<Integer>();
                        list.add(a);
                        list.add(b);
                        list.add(c);
                        result.add(list);
                        j++;
                        k--;
                    } else if (b + c < -1*a) {
                        j++;
                    } else {
                        k--;
                    }
                }
            }
            
            // remove duplicated items.
            for (int i = result.size() - 1; i >= 1; i--) {
                for (int j = i-1; j >= 0; j--) {
                    if (result.get(i).get(0) == result.get(j).get(0)
                        && result.get(i).get(1) == result.get(j).get(1)
                        && result.get(i).get(2) == result.get(j).get(2)) {
                        result.remove(j);
                        i--;
                    }
                }
            }
            return result;
        }
    
    }

----------------------------------------------------------------------------------------------------
Any solution which is better than O(n^2) exists?
For example, nlog(n)? since we have sort the array, it seems like we might able to do better.

----------------------------------------------------------------------------------------------------
Why Java became so fast on Leetcode now?
I wrote the same solution for this problem in C++ and Java and the C++ version takes 50ms while Java only 7ms.

Java is also the fastest in the distribution chart, even faster than C.
I wonder if Jave code is compiled to native code on Leetcode?

Any ideas?

Thanks,
Yunzhu


----------------------------------------------------------------------------------------------------
Straight forward Python AC O(n^2) solution with decent explanation
    class Solution:
        # @param {integer[]} nums
        # @return {integer[][]}
        def threeSum(self, nums):
            if len(nums) <3: # deal with special input
                return []
            elif len(nums) == 3:
                if sum(nums) == 0:
                    return [sorted(nums)]
    
    
            nums = sorted(nums) # sorted, O(nlgn)
            ans = []
    
            for i in range(len(nums) -2):
                j = i+1
                k = len(nums) -1 # hence i < j < k
    
                while j<k: # if not cross line
                    temp_sum = nums[i] + nums[j] + nums[k]
                    if temp_sum == 0:
                        ans.append((nums[i], nums[j], nums[k]))
    
                    if temp_sum > 0: # which means we need smaller sum, move k backward, remember we sort the array
                        k -= 1
                    else:
                        j += 1
    
            return list(set(tuple(ans))) # I bet this is not the best way to eliminate duplicate solutions

----------------------------------------------------------------------------------------------------
A C++ implementation, O(n^2) around 52ms
    vector<vector<int>> threeSum(vector<int>& nums)
        {
            if (nums.size() < 3)
                return {};
            
            sort(nums.begin(), nums.end());
            vector<vector<int>> result;
            int k = 0;
    
            // not necessary to check positive integers
            while (k < nums.size() && nums[k] <= 0)
            {
                int i = k + 1;
                int j = nums.size() - 1;
                
                while (i < j)
                {
                    int sum = nums[i] + nums[j];
                    if (sum < -nums[k])
                    {
                        i++;
                        while (i < j && nums[i] == nums[i-1]) i++; // remove duplicates
                    }
                    else if (sum > -nums[k])
                    {
                        j--;
                        while (i < j && nums[j] == nums[j+1]) j--;
                    }
                    else
                    {
                        result.push_back({nums[k], nums[i], nums[j]});
                        i++;
                        while (i < j && nums[i] == nums[i-1]) i++;
                        j--;
                        while (i < j && nums[j] == nums[j+1]) j--;
                    }
                }
                
                k++;
                while (k < i && nums[k] == nums[k-1]) k++;
            }
            
            return result;
        }

----------------------------------------------------------------------------------------------------
My O(n^2) AC code
