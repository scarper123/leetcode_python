Preorder, Inorder, and Postorder Iteratively Summarization
Here I summarize the iterative implementation for preorder, inorder, and postorder traverse.

<hr>
<h3>Pre Order Traverse</h3>
<hr>

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        TreeNode p = root;
        while(!stack.isEmpty() || p != null) {
            if(p != null) {
                stack.push(p);
                result.add(p.val);  // Add before going to children
                p = p.left;
            } else {
                TreeNode node = stack.pop();
                p = node.right;   
            }
        }
        return result;
    }

<hr>
<h3>In Order Traverse</h3>
<hr>

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        TreeNode p = root;
        while(!stack.isEmpty() || p != null) {
            if(p != null) {
                stack.push(p);
                p = p.left;
            } else {
                TreeNode node = stack.pop();
                result.add(node.val);  // Add after all left children
                p = node.right;   
            }
        }
        return result;
    }

<hr>
<h3>Post Order Traverse</h3>
<hr>

    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> result = new LinkedList<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        TreeNode p = root;
        while(!stack.isEmpty() || p != null) {
            if(p != null) {
                stack.push(p);
                result.addFirst(p.val);  // Reverse the process of preorder
                p = p.right;             // Reverse the process of preorder
            } else {
                TreeNode node = stack.pop();
                p = node.left;           // Reverse the process of preorder
            }
        }
        return result;
    }

----------------------------------------------------------------------------------------------------
My Accepted code with explaination. Does anyone have a better idea?
pre-order traversal is **root-left-right**, and post order is **left-right-root**. modify the code for pre-order to make it root-right-left, and then  **reverse** the output so that we can get left-right-root .


 1. Create an empty stack, Push root node to the stack.
 2. Do following while stack is not empty.

 2.1. pop an item from the stack and print it.
 
 2.2. push the left child of popped item to stack.

 2.3. push the right child of popped item to stack.

 3. reverse the ouput.

        class Solution {
        public:
            vector<int> postorderTraversal(TreeNode *root) {
                stack<TreeNode*> nodeStack;
                vector<int> result;
                //base case
                if(root==NULL)
                return result;
                nodeStack.push(root);
            while(!nodeStack.empty())
            {
                TreeNode* node= nodeStack.top();  
                result.push_back(node->val);
                nodeStack.pop();
                if(node->left)
                nodeStack.push(node->left);
                if(node->right)
                nodeStack.push(node->right);
            }
             reverse(result.begin(),result.end());
             return result;
            
        }
    };



----------------------------------------------------------------------------------------------------
A very concise solution
i have saw lots of post in this discussion, but most of them are not concise, just share mine for your  reference, writing a concise code is very important
  
    vector<int> postorderTraversal(TreeNode *root) {
        vector<int> v;
        if (!root) return v;
        
        stack<TreeNode *> s;
        s.push(root);
        
        TreeNode *p = NULL;
        while(!s.empty()) {
            p = s.top();
            s.pop();
            v.insert(v.begin(), p->val);
            if (p->left) s.push(p->left);
            if (p->right) s.push(p->right);
        }
        
        return v;
    }

----------------------------------------------------------------------------------------------------
0 ms Clear C++ solutions --- iterative, recursive, Morris traversal (3 different solutions!)
Hi, this is a fundamental and yet classic problem. I share my three solutions here:

 1. Iterative solution using stack --- `O(n)` time and `O(n)` space;
 2. Recursive solution --- `O(n)` time and `O(n)` space (considering the spaces of function call stack);
 3. **Morris traversal --- `O(n)` time and `O(1)` space!!!**

Iterative solution using stack:

    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> nodes;
        stack<TreeNode*> toVisit;
        TreeNode* curNode = root;
        TreeNode* lastNode = NULL;
        while (curNode || !toVisit.empty()) {
            if (curNode) {
                toVisit.push(curNode);
                curNode = curNode -> left;
            }
            else {
                TreeNode* topNode = toVisit.top();
                if (topNode -> right && lastNode != topNode -> right)
                    curNode = topNode -> right;
                else {
                    nodes.push_back(topNode -> val);
                    lastNode = topNode;
                    toVisit.pop();
                }
            }
        }
        return nodes;
    }

Recursive solution:

    void postorder(TreeNode* root, vector<int>& nodes) {
        if (!root) return; 
        postorder(root -> left, nodes);
        postorder(root -> right, nodes);
        nodes.push_back(root -> val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> nodes;
        postorder(root, nodes);
        return nodes;
    } 

Morris traversal:

    void reverseNodes(TreeNode* start, TreeNode* end) {
        if (start == end) return;
        TreeNode* x = start;
        TreeNode* y = start -> right;
        TreeNode* z;
        while (x != end) {
            z = y -> right;
            y -> right = x;
            x = y;
            y = z;
        }
    }
    void reverseAddNodes(TreeNode* start, TreeNode* end, vector<int>& nodes) {
        reverseNodes(start, end);
        TreeNode* node = end;
        while (true) {
            nodes.push_back(node -> val);
            if (node == start) break;
            node = node -> right;
        }
        reverseNodes(end, start);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> nodes;
        TreeNode* dump = new TreeNode(0);
        dump -> left = root;
        TreeNode* curNode = dump;
        while (curNode) {
            if (curNode -> left) {
                TreeNode* predecessor = curNode -> left;
                while (predecessor -> right && predecessor -> right != curNode)
                    predecessor = predecessor -> right;
                if (!(predecessor -> right)) {
                    predecessor -> right = curNode;
                    curNode = curNode -> left;
                }
                else {
                    reverseAddNodes(curNode -> left, predecessor, nodes);
                    predecessor -> right = NULL;
                    curNode = curNode -> right;
                }
            }
            else curNode = curNode -> right;
        }
        return nodes;
    }

----------------------------------------------------------------------------------------------------
Java simple and clean
    public List<Integer> postorderTraversal(TreeNode root) {
    	LinkedList<Integer> ans = new LinkedList<>();
    	Stack<TreeNode> stack = new Stack<>();
    	if (root == null) return ans;
    	
    	stack.push(root);
    	while (!stack.isEmpty()) {
    		TreeNode cur = stack.pop();
    		ans.addFirst(cur.val);
    		if (cur.left != null) {
    			stack.push(cur.left);
    		}
    		if (cur.right != null) {
    			stack.push(cur.right);
    		} 
    	}
    	return ans;
    }

----------------------------------------------------------------------------------------------------
Accepted tiny Java solution. Only left-hand children in stack.
Share my solution using stack and LinkedList.

Notes:

 1. In this code I push only left-hand children in to the stack.
 2. To store result I use LinkedList and addFirst() method of it.
     With such approuch we can save on reverce the result.

----------

    public List<Integer> postorderTraversal(TreeNode node) {
		LinkedList<Integer> result = new LinkedList<Integer>();
		Stack<TreeNode> leftChildren = new Stack<TreeNode>();
		while(node != null) {
			result.addFirst(node.val);
			if (node.left != null) {
				leftChildren.push(node.left);
			}
			node = node.right;
			if (node == null && !leftChildren.isEmpty()) {
				node = leftChildren.pop();
			}
		}
        return result;
    }

----------------------------------------------------------------------------------------------------
Share my two Python iterative solutions, post-order and modified preorder then reverse
The first is by postorder using a flag to indicate whether the node has been visited or not.

    class Solution:
        # @param {TreeNode} root
        # @return {integer[]}
        def postorderTraversal(self, root):
            traversal, stack = [], [(root, False)]
            while stack:
                node, visited = stack.pop()
                if node:
                    if visited:
                        # add to result if visited
                        traversal.append(node.val)
                    else:
                        # post-order
                        stack.append((node, True))
                        stack.append((node.right, False))
                        stack.append((node.left, False))
    
            return traversal

The 2nd uses modified preorder (right subtree first). Then reverse the result.

    class Solution:
        # @param {TreeNode} root
        # @return {integer[]}
        def postorderTraversal(self, root):
            traversal, stack = [], [root]
            while stack:
                node = stack.pop()
                if node:
                    # pre-order, right first
                    traversal.append(node.val)
                    stack.append(node.left)
                    stack.append(node.right)
    
            # reverse result
            return traversal[::-1]



----------------------------------------------------------------------------------------------------
Preorder, Inorder and Postorder Traversal Iterative Java Solution
Postorder traversal : [Binary Tree Postorder Traversal][1]

    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root == null) return list;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.empty()){
            root = stack.pop();
            list.add(0, root.val);
            if(root.left != null) stack.push(root.left);
            if(root.right != null) stack.push(root.right);
        }
        return list;
    }


Preorder traversal : [Binary Tree Preorder Traversal][2]

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root == null) return list;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.empty()){
            root = stack.pop();
            list.add(root.val);
            if(root.right != null) stack.push(root.right);
            if(root.left != null) stack.push(root.left);
        }
        return list;
    }


Inorder traversal : [Binary Tree Inorder Traversal][3]

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root == null) return list;
        Stack<TreeNode> stack = new Stack<>();
        while(root != null || !stack.empty()){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            list.add(root.val);
            root = root.right;
        }
        return list;
    }


  [1]: https://leetcode.com/problems/binary-tree-postorder-traversal/
  [2]: https://leetcode.com/problems/binary-tree-preorder-traversal/
  [3]: https://leetcode.com/problems/binary-tree-inorder-traversal/

----------------------------------------------------------------------------------------------------
Accepted -- Just a reversal of a modified Pre-order traversal
This is my accepted code. I found out that pre-order traversal is root-left-right, and post order is left-right-root. I modified the code for pre-order a little to make it root-right-left, and then reverse the output. I think others would have thought of it already, but anyways here's my code... 

    class Solution:
    # @param root, a tree node
    # @return a list of integers
    def postorderTraversal(self, root):
        traversalInt = list()
        if root!=None:
            traversal = list()
            traversal.append(root)
            
            while len(traversal)>0:
                probe = traversal[0]
                traversalInt.append(probe.val)
                traversal.remove(probe)
                if (probe.left != None):
                    traversal.insert(0,probe.left)
                if (probe.right != None):
                    traversal.insert(0,probe.right)
        return traversalInt[::-1]

----------------------------------------------------------------------------------------------------
Java solution using two stacks
    public List<Integer> postorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList<Integer>();
      
      if (root == null)
        return res;
          
      Stack<TreeNode> s1 = new Stack<TreeNode>();
      Stack<TreeNode> s2 = new Stack<TreeNode>();
      
      s1.push(root);
      
      while (!s1.isEmpty()) {
        TreeNode node = s1.pop();
        s2.push(node);
        
        if (node.left != null)
          s1.push(node.left);
        
        if (node.right != null)
          s1.push(node.right);
      }
      
      while (!s2.isEmpty())
        res.add(s2.pop().val);
      
      return res;
    }

----------------------------------------------------------------------------------------------------
Iterative method to do three kinds of  traversal just like recursive method only changing one line code
For three different kinds of traversal, we only need to change the order of tuples in one line as we've done this in the recursive solution which is very decent and classical. Just put `(0, p[1])` in different position!

For post-order traversal:

    def postorderTraversal(self, root):
        res, stack = [], [(1, root)]
        while stack:
            p = stack.pop()
            if not p[1]: continue
            stack.extend([(0, p[1]), (1, p[1].right), (1, p[1].left)]) if p[0] != 0 else res.append(p[1].val)
        return res

For in-order traversal:

    def inorderTraversal(self, root):
        res, stack = [], [(1, root)]
        while stack:
            p = stack.pop()
            if not p[1]: continue
            stack.extend([(1, p[1].right), (0, p[1]), (1, p[1].left)]) if p[0] != 0 else res.append(p[1].val)
        return res


For pre-order traversal:

    def preorderTraversal(self, root):
        res, stack = [], [(1, root)]
        while stack:
            p = stack.pop()
            if not p[1]: continue
            stack.extend([(1, p[1].right), (1, p[1].left), (0, p[1])]) if p[0] != 0 else res.append(p[1].val)
        return res

----------------------------------------------------------------------------------------------------
My accepted code of  Binary Tree Postorder Traversal
**Method 1: Using one stack and will change the input data. Consume time 36 ms** 

    #include <iostream>
    #include <vector>
    #include <stack>
    using namespace std;
    
    class Solution {
    public:
        vector<int> postorderTraversal(TreeNode *root) {
            stack<TreeNode*> s;
    		vector<int> vec;
    		if(root == NULL)
    			return vec;
    
    		s.push(root);
    		while(!s.empty())
    		{
    			TreeNode* n = s.top();
    			if(n->right)
    				s.push(n->right);
    			if(n->left)
    				s.push(n->left);
    			n->left = NULL;
    			n->right = NULL;
    
    			n = s.top();
    			if(n->left == NULL && n->right == NULL)
    			{
    				vec.push_back(n->val);
    				s.pop();
    			}
    		}
    		return vec;
        }
    };

**Method 2: Using two stacks and do not change the input data. Consume time 8ms**

    #include <iostream>
    #include <vector>
    #include <stack>
    using namespace std;
    
    class Solution {
    public:
        vector<int> postorderTraversal(TreeNode *root) {
             stack<TreeNode*> s,out;
    		vector<int> vec;
    		if(root == NULL)
    			return vec;
    
    		s.push(root);
    		while(!s.empty())
    		{
    			TreeNode* node = s.top();
    			s.pop();
    			out.push(node);
    			if(node->left)
    				s.push(node->left);
    			if(node->right)
    				s.push(node->right);
    		}
    
    		while(!out.empty())
    		{
    			vec.push_back(out.top()->val);
    			out.pop();
    		}
    		return vec;
        }
    };

----------------------------------------------------------------------------------------------------
Sharing my implementation and looking for an even more concise one.
I have checked many implementations of iterative solutions to this problem; many of them seem to be rather verbose. After some investigations, I have come up with this following solution:

    vector<int> postorderTraversal(TreeNode *root) {
        stack<TreeNode*> s;
        TreeNode* cur = root;
        vector<int> temp;
        while(true)
        {
            if (cur == NULL)  // If the current branch is finished, then go back to the most recent unvisited branch
            {
                if (!s.empty()) {cur = s.top(); s.pop(); continue;} // Checked the first unvisited branch
                else break;
            }
            temp.push_back(cur->val); // Add the current value to the FRONT of list
            s.push(cur->left);         // Push the left child to the stack
            cur = cur->right;          // Go the right child
        }
        // Don't forget to reverse the 'right-to-left' pre-order traversal!
        return vector<int>(temp.rbegin(), temp.rend()); 
    }

The idea is to exploit the fact that Post-order Traversal is equivalent to the REVERSE of a 'right-to-left' (i.e. traverse the right children then the left ones) pre-order traversal. For example, for the following tree:

           A
          / \
         B   C
        / \
       D   E

post-order: D E B C A

'right-to-left' pre-order: A C B E D 

As for the pre-order traversal, we initialize the current node to the root. Then we keep adding the value of the current node to the traversal list, and then push its left child to a stack, and set its right child as the current node. That way, each element in the stack represents the root of a branch that we should visit at later time, with the top element being the first one that we visit as soon as we get the chance to.

If we find the current node is NULL, it means we have reached the end of a branch, then we should visit a new branch beginning at the top of the stack. If the top element of the stack is also NULL, it means this branch does not contain anything, then we should pop it out, then check the new top element until it is no longer NULL. If the stack turns empty before we find a non-NULL node in it, then we have visited all the nodes in the tree.
 
And it boils down to this simple iterative rule:

------------

In each iteration

1. If the current node is not NULL, then 

  A) add its value to the traversal list, and 

  B) push its LEFT child to stack, and 

  C) go to its RIGHT child. 

2. If the current node is NULL, then set the current node to the top of the stack (terminate if the stack is already empty).

-------------

 Implementation-wise, this is the most concise solution I have come up so far. And the code can be applied almost directly to a similar problem ('Binary Tree Pre-Order Traversal') with little modification. 
I really would like to know if there is any better algorithm that would result in an even more concise implementation than this one. Any comments/suggestions are welcome! 

----------------------------------------------------------------------------------------------------
A Java Simple Solution Based on Preorder Traversal
Postorder traversal, which is in Left-Right-Root order. We can observe that the preorder traversal is in Root-Left-Right order, which means if we swap the order of left and right subtree when pushing into stack, we'll get Root-Right-Left, a new traversal.

It is just the opposite way of postorder one. And that's why the following code works.

    public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> result = new LinkedList<Integer>();
        if(root == null) return result;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        
        while(!stack.isEmpty()){
            root = stack.pop();
            result.addFirst(root.val);
            if(root.left != null){
                stack.push(root.left);
            }
            if(root.right != null){
                stack.push(root.right);
            }
        }
        
        return result;
    }
}

----------------------------------------------------------------------------------------------------
A real Postorder Traversal .without reverse or insert, 4ms
    class Solution {
    public:
        vector<int> postorderTraversal(TreeNode *root) {
            vector<int> ret;
            if(!root) return ret;
            stack<TreeNode*> st;
            st.push(root);
            st.push(root);
            TreeNode *cur;
            while(!st.empty()){
                cur = st.top();
                st.pop();
                if(!st.empty()&&st.top() == cur){
                    if(cur->right) {
                        st.push(cur->right);
                        st.push(cur->right);
                    }
                    if(cur->left){
                        st.push(cur->left);
                        st.push(cur->left);
                    }
                }
                else
                    ret.push_back(cur->val);
            }
            return ret;
        }
    };

----------------------------------------------------------------------------------------------------
Summary of preorder, inorder, postorder, four traversal ways for each
There are four traversal ways for each included recursive, iterative and morris traversal.

**Recursive Way**
    
    # preorder
    class Solution(object):
        def preorderTraversal(self, root):
            return ([root.val] + sum(map(self.preorderTraversal, (root.left, root.right)), [])) if root else []
    
    # inorder
    class Solution(object):
        def inorderTraversal(self, root):
            if not root:
                return []
            
            left, right = map(self.inorderTraversal, (root.left, root.right))
            return left + [root.val] + right
    
    # postorder
    class Solution(object):
        def postorderTraversal(self, root):
            return (sum(map(self.postorderTraversal, (root.left, root.right)), []) + [root.val]) if root else []

**Iterative Way With Stack + Visited State**
    
    # preorder
    class Solution(object):
        def preorderTraversal(self, root):
            if not root:
                return []
    
            stack, r = [[root, 0]], []
            while stack:
                top = stack[-1]
    
                if top[1]:
                    stack.pop()
                    if top[0].right:
                        stack.append([top[0].right, 0])
                else:
                    r.append(top[0].val)
                    top[1] = 1
    
                    if top[0].left:
                        stack.append([top[0].left, 0])
            return r
 
    # inorder
    class Solution(object):
        def inorderTraversal(self, root):
            if not root:
                return []
    
            stack, r, poped = [[root, 0]], [], False
            while stack:
                top = stack[-1]
    
                if top[1]:
                    stack.pop()
                    poped = True
    
                    if top[0].right:
                        stack.append([top[0].right, 0])
                        poped = False
    
                elif top[0].left and not poped:
                    stack.append([top[0].left, 0])
                else:
                    r.append(top[0].val)
                    top[1] = 1
            return r
    
    # postorder
    class Solution(object):
        def postorderTraversal(self, root):
            if not root:
                return []
    
            stack, r = [[root, 0]], []
            while stack:
                top = stack[-1]
    
                if top[1]:
                    stack.pop()
                    if top[0].left:
                        stack.append([top[0].left, 0])
                else:
                    r.append(top[0].val)
                    top[1] = 1
    
                    if top[0].right:
                        stack.append([top[0].right, 0])
    
            return r[::-1]

**Iterative Way With Stack**

This way was inspired by [Preorder, Inorder, and Postorder Iteratively Summarization][1]
    
    # preorder
    class Solution(object):
        def preorderTraversal(self, root):
            stack, r = [], []
            while stack or root:
                if root:
                    stack.append(root)
                    r.append(root.val)
                    root = root.left
                else:
                    root = stack.pop().right
            return r

    # inorder
    class Solution(object):
        def inorderTraversal(self, root):
            stack, r = [], []
            while stack or root:
                if root:
                    stack.append(root)
                    root = root.left
                else:
                    root = stack.pop()
                    r.append(root.val)
                    root = root.right
            return r

    # postorder
    class Solution(object):
        def postorderTraversal(self, root):
            stack, r = [], []
            while stack or root:
                if root:
                    r.append(root.val)
                    stack.append(root)
                    root = root.right
                else:
                    root = stack.pop().left
    
            return r[::-1]

**Morris Traversal Way**
    
    # preorder
    class Solution(object):
        def preorderTraversal(self, root):
            r = []
            while root:
                if not root.left:
                    r.append(root.val)
                    root = root.right
                else:
                    pre = root.left
                    while pre.right and pre.right != root:
                        pre = pre.right
    
                    if not pre.right:
                        r.append(root.val)
                        pre.right = root
                        root = root.left
                    else:
                        root = root.right
            return r

    # inorder
    class Solution(object):
        def inorderTraversal(self, root):
            r = []
            while root:
                if not root.left:
                    r.append(root.val)
                    root = root.right
                else:
                    pre = root.left
                    while pre.right and pre.right != root:
                        pre = pre.right
    
                    if not pre.right:
                        pre.right = root
                        root = root.left
                    else:
                        r.append(root.val)
                        root = root.right
            return r

    # postorder
    class Solution(object):
        def postorderTraversal(self, root):
            r = []
            while root:
                if not root.right:
                    r.append(root.val)
                    root = root.left
                else:
                    next = root.right
                    while next.left and next.left != root:
                        next = next.left
    
                    if not next.left:
                        r.append(root.val)
                        next.left = root
                        root = root.right
                    else:
                        root = root.left
            return r[::-1]

  [1]: https://leetcode.com/discuss/71943/preorder-inorder-and-postorder-iteratively-summarization








----------------------------------------------------------------------------------------------------
An extremly straightforward way to write iterative code from recursions (for dummies)
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        stack<TreeNode *> varStack;
        stack<int> PCStack;
        vector<int> result;
        if (!root) return result;
        varStack.push(root);
        PCStack.push(0);
        while (!varStack.empty()) {
            TreeNode * cur = varStack.top();
            int pc = PCStack.top();
            PCStack.top()++;
            if (pc == 0) {
                // line 0: if (cur->left) recursion(cur->left); 
                if (cur->left) {
                    varStack.push(cur->left);
                    PCStack.push(0);
                }
            }
            else if (pc == 1) {
                // line 1: if (cur->right) recursion(cur->right); 
                if (cur->right) {
                    varStack.push(cur->right);
                    PCStack.push(0);
                }
            }
            else if (pc == 2) {
                // line 2: result.push_back(cur->val);
                result.push_back(cur->val);
            }
            else if (pc == 3) {
                // line 3: return
                varStack.pop();
                PCStack.pop();
            }
        }
        return result;
    }
};


----------------------------------------------------------------------------------------------------
My accepted JAVA solution
Straightforward thought:
You will meet a node three times from a stack.
For the first time, push the left. The second time, push the right, The third time you meet it, move it to result.

	class TreeNodeStack {
		TreeNode node;
		int count;

		TreeNodeStack(TreeNode node) {
			this.node = node;
		}
	}

	public List<Integer> postorderTraversal(TreeNode root) {
		List<Integer> result = new ArrayList<Integer>();
		Deque<TreeNodeStack> stack = new ArrayDeque<TreeNodeStack>();
		stack.add(new TreeNodeStack(root));
		while (stack.size() > 0) {
			TreeNodeStack s = stack.peekLast();
			s.count++;
			if (s.node == null) {
				stack.pollLast();
			}
			else if(s.count==1){
				stack.add(new TreeNodeStack(s.node.left));
			}
			else if(s.count==2){
				stack.add(new TreeNodeStack(s.node.right));
			}
			else if (s.count == 3) {
				stack.pollLast();
				result.add(s.node.val);
			}
		}
		return result;
	}

----------------------------------------------------------------------------------------------------
Share my easy understanding c++ solution 2ms
    //use a stack
    //stack pop order:root,right,left
    //reverse the result
    class Solution {
    public:
    	vector<int> postorderTraversal(TreeNode* root) {
    		vector<int> res;
    		stack<TreeNode*> tree;
    		TreeNode* tmp;
    		if(!root)
    			return res;
    		tree.push(root);
    		while(!tree.empty()){
    			tmp=tree.top();
    			tree.pop();
    			res.push_back(tmp->val);
    			if(tmp->left)
    				tree.push(tmp->left);
    			if(tmp->right)
    				tree.push(tmp->right);
    		}
    		reverse(res.begin(),res.end());
    		return res;
    	}	
    };

----------------------------------------------------------------------------------------------------
4ms c++ simple solution with explaination
    class Solution {
    public:
        void pushPathToLeftmostLeaf(TreeNode* n, stack<TreeNode*>& s) {
            while(n) {
                s.push(n);
                n = n->left != NULL ? n->left : n->right;
            }
        }
        // LOGIC: A good way to think about this would be 
        // think about the stack of the recursive solution
        // you just have to mimick that behaviour. :)
        vector<int> postorderTraversal(TreeNode *root) {
           stack<TreeNode*> s;
           pushPathToLeftmostLeaf(root, s);
           vector<int> result;
           while(!s.empty()) {
               TreeNode* cur  = s.top();
               s.pop();
               result.push_back(cur->val);
               TreeNode* next = s.empty() ? NULL : s.top();
               // check if the cur is the left child of next
               // if it is, then we are yet to explore the right child
               // of next
               if (next && next->left == cur) {
                   pushPathToLeftmostLeaf(next->right,s);
               }
           }
           return result;
        }
    };

----------------------------------------------------------------------------------------------------
