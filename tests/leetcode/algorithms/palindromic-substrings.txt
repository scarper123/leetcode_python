Python, Straightforward with Explanation
c == '2'

----------------------------------------------------------------------------------------------------
Java DP, O(n) time and O(1) space
public class Solution {
    public static int numDecodings(String s) {
        long[] res = new long[2];
        res[0] = ways(s.charAt(0));
        if(s.length() < 2) return (int)res[0];

        res[1] = res[0] * ways(s.charAt(1)) + ways(s.charAt(0), s.charAt(1));
        for(int j = 2; j < s.length(); j++) {
            long temp = res[1];
            res[1] = (res[1] * ways(s.charAt(j)) + res[0] * ways(s.charAt(j-1), s.charAt(j))) % 1000000007;
            res[0] = temp;
        }
        return  (int)res[1];
    }
    
    private static int ways(int ch) {
        if(ch == '*') return 9;
        if(ch == '0') return 0;
        return 1;
    }

    private static int ways(char ch1, char ch2) {
        String str = "" + ch1 + "" + ch2;
        if(ch1 != '*' && ch2 != '*') {
            if(Integer.parseInt(str) >= 10 && Integer.parseInt(str) <= 26)
                return 1;
        } else if(ch1 == '*' && ch2 == '*') {
            return 15;
        } else if(ch1 == '*') {
            if(Integer.parseInt(""+ch2) >= 0 && Integer.parseInt(""+ch2) <= 6)
                return 2;
            else
                return 1;
        } else {
            if(Integer.parseInt(""+ch1) == 1 ) {
                return 9;
            } else if(Integer.parseInt(""+ch1) == 2 ) {
                return 6;
            } 
        }
        return 0;
    }
}


----------------------------------------------------------------------------------------------------
C++, DP, O(n) time O(1) space
class Solution {
public:
    int numDecodings(string s) {
        int n = s.size(), p = 1000000007;
        // f2 is the answer to sub string ending at position i; Initially i = 0.
        long f1 = 1, f2 = helper(s.substr(0,1));
        // DP to get f2 for sub string ending at position n-1;
        for (int i = 1; i < n; i++) {
            long f3 = (f2*helper(s.substr(i, 1)))+(f1*helper(s.substr(i-1, 2)));
            f1 = f2;
            f2 = f3%p;
        }
        return f2;
    }
private:
    int helper(string s) {
        if (s.size() == 1) {
            if (s[0] == '*') return 9;
            return s[0] == '0'? 0:1;
        }
        // 11-26, except 20 because '*' is 1-9
        if (s == "**")  
            return 15;
        else if (s[1] =='*') {
            if (s[0] =='1') return 9;
            return s[0] == '2'? 6:0;
        }
        else if (s[0] == '*') 
            return s[1] <= '6'? 2:1;
        else 
            // if two digits, it has to be in [10 26]; no leading 0
            return stoi(s) >= 10 && stoi(s) <= 26? 1:0; 
    }
};


----------------------------------------------------------------------------------------------------
Java DP Solution O(n) time and space, Some Explanations
public int numDecodings(String s) {
    int len = s.length();
    int mod = 1000000007;
    long [] dp = new long[len + 1];
    dp[0] = 1;
    if (s.charAt(0) == '0') return 0;
    if (s.charAt(0) == '*'){
        dp[1] = 9;
    }
    else{
        dp[1] = 1;
    }
    for (int i = 2; i<=len; i++) { // i-1 the index of current character in s. 
        if (s.charAt(i-1) == '0') {
            if (s.charAt(i-2) == '1' || s.charAt(i -2) == '2') {
                dp[i] = dp[i-2];
            }
            else if(s.charAt(i-2) == '*'){
                dp[i] = 2*dp[i-2];
            }
            else {
                return 0;
            }
        }
        else if(s.charAt(i-1) >= '1' && s.charAt(i-1) <= '9') {
            dp[i] = dp[i-1];
            if (s.charAt(i-2) == '1' || (s.charAt(i-2) == '2' && s.charAt(i-1) <= '6') ){
                dp[i] = (dp[i] + dp[i-2]) % mod;
            }
            else if (s.charAt(i-2) == '*') {
                if (s.charAt (i-1) <= '6') {
                    dp[i] = (dp[i] + dp[i-2] * 2) % mod;
                }
                else {
                    dp[i] = (dp[i] + dp[i-2]) % mod;
                }
            }
        }
        else { //s.charAt(i-1) == '*'
            dp[i] = (9*dp[i-1]) % mod;
            if ( s.charAt(i-2) == '1' ){ // 11 - 19
                dp[i] = ( dp[i] + 9 * dp[i-2] ) % mod;
            }
            else if (s.charAt(i-2) == '2') { // 21 - 26
                dp[i] = ( dp[i] + 6 * dp[i-2] ) % mod;
            }
            else if (s.charAt(i - 2) == '*') {
                dp[i] = ( dp[i] + 15 * dp[i-2] ) % mod;
            }
        }
    }
    return (int)dp[len];
}

----------------------------------------------------------------------------------------------------
