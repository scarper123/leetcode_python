&#91;JAVA&#93; Simple and Clean with Explanations &#91;6 Solutions&#93;
**Cheating Method using StringBuilder**   

    public class Solution {
        public String reverseString(String s) {
            return  new StringBuilder(s).reverse().toString();
        }
    }

**Classic Method by swapping first and last**   

    public class Solution {
        public String reverseString(String s) {
            char[] word = s.toCharArray();
            int i = 0;
            int j = s.length() - 1;
            while (i < j) {
                char temp = word[i];
                word[i] = word[j];
                word[j] = temp;
                i++;
                j--;
            }
            return new String(word);
        }
    }

**Same as previous but using byte instead**   

    public class Solution {
        public String reverseString(String s) {
            byte[] bytes = s.getBytes();
            int i = 0;
            int j = s.length() - 1;
            while (i < j) {
                byte temp = bytes[i];
                bytes[i] = bytes[j];
                bytes[j] = temp;
                i++;
                j--;
            }
            return new String(bytes);
        }
    }

**Classic Method by swapping first and last**   
*If you don't like temp variable*

    public class Solution {
        public String reverseString(String s) {
            byte[] bytes = s.getBytes();
            int i = 0;
            int j = s.length() - 1;
            while (i < j) {
                bytes[i] = (byte)(bytes[i] ^ bytes[j]);
                bytes[j] = (byte)(bytes[i] ^ bytes[j]);
                bytes[i] = (byte)(bytes[i] ^ bytes[j]);
                i++;
                j--;
            }
            return new String(bytes);
        }
    }

**Using recursion** 

    public class Solution {
        public String reverseString(String s) {
            int length = s.length();
            if (length <= 1) return s;
            String leftStr = s.substring(0, length / 2);
            String rightStr = s.substring(length / 2, length);
            return reverseString(rightStr) + reverseString(leftStr);
        }
    }


----------------------------------------------------------------------------------------------------
Simple C++ solution
    class Solution {
    public:
        string reverseString(string s) {
            int i = 0, j = s.size() - 1;
            while(i < j){
                swap(s[i++], s[j--]); 
            }
            
            return s;
        }
    };

----------------------------------------------------------------------------------------------------
Python solution
 Python:

       class Solution(object):
            def reverseString(self, s):
                """
                :type s: str
                :rtype: str
                """
                return s[::-1]

----------------------------------------------------------------------------------------------------
Python 3 solutions: Recursive, Classic, Pythonic
class Solution(object):
    def reverseString(self, s):
        l = len(s)
        if l < 2:
            return s
        return self.reverseString(s[l/2:]) + self.reverseString(s[:l/2])


class SolutionClassic(object):
    def reverseString(self, s):
        r = list(s)
        i, j  = 0, len(r) - 1
        while i < j:
            r[i], r[j] = r[j], r[i]
            i += 1
            j -= 1

        return "".join(r)

class SolutionPythonic(object):
    def reverseString(self, s):
        return s[::-1]


----------------------------------------------------------------------------------------------------
Java- easiest method- 2-line code, attached another method
   

    //method 1: use StringBuilder
        public String reverseString(String s) {
            StringBuilder sb = new StringBuilder(s);
            return sb.reverse().toString();
        }
    
        //method 2: use swap method
        public String reverseString(String s){
            if(s == null || s.length() == 0)
                return "";
            char[] cs = s.toCharArray();
            int begin = 0, end = s.length() - 1;
            while(begin <= end){
                char c = cs[begin];
                cs[begin] = cs[end];
                cs[end] = c;
                begin++;
                end--;
            }
            
            return new String(cs);
        }

----------------------------------------------------------------------------------------------------
Python one line solution
    class Solution(object):
        def reverseString(self, s):
            """
            :type s: str
            :rtype: str
            """
            return s[::-1]


----------------------------------------------------------------------------------------------------
C solution sharing
    char* reverseString(char* s) {
     int l = 0;
     int r = strlen(s)-1;
     char c;
     
     while(l<r)
     {
         // swap chars
         c = s[l];
         s[l] = s[r];
         s[r] = c;
         l++;
         r--;
     }
     
     return s;
    }

----------------------------------------------------------------------------------------------------
Python recursive solution
    class Solution(object):
        def reverseString(self, s):
            """
            :type s: str
            :rtype: str
            """
            if len(s)<=1:
                return s
            n=len(s)
            return self.reverseString(s[n//2:])+self.reverseString(s[:n//2])

----------------------------------------------------------------------------------------------------
Java swapping char array.
    public String reverseString(String s) {
            char[] c = s.toCharArray();
            for (int i=0,j=c.length-1;i<j;i++,j--){
                char temp = c[i];
                c[i]=c[j];
                c[j]=temp;
            }
            return new String(c);
        }

----------------------------------------------------------------------------------------------------
One Line C++ Code (with Help of STL)
   
 "Cheating" method by calling proper iterator & constructor.

    class Solution {
        public:
            string reverseString(string s) {
                return string(s.rbegin(), s.rend());
            }
        };

----------------------------------------------------------------------------------------------------
2ms Java solution
    public class Solution {
        public String reverseString(String s) {
            if(s == null) return null;
            if(s.equals("")) return s;
            char[] arrChar = s.toCharArray();
            for (int i = 0, j = arrChar.length-1; i <= j; i++, j--) {
                char temp = arrChar[i];
                arrChar[i] = arrChar[j];
                arrChar[j] = temp;
            }
            return new String(arrChar);
        }
    }

----------------------------------------------------------------------------------------------------
For Java programmers: What&#x27;s the point of this problem?
There are basically two ways to solve this problem. 

One is to use a StringBuilder, another is to reverse the underlying char array. 

For C/C++ programmers, they may want to modify the input string if it's not constant, so to achieve O(1) space.

However, for Java programmers, I don't see any improvement beyond O(n) time and space. This is no different from reversing an integer array...What's the point here?

----------------------------------------------------------------------------------------------------
Python one line solution



    return s[::-1]

    return ''.join(reversed(list(s)))

----------------------------------------------------------------------------------------------------
Share my C++ solution,very easy to understand
    class Solution {
    public:
        string reverseString(string s) {
            int start = 0;
            int end = s.length() - 1;
            char ch = 0;
            
            for (; start < end; start++, end--)
            {
                ch = s[start];
                s[start] = s[end];
                s[end] = ch;
            }
            
            return s;
        }
    };

----------------------------------------------------------------------------------------------------
Share my simple c++ solution (no swap)
    class Solution {
    public:
        string reverseString(string s) {
            string ret;
            for(int i = s.size()-1; i >= 0; --i)
                ret += s[i];
            return ret;
        }
    };

----------------------------------------------------------------------------------------------------
Java Solution using StringBuilder&#x27;s reverse function
    public String reverseString(String s) {
        return new StringBuilder(s).reverse().toString();
    }

----------------------------------------------------------------------------------------------------
Simplest C solution.
    char* reverseString(char* s)
    {
        int i, n = strlen(s);
        char temp;
        for (i = 0; i < n/2 ;i ++)
        {
            temp = s[i];
            s[i] = s[n - i - 1];
            s[n - i - 1] = temp;
        }
        return s;
    }

simplest C solution.

----------------------------------------------------------------------------------------------------
Java solution. Two pointers.
    public class Solution {
        public String reverseString(String s) {
            int head = 0, tail = s.length() - 1;
            char[] ch = new char[s.length()];
            while(head <= tail) {
            	ch[head] = s.charAt(tail);
            	ch[tail--] = s.charAt(head++);
            }
            return new String(ch);
        }
    }

----------------------------------------------------------------------------------------------------
Java using Xor
public class Solution {
    public String reverseString(String s) {
        if(s == null) return "";
        
        char[] rev = s.toCharArray();
        int i = 0, j = s.length() - 1;
        while(i < j) {
            rev[i] ^= rev[j];
            rev[j] ^= rev[i];
            rev[i++] ^= rev[j--];
        }
        
        return String.valueOf(rev);
    }
}


----------------------------------------------------------------------------------------------------
Easy Java solution
    public class Solution {
        public String reverseString(String s) {
            char[] charList=s.toCharArray();
            StringBuffer result=new StringBuffer();
            for(int i=charList.length-1;i>=0;i--){
                result.append(charList[i]);
            }
            return result.toString();
        }
    }

----------------------------------------------------------------------------------------------------
