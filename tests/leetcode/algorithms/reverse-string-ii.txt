Simple Java, oneliner Ruby
def convert_to7(num)
  num.to_s(7)
end


----------------------------------------------------------------------------------------------------
Python easy understand solution
def convertTo7(self, num):
    if num == 0: return '0'
    n, res = abs(num), ''
    while n:
      res = str(n % 7) + res
      n //= 7
    return res if num > 0 else '-' + res

----------------------------------------------------------------------------------------------------
Verbose Java Solution
public class Solution {
    public String convertTo7(int num) {
        if (num == 0) return "0";
        
        StringBuilder sb = new StringBuilder();
        boolean negative = false;
        
        if (num < 0) {
            negative = true;
        }
        while (num != 0) {
            sb.append(Math.abs(num % 7));
            num = num / 7;
        }
        
        if (negative) {
            sb.append("-");
        }
        
        return sb.reverse().toString();
    }
}


----------------------------------------------------------------------------------------------------
3-liner C++ to build string backward + 1-liner recursive solutions
    string convertToBase7(int n) {
      return n>=0? n>=7? convertToBase7(n/7)+to_string(n%7) : to_string(n) : '-'+convertToBase7(-n);
    }


----------------------------------------------------------------------------------------------------
1 line
     return Integer.toString(Integer.parseInt(number, base1), base2);

----------------------------------------------------------------------------------------------------
3ms C++ 3 lines Solution
 string convertToBase7(int num) {
        int res = 0;
        for(int i=0; num!=0; res += pow(10,i++)*(num % 7), num /= 7) {}
        return to_string(res);
    }


----------------------------------------------------------------------------------------------------
Java 1 Liner + Standard Solution
    public String convertTo7(int num) {
        if (num == 0) return "0";
        String res = "";
        boolean isNeg = num < 0;
        while (num != 0) {
            res = Math.abs((num % 7)) + res;
            num /= 7;
        }
        return isNeg ? "-" + res : res;
    }


----------------------------------------------------------------------------------------------------
C++ solution
class Solution {
public:
    string convertTo7(int num) {
        if(num == 0) return "0";
        string str ="";
        
        if(num < 0) return "-" + convertTo7(-num);
        while( num > 0){
            int rem = num % 7;
            num = num/7;
            
            str = to_string(rem) + str;
        }
        
        return str;
    }

        return str;

----------------------------------------------------------------------------------------------------
my java solution w&#x2F;o string helper
public class Solution {
    public String convertToBase7(int num) {
        int base = 1, result = 0;
        while (num != 0) {
            result += base * (num % 7);
            num /= 7;
            base *= 10;
        }
        return String.valueOf(result);
    }
}


----------------------------------------------------------------------------------------------------
Intuitive Javascript Solution
var convertToBase7 = function(num) {
    // use Number's native api to convert to base 7 presentation
    return Number(num).toString(7);
};


----------------------------------------------------------------------------------------------------
C++ 3ms Easy Solution T_T
class Solution {
public:
	string convertToBase7(int num) {
		string result;
		bool bNegative = num >= 0 ? false : true;
		do {
			result += to_string(abs(num % 7));
			num /= 7;
		} while (num);
		result += bNegative ? "-" : "";
		reverse(result.begin(), result.end());
		return result;
	}
};



----------------------------------------------------------------------------------------------------
My simple swift solution
class Solution {
    func convertToBase7(_ num: Int) -> String {
        var input:Int = (num > 0) ? num : num * -1
        var remainder = input % 7
        var ans:String = "\(remainder)"
        
        while input >= 7{
            input -= remainder
            input = input/7
            remainder = input % 7
            ans.append(input < 7 ? "\(input)" : "\(remainder)")
        }
        return (num >= 0) ? String(ans.characters.reversed()) : "-" + String(ans.characters.reversed())
    }
}

----------------------------------------------------------------------------------------------------
Simple JavaScript Solution
/**
 * @param {number} num
 * @return {string}
 */
var convertToBase7 = function(num) {
  if (num === 0) return '0';
  let result = [];
  let isNegetive = false;
  if (num < 0) {
    num = -num;
    isNegetive = true;
  }
  while(num !== 0) {
    result.push((num%7).toString());
    num = Math.floor(num/7);
  }
  if (isNegetive) result.push('-');
  return result.reverse().join('');
};

----------------------------------------------------------------------------------------------------
c# solution without using inbuild functions
public class Solution {
    public string ConvertToBase7(int num) {
        int temp=num;
        if(temp==0)
        return "0";
        string s = "";
        num = num>0? num:num*(-1);
        while(num>0)
        {
            s = (num%7 == 0 ? 0:num%7)+s;
            num=num/7;
        }
        if(temp < 0)
        return "-"+s;
        else return s;
    }
}


----------------------------------------------------------------------------------------------------
C++ easy to understand iterative solution
    string convertToBase7(int num) {
        if(!num) return "0";
        string res="";
        bool b=false;
        if(num<0) b=true,num=-num;
        while(num>0){
            res=(char)(num%7+'0')+res;
            num/=7;
        }
        if(b) res="-"+res;
        return res;
    }


----------------------------------------------------------------------------------------------------
C solution: 2ms
char    *convertToBase7(int num)
{
    static char buf[0x11];
    char        *p = buf + 0x10;
    
    if (num >= 0)
    {
        *--p = '0' + (num % 7);
        while (0 != (num /= 7))
            *--p = '0' + (num % 7);
    }
    else
    {
        *--p = '0' - (num % 7);
        while (0 != (num /= 7))
            *--p = '0' - (num % 7);
        *--p = '-';
    }
    return (p);
}


----------------------------------------------------------------------------------------------------
Simple Java AC Solution
	public String convertToBase7(int num) {
		if (num == 0) {
			return "0";
		}
		int x = Math.abs(num);
		StringBuilder sb = new StringBuilder();
		while (x != 0) {
			sb.append(x % 7);
			x /= 7;
		}
		if (num < 0) {
			sb.append("-");
		}
		return sb.reverse().toString();

	}


----------------------------------------------------------------------------------------------------
Java with Stack
    public String convertToBase7(int num) {
        int temp = 0;        
        Stack<Integer> s = new Stack<Integer>();
        
        if(num <6 && num >= -6){
            return Integer.toString(num);
        }
        
        if(num == 7){
            return "10";
        }
        
        if(num == -7){
            return "-10";
        }
        
        while(num!=0){
            s.push(10*temp+num%7);
            num/=7;
        }
        
        while(!s.isEmpty()){
            temp = temp*10+s.pop();
        }
        
        return Integer.toString(temp);
    }


----------------------------------------------------------------------------------------------------
Easy Java beat 94%
public class Solution {
    public String convertToBase7(int num) {
        if(num == 0) return "0";
        
        boolean negative = false;
        if(num < 0) {
            num = num * -1;
            negative = true;
        }
        
        String res = "";
        
        while(num != 0){
            
            res = num % 7 + res;
            num = num/7;
            
        }
        
        return negative == true ? "-" + res : res;
        
    }
}


----------------------------------------------------------------------------------------------------
