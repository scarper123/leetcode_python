If you want to laugh, look at my solution
    This is utterly ridiculous. As I was writing this I knew I was going about it wrong but I wanted to finish it before I thought of a different method or looked at any other solutions.
    
      int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
    	int area1 = (D - B)*(C - A);
    	int area2 = (H - F)*(G - E);
    	int area3;
    	if (area1 == 0) {
    		return area2;
    	}
    	if (area2 == 0) {
    		return area1;
    	}
    	if ((A == D) && (B == F) && (C == G) && (D == H)) {
    		return area1;
    	}
    	if ((E >= C) | (G <= A) | (H <= B) | (D <= F)) {    //not overlapping
    		return (area1 + area2);
    	}
    	if (((G - E) <= (C - A)) && ((H - F) <= (D - B)) && (E >= A) && (F >= B) && (G <= C) && (D >= H)) {                        //rect2 is inside rect1
    		return area1;
    	}
    	if (((C - A) <= (G - E)) && ((D - B) <= (H - F)) && (E <= A) && (B >= F) && (G >= C) && (H >= D)) {                        //rect1 is inside rect2
    		return area2;
    	}
    	if ((F >= B) && (E >= A) && (G >= C) && (H >= D)) {                       //overlapping upper right corner
    		area3 = (C - E)*(D - F);
    	}
    	else if ((F >= B) && (E <= A) && (G <= C) && (H >= D)) {                       //overlapping upper left corner
    		area3 = (G - A)*(D - F);
    	}
    	else if ((F <= B) && (E <= A) && (G <= C) && (H <= D)) {                       //overlapping bottom left corner
    		area3 = (G - A)*(H - B);
    	}
    	else if ((F <= B) && (E >= A) && (G >= C) && (H <= D)) {                        //overlapping bottom right corner
    		area3 = (H - B)*(C - E);
    	}
    	else if (((C - A) <= (G - E)) && (H <= D) && (G >= C) && (E <= A) && (F <= B)) {               //overlapping bottom side
    		area3 = (C - A)*(H - B);
    	}
    	else if (((C - A) <= (G - E)) && (H >= D) && (G >= C) && (E <= A) && (F >= B)) {               //overlapping top side
    		area3 = (C - A)*(D - F);
    	}
    	else if (((D - B) <= (H - F)) && (E <= A) && (F <= B) && (H >= D) && (G <= C)) {               //overlapping left side
    		area3 = (G - A)*(D - B);
    	}
    	else if (((D - B) <= (H - F)) && (E >= A) && (F <= B) && (H >= D) && (G >= C)) {               //overlapping right side
    		area3 = (C - E)*(D - B);
    	}
    	else if (((C - A) >= (G - E)) && (E >= A) && (F >= B) && (C >= G) && (D <= H)) {      //overlapping part of top side
    		area3 = (G - E)*(D - F);
    	}
    	else if (((C - A) >= (G - E)) && (A <= E) && (B >= F) && (G <= C) && (D >= H)) {       //overlapping part of bottom side
    		area3 = (G - E)*(H - B);
    	}
    	else if (((D - B) >= (H - F)) && (E <= A) && (F >= B) && (G <= C) && (H <= D)) {      //overlapping part of left side
    		area3 = (G - A)*(H - F);
    	}
    	else if (((D - B) >= (H - F)) && (E >= A) && (F >= B) && (G >= C) && (H <= D)) {       //overlapping part of right side
    		area3 = (C - E)*(H - F);
    	}
    	else if (((G - E) <= (C - A)) && (E >= A) && (F <= B) && (G <= C) && (H >= D)) {     //overlapping top and bottom
    		area3 = (G - E)*(D - B);
    	}
    	else if (((H - F) <= (D - B)) && (E <= A) && (F >= B) && (C <= G) && (D >= H)) {     //overlapping left and right
    		area3 = (C - A)*(H - F);
    	}
    
    	return (area1 + area2 - area3);
    }

----------------------------------------------------------------------------------------------------
Just another short way
Instead of checking whether the rectangles overlap, I max `right` with `left` (and `top` with `bottom`). Haven't seen that in other solutions.

    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        int left = max(A,E), right = max(min(C,G), left);
        int bottom = max(B,F), top = max(min(D,H), bottom);
        return (C-A)*(D-B) - (right-left)*(top-bottom) + (G-E)*(H-F);
    }


----------------------------------------------------------------------------------------------------
My Java solution &#91;Sum of areas - Overlapped area&#93;
    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
            
            int areaOfSqrA = (C-A) * (D-B);
             int areaOfSqrB = (G-E) * (H-F);
            
            int left = Math.max(A, E);
            int right = Math.min(G, C);
            int bottom = Math.max(F, B);
            int top = Math.min(D, H);
            
            //If overlap
            int overlap = 0;
            if(right > left && top > bottom)
                 overlap = (right - left) * (top - bottom);
            
            return areaOfSqrA + areaOfSqrB - overlap;
        }

Hello! So, the code should be fairly straightforward. I first calculate the area of each rectangle and then calculate the overlapping area between the two rectangles (if there is one!). At the end, we sum up the individual areas and subtract the overlapping area/0 ! 

Feel free to ask should you have any queries for me OR if my solution can be improved upon! :)

----------------------------------------------------------------------------------------------------
Python concise solution.
        
    def computeArea(self, A, B, C, D, E, F, G, H):
        overlap = max(min(C,G)-max(A,E), 0)*max(min(D,H)-max(B,F), 0)
        return (A-C)*(B-D) + (E-G)*(F-H) - overlap

----------------------------------------------------------------------------------------------------
Errors in Test Data
In the statement, it says
*"Each rectangle is defined by its bottom left corner and top right corner"*

However, there are test cases like 

Input:	-2, -2, 2, 2, -3, 3, -4, 4

Which is wrong, because there are no rectangles with bottom left corner (-3, 3) and top right corner (-4, 4).

----------------------------------------------------------------------------------------------------
An explanation in plain language
We should consider the following two problems:

 1. How to know whether the two rectangle areas are not overlapped.
 2. If the two rectangle areas are overlapped, how to calculate the overlapped area.

For me, both situations are not intuitive to see. I tried the intuitive solution, but I gave up as it needs too many lines of code. Here I write down a smarter way in plain language which is actually from other user's codes to solve the problem.

1, To know whether the two areas are not overlapped: 

 - We actually only need to consider four situations: B>=H or E>=C or F>=D or A>=G. For example, if B is larger than H, the area (A,B,C,D) is definitely not overlapped with area (E,F,G,H), and we even know that area (A,B,C,D) is on the upper area of the plot compared with area (E,F,G,H). You can also check if other situations work.

2, To calculate the overlapped area:

 - When the two areas are overlapped, we only need to know the bottom left corner and top right corner of the overlapped area: the larger one of A and E, the larger one of B and F, the smaller one of C and G, and the smaller one of D and H. For example, in the case of the given figure of the original problem, we just consider the point (E,B) and the point (C,H), and the overlapped area is (E,B,C,H) which could be calculated intuitively. So how about other kinds of overlapping? The formula given above never change! You can try imagining other kind of  overlapped area, you will see that in any case we only need to know max(A,E), max(B,F), min(C,G), and min(D,H) to calculate the overlapped area.

I don't consider this problem as an easy one, if you try to solve it intuitively.

----------------------------------------------------------------------------------------------------
An easy to understand solution in JAVA
Calculate the area of each rectangle at first. Judge whether they have intersection. If not, return the sum area of them. Otherwise, count the intersection area and subtract it by one time of total area.  

    public class Solution {
        public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
            int rectOne = (C - A) * (D - B);
            int rectTwo = (G - E) * (H - F);
            
            if(A >= G || B >= H || C <= E || D <= F){
                return rectOne + rectTwo;
            }
            
            int length = Math.min(C, G) - Math.max(A, E);
            int height = Math.min(D, H) - Math.max(B, F);
            
            return rectOne + rectTwo - length * height;
        }
    }

----------------------------------------------------------------------------------------------------
My easy c++ solution
    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) 
    {
        int total = (C-A) * (D-B) + (G-E) * (H-F);
        
        if (C<=E || A>=G || B>=H || D<=F )
            return total;
        else
        {
            vector <int> h;
            h.push_back(A);
            h.push_back(C);
            h.push_back(E);
            h.push_back(G);
       
            vector <int> v;
            v.push_back(B);
            v.push_back(D);
            v.push_back(F);
            v.push_back(H);
        
            sort(h.begin(), h.end());
            sort(v.begin(), v.end());
        
            total = total - (h[2] - h [1]) * (v[2] - v[1]);
            return total;
        }
    }

----------------------------------------------------------------------------------------------------
Simple python solution
    class Solution(object):
        def computeArea(self, A, B, C, D, E, F, G, H):
            total = (C - A) * (D - B) + (G - E) * (H - F)
      
            width = max(0, min(C, G) - max(A, E))
            height = max(0, min(D, H) - max(B, F))
            
            return total - width * height

----------------------------------------------------------------------------------------------------
Simple &quot;0ms&quot; C++ solution using min and max- updated again to avoid overflow
The original version wasn't passing anymore because of new test cases that cause overflow. So now we're avoiding computing the differences below if the result will be negative. This avoids overflow in cases where the rectangles are far apart. It looks like this is basically the same thing that @shw1500 was suggesting, but you don't need the extra max function on the outside.

The return statement is based on comments from @StefanPochmann. We want to avoid forming the sum area(R1) + area(R2). This avoids overflow in cases where area(R1) + area(R2) will overflow, but area(R1) + area(R2) - overlap(R1, R2) fits in an int. There aren't any test cases for this. Add some maybe? Edit: There are test cases for this, but the overflow didn't matter.

New version- avoids overflow when area(R1) + area(R2) overflows but the answer shouldn't.

    class Solution {
        public:
            int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
                int overlap_width = min(C, G) > max(A, E) ? min(C, G) - max(A, E) : 0; 
                int overlap_height = min(D, H) > max(B, F) ? min(D, H) - max(B, F) : 0;
                return ((C - A) * (D - B) - overlap_width * overlap_height) + (G - E) * (H - F); // order avoids overflow
            }
        };

Second version- avoids overflow when rectangles are far apart

    class Solution {
    public:
        int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
            int overlap_width = min(C, G) > max(A, E) ? min(C, G) - max(A, E) : 0; 
            int overlap_height = min(D, H) > max(B, F) ? min(D, H) - max(B, F) : 0;
            return (C - A) * (D - B) + (G - E) * (H - F) - overlap_width * overlap_height;
        }
    };

Old version- overflows for some inputs where the rectangles are far apart.

    class Solution {
    public:
        int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
            int overlap_width = max(min(C, G) - max(A, E), 0), overlap_height = max(min(D, H) - max(B, F), 0);
            return (C - A) * (D - B) + (G - E) * (H - F) - overlap_width * overlap_height;
        }
    };

----------------------------------------------------------------------------------------------------
My Java Solution
    public int computeAreaJoin(int A, int B, int C, int D, int E, int F, int G, int H) {
        int hTop = Math.min(D, H);
        int hBot = Math.max(B, F);
        int wTop = Math.min(C, G);
        int wBot = Math.max(A, E);
        if (hTop < hBot || wTop < wBot) {
            return 0;
        } else {
            return (hTop - hBot) * (wTop - wBot);
        }
    }
    // A U B = A + B - A * B
    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        return (C-A)*(D-B) + (G-E)*(H-F) - computeAreaJoin(A,B,C,D,E,F,G,H);
    }

----------------------------------------------------------------------------------------------------
Two lines AC Java code
    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        int common = (C <= E || A >= G || B >= H || D <= F) ? 0 : (Math.min(C, G) - Math.max(A, E)) * (Math.min(D, H) - Math.max(B, F));
        return (C - A) * (D - B) + (G - E) * (H - F) - common;
    }

----------------------------------------------------------------------------------------------------
Clean C++ Solution with Detailed Explanations
Well, this problem looks easy at first glance. However, to get a bug-free code may be not that easy. 

The total square is simply equal to the sum of the area of the two rectangles minus the area of their overlap. How do we compute the area of a rectangle? Well, simply times its height with its width. And the height and width can be obtained from the coordinates of the corners.

The key to this problem actually lies in how to handle overlap. 

First, let's think about when overlap will happen? Well, if one rectangle is completely to the left (or right/top/bottom) of the other, then no overlap will happen; otherwise, it will.

How do we know whether a rectangle is completely to the left of the other? Well, just make sure that the right boundary of it is to the left of the left boundary of the other. That is, `C <= E`. The right/top/bottom cases can be handled similarly by `A >= G`, `D <= F`, `B >= H`.

Now we know how to check for overlap. If overlap happens, how do we compute it? The key is to find the boundary of the overlap. 

Take the image at the problem statement as an example. It can be seen that the left boundary of the overlap is `max(A, E)`, the right boundary is `min(C, G)`. The top and bottom boundaries are `min(D, H)` and `max(B, F)` similarly. So the area of the overlap is simply `(min(C, G) - max(A, E)) * (min(D, H) - max(B, F))`.

You should now convince yourself that all kind of overlapping cases can be handled by the above formula by drawing some examples on the paper.

Finally, we have the following code (simply a translation of the above idea).

    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        int s1 = (C - A) * (D - B);
        int s2 = (G - E) * (H - F); 
        if (A >= G || C <= E || D <= F || B >= H)
            return s1 + s2; 
        return s1 - (min(G, C) - max(A, E)) * (min(D, H) - max(B, F)) + s2;
    } 

----------------------------------------------------------------------------------------------------
Easy to understand python solution &#91;Sum of areas - Overlapped area&#93;
    class Solution(object):
        def computeArea(self, A, B, C, D, E, F, G, H):
            """
            :type A: int
            :type B: int
            :type C: int
            :type D: int
            :type E: int
            :type F: int
            :type G: int
            :type H: int
            :rtype: int
            """
            total=(C-A)*(D-B)+(G-E)*(H-F)
            if E>C or F>D or G<A or H<B:
                # no overlap
                return total
            I,J=max(A,E), max(B,F) # overlap bottom left corner
            K,L=min(C,G), min(D,H) # overlap top right corner
            return total-(K-I)*(L-J)

----------------------------------------------------------------------------------------------------
Accepted C Solution, too simple to explain
    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
    	int area=(C-A)*(D-B)+(G-E)*(H-F);
    	// no overlap
    	if (A>=G||E>=C||B>=H||D<=F)
    	{
    		return area;
    	}
    
    	int x1= A>E?A:E;
    	int x2= C<G?C:G;
    
    	int y1= B>F?B:F;
    	int y2= D<H?D:H;
    
    	return area-(x2-x1)*(y2-y1);
    }
just calculate the areas of two rectangles, and minus the overlap area if exists

----------------------------------------------------------------------------------------------------
My python solutions
    class Solution:
        def computeArea(self, A, B, C, D, E, F, G, H):
            areaA = (C - A) * (D - B)
            areaB = (G - E) * (H - F)
            l = max(0, min(C, G) - max(A, E))
            h = max(0, min(D, H) - max(B, F))
            return areaA + areaB - l * h

----------------------------------------------------------------------------------------------------
Why do you expect 4 instead of 0 with input (0, 0, 0, 0, -1, -1, 1, 1)?
The question says: Find the total area covered by two rectilinear rectangles in a 2D plane, but expects a result of 4 when input is  (0, 0, 0, 0, -1, -1, 1, 1).

It's confusing for a non native English speaker and new timer here, how would a zero-sized rectangle cover a rectangle sized 4?

And here is my code in C#:

    public class Solution {
        public int ComputeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
            
            var bottom = Math.Max(B, F);
            var top = Math.Min(D, H);
            var left = Math.Max(A, E);
            var right = Math.Min(C, G);
            
            if(bottom >= top || left >= right)
                return 0;
                
            return (top - bottom) * (right - left);
        }
    }

----------------------------------------------------------------------------------------------------
Using c++, I think my code is vey short
    nt computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        if(E>=C||G<=A||B>=H||F>=D)
        return (C-A)*(D-B)+(G-E)*(H-F);
        else
        return (C-A)*(D-B)+(G-E)*(H-F)-abs(max(A,E)-min(C,G))*abs(max(B,F)-min(D,H));
    }

----------------------------------------------------------------------------------------------------
After looking at the discuss area, I&#x27;m going to be crazy
that's the solution after i try thousands of times. you can laugh at me now......

    class Solution {
    public:
    struct myPoint
    {
        int x;
        int y;
        bool flag;
    };
    struct myRect
    {
        myPoint bl;
        myPoint tr;
        myPoint tl;
        myPoint br;
    };
    myRect rect1;
    myRect rect2;
    vector<myPoint> pts;
    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H)
    {
        int myinterarea=InterArea(A,B,C,D,E,F,G,H);
        return myArea(rect1)+myArea(rect2)-myinterarea;
    }
    int InterArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        rect1.bl.x=A;
        rect1.bl.y=B;
        rect1.tr.x=C;
        rect1.tr.y=D;
        rect1.tl.x=A;
        rect1.tl.y=D;
        rect1.br.x=C;
        rect1.br.y=B;
        rect2.bl.x=E;
        rect2.bl.y=F;
        rect2.tr.x=G;
        rect2.tr.y=H;
        rect2.tl.x=E;
        rect2.tl.y=H;
        rect2.br.x=G;
        rect2.br.y=F;
        
        int ptinrect1=0,ptinrect2=0;
        if(myPtInRect(rect2.tl,rect1))
            ptinrect1++;
        if(myPtInRect(rect2.tr,rect1))
            ptinrect1++;
        if(myPtInRect(rect2.bl,rect1))
            ptinrect1++;
        if(myPtInRect(rect2.br,rect1))
            ptinrect1++;
        
        if(myPtInRect(rect1.tl,rect2))
            ptinrect2++;
        if(myPtInRect(rect1.tr,rect2))
            ptinrect2++;
        if(myPtInRect(rect1.bl,rect2))
            ptinrect2++;
        if(myPtInRect(rect1.br,rect2))
            ptinrect2++;
            
        if(ptinrect1==4&&ptinrect2==4)
            return myArea(rect1);
        if(ptinrect1==4&&ptinrect2==0)
            return myArea(rect2);
        if(ptinrect1==0&&ptinrect2==4)
            return myArea(rect1);
        if(ptinrect1==2&&ptinrect2==2)
        {
            int xmin=min<int>(pts[0].x,min<int>(pts[1].x,min<int>(pts[2].x,pts[3].x)));
            int xmax=max<int>(pts[0].x,max<int>(pts[1].x,max<int>(pts[2].x,pts[3].x)));
            int ymin=min<int>(pts[0].y,min<int>(pts[1].y,min<int>(pts[2].y,pts[3].y)));
            int ymax=max<int>(pts[0].y,max<int>(pts[1].y,max<int>(pts[2].y,pts[3].y)));
            return (xmax-xmin)*(ymax-ymin);
        }
        if(ptinrect1==1&&ptinrect2==1)
        {
            int xmin=min<int>(pts[0].x,pts[1].x);
            int xmax=max<int>(pts[0].x,pts[1].x);
            int ymin=min<int>(pts[0].y,pts[1].y);
            int ymax=max<int>(pts[0].y,pts[1].y);
            return (xmax-xmin)*(ymax-ymin);
        }
        if((ptinrect1==2&&ptinrect2==0)||(ptinrect1==0&&ptinrect2==2))
        {
            if(ptinrect1==0&&ptinrect2==2)
            {
                myRect temprect=rect1;
                rect1=rect2;
                rect2=temprect;
            }
            if(pts[0].x==pts[1].x)
            {
                if(pts[0].x==rect2.tl.x)
                    return (rect1.br.x-rect2.tl.x)*(rect2.tl.y-rect2.bl.y);
                else if(pts[0].x==rect2.tr.x)
                    return (rect2.br.x-rect1.tl.x)*(rect2.tr.y-rect2.br.y);
            }
            else if(pts[0].y==pts[1].y)
            {
                if(pts[0].y==rect2.tl.y)
                    return (rect2.tr.x-rect2.tl.x)*(rect2.tl.y-rect1.br.y);
                else if(pts[0].y==rect2.br.y)
                    return (rect2.br.x-rect2.bl.x)*(rect1.tl.y-rect2.br.y);
            }
        }
        if(ptinrect1==0&&ptinrect2==0)
        {
            if((rect1.tl.x>rect2.br.x)||(rect2.tl.x>rect1.br.x)||(rect1.tl.y<rect2.br.y)||(rect2.tl.y<rect1.br.y))
                return 0;
            else
            {
                myPoint newtl,newbr;
                newtl.x=max<int>(rect1.tl.x,rect2.tl.x);
                newtl.y=min<int>(rect1.tl.y,rect2.tl.y);
                newbr.x=min<int>(rect1.br.x,rect2.br.x);
                newbr.y=max<int>(rect1.br.y,rect2.br.y);
                return (newbr.x-newtl.x)*(newtl.y-newbr.y);
            }
        }
        if((ptinrect1==1&&ptinrect2==2)||(ptinrect1==2&&ptinrect2==1))
        {
            if((rect1.tl.x>=rect2.br.x)||(rect2.tl.x>=rect1.br.x)||(rect1.tl.y<=rect2.br.y)||(rect2.tl.y<=rect1.br.y))
                return 0;
            else
            {
                myPoint newtl,newbr;
                newtl.x=min<int>(pts[0].x,min<int>(pts[1].x,pts[2].x));
                newtl.y=max<int>(pts[0].y,max<int>(pts[1].y,pts[2].y));
                newbr.x=max<int>(pts[0].x,max<int>(pts[1].x,pts[2].x));
                newbr.y=min<int>(pts[0].y,min<int>(pts[1].y,pts[2].y));
                return (newbr.x-newtl.x)*(newtl.y-newbr.y);
            }
        }
        if((ptinrect1==1&&ptinrect2==4)||(ptinrect1==4&&ptinrect2==1))
            return min<int>(myArea(rect1),myArea(rect2));
        if((ptinrect1==2&&ptinrect2==4)||(ptinrect1==4&&ptinrect2==2))
            return min<int>(myArea(rect1),myArea(rect2));
    }
    
    int myArea(myRect rect)
    {
        return (rect.tr.x-rect.bl.x)*(rect.tr.y-rect.bl.y);
    }
    
    bool myPtInRect(myPoint pt,myRect rect)
    {
        if(pt.x>=rect.bl.x&&pt.x<=rect.tr.x&&pt.y>=rect.bl.y&&pt.y<=rect.tr.y)
        {
            pts.push_back(pt);
            return true;
        }
        return false;
    }
};

----------------------------------------------------------------------------------------------------
Easy understanding concise java solution
    public class Solution {
        public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
            int a = (C-A)*(D-B), b = (G-E)*(H-F);
            return a + b - overlap(A, C, E, G) * overlap(F, H, B, D);
        }
        
        private int overlap(int a, int b, int c, int d) {
            if (b<=c || d<=a) { return 0; }  // not overlapping
            return Math.min(b, d) - Math.max(a, c);
        }
    }

----------------------------------------------------------------------------------------------------
