7-lines 4ms C++ Solution
Well, the basic idea is very simple. Start from the tail of `s` and move backwards to find the first non-space character. Then from this character, move backwards and count the number of non-space characters until we pass over the head of `s` or meet a space character. The count will then be the length of the last word.

    class Solution {
    public:
        int lengthOfLastWord(string s) { 
            int len = 0, tail = s.length() - 1;
            while (tail >= 0 && s[tail] == ' ') tail--;
            while (tail >= 0 && s[tail] != ' ') {
                len++;
                tail--;
            }
            return len;
        }
    };

----------------------------------------------------------------------------------------------------
My simple solution in C++
I've noticed that a lot of solutions use available library functions that return directly the positions of certain characters or do other operations like "split". I personally don't think that's a good idea. Firstly, these functions take some time and usually involve with iteration through the whole string. Secondly, questions like this one is intended to be a practice of detail implementation, not calling other functions. My solution like below uses only the most basic string operations and probably beats many other solutions which call other existing functions.

     int lengthOfLastWord(const char* s) {
            int len = 0;
            while (*s) {
                if (*s++ != ' ')
                    ++len;
                else if (*s && *s != ' ')
                    len = 0;
        
            }
            return len;
        }

----------------------------------------------------------------------------------------------------
A single line of Code in Java
    public int lengthOfLastWord(String s) {
        return s.trim().length()-s.trim().lastIndexOf(" ")-1;
    }

----------------------------------------------------------------------------------------------------
This problem is not fun at all.
This problem is not fun at all.

You spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases.

----------------------------------------------------------------------------------------------------
My 3 line 0 ms java solution
        public int lengthOfLastWord(String s) {
    	s = s.trim();
        int lastIndex = s.lastIndexOf(' ') + 1;
        return s.length() - lastIndex;        
    }

----------------------------------------------------------------------------------------------------
One line Python solution
    def lengthOfLastWord(self, s):
        return len(s.rstrip(' ').split(' ')[-1])

I know this is not the solution that the question wants. Just for fun.


----------------------------------------------------------------------------------------------------
228ms Java Solution
1 - Use 2 loops. One to locate the last non-space character, one to count.


    public int lengthOfLastWord(String s) {
        //228ms
        int lenIndex = s.length()-1;
        int len = 0;

        /*can also use while here, resulting in 264ms
        while (lenIndex>=0 && s.charAt(lenIndex)==' ') lenIndex--;*/
        
        /*or use trim - 324ms
        s = s.trim();*/

        for (int i=lenIndex; i>=0 && s.charAt(i)==' '; i--) 
            lenIndex--;
        
        for (int i=lenIndex; i>=0 && s.charAt(i)!=' '; i--) 
            len++;
        return len;
    }




2 - Use split

        //292ms
        String[] words = s.split(" ");
        if (words.length==0) return 0;
        else return words[words.length-1].length();
 

3 - use lastIndexOf
       
        //308ms
        return s.trim().length() - s.trim().lastIndexOf(" ") - 1;

        

       

----------------------------------------------------------------------------------------------------
Simple java solution

    public int lengthOfLastWord(String s) {
        String use = s.trim();
        int count = 0;
        for (int i = use.length() - 1; i >= 0; i--) {
            if (use.charAt(i) != ' ') count++;
            else break;
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
My C++ Solution
    class Solution {
    public:
        int lengthOfLastWord(const char *s) {
            int len = strlen(s);
    		if (!len) return 0;
    		int n=0,  i = len-1;
    		while (s[i] == ' ') i--;
    		for (; i >= 0; i--,n++)
    			if (s[i] == ' ')
    				return n;
    		return n;
        }
    };

----------------------------------------------------------------------------------------------------
It was accepted...
`public class Solution {
    public int lengthOfLastWord(String s) {
        String ss = s.trim();
        return ss.length() - 1 - ss.lastIndexOf(' ');
    }
}`

----------------------------------------------------------------------------------------------------
5 lines C solution; 0ms
    int lengthOfLastWord(char* s) {
      int lastLen = 0;
      char* p = s + strlen(s) -1;
      while(p>=s && isspace(*p)) p--;
      while(p>=s && !isspace(*(p--))) lastLen++;
      return lastLen;
    }

----------------------------------------------------------------------------------------------------
My 36 ms Python solution

    def lengthOfLastWord(self, s):
        ls = len(s)
        # slow and fast pointers
        slow = -1
        # iterate over trailing spaces
        while slow >= -ls and s[slow] == ' ':
            slow-=1
        fast = slow
        # iterate over last word
        while fast >= -ls and s[fast] != ' ':
            fast-=1
        return slow - fast

----------------------------------------------------------------------------------------------------
Java 0ms solution
Java simple 0ms solution:

    public int lengthOfLastWord(String s) {
        if (null == s || s.trim().length() == 0) return 0;
        
        s = s.trim();
        String lastWord = s.substring(s.lastIndexOf(" ") + 1);
        return lastWord.length();
    }

----------------------------------------------------------------------------------------------------
Short Java Solution
    public class Solution {
        public int lengthOfLastWord(String s) {
            String[] parts = s.split(" ");
            if (parts.length == 0) return 0;
            return parts[parts.length - 1].length();
        }
    }

----------------------------------------------------------------------------------------------------
Another simple solution
         int lengthOfLastWord(const char *s) {
            int len  = strlen(s);
            int i=len-1;
    
            while(s[i]==' ')   //remove the spaces from end
             i--;
          
            int j; 
            for( j= i; j>=0; j--)   //u got a word
            {
               if(s[j]==' ')       /break before hitting second last word
                 break;
            }
            return i-j;     //return length
    }

----------------------------------------------------------------------------------------------------
4-lines java solution without using trim
public int lengthOfLastWord(String s) {
    int count = -1, i = s.length();
    while (--i >= 0 && s.charAt(i) == ' ');
    while (i - ++count >= 0 && s.charAt(i - count) != ' ');
    return count;
}

----------------------------------------------------------------------------------------------------
Two string Java solution(226ms)
    public class Solution {
        public int lengthOfLastWord(String s) {
            String[] str = s.trim().split(" +"); 
            return str[str.length - 1].length();
        }
    }

----------------------------------------------------------------------------------------------------
C++ ~ 10 lines one for loop
    int lengthOfLastWord(string s) 
    {
        int len = 0, endIndx = s.length() - 1;
        for(int i = endIndx; i >= 0; --i)
        {
            if(s[i] == ' ')
            {
                if(len > 0) return len;
            }
            else
                ++len;
        }
        return len;
    }

----------------------------------------------------------------------------------------------------
My Java solution that uses a regex
    public int lengthLastWord(String s) {
        
        if (s.length() == 0) {
            return 0;
        }
        
        s = s.trim(); // removes spaces at the beginning and at the end of the string
        String regex = "[ ]+"; // 1 or more spaces
        String[] words = s.split(regex);
        
        return words[words.length - 1].length();
    }

----------------------------------------------------------------------------------------------------
4ms  really breif

	int lengthOfLastWord(string s) {
		stringstream text(s);
		string str1,str;
		while (text >> str)
		{
			str1 = str;
		}
		return str1.size();
	}


----------------------------------------------------------------------------------------------------
