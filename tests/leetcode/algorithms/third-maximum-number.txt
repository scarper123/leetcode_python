C++ Solution with Explanations
The key concept here is:
  Given a set of integers that satisfies the property that each pair of integers inside the set are mutually divisible, for a new integer S, S can be placed into the set as long as it can divide the smallest number of the set or is divisible by the largest number of the set.
	
For example, let's say we have a set P = { 4, 8, 16 }, P satisfies the divisible condition. Now consider a new number 2, it can divide the smallest number 4, so it can be placed into the set; similarly, 32 can be divided by 16, the biggest number in P, it can also placed into P.

Next, let's define:

For an increasingly sorted array of integers a[1 .. n]

T[n] = the length of the largest divisible subset whose largest number is a[n]

T[n+1] = max{ 1 + T[i] if a[n+1] mod a[i] == 0 else 1 }

Now, deducting T[n] becomes straight forward with a DP trick. For the final result we will need to maintain a backtrace array for the answer.

Implementation in C++:

    class Solution {
    public:
        vector<int> largestDivisibleSubset(vector<int>& nums) {
            sort(nums.begin(), nums.end());
            
            vector<int> T(nums.size(), 0);
            vector<int> parent(nums.size(), 0);
            
            int m = 0;
            int mi = 0;
            
            for(int i = nums.size() - 1; i >= 0; --i) // iterate from end to start since it's easier to track the answer index
            {
                for(int j = i; j < nums.size(); ++j)
                {
                    // check every a[j] that is larger than a[i]
                    if(nums[j] % nums[i] == 0 && T[i] < 1 + T[j])
                    {
                        // if a[j] mod a[i] == 0, it means T[j] can form a larger subset by putting a[i] into T[j]
                        T[i] = 1 + T[j];
                        parent[i] = j;
                        
                        if(T[i] > m)
                        {
                            m = T[i];
                            mi = i;
                        }
                    }
                }
            }
            
            vector<int> ret;
            
            for(int i = 0; i < m; ++i)
            {
                ret.push_back(nums[mi]);
                mi = parent[mi];
            }
            
            return ret;
        }
    };



----------------------------------------------------------------------------------------------------
4 lines in Python
    def largestDivisibleSubset(self, nums):
        S = {-1: set()}
        for x in sorted(nums):
            S[x] = max((S[d] for d in S if x % d == 0), key=len) | {x}
        return list(max(S.values(), key=len))

My `S[x]` is the largest subset with `x` as the largest element, i.e., the subset of all divisors of `x` in the input. With `S[-1] = emptyset` as useful base case. Since divisibility is transitive, a multiple `x` of some divisor `d` is also a multiple of all elements in `S[d]`, so it's not necessary to explicitly test divisibility of `x` by all elements in `S[d]`. Testing `x % d` suffices.

While storing entire subsets isn't super efficient, it's also not that bad. To extend a subset, the new element must be divisible by all elements in it, meaning it must be at least twice as large as the largest element in it. So with the 31-bit integers we have here, the largest possible set has size 31 (containing all powers of 2).

----------------------------------------------------------------------------------------------------
Classic DP solution similar to LIS, O(n^2)
Use DP to track max Set and pre index.

    public class Solution {
        public List<Integer> largestDivisibleSubset(int[] nums) {
            int n = nums.length;
            int[] count = new int[n];
            int[] pre = new int[n];
            Arrays.sort(nums);
            int max = 0, index = -1;
            for (int i = 0; i < n; i++) {
                count[i] = 1;
                pre[i] = -1;
                for (int j = i - 1; j >= 0; j--) {
                    if (nums[i] % nums[j] == 0) {
                        if (1 + count[j] > count[i]) {
                            count[i] = count[j] + 1;
                            pre[i] = j;
                        }
                    }
                }
                if (count[i] > max) {
                    max = count[i];
                    index = i;
                }
            }
            List<Integer> res = new ArrayList<>();
            while (index != -1) {
                res.add(nums[index]);
                index = pre[index];
            }
            return res;
        }
    }

----------------------------------------------------------------------------------------------------
Easy understood Java DP solution in 28ms with O(n^2) time
The basic idea is like:

    1. Sort
    2. Find the length of longest subset
    3. Record the largest element of it.
    4. Do a loop from the largest element to nums[0], add every element belongs to the longest subset.

    public class Solution {
        public List<Integer> largestDivisibleSubset(int[] nums) {
            List<Integer> res = new ArrayList<Integer>();
            if (nums == null || nums.length == 0) return res;
            Arrays.sort(nums);
            int[] dp = new int[nums.length];
            dp[0] = 1;
            
            //for each element in nums, find the length of largest subset it has.
            for (int i = 1; i < nums.length; i++){
                for (int j = i-1; j >= 0; j--){
                    if (nums[i] % nums[j] == 0){
                        dp[i] = dp[j] + 1;
                        break;
                    }
                }
            }
            
            //pick the index of the largest element in dp.
            int maxIndex = 0;
            for (int i = 1; i < nums.length; i++){
                maxIndex = dp[i] > dp[maxIndex] ?  i :  maxIndex;
            }
            
            //from nums[maxIndex] to 0, add every element belongs to the largest subset.
            int temp = nums[maxIndex];
            for (int i = maxIndex; i >= 0; i--){
                if (temp % nums[i] == 0){
                    res.add(nums[i]);
                    temp = nums[i];
                }
            }
            return res;
        }
    }

----------------------------------------------------------------------------------------------------
Java Solution in 32ms O(N^2) time, O(N) space
    public class Solution {
        public int[] largestDivisibleSubset(int[] nums) {
            if(nums.length < 2)
                return nums;
            else{
                Arrays.sort(nums);
                int[] parent = new int[nums.length];
                int[] count = new int[nums.length];
                int max = 0, maxind = -1;
                for(int i = nums.length - 1; i >= 0; i--){
                    for(int j = i; j < nums.length; j++){
                        if(nums[j] % nums[i] == 0 && count[i] < 1 + count[j] ){
                            count[i] = 1 + count[j];
                            parent[i] = j;
                            if(count[i] > max){
                                max = count[i];
                                maxind = i;
                            }
                        }
                    }
                }
                int[] res = new int[max];
                for(int i = 0; i < max; i++){
                    res[i] = nums[maxind];
                    maxind = parent[maxind];
                }
                return res;
            }
        }
    }

----------------------------------------------------------------------------------------------------
Is this question broken?  aka ill-posed
**Update: The question has now been updated and is correct.**

I have a major problem with this question it says `Given a set of distinct positive integers, find the largest subset such that **every pair** (Si, Sj) of elements in this subset satisfies: Si % Sj = 0.`

The key word here is every, lets look at one of the examples

    input is nums = [1,2,3]
    
    then the result is [1,2]

but in the question is say  that for every pair in our solution we should have Si % Sj = 0. So lets look at every pair we have the first pair (2, 1) and we have 2%1 = 0, so that holds. Now lets look at the other pair (1,2) 1%2 = 1 this is not zero hence [1,2] cannot be the solution.

If we require **every pair** so that **Si % Sj = 0** then your subset will be a set of one item since we require both that **Sj% Si = 0**  and **Si % Sj = 0** which forces that **Si = Sj**.

So please fix the requirements of the question to reflect what the author intended.

----------------------------------------------------------------------------------------------------
Python dp n^2 solution
We first do some math work.  For two numbers, A and B, if A < B, A % B  must > 0 (A != 0).  The only chance A % B == 0 must be A >= B.

With this idea, we sort the list.  Then, the question turns similar to no.300 longest increasing subsequence.  For ith number, its largest divisible subset is the max of subset of any j from 0 - i-1 in which nums[i] % nums[j] == 0.

    class Solution(object):
        def largestDivisibleSubset(self, nums):
            """
            :type nums: List[int]
            :rtype: List[int]
            """
            from copy import copy
            nums.sort()
            n = len(nums)
            if n == 0: return []
            dp = [0] * n
            dp[0] = [nums[0]]
            #print(dp)
            for i in xrange(1, n):
                curNum = nums[i]
                maxSet = []
                for j in xrange(i):
                    if curNum % nums[j] == 0:
                        localSet = copy(dp[j])
                        if len(localSet) > len(maxSet):
                            maxSet = localSet
                
                maxSet.append(nums[i])
                dp[i] = maxSet
                #print(dp)
            
            #print(dp)
            res = []
            for localSet in dp:
                if len(localSet) > len(res):
                    res = localSet
            return res
        
        

----------------------------------------------------------------------------------------------------
Easy DP with path record, C++ code, O(n^2) time on worst case, O(n) space
the idea is using a bucket to record which nums can be the current longest sequence,
and meantime using pair record the pre-num's id in its bucket, so we can get the result using it.

see this case [1,2,3,4,5,6,7,24]

at last it runs like this:

     1 | 2 | 4 | 24
       | 3 | 6 |
       | 5 |    
       | 7 |    
code:

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        vector<int> ret;
        int n = nums.size();
        if (!n) return ret;
        sort(nums.begin(), nums.end());
        vector<pair<int, int>> dp[n];
        int maxi = 0;
        dp[maxi].push_back(make_pair(nums[0], -1));
        for (int i = 1; i < n; ++i) {
            int j = maxi;
            while (j >= 0) {
                for (int id = 0; id < dp[j].size(); ++id) {
                    if (nums[i] % dp[j][id].first == 0) {
                        dp[j + 1].emplace_back(nums[i], id);
                        maxi = max(maxi, j + 1);
                        goto out_of_while;
                    }
                }
                --j;
            }
            dp[j + 1].emplace_back(nums[i], -1);
            out_of_while:;
        }
        int i = maxi, id = 0;
        while (i >= 0) {
            ret.push_back(dp[i][id].first);
            id = dp[i][id].second;
            --i;
        }
        return ret;
    }

----------------------------------------------------------------------------------------------------
Java DFS solution 62ms by considering the problem as finding the longest path in a DAG
By considering each number as a node and its multiples as connected nodes. We can obtain a DAG. For example, [1,3,4,6] can form a DAG with edges of 1->3, 1->4, 1->6, 3->6. So, the answer is the longest path of 1->3->6. 

This is very similar to the [Topological sorting][1] question which should be solved in O(|E|+|V|), linear running time. However, the bottleneck is that the edges are not given and we need to find those edges using O(|V|^2). Therefore, we need to find a better way to find the edges from a current node to all its connected nodes.

The idea is that we store all numbers in a TreeSet so they can be searched by order instead of going  from small to large one by one. The advantage is that we can jump through the numbers that are not a multiple of the current node. i.e. use above example, when stop at 3, we can jump to 6 directly without visiting 4 by knowing the next  multiple of 3 is 3X2=6. And, the next multiple is 3X3 and so on. 

However, this is not enough when we have the case of the big gap, ie, [2, 10000, 10000001]. If we adding factor by one each time, it will take long long time. Therefore, here is the TreeSet coming handy. We find the ceiling of 4 to obtain 10000. In addition, we increase the factor to 10000/2 +1 for next round.

On the side node, this implementation use O(logN) to search the next multiple. A better implementation is to search only the TreeSet which only has numbers greater than the current number by cutting down the TreeSet. Or, using a sorted array and call Arrays.binarySearch(start, end, value).


[1]: https://en.wikipedia.org/wiki/Topological_sorting



    public class Solution {
        TreeSet<Long> mem = new TreeSet<Long>();
        long max = 0;
        List<Integer> ret = new ArrayList();
        Map<Long, List<Integer> > visited = new HashMap<>();
       
        public List<Integer> helper(long cur) {
            if (cur > max || ! mem.contains(cur) ) return null;
            if (visited.containsKey(cur)) return visited.get(cur);
            List<Integer> list = new ArrayList<>();
            long i=2; // the factor for the next multiple of current value
            while ( mem.ceiling(cur*i) != null ) { // no more multiple
                // use O(log N) to find next multiple
                long next = mem.ceiling(cur*i);
                if ( next % cur == 0 ) {
                    List<Integer> temp = helper(next);
                    if (temp != null  && temp.size() > list.size() )
                        list = new ArrayList(temp);
                }
                i=(next/cur)+1; // increase the factor based on the gap. 
            }
            list.add((int)cur);
            visited.put(cur, list);
            return list;
        }
        
        public List<Integer> largestDivisibleSubset(int[] nums) {
            if (nums==null || nums.length ==0) return ret;
            int len = nums.length;
            if (len == 1) { 
                ret.add(nums[0]);
                return ret;
            }
            for (int num : nums) {
                mem.add((long)num);
            }
            max = mem.last();
            for (int num : nums) { 
                List<Integer> temp = helper((long)num);
                if (temp != null  && temp.size() > ret.size() )
                    ret = new ArrayList(temp);
            }
            return ret;
        }
    }

----------------------------------------------------------------------------------------------------
6ms C++ beats 100% w&#x2F; explanations
class Solution {
    int bSz=0, sPos=0, nSz, largest;
    vector<int> nums, sol, furthest, best=vector<int>(0);
    
    int passes(int v, int i) {
        if ( sPos==0 ) return 1;
        if ( (sPos>furthest[i]) && ((v%sol[sPos-1])==0) ) {
            furthest[i]=sPos;
            return 1;       // mark the position
        }
        return 0;
    }
    void rec(int i) {
        for ( ; i<nSz; ++i ) {
            if ( bSz>sPos && ((((long)1)<<(bSz-sPos))*nums[i])>largest ) break;
            if ( passes(nums[i],i) ) {
                sol[sPos++]=nums[i];
                rec(i+1);   // w/ num[i] in solution
                --sPos;
            }               // else, w/o num[i] in solution
        }
        if ( bSz < sPos ) {
            bSz = sPos;     // store best
            best = vector<int>(sol.begin(), sol.begin()+sPos);
        }
    }
public:
    vector<int> largestDivisibleSubset(vector<int>& numsOrig) {
        if ( (nSz=numsOrig.size())<=1 ) return numsOrig; 
        nums = numsOrig;
        sol = vector<int>(nSz);
        furthest = vector<int>(nSz,0);
        //
        sort (nums.begin(), nums.end());
        largest = nums.back();
        //
        rec(0);
        return best;
    }
};


----------------------------------------------------------------------------------------------------
Concise java solution O(n^2) time O(n)space
    // if we sort the array, every element in a divisibleSubset can be divisible by the element just before it.
    // for any element k, its largestDivisibleSubset that ends with k can be formed in the following way: 
    // use element k after any one of the previous elements that is divisble 
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int[] l = new int[nums.length]; // the length of largestDivisibleSubset that ends with element i
        int[] prev = new int[nums.length]; // the previous index of element i in the largestDivisibleSubset ends with element i
        
        Arrays.sort(nums);
        
        int max = 0;
        int index = -1;
        for (int i = 0; i < nums.length; i++){
            l[i] = 1;
            prev[i] = -1;
            for (int j = i - 1; j >= 0; j--){
                if (nums[i] % nums[j] == 0 && l[j] + 1 > l[i]){
                    l[i] = l[j] + 1;
                    prev[i] = j;
                }
            }
            if (l[i] > max){
                max = l[i];
                index = i;
            }
        }
        List<Integer> res = new ArrayList<Integer>();
        while (index != -1){
            res.add(nums[index]);
            index = prev[index];
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
Java DFS Solution 86 ms with explanation
 My solution uses DFS on the array after it is sorted in ascending order. Why sort in ascending order?
Let's pretend our input had the following values {1,6,2,3,4,8,24,9,48} in this order . Suppose we are looking at the pair 6 and 3. We know that 6%3=0 but that doesn't mean every multiple of 3 in 3s longest subset  is also a multiple of 6. For example, 9 is a multiple of 3 but not 6. However, we do know that every multiple of 6 is also a multiple of 3, hence by ordering the array such that 6 occurs after 3 we can recursively get the largest subsets of multiples of 6 (that will be comprised of values >=6) BEFORE forming longest subset of multiples of 3. . Repeat the same process for 9 (another multiple of 3) and so on and keep track of the largest subset that we can add 3 to. Cache the results so as to avoid repeated computation. For example, the subset {24,48} contains multiples of 1,2,3,4 and 6.By caching we avoid recomputing this subset for each of the aforementioned values.



 

    public class Solution {
            public List<Integer> largestDivisibleSubset(int[] nums) {
                
                if(nums==null||nums.length==0)
                {
                    return Collections.<Integer>emptyList();
                }
                if(nums.length==1)
                {
                    List<Integer> ls=new ArrayList<Integer>(1);
                    ls.add(nums[0]);
                    return ls;
                }
               Arrays.sort(nums);
        
             HashMap<Integer,List<Integer>> mp=new HashMap<Integer,List<Integer>>();
             List<Integer> maxSubset=null;
             for(int i=0;i<nums.length;i++)
             {
                 List<Integer> ls=null;
                    if(!mp.containsKey(i))
                    {
                        ls=dfs(i,nums,mp);
                        
                        
                    }else
                    {
                        ls=mp.get(i);
                    }
                    
                    if(maxSubset==null||ls.size()>maxSubset.size())
                    {
                        maxSubset=ls;
                    }
            }
            return maxSubset;
        }
        
         private List<Integer> dfs(int idx, int[] arr,HashMap<Integer,List<Integer>> mp)
         {
             if(mp.containsKey(idx))
             {
                 return mp.get(idx);
             }
             List<Integer> ls=new ArrayList<Integer>();
             
             for(int i=idx+1;i<arr.length;i++)
             {
                 if((arr[i]%arr[idx])==0)
                 {
                    List<Integer> r=dfs(i,arr,mp);
                    if(r.size()>ls.size())
                    {
                        ls=r;
                    }
                    
                 }
             }
            
             ls=new ArrayList<Integer>(ls);
             ls.add(0,arr[idx]);
             mp.put(idx,ls);
             return ls;
            
         }
        }

----------------------------------------------------------------------------------------------------
C++ Solution using DP
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> result(nums.size());
        vector<int> ret;
        for (int i = 0;i < nums.size();++i) {
            for (int j = 0;j < i;++j) {
                if (nums[i] % nums[j] == 0 && result[j].size() > result[i].size()) {
                    result[i] = result[j];
                }
            }
            result[i].push_back(nums[i]);
            if (ret.size() < result[i].size()) ret = result[i];
        }
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
Missing Test Cases
<p>I have read some solution online and notice there are some bugs. However, their solutions can pass the test.<br/>
Input:<br/>
&#91;1,2,4,8,9,72&#93;<br/>
Expected:<br/>
&#91;1,2,4,8,72&#93;<br/>
Wrong:<br/>
&#91;1,2,4,72&#93;<br/>
The set up is the same, they use hashmaps to record with each number as the largest number in the set, what is largest divisible subset.<br/>
1:&#91;1&#93;<br/>
2:&#91;1,2&#93;<br/>
4:&#91;1,2,4&#93;<br/>
8:&#91;1,2,4,8&#93;<br/>
9:&#91;1,9&#93;<br/>
In their solution, when they search to 72 and go backwards to search if there are divisor of 72 in previous numbers, they stop at the first divisor they come across, which is 9 in this case. That is not right.<br/>
so they got<br/>
72:&#91;1,9,72&#93;</p>
<p>So I think some test cases should be added here</p>


----------------------------------------------------------------------------------------------------
292 ms Python solution
class Solution(object):
    def largestDivisibleSubset(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        nums = sorted(nums)
        buckets = [None, []]
        if len(nums) < 2:
            return nums
        max_len = 0
        for n in nums:
            atemp = max_len + 1
            placed = False
            while atemp > 0 and not placed:
                if atemp == 1:
                    buckets[1].append((None, n))
                    max_len = max(max_len, atemp)
                    placed = True
                else:
                    for _, p in buckets[atemp-1]:
                        if n % p == 0:
                            while len(buckets) - 1 < atemp:
                                buckets.append([])
                            buckets[atemp].append((p, n))
                            max_len = max(max_len, atemp)
                            placed = True
                            break
                atemp -= 1
        ans = [buckets[-1][0][1]]
        target = buckets[-1][0][0]
        for i in xrange(max_len-1, 0, -1):
            for d, p in buckets[i]:
                if p == target:
                    ans.insert(0, p)
                    target = d
                    break
        return ans


----------------------------------------------------------------------------------------------------
Share my easy original DP O(n^2) Python
    class Solution(object):
        def largestDivisibleSubset(self, nums):
            """
            :type nums: List[int]
            :rtype: List[int]
            """
            nums.sort()
            n=len(nums)
            if n==0:
                return []
            elif n==1:
                return nums
            leng=[1 for i in range(n)]
            a=[[] for i in range(n)]
            max_l=1
            a[0]=[nums[0]]
            for i in range(1,n):
                for j in range(i-1,-1,-1):
                    if nums[i]%nums[j]==0:
                        if leng[j]+1>leng[i]:
                            leng[i]=leng[j]+1
                            a[i]=a[j]+[nums[i]]
                max_l=max(max_l,leng[i])       
                if leng[i]==1:
                    a[i]=[nums[i]]
            for j in range(n):
                if leng[j]==max_l:
                    return a[j]

----------------------------------------------------------------------------------------------------
C++ O(N^2) solution, 56ms
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if (nums.empty()) return vector<int>();
        sort(nums.begin(), nums.end());
        vector<pair<int, int>> dp(nums.size(), make_pair(1, -1));
        int globalLargest = 1, globalLargestIdx = 0;
        for (int i = 1; i < nums.size(); i++) {
            int largest = 1, parentIdx = -1;
            for (int j = i - 1; j > - 1; j--) {
                if (nums[i] % nums[j] == 0) {
                    if (dp[j].first + 1 > largest) {
                        parentIdx = j;
                        largest = dp[j].first + 1;
                    }
                }
            }
            dp[i].first = largest;
            dp[i].second = parentIdx;
            if (largest > globalLargest) {
                globalLargestIdx = i;
                globalLargest = largest;
            }
        }
        vector<int> ret;
        for (int idx = globalLargestIdx; idx != -1; idx = dp[idx].second) {
            ret.push_back(nums[idx]);
        }
        return ret;
    }

----------------------------------------------------------------------------------------------------
Clean code in C++ 52ms with some comments
vector<int> largestDivisibleSubset(vector<int>& nums) 
{
        int size = nums.size();
        if(!size) return vector<int>();
        sort(nums.begin(), nums.end()); //essential 
        //the maximal amount till current index and its corresponding last divisible index;
        vector<pair<int, int>> maxWithIndex(1, make_pair(1, -1)); 
        int globalMax = 1, index = 0;
        for(int i = 1; i < size; ++i)
        {
            int maxCount = 1, preIndex = -1;
            for(int j = i-1; j >=0; --j)
            {
                if(nums[i]%nums[j]==0 && maxWithIndex[j].first>=maxCount)
                    maxCount = maxWithIndex[j].first+1, preIndex = j;
            }
            maxWithIndex.emplace_back(maxCount, preIndex);
            if(maxCount > globalMax) globalMax = maxCount, index = i; //maintain the global max
        }
        vector<int> v;
        for(int i = 0; i < globalMax; ++i, index = maxWithIndex[index].second) //ensure ascending order
            v.insert(v.begin(), nums[index]);
        return v;
}


----------------------------------------------------------------------------------------------------
20 lines C++ O(n^2) solution
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if (nums.size() <= 1) return nums;
        sort(nums.begin(), nums.end());
        int maxLen = 1, maxIndx = 0;
        vector<pair<int, int>> temp(nums.size(), make_pair(1, -1));
        for (int i = 1; i < nums.size(); ++i) 
            for (int j = 0; j < i; ++j) 
                if (nums[i] % nums[j] == 0 && temp[i].first < temp[j].first + 1) {
                    temp[i].first = temp[j].first + 1;
                    temp[i].second = j;
                    if (maxLen < temp[i].first) {
                        maxLen = temp[i].first;
                        maxIndx = i;
                    }
                }
        vector<int> out;
        for ( ; maxIndx != -1; maxIndx = temp[maxIndx].second) out.push_back(nums[maxIndx]);
        return out;
    }
};


----------------------------------------------------------------------------------------------------
JAVA, 20ms, beats 99.28%
/*
 * Process nums increasingly.
 * lens[i] denotes the max length of the subset constructed so far containing nums[i].
 * If nums[j] (j > i) is multiple of nums[i], then lens[j] = max(lens[j], lens[i] + 1)
 */
public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length, maxIdx = 0;
        List<Integer> ans = new LinkedList<>();
        if (n == 0) return ans;
        Arrays.sort(nums);
        int[] lens = new int[n], prevs = new int[n];
        Arrays.fill(prevs, -1);
        for (int i = 0; nums[i] <= nums[n-1]/2; ++i) {
            for (int j = i + 1, f = 2; nums[i] <= nums[n-1]/f; f = (nums[j] + nums[i] - 1)/nums[i]) {
                int idx = Arrays.binarySearch(nums, j, n, f*nums[i]);
                if (idx > 0 && lens[idx] <= lens[i]) {
                    prevs[idx] = i;
                    lens[idx] = lens[i] + 1;
                    if (lens[idx] > lens[maxIdx]) maxIdx = idx;
                }
                j = idx >= 0 ? idx + 1 : -(idx + 1);
                if (j >= n) break;
            }
        }
        for (int i = maxIdx; i >= 0; i = prevs[i]) ans.add(0, nums[i]);
        return ans;
    }
}


----------------------------------------------------------------------------------------------------
