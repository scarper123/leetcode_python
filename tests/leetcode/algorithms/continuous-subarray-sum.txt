Java 5 lines clean solution
    public String licenseKeyFormatting(String s, int k) {
        StringBuilder sb = new StringBuilder();
        for (int i = s.length() - 1; i >= 0; i--)
            if (s.charAt(i) != '-')
                sb.append(sb.length() % (k + 1) == k ? '-' : "").append(s.charAt(i));
        return sb.reverse().toString().toUpperCase();
    } 


----------------------------------------------------------------------------------------------------
Python solution
class Solution(object):
    def licenseKeyFormatting(self, S, K):
        """
        :type S: str
        :type K: int
        :rtype: str
        """
        S = S.upper().replace('-','')
        size = len(S)
        s1 = K if size%K==0 else size%K
        res = S[:s1]
        while s1<size:
            res += '-'+S[s1:s1+K]
            s1 += K
        return res


----------------------------------------------------------------------------------------------------
4-line C++ concise solution to scan string backward
    string licenseKeyFormatting(string S, int K) {
      string res;
      for (auto i = S.rbegin(); i < S.rend(); i++)
        if (*i != '-') { // ignore '-' in original string
          if (res.size()%(K+1) == K) res += '-'; // every (K+1)th char is '-' from tail
          res += toupper(*i);
        }
        
      reverse(res.begin(), res.end());
      return res;
    }


----------------------------------------------------------------------------------------------------
Easy to understand using StringBuilder
public class Solution {
    public String licenseKeyFormatting(String S, int K) {
        // Replacing all - and converting all letters to uppercase
        String S1 = S.replace("-","");
        S1 = S1.toUpperCase();
        
        // Making stringBuilder 
        StringBuilder sb = new StringBuilder();
         for(int i=0; i<S1.length();i++) {
            sb.append(S1.charAt(i));
        }
        int len = sb.toString().length();
        // Inserting '-' from back at every K position
        for(int i=K; i < len; i=i+K) {
                sb.insert(len-i,'-');
            }
        return sb.toString();   
    }
}



----------------------------------------------------------------------------------------------------
Golang beats 100% at 6ms
import (
	"fmt"
	"strings"
)

func licenseKeyFormatting(S string, K int) string {
        S = strings.Replace(S, "-", "", -1)
        S = strings.ToUpper(S)
        mod := len(S) % K
        
        if mod == 0 {
            mod += K
        }
        for mod < len(S) {
            S = S[:mod] + "-" + S[mod:]
            mod += K + 1
        }
        return S
}



----------------------------------------------------------------------------------------------------
Python solution based on regex
class Solution(object):
    def licenseKeyFormatting(self, S, K):
        """
        :type S: str
        :type K: int
        :rtype: str
        """
        formatted = S.replace("-","",len(S)).upper()[::-1]
        formatted = re.sub(r'(\w{' + str(K) + r'})', r'\1-', formatted)
        formatted = formatted[::-1]
        formatted = re.sub(r'^-',r'', formatted)
        return formatted


----------------------------------------------------------------------------------------------------
Easy Understand Java solution using StringBuilder
public class Solution {
    public String licenseKeyFormatting(String S, int K) {
        String[] strs = S.split("-");
        StringBuilder rst = new StringBuilder();
        int gap = 'A' - 'a';
        
        for (String str : strs) {
            rst.append(str);
        }
        
        int len = rst.length();
        
        for (int i = 0; i < len; i++) {
            char c = rst.charAt(i);
            if (c>='a' && c<='z') {
                rst.setCharAt(i, (char)(c+gap));
            }
        }

        for (int i = len-K; i > 0; i -= K) {
            rst.insert(i, '-');
        }
        return rst.toString();
    }
}


----------------------------------------------------------------------------------------------------
Java easy to understand solution
public String licenseKeyFormatting(String S, int K) {
    
    S = S.replaceAll("[-]", "");
    S = S.toUpperCase();

    StringBuilder sb = new StringBuilder();
    sb.append(S);

    int i=sb.length()-K;
    while(i>0) {
        sb.insert(i, '-');
        i = i-K;
    }

    return sb.toString();
}

----------------------------------------------------------------------------------------------------
Java O(n)
public String licenseKeyFormatting(String s, int k) {
    StringBuilder res = new StringBuilder();
    for (int i=s.length()-1, rem = k+1;i>=0;i--) {
        if (s.charAt(i) == '-') continue;
	if (--rem == 0) {
	    res.append("-"); 
	    rem = k;
	}
	res.append(Character.toUpperCase(s.charAt(i)));
   }
   return res.reverse().toString();
}


----------------------------------------------------------------------------------------------------
one-liner
def license_key_formatting(s, k)
  s.upcase.tr('-', '').reverse.scan(/.{1,#{k}}/).join('-').reverse
end


----------------------------------------------------------------------------------------------------
Python, why is it faster to do a replace and turn to upper first than to just iterate once through?
upper

----------------------------------------------------------------------------------------------------
My Java code beats 99.67%
public String licenseKeyFormatting(String S, int K) {
    StringBuilder sb = new StringBuilder();
    char[] a = S.toCharArray();
    int dashes = 0;
    for (int i = 0; i < a.length; i++) {
        if (a[i] == '-') {
            dashes++;
        }
        else {
            if (a[i] >= 'a' && a[i] <= 'z') {
                a[i] = (char)('A' + (a[i] - 'a'));
            }
        }
    }
    
    int remain = (a.length - dashes) % K;
    int i = 0;
    for (char c : a) {
        if (c == '-') {
            continue;
        }
        if (remain > 0) {
            sb.append(c);
            remain--;
        }
        else {
            if (i % K == 0 && sb.length() > 0) {
                sb.append('-');
            }
            i++;
            sb.append(c);
        }
    }
    return sb.toString();
}

----------------------------------------------------------------------------------------------------
Java solution beats 89.44% submissions

    public String licenseKeyFormatting(String S, int K) {
        StringBuilder stringBuilder = new StringBuilder();
        char[] SChars = S.toCharArray();
        for (int i = S.length()-1, j = 0; i >= 0;) {
            if (j < K) {
                if (SChars[i] != '-') {
                    if (SChars[i] >= 'a' && SChars[i] <= 'z') stringBuilder.append(Character.toUpperCase(SChars[i]));
                    else stringBuilder.append(SChars[i]);
                    j++;
                }
                i--;
            } else if (j == K) {
                j = 0;
                stringBuilder.append('-');
            }
        }
        if (stringBuilder.length() > 1 && stringBuilder.substring(stringBuilder.length()-1).equals("-")) return stringBuilder.reverse().substring(1);
        return stringBuilder.reverse().toString();
    }



----------------------------------------------------------------------------------------------------
Simple Java Solution
    public String licenseKeyFormatting(String S, int K) {
        StringBuffer sb = new StringBuffer();
		int cnt = 0;
		for (int i = S.length() - 1; i >= 0; --i) {
			if (S.charAt(i) == '-') continue;
			if (cnt > 0 && (cnt % K) == 0) sb.insert(0, '-');
			sb.insert(0, Character.toUpperCase(S.charAt(i)));
			++cnt;
		}
		return sb.toString();
    }


----------------------------------------------------------------------------------------------------
Yet another Java solution (15ms)
public class Solution {
    public String licenseKeyFormatting(String S, int K) {
        if (S.length() == 0) return S;
        char[] chars = S.toCharArray();
        char[] res = new char[chars.length];
        int j = res.length;
        for (int i = chars.length - 1; i >= 0; i--) {
            char c = chars[i];
            if (Character.isAlphabetic(c)) res[--j] = Character.toUpperCase(c);
            else if (Character.isDigit(c)) res[--j] = c;
        }
        int len = res.length - j;
        int sp = len % K;
        int group = len / K;
        StringBuilder sb = new StringBuilder();
        sb.ensureCapacity(sp + group + len - sp);
        for (int i = 0; i < sp; i++) sb.append(res[j++]);
        for (int i = 0; i < group; i++) {
            if (i != 0 || sp > 0) sb.append('-');
            for (int rp = 0; rp < K; rp++) sb.append(res[j++]);
        }
        return sb.toString();
    }
}


----------------------------------------------------------------------------------------------------
Java solution
public class Solution {
    public String licenseKeyFormatting(String S, int K) {
        if (S == null || S.length() == 0) {
            return S;
        }
        StringBuffer preprocess = new StringBuffer();
        for (int i = 0; i < S.length(); i++) {
            char ch = S.charAt(i);
            if (ch == '-') {
                continue;
            }
            if (Character.isLowerCase(ch)) {
                ch = Character.toUpperCase(ch);
            }
            preprocess.append(ch);
        }
        int len = preprocess.length();
        int firstlen = len % K == 0 ? K : len % K;
        StringBuffer result = new StringBuffer();
        int groups = len / K + (firstlen < K ? 1 : 0);
        for (int group = 0, bIndex = 0; group < groups; group++) {
            for (int i = bIndex; i - bIndex < (group == 0 ? firstlen : K); i++) {
                result.append(preprocess.charAt(i));
            }
            bIndex += group == 0 ? firstlen : K;
            if (group < groups - 1) {
                result.append('-');
            }
        }
        return result.toString();
    }
}


----------------------------------------------------------------------------------------------------
C++ Easy to understand solution using backward traversal and transform().
class Solution {
public:
    string licenseKeyFormatting(string s, int k) {
                string res;
		int i = s.size()-1;
		int cnt = k;
		while (i >= 0) 
		{
			if (s[i] != '-') 
			{
			    res.push_back(s[i]);
		            cnt--;
			}
			if (cnt == 0) 
			{
			    res.push_back('-');
			    cnt = k;
			}
		    i--;
		}
		if (res.back() == '-') {
			res.pop_back();
		}
	     reverse(res.begin(),res.end());
             std::transform(res.begin(), res.end(), res.begin(), ::toupper);
	     return res;
    }
};



----------------------------------------------------------------------------------------------------
Java Beats 100 % StringBuilder
public class Solution {
    public String licenseKeyFormatting(String s, int k) {
        StringBuilder sb=new StringBuilder();
        for(char c: s.toCharArray()){
            if(c=='-')continue;
            if((c-'A')>25) c=(char)(c-32);
            sb.append(c);
        }
        int j=0;
        for(int i=sb.length()-1;i>0;i--){
            if(++j%k==0)sb.insert(i,"-");
        }
        return sb.toString();
    }
}


----------------------------------------------------------------------------------------------------
java short easy solution 21ms 80%
public String licenseKeyFormatting(String S, int K) {
        StringBuilder res = new StringBuilder(S.replaceAll("-",""));
        int k = string.length() - K;
        while(k > 0) {
            res.insert(k,"-");
            k -= K;
        }
        return res.toString().toUpperCase();
    }

----------------------------------------------------------------------------------------------------
C++ Solution without using reverse and&#x2F;or backward traversal
string licenseKeyFormatting(string S, int K) {
        string result="";
        int len2=0;
        for(int i=0;i<S.length();i++){
            if(S[i]!='-') len2++;
        }        
        if(len2==0)return result;        
        int first=len2%K;
        int first_len=first;
        for(int i=0;i<S.length();i++){           
            while(first>0){
                if(S[i]!='-'){
                   result=result + (char)toupper(S[i]);
                   first--;                
                }
                i++;
                if(first==0 && len2>first_len){
                    result= result+'-'; 
                    first_len+=1;
                }                
            }
            if(S[i]!='-'){                
                if((result.size()-first_len)%(K+1)==K){
                    result= result+'-';
                }
                result=result + (char)toupper(S[i]);
            }
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
