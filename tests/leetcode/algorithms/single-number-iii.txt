Java: Backtracking solution.
if the input is "aab", check if [0,0] "a" is palindrome. then check [0,1] "aa", then [0,2] "aab".
While checking [0,0], the rest of string is "ab",  use ab as input to make a recursive call.
![enter image description here][1]

in this example, in the loop of i=l+1, a recursive call will be made with input = "ab".
Every time a recursive call is made, the position of l move right. 

How to define a correct answer?
Think about DFS, if the current string to be checked (Palindrome) contains the last position, in this case "c", this path is a correct answer, otherwise, it's a false answer.

![enter image description here][2]

line 13:  is the boundary to check if the current string contains the last element. 
 l>=s.length()  

    public class Solution {
            List<List<String>> resultLst;
    	    ArrayList<String> currLst;
    	    public List<List<String>> partition(String s) {
    	        resultLst = new ArrayList<List<String>>();
    	        currLst = new ArrayList<String>();
    	        backTrack(s,0);
    	        return resultLst;
    	    }
    	    public void backTrack(String s, int l){
    	        if(currLst.size()>0 //the initial str could be palindrome
    	            && l>=s.length()){
    	                List<String> r = (ArrayList<String>) currLst.clone();
    	                resultLst.add(r);
    	        }
    	        for(int i=l;i<s.length();i++){
    	            if(isPalindrome(s,l,i)){
    	                if(l==i)
    	                    currLst.add(Character.toString(s.charAt(i)));
    	                else
    	                    currLst.add(s.substring(l,i+1));
    	                backTrack(s,i+1);
    	                currLst.remove(currLst.size()-1);
    	            }
    	        }
    	    }
    	    public boolean isPalindrome(String str, int l, int r){
    	        if(l==r) return true;
    	        while(l<r){
    	            if(str.charAt(l)!=str.charAt(r)) return false;
    	            l++;r--;
    	        }
    	        return true;
    	    }
    }


  [1]: http://1.bp.blogspot.com/-3g_qWEIsyUI/VJR0Co__PcI/AAAAAAAAAfg/okeb7u1mZnI/s1600/test.png
  [2]: http://i58.tinypic.com/2la69p2.png

----------------------------------------------------------------------------------------------------
My Java DP only solution without recursion. O(n^2)
  

           
    public class Solution {
     	public static List<List<String>> partition(String s) {
    		int len = s.length();
    		List<List<String>>[] result = new List[len + 1];
    		result[0] = new ArrayList<List<String>>();
    		result[0].add(new ArrayList<String>());
    
    		boolean[][] pair = new boolean[len][len];
    		for (int i = 0; i < s.length(); i++) {
    			result[i + 1] = new ArrayList<List<String>>();
    			for (int left = 0; left <= i; left++) {
    				if (s.charAt(left) == s.charAt(i) && (i-left <= 1 || pair[left + 1][i - 1])) {
    					pair[left][i] = true;
    					String str = s.substring(left, i + 1);
    					for (List<String> r : result[left]) {
    						List<String> ri = new ArrayList<String>(r);
    						ri.add(str);
    						result[i + 1].add(ri);
    					}
    				}
    			}
    		}
    		return result[len];
    	}
    }

Here the **pair** is to mark a range for the substring is a Pal. if pair[i][j] is true, that means sub string from i to j is pal.

The **result[i]**, is to store from beginng until current index i (Non inclusive), all possible partitions. From the past result we can determine current result. 

----------------------------------------------------------------------------------------------------
Clean C++ backtracking solution
The Idea is simple: loop through the string, check if substr(0, i) is palindrome. If it is, recursively call dfs() on the rest of sub string: substr(i+1, length). keep the current palindrome partition so far in the 'path' argument of dfs(). When reaching the end of string, add current partition in the result.

    class Solution {
    public:
        vector<vector<string>> partition(string s) {
            vector<vector<string> > ret;
            if(s.empty()) return ret;
            
            vector<string> path;
            dfs(0, s, path, ret);
            
            return ret;
        }
        
        void dfs(int index, string& s, vector<string>& path, vector<vector<string> >& ret) {
            if(index == s.size()) {
                ret.push_back(path);
                return;
            }
            for(int i = index; i < s.size(); ++i) {
                if(isPalindrome(s, index, i)) {
                    path.push_back(s.substr(index, i - index + 1));
                    dfs(i+1, s, path, ret);
                    path.pop_back();
                }
            }
        }
        
        bool isPalindrome(const string& s, int start, int end) {
            while(start <= end) {
                if(s[start++] != s[end--])
                    return false;
            }
            return true;
        }
    };

----------------------------------------------------------------------------------------------------
Java DP + DFS solution
The normal dfs backtracking will need to check each substring for palindrome, but a dp array can be used to record the possible break for palindrome before we start recursion.

    public class Solution {
        public List<List<String>> partition(String s) {
            List<List<String>> res = new ArrayList<>();
            boolean[][] dp = new boolean[s.length()][s.length()];
            for(int i = 0; i < s.length(); i++) {
                for(int j = 0; j <= i; j++) {
                    if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])) {
                        dp[j][i] = true;
                    }
                }
            }
            helper(res, new ArrayList<>(), dp, s, 0);
            return res;
        }
        
        private void helper(List<List<String>> res, List<String> path, boolean[][] dp, String s, int pos) {
            if(pos == s.length()) {
                res.add(new ArrayList<>(path));
                return;
            }
            
            for(int i = pos; i < s.length(); i++) {
                if(dp[pos][i]) {
                    path.add(s.substring(pos,i+1));
                    helper(res, path, dp, s, i+1);
                    path.remove(path.size()-1);
                }
            }
        }
    }

----------------------------------------------------------------------------------------------------
12ms 14-lines C++
The problem has a nice structure that backtracking naturally fits in. The structure is, given a starting position `idx`, we search from `idx` till the end of the string `s.length() - 1`. Once we reach a position `i` such that the sub-string from `idx` to `i` (`s.substr(idx, i  - idx + 1)`) is a palindrome, we add it to a temporary `tmp`. Then we recursively call the same function to process the remaining sub-string. Once we reach the end of the string, we add `tmp` into the result `res` of all the possible partitioning.
 
Then, **backtracking** happens! Remember that at position `i`, we find `s.substr(idx, i - idx + 1)` to be a palindrome and we immediately add it to `tmp`. It is obvious that there may be some position `j` such that `j > i` and `s.substr(idx, j - idx + 1)` is also a palindrome. So we need to recover to the state before adding `s.substr(idx, i - idx + 1)` to `tmp` and continue to find the next palindrome position after `i`. And we simply need to pop `s.substr(idx, i - idx + 1)` out of `tmp` to make things work.  
 
Putting these together, we can write down the following code, which should be self-explanatory.

    class Solution {
    public:
        vector<vector<string>> partition(string s) {
            vector<vector<string>> res;
            vector<string> tmp;
            getPartition(s, 0, tmp, res);
            return res;
        }
    private: 
        void getPartition(string& s, int idx, vector<string>& tmp, vector<vector<string>>& res) {
            if (idx == s.length()) {
                res.push_back(tmp);
                return;
            }
            for (int i = idx, n = s.length(); i < n; i++) {
                int l = idx, r = i;
                while (l < r && s[l] == s[r]) l++, r--;
                if (l >= r) {
                    tmp.push_back(s.substr(idx, i - idx + 1));
                    getPartition(s, i + 1, tmp, res);
                    tmp.pop_back();
                }
            }
        }
    };

----------------------------------------------------------------------------------------------------
1-liner Python, Ruby
Python:

Broken into several physical lines for readability, but still one logical line and just one simple statement.

    def partition(self, s):
        return [[s[:i]] + rest
                for i in xrange(1, len(s)+1)
                if s[:i] == s[i-1::-1]
                for rest in self.partition(s[i:])] or [[]]

Ruby:

    def partition(s)
      s == '' ? [[]] : s.size.times.flat_map { |i| s[0..i] != s[0..i].reverse ? [] :
        partition(s[i+1..-1]).map { |rest| [s[0..i]] + rest }
      }
    end

----------------------------------------------------------------------------------------------------
Python recursive&#x2F;iterative backtracking solution
Inspired by caikehe's solution:

    def partition(self, s):
        res = []
        self.dfs(s, [], res)
        return res
    
    def dfs(self, s, path, res):
        if not s:
            res.append(path)
            return
        for i in range(1, len(s)+1):
            if self.isPal(s[:i]):
                self.dfs(s[i:], path+[s[:i]], res)
        
    def isPal(self, s):
        return s == s[::-1]

----------------------------------------------------------------------------------------------------
Concise Java Solution
    public class Solution {
        public List<List<String>> partition(String s) {
            List<List<String>> res=new ArrayList<List<String>>();
            if(s.length()==0)return res;
            recur(res,new ArrayList<String>(),s);
            return res;
        }
        
        public void recur(List<List<String>> res,List<String> temp, String s){
            if(s.length()==0){
                res.add(new ArrayList<String>(temp));
                return;
            }
            for(int i=0;i<s.length();i++){
                if(isPalin(s.substring(0,i+1))){
                    temp.add(s.substring(0,i+1));
                    recur(res,temp,s.substring(i+1));
                    temp.remove(temp.size()-1);
                }
            }
        }
        
        public boolean isPalin(String s){
            for(int i=0;i<s.length()/2;i++){
                if(s.charAt(i)!=s.charAt(s.length()-1-i))return false;
            }
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
My c++ solution 13ms backtracking
