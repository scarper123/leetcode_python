Concise O(log N) Binary search solution
    class Solution {
    public:
        int search(int A[], int n, int target) {
            int lo=0,hi=n-1;
            // find the index of the smallest value using binary search.
            // Loop will terminate since mid < hi, and lo or hi will shrink by at least 1.
            // Proof by contradiction that mid < hi: if mid==hi, then lo==hi and loop would have been terminated.
            while(lo<hi){
                int mid=(lo+hi)/2;
                if(A[mid]>A[hi]) lo=mid+1;
                else hi=mid;
            }
            // lo==hi is the index of the smallest value and also the number of places rotated.
            int rot=lo;
            lo=0;hi=n-1;
            // The usual binary search and accounting for rotation.
            while(lo<=hi){
                int mid=(lo+hi)/2;
                int realmid=(mid+rot)%n;
                if(A[realmid]==target)return realmid;
                if(A[realmid]<target)lo=mid+1;
                else hi=mid-1;
            }
            return -1;
        }
    };

----------------------------------------------------------------------------------------------------
Revised Binary Search
    public class Solution {
    public int search(int[] A, int target) {
        int lo = 0;
        int hi = A.length - 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (A[mid] == target) return mid;
            
            if (A[lo] <= A[mid]) {
                if (target >= A[lo] && target < A[mid]) {
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            } else {
                if (target > A[mid] && target <= A[hi]) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
        }
        return A[lo] == target ? lo : -1;
    }
}

----------------------------------------------------------------------------------------------------
Clever idea making it simple
This very nice idea is from [rantos22's solution](https://leetcode.com/discuss/66853/c-4-lines-4ms) who sadly only commented *"You are not expected to understand that :)"*, which I guess is the reason it's now it's hidden among the most downvoted solutions. I present an explanation and a more usual implementation.

---

**Explanation**

Let's say `nums` looks like this: [12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

Because it's not fully sorted, we can't do normal binary search. But here comes the trick:

- If target is let's say 14, then we adjust `nums` to this, where "inf" means infinity:  
[12, 13, 14, 15, 16, 17, 18, 19, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]  

- If target is let's say 7, then we adjust `nums` to this:  
[-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

And then we can simply do ordinary binary search.

Of course we don't actually adjust the whole array but instead adjust only on the fly only the elements we look at. And the adjustment is done by comparing both the target and the actual element against nums[0].

---

**Code**

If `nums[mid]` and `target` are *"on the same side"* of `nums[0]`, we just take `nums[mid]`. Otherwise we use -infinity or +infinity as needed.

    int search(vector<int>& nums, int target) {
        int lo = 0, hi = nums.size();
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            
            double num = (nums[mid] < nums[0]) == (target < nums[0])
                       ? nums[mid]
                       : target < nums[0] ? -INFINITY : INFINITY;
                       
            if (num < target)
                lo = mid + 1;
            else if (num > target)
                hi = mid;
            else
                return mid;
        }
        return -1;
    }

----------------------------------------------------------------------------------------------------
Java AC Solution using once binary search
The idea is that when rotating the array, there must be one half of the array that is still in sorted order. 
For example,  6 7 1 2 3 4 5, the order is disrupted from the point between 7 and 1. So when doing binary search, we can make a judgement that which part is ordered and whether the target is in that range, if yes, continue the search in that half, if not continue in the other half. 
    
    

    public class Solution {
        public int search(int[] nums, int target) {
            int start = 0;
            int end = nums.length - 1;
            while (start <= end){
                int mid = (start + end) / 2;
                if (nums[mid] == target)
                    return mid;
            
                if (nums[start] <= nums[mid]){
                     if (target < nums[mid] && target >= nums[start]) 
                        end = mid - 1;
                     else
                        start = mid + 1;
                } 
            
                if (nums[mid] <= nums[end]){
                    if (target > nums[mid] && target <= nums[end])
                        start = mid + 1;
                     else
                        end = mid - 1;
                }
            }
            return -1;
        }
    }

----------------------------------------------------------------------------------------------------
Pretty short C++&#x2F;Java&#x2F;Ruby&#x2F;Python
Explanation below the codes.

**Ruby:**

    def search(nums, target)
      i = (0...nums.size).bsearch { |i|
        (nums[0] <= target) ^ (nums[0] > nums[i]) ^ (target > nums[i])
      }
      nums[i || 0] == target ? i : -1
    end

**Ruby Golf**, just once for fun:

    def search(n, t)
      i=(0...n.size).bsearch{|i|(n[0]<=t)^(n[0]>n[i])^(t>n[i])};n[i||0]==t ?i:-1
    end

**Python:**

    def search(self, nums, target):
        lo, hi = 0, len(nums) - 1
        while lo < hi:
            mid = (lo + hi) / 2
            if (nums[0] > target) ^ (nums[0] > nums[mid]) ^ (target > nums[mid]):
                lo = mid + 1
            else:
                hi = mid
        return lo if target in nums[lo:lo+1] else -1

**Python using `bisect`:**

    class Solution:
        def search(self, nums, target):
            self.__getitem__ = lambda i: \
                (nums[0] <= target) ^ (nums[0] > nums[i]) ^ (target > nums[i])
            i = bisect.bisect_left(self, True, 0, len(nums))
            return i if target in nums[i:i+1] else -1

**C++:**

    int search(vector<int>& nums, int target) {
        int lo = 0, hi = int(nums.size()) - 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if ((nums[0] > target) ^ (nums[0] > nums[mid]) ^ (target > nums[mid]))
                lo = mid + 1;
            else
                hi = mid;
        }
        return lo == hi && nums[lo] == target ? lo : -1;
    }

**Java:**

    public int search(int[] nums, int target) {
        int lo = 0, hi = nums.length - 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if ((nums[0] > target) ^ (nums[0] > nums[mid]) ^ (target > nums[mid]))
                lo = mid + 1;
            else
                hi = mid;
        }
        return lo == hi && nums[lo] == target ? lo : -1;
    }

---

Explanation
-

My solutions use binary search guided by the following thoughts:

Remember the array is sorted, except it might drop at one point.

- **If nums[0] <= nums[i]**, then nums[0..i] is sorted (in case of "**==**" it's just one element, and in case of "**<**" there must be a drop elsewhere). So we should keep searching in nums[0..i] if the target lies in this sorted range, i.e., if `nums[0] <= target <= nums[i]`.

- **If nums[i] < nums[0]**, then nums[0..i] contains a drop, and thus nums[i+1..end] is sorted and lies strictly between nums[i] and nums[0]. So we should keep searching in nums[0..i] if the target *doesn't* lie strictly between them, i.e., if `target <= nums[i] < nums[0]` or `nums[i] < nums[0] <= target`

Those three cases look cyclic:

        nums[0] <= target <= nums[i]
                   target <= nums[i] < nums[0]
                             nums[i] < nums[0] <= target

So I have the three checks `(nums[0] <= target)`, `(target <= nums[i])` and `(nums[i] < nums[0])`, and I want to know whether exactly two of them are true. They can't all be true or all be false (check it), so I just need to distinguish between "two true" and "one true". Parity is enough for that, so instead of adding them I xor them, which is a bit shorter and particularly helpful in Java and Ruby, because those don't let me add booleans but do let me xor them.

(Actually while developing this I thought of permutations of nums[0], target and nums[i] and the permutation parity and saw those three checks as representing inversions, but I had trouble putting that into words and now find the above explanation much better. But it helped me get there, so I wanted to mention it here.)


----------------------------------------------------------------------------------------------------
Python binary search solution - O(logn) - 48ms
    class Solution:
        # @param {integer[]} numss
        # @param {integer} target
        # @return {integer}
        def search(self, nums, target):
            if not nums:
                return -1
    
            low, high = 0, len(nums) - 1
    
            while low <= high:
                mid = (low + high) / 2
                if target == nums[mid]:
                    return mid
    
                if nums[low] <= nums[mid]:
                    if nums[low] <= target <= nums[mid]:
                        high = mid - 1
                    else:
                        low = mid + 1
                else:
                    if nums[mid] <= target <= nums[high]:
                        low = mid + 1
                    else:
                        high = mid - 1
    
            return -1

----------------------------------------------------------------------------------------------------
Binary Search, Java Solusion. O(log(n))
    public int search(int[] A, int target) {
        if (A.length == 0) return -1;
        int L = 0, R = A.length-1;
        //
        if (target < A[L] && target > A[R]) return -1;
        
        while (L < R) {
            int M = (L + R)/2;
            if (A[M] <= A[R]) {
                if (target > A[M] && target <= A[R]) {
                    L = M+1;
                } else {
                    R = M;
                }
                
            } else {
                if (target <= A[M] && target >= A[L]) {
                        R = M;
                } else {
                    L = M+1;
                }
            }
        }
        if (A[L] == target) return L;
        else return -1;
    }

----------------------------------------------------------------------------------------------------
C++ binary search with comments; easy to read and understand
    class Solution {
    public:
        int search(vector<int>& nums, int target) {
            int l = 0, r = nums.size()-1;
            while (l <= r) {
                int mid = (l+r) / 2;
                if (target == nums[mid])
                    return mid;
                // there exists rotation; the middle element is in the left part of the array
                if (nums[mid] > nums[r]) {
                    if (target < nums[mid] && target >= nums[l])
                        r = mid - 1;
                    else
                        l = mid + 1;
                }
                // there exists rotation; the middle element is in the right part of the array
                else if (nums[mid] < nums[l]) {
                    if (target > nums[mid] && target <= nums[r])
                        l = mid + 1;
                    else
                        r = mid - 1;
                }
                // there is no rotation; just like normal binary search
                else {
                    if (target < nums[mid])
                        r = mid - 1;
                    else
                        l = mid + 1;
                }
            }
            return -1;
        }
    };

----------------------------------------------------------------------------------------------------
Share my pretty neat Java BS solution
I had different versions for this problem and read several other people's solutions and I came up with this neat solution. I want to share it here and hope you like it. The idea is to compare the middle element with the left element to decide which part is in order.

    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) return -1;
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (nums[m] >= nums[l]) {
                if (target <= nums[m] && target >= nums[l]) r = m;
                else l = m + 1;
            } else {
                if (target > nums[m] && target <= nums[r]) l = m + 1;
                else r = m;
            }
        }
        return nums[l] == target ? l : -1;
    }



----------------------------------------------------------------------------------------------------
My accepted C++ codes.  O(logN)  4ms
Binary search. 

    class Solution {
    public:
        int search(vector<int>& nums, int target) {
            if(nums.size() == 0)
                return -1;
            int left = 0;
            int right = nums.size()-1;
            while(left <= right){
                int mid = (left+right)/2;
                if(target == nums[mid])
                    return mid;
                if((nums[mid]>=nums[left] && (target>nums[mid] || (target<nums[left]))) || (nums[mid]<nums[left] && target>nums[mid] && target<=nums[right]))
                    left = mid + 1;
                else
                    right = mid -1;
            }
            return -1;
        }
    };

----------------------------------------------------------------------------------------------------
Simple and easy understanding Java solution
    public int search(int[] nums, int target) {
		        int pivot = findPivot(nums);
		        return binarySearch(nums, 0, pivot, target) + binarySearch(nums, pivot + 1, nums.length - 1, target) + 1;
		    }
		 	
		 	public int findPivot(int nums[]){
		 		int i = 0, j = nums.length - 1;
				while(i < j - 1){
					int mid = i + (j - i) / 2;
					if(nums[i] < nums[mid] && nums[j] < nums[mid]){
						i = mid;
					}else {
						j = mid;
					}
				}
		 		return i;
		 	}
		 	
		 	public int binarySearch(int a[], int start, int end, int key){
				int i = start, j = end;
				while(i <= j){
					int mid = i + (j - i) / 2;
					if(a[mid] > key){
						j = mid - 1;
					}else if(a[mid] < key){
						i = mid + 1;
					}
					else return mid;
				}
				return -1;
			}

----------------------------------------------------------------------------------------------------
Java Binary Search with Recursion
We can take advantage of the fact that the array is sorted (although rotated). <br>
1. Figure out if left half is sorted <br>
1.1. If the target is on left side, continue binary search on left half. <br>
1.2 If not, it must of in the right half. <br>
2. Similarly figure out if right half is sorted <br>
2.1. If the target is on right side, continue binary search on right half. <br>
2.2 If not, it must of in the left half.

    public int search(int[] nums, int target) {
        return search(nums, 0, nums.length-1, target);
    }
    
    //6,7,1,2,3,4,5
    public int search (int[] nums, int first, int last, int target){
        if (first > last) return -1;
        
        int mid = (first + last) / 2;
        if (nums[mid] == target) return mid;
        
        if (nums[first] <= nums[mid]) // Left side is sorted
            if (target <= nums[mid] && target >= nums[first]) // target is on left side
                return search (nums, first, mid - 1, target);
            else // target is on the right side
                return search (nums, mid + 1, last, target);
        if (nums[mid] <= nums[last])// Right side is sorted
            if (target >= nums[mid] && target <= nums[last]) // target is right side
                return search (nums, mid + 1, last, target);
            else // target is on left side
                return search (nums, first, mid - 1, target);
        
        return -1;
                
    }

----------------------------------------------------------------------------------------------------
Require admin to update test cases
I think it's necessary to update test cases. The reason is as follows:

when I easily try to find the target one by one in the array and it's a O(n) algorithm, it costs 4ms, 
the O(n) solution:

    class Solution {
    public:
        int search(vector<int>& nums, int target) {
            for(int i=0; i<nums.size(); i++)
                if(nums[i] == target)
                    return i;
            return -1;
        }
    };

however, when I first find the min index using binary search, and search the target using binary search again, which is a O(lgn) algorithm, it costs 12ms!
the O(logn) solution:

    class Solution {
    public:
        int search(vector<int>& nums, int target) {
            if(nums.size()==0)
                return -1;
    
            int p = min_index(nums);
            if(target < nums[p] || target > nums[p==0?(nums.size()-1):(p-1)])
                return -1;
            if(p==0)
            {
                return binary_search(nums, 0, nums.size()-1, target);
            }
            if(target == nums[nums.size()-1])
                return nums.size()-1;
            else if(target < nums[nums.size()-1])
                return binary_search(nums, p, nums.size()-1, target);
            else
                return binary_search(nums, 0, p-1, target);
        }
        
        
        int binary_search(vector<int> &v, int left, int right, int val)
        {
            while(left<=right) {
                int m = (left+right)/2;
                if(v[m] == val)
                    return m;
                if(v[m] > val)
                    right = m-1;
                else
                    left = m+1;
            }
            return -1;
        }
        
        int min_index(vector<int> &nums)
        {
            int left = 0, right = nums.size()-1;
            while(left <= right) {
                if(nums[left] < nums[right])
                    return left;
                
                int mid = (left+right)/2;
                if(nums[mid] > nums[left])
                    left = mid;
                else if(nums[mid] < nums[left])
                    right = mid;
                else {
                    return nums[left] < nums[right] ? left:right;
                }
            }
        }
    };

----------------------------------------------------------------------------------------------------
Python 44ms solution Binary Search O(logn)
    class Solution:
    # @param {integer[]} nums
    # @param {integer} target
    # @return {integer}
    def search(self, nums, target):
        if not nums:
            return -1
        return self.binarySearch(nums, target, 0, len(nums)-1)
        
    def binarySearch(self, nums, target, start, end):
        if end < start:
            return -1
        mid = (start+end)/2
        if nums[mid] == target:
            return mid
        if nums[start] <= target < nums[mid]: # left side is sorted and has target
            return self.binarySearch(nums, target, start, mid-1)
        elif nums[mid] < target <= nums[end]: # right side is sorted and has target
            return self.binarySearch(nums, target, mid+1, end)
        elif nums[mid] > nums[end]: # right side is pivoted
            return self.binarySearch(nums, target, mid+1, end)
        else: # left side is pivoted
            return self.binarySearch(nums, target, start, mid-1)

----------------------------------------------------------------------------------------------------
C++  4 lines 4ms
    int search(vector<int>& nums, int target) 
    {
            auto skip_left  = [&]( int x) { return x >= nums[0] ? numeric_limits<int>::min() : x; };
            auto skip_right = [&] (int x) { return x < nums[0] ? numeric_limits<int>::max() : x; };
            auto adjust = [&] (int x) { return target < nums[0] ? skip_left(x) : skip_right(x); };
      
            auto it = lower_bound( nums.begin(), nums.end(), target, [&] (int x, int y) { return adjust(x) < adjust(y); } );
                
            return it != nums.end() && *it == target ? it-nums.begin() : -1;
    }



You are not expected to understand that :)

----------------------------------------------------------------------------------------------------
Java intuitive, closest to unflavored binary search
I have looked at popular solutions like [this][1], [this][2] and [this][3] , and found that the top-level logic is not consistent with binary search, because they compare nums[left] or nums[right] against nums[mid], instead of against target.

If we keep the logic of binary search, and just checking monotonicity inside the if block, the logic will be closest to unflavored binary search. Easier to understand and connect to binary search.


    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] > target) {
                // the left half is monotonic, yet still does not satisfy
                if (nums[left] <= nums[mid] && nums[left] > target) { 
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            } else {
                // the right half is monotonic, yet still does not satisfy
                if (nums[right] >= nums[mid] && nums[right] < target) { 
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }
        return -1;
    }


  [1]: https://leetcode.com/discuss/41134/java-ac-solution-using-once-binary-search
  [2]: https://leetcode.com/discuss/25389/binary-search-java-solusion-o-log-n
  [3]: https://leetcode.com/discuss/22678/revised-binary-search

----------------------------------------------------------------------------------------------------
Binary search is used here
    public class N2_1_3_SearchRotatedSortedArray {
	public int search(int[] A, int target) {
        int left = 0;
        int right = A.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (A[mid] == target) {
                return mid;
            }
            if (A[left] <= A[mid]) {
                if (A[left] <= target && target < A[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (A[mid] < target && target <= A[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
	
	  public static void main(String[] args) {
  		
  		int A[] = {4,5,1,2,3};
  		N2_1_3_SearchRotatedSortedArray client = new N2_1_3_SearchRotatedSortedArray();
  		int result = client.search(A,3);
  		System.out.println(result);	
  		
  	}
	
}


----------------------------------------------------------------------------------------------------
&#91;Solution&#93; O(logn) binary search solution with explanation (Java)
    public class Solution {
        public int searchHelper(int[] A, int target, int start, int end){
            if(start>end){
                return -1;
            }
            int mid = (start+end)/2;
            if(A[mid] == target){
                return mid;
            }
            
            //Case 1: Left half is sorted
            if(A[mid] >= A[start]){
                if(target >= A[start] && target <= A[mid]){
                    return searchHelper(A,target,start,mid-1);    
                }
                else{
                    return searchHelper(A,target,mid+1,end);
                }
            }
            //Case 2: Right half is sorted
            if(A[end]>=A[mid]){
                if(target>=A[mid] && target<=A[end]){
                    return searchHelper(A,target,mid+1,end);
                }
                else{
                    return searchHelper(A,target,start,mid-1);
                }
            }
            return -1;
        }
        
        public int search(int[] A, int target) {
            return searchHelper(A,target,0,A.length-1);
        }
    }

Given the assumption of unique elements, there are 2 possibilities:
1. Left half is sorted i.e. pivot is in right half
2. Right half is sorted i.e. pivot is in left half

If target value is within the range of sorted half, binary search continues there. 

Otherwise, binary search continues in the half with the pivot.

----------------------------------------------------------------------------------------------------
Share my simple O(logN) java solution
    public class Solution {
        public int search(int[] nums, int target) {
            // find index of min
            int start=0;
            int end=nums.length-1; 
            int minPivot=0;
            while (start<end){
                int mid=(start+end)/2; 
                if(nums[mid]>nums[mid+1]){
                    minPivot=mid+1;
                    break;
                }
                if(nums[mid+1]>nums[end]){
                    start=mid+1;
                }else{
                    end=mid;
                }
            }
            //find target
            int offset=minPivot; 
            start=0;
            end=nums.length-1;
            while (start<=end){
                int mid=(start+end)/2;
                int index=(mid+offset)%nums.length;
                if(nums[index]==target){
                    return index;
                }else if(target>nums[index]){
                    start=mid+1;
                }else{
                    end=mid-1;
                }
            }
            return -1;
        }
    }

----------------------------------------------------------------------------------------------------
C++ binary search solution.
        
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size()-1;
        while (l<=r) {
            int mid = (r-l)/2+l;
            if (nums[mid] == target)
                return mid;
            if (nums[mid] < nums[r]) {
                if (nums[mid]<target && target<=nums[r])
                    l = mid+1;
                else
                    r = mid-1;
            } else {
                if(nums[l]<=target && target<nums[mid])
                    r = mid-1;
                else
                    l = mid+1;
            }
        }
        return -1;
    }

----------------------------------------------------------------------------------------------------
