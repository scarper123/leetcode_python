Easy concept with Python&#x2F;C++&#x2F;Java Solution
class Solution(object):
    def reconstructQueue(self, people):
        if not people: return []

        # obtain everyone's info
        # key=height, value=k-value, index in original array
        peopledct, height, res = {}, [], []
        
        for i in xrange(len(people)):
            p = people[i]
            if p[0] in peopledct:
                peopledct[p[0]] += (p[1], i),
            else:
                peopledct[p[0]] = [(p[1], i)]
                height += p[0],

        height.sort()      # here are different heights we have

        # sort from the tallest group
        for h in height[::-1]:
            peopledct[h].sort()
            for p in peopledct[h]:
                res.insert(p[0], people[p[1]])

        return res



----------------------------------------------------------------------------------------------------
Explanation of the neat Sort+Insert solution
def reconstructQueue(self, people):
    people.sort(key=lambda (h, k): (-h, k))
    queue = []
    for p in people:
        queue.insert(p[1], p)
    return queue


----------------------------------------------------------------------------------------------------
6 lines  Concise C++
vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
    auto comp = [](const pair<int, int>& p1, const pair<int, int>& p2)
                    { return p1.first > p2.first || (p1.first == p2.first && p1.second < p2.second); };
    sort(people.begin(), people.end(), comp);
    vector<pair<int, int>> res;
    for (auto& p : people) 
        res.insert(res.begin() + p.second, p);
    return res;
}


----------------------------------------------------------------------------------------------------
Java solution using Arrays.sort() and &quot;insert sorting&quot; idea
    public int[][] reconstructQueue(int[][] people) {
        if (people == null || people.length == 0 || people[0].length == 0)
            return new int[0][0];
            
        Arrays.sort(people, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (b[0] == a[0]) return a[1] - b[1];
                return b[0] - a[0];
            }
        });
        
        int n = people.length;
        ArrayList<int[]> tmp = new ArrayList<>();
        for (int i = 0; i < n; i++)
            tmp.add(people[i][1], new int[]{people[i][0], people[i][1]});

        int[][] res = new int[people.length][2];
        int i = 0;
        for (int[] k : tmp) {
            res[i][0] = k[0];
            res[i++][1] = k[1];
        }
        
        return res;
    }


----------------------------------------------------------------------------------------------------
O(n sqrt(n)) solution
# The original O(n^2) solution.
class Solution(object):
    def reconstructQueue(self, people):
        queue = []
        for p in sorted(people, key=lambda (h, t): (-h, t)):
            queue.insert(p[1], p)
        return queue
nsquared = Solution().reconstructQueue

# The O(n sqrt(n)) solution.
class Solution(object):
    def reconstructQueue(self, people):
        blocks = [[]]
        for p in sorted(people, key=lambda (h, t): (-h, t)):
            index = p[1]

            for i, block in enumerate(blocks):
                m = len(block)
                if index <= m:
                    break
                index -= m
            block.insert(index, p)
            if m * m > len(people):
                blocks.insert(i + 1, block[m/2:])
                del block[m/2:]

        return [p for block in blocks for p in block]
nsqrtn = Solution().reconstructQueue

# Generate a large test case and time it.
from bisect import bisect
from random import randint, shuffle
from timeit import timeit
n = 300000
heights = [randint(1, n) for _ in range(n)]
standing = []
people = []
for h in heights:
    i = bisect(standing, -h)
    standing.insert(i, -h)
    people.append([h, i])
shuffle(people)
for solution in nsquared, nsqrtn, nsquared, nsqrtn:
    print timeit(lambda: solution(people), number=1)


----------------------------------------------------------------------------------------------------
O(nlogn) Binary Index Tree C++ solution
class Solution {
public:
    typedef pair<int,int> Node;
    vector<int> c;
    int n;
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        int len = people.size();
        vector<Node> ans(len);
        vector<int> tmp(len+2,0);
        c = tmp;
        n = len;
        
        //initialize
        for(int i = 1; i <= n; i++)update(i,1);
        sort(people.begin(), people.end());
        
        int pre = -1;
        vector<int> preNum;
        
        for(int i = 0; i < len; i++)
        {
            //amotized O(1) operation
            if(people[i].first != pre)
            {
                for(int j = 0; j < preNum.size(); j++)update(preNum[j],-1);
                preNum.clear();
                    
            }
            int num = findKth(people[i].second+1);
            ans[num-1] = people[i];
            
            preNum.push_back(num);
            pre = people[i].first;
        }
        
        return ans;
        
    }
    
   //Binary Index Tree update
    void update(int idx, int val)
    {
        while(idx <= n)
        {
            c[idx] += val;
            idx += idx & -idx;
        }
    }
    
    //Binary Index Tree getSum [1, idx]
    int getsum(int idx)
    {
        int sum = 0;
        while(idx > 0)
        {
            sum += c[idx];
            idx -= idx & -idx;
        }
        return sum;
    }
    
    //find-Kth position, Here I use Binary-search, So complexity is O(lgN*lgN)
    int findKth(int k)
    {
        int l = 1, r = n, mid;
        while(l <= r)
        {
            mid = (l + r) >> 1;
            if(getsum(mid) >= k)r = mid - 1;
            else l = mid + 1;
        }
        return l;
    }
    
    bool static cmp(Node a, Node b)
    {
        if(a.first == b.first)return a.second < b.second;
        return a.first < b.first;
    }
};


//Another O(lgN) find_Kth implementaiton
/*
int find_kth(int k)
{
    int cnt = 0, ans = 0;
    for(int i = 20; i >=0; i--)
    {
        ans += 1 << i;
        if(ans >= n || cnt + c[ans] >= k)ans -= 1 << i;
        else cnt += c[ans];
    }
    return ans + 1;
}
*/


----------------------------------------------------------------------------------------------------
Worse case O(n^2) and O(nlogn) in average using binary tree travel
class Node(object):
    def __init__(self,p):
        """
        For general programming, it's better to create Person class.
        """
        self.person=p
        self.hcnt=1
        self.left=None
        self.right=None

class Solution(object):
    def reconstructQueue(self,people):
        if not people:
            return []
        # sort the people with height descending
        # if height equal sort with hcnt ascending
        people.sort(cmp=lambda x,y:y[0]-x[0] if x[0]!=y[0] else x[1]-y[1])
        root=Node(people[0])
        for p in people[1:]:
            self.insert(root,p,p[1])
        res=[]
        self.inorder(root,res)
        return res
            
    def insert(self,root,p,hcnt):
        # compare the height cnt with root
        # if the hight count less than the root, go to the left
        if hcnt<root.hcnt:
            if not root.left:
                root.left=Node(p)
            else:
                self.insert(root.left,p,hcnt)
            # increase the root cnt,means number preceding in the left subtree
            root.hcnt+=1
        else:
            if not root.right:
                root.right=Node(p)
            else:
                # decrease the hcnt since it already has root.cnt before the left subtree
                self.insert(root.right,p,hcnt-root.hcnt)
                
    def inorder(self,root,res):
        if not root:
            return 
        self.inorder(root.left,res)
        res.append(root.person)
        self.inorder(root.right,res)


----------------------------------------------------------------------------------------------------
Java solution using PriorityQueue and LinkedList
public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people,new Comparator<int[]>(){
           public int compare(int[] p1, int[] p2){
               return p1[0]!=p2[0]?Integer.compare(p2[0],p1[0]): Integer.compare(p1[1],p2[1]);
           }
        });
        List<int[]> list = new LinkedList();
        for (int[] ppl: people) list.add(ppl[1], ppl);
        return list.toArray(new int[people.length][] );
    }
}


----------------------------------------------------------------------------------------------------
&#91;Python&#93; Documented solution in O(n*n) time that is easy to understand
class Solution(object):
    def reconstructQueue(self, people):
        if not people:
            return []
        ordered_line = []
        insertion_order = sorted(people, key = lambda (h,k): (-h,k))
        for person in insertion_order: ordered_line.insert(person[1], person)
        return ordered_line


----------------------------------------------------------------------------------------------------
6 lines python
def reconstructQueue(self, people):

    people = sorted(people, key=lambda x: x[1])
    people = sorted(people, key=lambda x: -x[0])
    res = []
    for p in people:
        res.insert(p[1], p)
    return res

----------------------------------------------------------------------------------------------------
Java O(n^2) greedy solution
public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        if (people == null || people.length <= 1) {
            return people;
        }
        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] == o2[0] ? o1[1] - o2[1] : o1[0] - o2[0];
            }
        });
        int n = people.length;
        int[][] ret = new int[n][];
        for (int i = 0; i < n; i++) {
            for (int j = 0, ahead = 0; j < n; j++) {
                if (ahead < people[i][1]) {
                    ahead += (ret[j] == null || ret[j][0] >= people[i][0]) ? 1 : 0;
                } else if (ret[j] == null) {
                    ret[j] = people[i];
                    break;
                }
            }
        }
        return ret;
    }
}


----------------------------------------------------------------------------------------------------
Java O(n^2) solution by picking the front of the queue one by one
public int[][] reconstructQueue(int[][] people) {
    int n = people.length;
    int[][] copy = new int[n][];
    int[][] res = new int[n][];
        
    for (int i = 0; i < n; i++) copy[i] = Arrays.copyOf(people[i], 2);
    
    for (int i = 0; i < n; i++) {
        int k = -1;
         
        // pick the front element
        for (int j = 0; j < n; j++) {
            if (copy[j][1] == 0 && (k == -1 || copy[j][0] < copy[k][0])) k = j;
        }
            
        res[i] = people[k];   // set the result
        
        // modify the k values of those with smaller or equal h values
        for (int j = 0; j < n; j++) {
            if (copy[j][0] <= copy[k][0]) copy[j][1]--;
        }
    }
        
    return res;
}


----------------------------------------------------------------------------------------------------
Java solution using array sort and greedy
public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) {
                    return a[0] - b[0];
                } else {
                    return b[1] - a[1];
                }
            } 
        });
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < people.length; i++) {
            list.add(i);
        }
        int[][] res = new int[people.length][2];
        for (int i = 0; i < people.length; i++) {
            int index = list.get(people[i][1]);
            res[index][0] = people[i][0];
            res[index][1] = people[i][1];
            list.remove(people[i][1]);
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Simple commented Java solution using Priority Queue
/*
This sounds like a priority queue question since we are organizing
items based come metrics.
But looks like we have 2 metrics here, i.e we need to take both h and k into consideration

First we sort all the people based on h, in descending order.
Then we do insertion sort based on k
*/

public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        int[][] result = new int[people.length][];
        List<int[]> list = new ArrayList<int[]>();
        /*use a pq to sort all the people based on h*/
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>(new listComparator());
        for(int i = 0; i < people.length; i++){
            queue.offer(people[i]);
        }
        /*insertion sort based on k*/
        while(queue.size() != 0){
            insert(list, queue.poll());
        }
        for(int i = 0; i < people.length; i++){
            result[i] = list.get(i);
        }
        return result;
    }
    
    /*insertion sort based on k*/
    private void insert(List<int[]> list, int[] element){
        if(list.size() == 0) {
            list.add(element);
            return;
        }
        int count = 0;
        for(int i = 0; i < list.size(); i++){
            if(count == element[1]){
                list.add(i, element);
                return;
            }else if(list.get(i)[0] >= element[0]){
                count++;
            }
        }
        list.add(element);
    }
    
    /*pq comparator class*/
    class listComparator implements Comparator<int[]>{
        public int compare(int[] first, int[] second){
            if(first[0] != second[0])  return second[0] - first[0];
            else return first[1] - second[1];
        }
    }
}````

----------------------------------------------------------------------------------------------------
C++ binary tree. 92% beats
struct Node
{
	Node *left;
	Node *right;
	int height;
	int countPer;
	int actualCount;
	Node(int value, int noofper,int real)
	{
		this->height  = value;
		countPer = noofper;
		left = NULL;
		right = NULL;
		actualCount = real;
	}
};
class BinaryTree {
public:
	void insert(int value, int countPer)
	{
		person = insert(person, value, countPer, countPer);
	}
	void inorder(Node* person,vector<pair<int, int>> & result)
	{
		if (person == NULL) return;
		inorder(person->left,result);
		cout << "{"<<person->height << " " << person->countPer << "} ";
		result.push_back({ person->height,person->actualCount });
		inorder(person->right,result);
	}
	Node* person;
	BinaryTree()
	{
		person = NULL;
		}
private:
	Node* insert(Node* person, int value, int countPer,int real)
	{
		if (person == NULL) return new Node(value, 1,real);
		if (countPer < person->countPer)
		{
			person->left = insert(person->left, value, countPer,real);
			person->countPer++;
		}
		else
		{
			person->right = insert(person->right, value, countPer - person->countPer,real);
		}
		return person;
	}
	int countOf(Node *person)
	{
		if (person == NULL) return 1;
		return person->countPer;
	}
};

bool compare(pair<int, int> p1, pair<int, int> p2)
{
	if (p1.first == p2.first) return p1.second < p2.second;
	return p1.first > p2.first;
}

class Solution {
public:
	vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
		BinaryTree btree;
		sort(people.begin(), people.end(), compare);
		for (int i = 0; i < people.size(); i++)
		{
			cout << people[i].first << " " << people[i].second << endl;
			btree.insert(people[i].first, people[i].second);
		}
		vector<pair<int, int>> result;
		btree.inorder(btree.person,result);
		return result;
	}
};```

----------------------------------------------------------------------------------------------------
C++ beats 99.70%
class Solution {
    struct cmp {
        bool operator() (const pair<int,int> &a, const pair<int,int> &b) {
            return a.first<b.first || (a.first==b.first && a.second>b.second);
        }  
    };
public:
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        vector<int> v;
        for(int i=0;i<people.size();i++) v.push_back(i);
        vector<pair<int, int>> res(people.size());
        sort(people.begin(), people.end(), cmp());
        for(auto &a:people) {
            res[v[a.second]] = a;
            v.erase(v.begin()+a.second);
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
C# solution
List<Tuple<int, int>> temp = new List<Tuple<int, int>>();
            List<Tuple<int, int>> temp2 = new List<Tuple<int, int>>(people.GetLength(0));
            for (int k = 0; k < people.GetLength(0); k++)
            {
                temp.Add(new Tuple<int, int>(people[k, 0], people[k, 1]));
            }
            //sort the numbers first by height and then by the position. height in descending order and position in ascending order.
            temp.Sort((x, y) => { int result = y.Item1.CompareTo(x.Item1); return result == 0 ? x.Item2.CompareTo(y.Item2) : result; });
            for (int i = 0; i < temp.Count; i++)
            {
                temp2.Insert(temp[i].Item2, temp[i]);
            }
            for (int l = 0; l < people.GetLength(0); l++)
            {
                people[l, 0] = temp2[l].Item1;
                people[l, 1] = temp2[l].Item2;
            }
            //place the result back in original 2d array
            return people;


----------------------------------------------------------------------------------------------------
Confused! Did anyone use C to solve this problem?
<p>What kind of result does **columnSizes need?<br/>
Neither structure 1 * peopleRowSize nor peopleRowSize * 1 is right...<br/>
I&#39;m really confused about this...</p>


----------------------------------------------------------------------------------------------------
C++ solution
class Solution {
public:
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        vector<pair<int, int>>result;
        sort(people.begin(), people.end(), 
        [](pair<int, int>p1, pair<int, int>p2){return p1.first>p2.first || (p1.first==p2.first && p1.second<p2.second);});
        for(auto e : people)
        {
            bool add = true;
            int count = 0;
            for(int i = 0; i < result.size(); i++)
            {
                if(result[i].first>=e.first) count++;
                if(count>e.second)
                {
                    result.insert(result.begin()+i, e);
                    add = false;
                    break;
                }
            }
            if(add) result.push_back(e);
        }
        return result;
    }
};

----------------------------------------------------------------------------------------------------
C++_O(n^2)_Accepted_(with brief explanation)
class Solution {
public:
 vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
    int n = people.size();
    if(n <= 1) return people;
    vector<pair<int, int>> res;

    for(int i = 0; i < n; i++){
        sort(
        people.begin(), people.end(),[](pair<int, int> a1, pair<int, int> a2){
          return a1.second < a2.second || (a1.second ==  a2.second && a1.first <  a2.first);
        }
    );
        for(int k = 0; k < res.size(); k++){//recover
            if(people[0].first <= res[k].first){people[0].second++;}
        }
        
        res.push_back(people[0]);
        int height = people[0].first;
        people.erase(people.begin());
        
        for(int j = 0; j < people.size(); j++){//update the "people" vector
            if(people[j].first <= height){people[j].second--;}
        }
    }
    return res;
}
};

----------------------------------------------------------------------------------------------------
