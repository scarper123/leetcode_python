An easy and clear way to sort ( O(1) space )
    public ListNode insertionSortList(ListNode head) {
    		if( head == null ){
    			return head;
    		}
    		
    		ListNode helper = new ListNode(0); //new starter of the sorted list
    		ListNode cur = head; //the node will be inserted
    		ListNode pre = helper; //insert node between pre and pre.next
    		ListNode next = null; //the next node will be inserted
    		//not the end of input list
    		while( cur != null ){
    			next = cur.next;
    			//find the right place to insert
    			while( pre.next != null && pre.next.val < cur.val ){
    				pre = pre.next;
    			}
    			//insert between pre and pre.next
    			cur.next = pre.next;
    			pre.next = cur;
    			pre = helper;
    			cur = next;
    		}
    		
    		return helper.next;
    	}

----------------------------------------------------------------------------------------------------
Thoughts from a Google interviewer
One of the quotes is 

> For God's sake, don't try sorting a linked list during the interview

http://steve-yegge.blogspot.nl/2008/03/get-that-job-at-google.html

So it might be better to actually copy the values into an array and sort them there.

----------------------------------------------------------------------------------------------------
Explained C++ solution (24ms)
Well, life gets difficult pretty soon whenever the same operation on array is transferred to linked list.

First, a quick recap of insertion sort:

Start from the second element (simply `a[1]` in array and the annoying `head -> next -> val` in linked list), each time when we see a node with `val` smaller than its previous node, we scan from the `head` and find the position that the current node should be inserted. Since a node may be inserted before `head`, we create a `new_head` that points to `head`. The insertion operation, however, is a little easier for linked list.

Now comes the code:

    class Solution { 
    public:
        ListNode* insertionSortList(ListNode* head) {
            ListNode* new_head = new ListNode(0);
            new_head -> next = head;
            ListNode* pre = new_head;
            ListNode* cur = head;
            while (cur) {
                if (cur -> next && cur -> next -> val < cur -> val) {
                    while (pre -> next && pre -> next -> val < cur -> next -> val)
                        pre = pre -> next;
                    /* Insert cur -> next after pre.*/
                    ListNode* temp = pre -> next;
                    pre -> next = cur -> next;
                    cur -> next = cur -> next -> next;
                    pre -> next -> next = temp;
                    /* Move pre back to new_head. */
                    pre = new_head;
                }
                else cur = cur -> next;
            }
            ListNode* res = new_head -> next;
            delete new_head;
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
Accepted Solution using JAVA
    public class Solution {
    public ListNode insertionSortList(ListNode head) {
        ListNode helper=new ListNode(0);
        ListNode pre=helper;
        ListNode current=head;
        while(current!=null) {
            pre=helper;
            while(pre.next!=null&&pre.next.val<current.val) {
                pre=pre.next;
            }
            ListNode next=current.next;
            current.next=pre.next;
            pre.next=current;
            current=next;
        }
        return helper.next;
    }
}

----------------------------------------------------------------------------------------------------
Clean Java solution using a fake head
    public ListNode insertionSortList(ListNode head) {
      ListNode curr = head, next = null;
      // l is a fake head
      ListNode l = new ListNode(0);
      
      while (curr != null) {
        next = curr.next;
        
        ListNode p = l;
        while (p.next != null && p.next.val < curr.val)
          p = p.next;
        
        // insert curr between p and p.next
        curr.next = p.next;
        p.next = curr;
        curr = next;
      }
      
      return l.next;
    }

----------------------------------------------------------------------------------------------------
7ms Java solution with explanation
The only real modification here is to take advantage of the ability to add to both the front and end of a linked list in constant time.  A typical insertion sort would have to go through the entire array to find the new location to insert the element. If the element should be placed first in the array then we have to shift everything over.  Thankfully, with a linked list we don't need to do this.  The slight modification of keeping a pointer to the last node as well as the first dramatically increased the runtime of the algorithm.  That being said, the speedup still has a lot to do with the ordering if the items in the array.  

    public ListNode insertionSortList(ListNode head) {
        if (head == null || head.next == null)
        {
            return head;
        }

        ListNode sortedHead = head, sortedTail = head;
        head = head.next;
        sortedHead.next = null;
        
        while (head != null)
        {
            ListNode temp = head;
            head = head.next;
            temp.next = null;
            
            // new val is less than the head, just insert in the front
            if (temp.val <= sortedHead.val)
            {
                temp.next = sortedHead;
                sortedTail = sortedHead.next == null ? sortedHead : sortedTail;
                sortedHead = temp;
            }
            // new val is greater than the tail, just insert at the back
            else if (temp.val >= sortedTail.val)
            {
                sortedTail.next = temp;
                sortedTail = sortedTail.next;
            }
            // new val is somewhere in the middle, we will have to find its proper
            // location.
            else
            {
                ListNode current = sortedHead;
                while (current.next != null && current.next.val < temp.val)
                {
                    current = current.next;
                }
                
                temp.next = current.next;
                current.next = temp;
            }
        }
        
        return sortedHead;
    }

----------------------------------------------------------------------------------------------------
Python time limit is too tight
I have basically the same code in python and java (see below). python got TLE, but java was accepted. I propose to relax the python time limit a little bit.

**Python**

    class Solution:
    # @param head, a ListNode
    # @return a ListNode
    def insertionSortList(self, head):
        srt = None
        while head:
            node = head
            head = head.next
            node.next = None
            srt = self.insertTo(srt, node)
        return srt
        
    def insertTo(self, head, node):
        node.next = head
        head = node
        while node.next and node.val > node.next.val:
            node.val, node.next.val = node.next.val, node.val
            node = node.next
        return head

**java**

    public class Solution {
        public ListNode insertionSortList(ListNode head) {
            ListNode srt = null;
            while (head != null) {
                ListNode node = head;
                head = head.next;
                node.next = null;
                srt = insertTo(srt, node);
            }
            return srt;
        }
        
        public ListNode insertTo(ListNode head, ListNode node) {
            node.next = head;
            head = node;
            while (node.next != null && node.val > node.next.val) {
                node.val = node.val ^ node.next.val;
                node.next.val = node.val ^ node.next.val;
                node.val = node.val ^ node.next.val;
                node = node.next;
            }
            return head;
        }
    }



----------------------------------------------------------------------------------------------------
AC Python 192ms solution
    def insertionSortList(self, head):
        p = dummy = ListNode(0)
        cur = dummy.next = head
        while cur and cur.next:
            val = cur.next.val
            if cur.val < val:
                cur = cur.next
                continue
            if p.next.val > val:
                p = dummy
            while p.next.val < val:
                p = p.next
            new = cur.next
            cur.next = new.next
            new.next = p.next
            p.next = new
        return dummy.next


    # 21 / 21 test cases passed.
    # Status: Accepted
    # Runtime: 192 ms
    # 97.05%

Of course, the solution is still O(n^2) in the worst case, but it can be faster than most implements under given test cases.

Two key points are: (1) a quick check see if the new value is already the largest (2) only refresh the search pointer p when the target is before it, in other words smaller.

----------------------------------------------------------------------------------------------------
My C++ solution
    ListNode *insertionSortList(ListNode *head)
    {
    	if (head == NULL || head->next == NULL)
    		return head;
    
    	ListNode *p = head->next;
    	head->next = NULL;
    
    	while (p != NULL)
    	{
    		ListNode *pNext = p->next;    /*store the next node to be insert*/
    		ListNode *q = head;
    
    		if (p->val < q->val)    /*node p should be the new head*/
    		{
    			p->next = q;
    			head = p;
    		}
    		else 
    		{
    			while (q != NULL && q->next != NULL && q->next->val <= p->val)
    				q = q->next;
    			p->next = q->next;
    			q->next = p;
    		}
    
    		p = pNext;
    	}
    	return head;
    }

----------------------------------------------------------------------------------------------------
Concise python solution with comments
    def insertionSortList(self, head):
        cur = dummy = ListNode(0)
        while head:
            if cur and cur.val > head.val: # reset pointer only when new number is smaller than pointer value
                cur = dummy
            while cur.next and cur.next.val < head.val: # classic insertion sort to find position
                cur = cur.next
            cur.next, cur.next.next, head = head, cur.next, head.next # insert
        return dummy.next

----------------------------------------------------------------------------------------------------
My C++ solution by using pointer&#x27;s pointer to do insertion.
Short and easy way to manipulate the list.
 

    class Solution {
    public:
        ListNode *insertionSortList(ListNode *head) {
            ListNode **node = &head;
            while ((*node)) {
                bool flag = false;
                for (ListNode **cmp=&head; *cmp!=*node; cmp=&(*cmp)->next) {
                    if ((*node)->val <= (*cmp)->val) {
                        //Do insertion
                        ListNode *tmp = *node;
                        *node = (*node)->next;
                        tmp->next = *cmp;
                        *cmp = tmp;
                        flag = true;
                        break;
                    }
                }
                //Node has been moved to the next already.
                if (flag) continue;
                node = &(*node)->next;
            }
            return head;
        }
    };

----------------------------------------------------------------------------------------------------
One way to accept in python against TLE
My original code is very intuitive. I checked each unsorted element one by one and added it into sorted part. The way I added it is that I check from the head to tailer of the sorted part. Here is my original code in python and off-line test for 2000 data costs 2.3s while the result is TLE for on-line test.

    class Solution:
    # @param head, a ListNode
    # @return a ListNode
    def insertionSortList(self, head):
        linkHead = ListNode(0)
        linkHead.next = head
        sortedEnd = linkHead.next

        if sortedEnd == None:
            return head
     
        while sortedEnd.next != None:
            pointer = sortedEnd.next
            sortedEnd.next = pointer.next

            innerPointer = linkHead

            while innerPointer != sortedEnd and innerPointer.next.val < pointer.val:
                innerPointer = innerPointer.next
                
            pointer.next = innerPointer.next
            innerPointer.next = pointer

            if innerPointer == sortedEnd:
                sortedEnd = pointer
                
        return linkHead.next

Then I change the way to find the insertion spot like this:
The off-line test costs 1.7s and it accepted for on-line test

    class Solution:
    # @param head, a ListNode
    # @return a ListNode
    def insertionSortList(self, head):
        linkHead = ListNode(0)
        linkHead.next = head
        sortedEnd = linkHead.next

        if sortedEnd == None:
            return head

        innerPointer = linkHead.next  #declare innerPointer here

        while sortedEnd.next != None:
            pointer = sortedEnd.next
            sortedEnd.next = pointer.next

            # reset innerPointer only when pointer is needed to be inserted before innerPointer
            if innerPointer.val > pointer.val:
                innerPointer = linkHead

            while innerPointer != sortedEnd and innerPointer.next.val < pointer.val:
                innerPointer = innerPointer.next
                
            pointer.next = innerPointer.next
            innerPointer.next = pointer

            if innerPointer == sortedEnd:
                sortedEnd = pointer
                
        return linkHead.next

There are some other method to improve performance, e.g. section the linkList and store the value of each segment's front elem, then the process of finding the insertion spot will be more efficient

----------------------------------------------------------------------------------------------------
10 line clean and easy-to-understand C++ solution
Please see [my blog post][1] for more.

    ListNode *insertionSortList(ListNode *head) {
        ListNode dummy(INT_MIN);
        ListNode *prev, *cur, *next;
        
        for (auto p = head; p; p = next) {
            next = p->next;
            // invariant: list headed by dummy.next is sorted
            for (prev = &dummy, cur = prev->next; cur && p->val > cur->val; prev = cur, cur = cur->next)
                ;
            prev->next = p;
            p->next = cur;
        }
        
        return dummy.next;
    }

  [1]: http://xiaohuiliucuriosity.blogspot.com/2015/02/insertion-sort-list.html


----------------------------------------------------------------------------------------------------
Simple and clean java code
    public ListNode insertionSortList(ListNode head) {
		ListNode cur = head;
		ListNode dummy = new ListNode(0), p;
		while (cur != null) {
			//locate the insertion position.
			p = dummy;
			while (p.next != null &&  cur.val > p.next.val) {
				p = p.next;
			}
			//insert between p and p.next.
			ListNode pNext = p.next;
			p.next = cur;
			ListNode next = cur.next;
			cur.next = pNext;
			cur = next;
		}
		return dummy.next;
	}

----------------------------------------------------------------------------------------------------
&#91;recommend for beginners&#93;clean C++ implementation with detailed explaination
This problem is all about details, you just need to check what to do when insert the cur-pointer to the linked-list.

You need to consider 2 cases carefully. I believe it is all about details.

    class  Solution {
    public:
        ListNode* insertionSortList(ListNode* head) {
            if(!head)   return NULL;
            ListNode* dummy=new ListNode(-1);
            dummy->next=head;
            ListNode *cur=head->next, *prev=head;
            while(cur){
                //record the next pointer 
                ListNode* nextPtr=cur->next;
                //find the inserted position from the dummy start position
                ListNode *prePtr=dummy;
                ListNode *curPtr=dummy->next;
                while(curPtr!=cur && curPtr->val <= cur->val){
                    prePtr=prePtr->next;
                    curPtr=curPtr->next;
                }
                /* check the current position  */
                /* case 1 : we need to insert it  */
                if( curPtr!= cur ){
                     prePtr->next = cur;
                     cur->next = curPtr;
                     prev->next = nextPtr;
                     cur=nextPtr;
                }
                /* case 2 : we do not need to insert it */
                else{
                    prev=cur;
                    cur=cur->next;
                }
            }
            return dummy->next;
        }
    };

----------------------------------------------------------------------------------------------------
Maybe the best JAVA solution with code comments
    public class Solution {
    
        public ListNode insertionSortList(ListNode head) {
            if(head == null || head.next == null){
                return head;
            }
            //record node before insertNode
            ListNode preNode = head;
            //rocord node need to be inserted
            ListNode insertNode = head.next;
            
            while(insertNode != null){
                //store next insert node
                ListNode nextInsert = insertNode.next;
                //insert before head
                if(insertNode.val <= head.val){
                    preNode.next = insertNode.next;
                    insertNode.next = head;
                    head = insertNode;
                }
                else if(insertNode.val >= preNode.val){    //insert after tail
                    preNode = preNode.next;
                }
                else{                                      //insert between head and tail
                    ListNode compareNode = head;
                    //start from the node after head, find insert position
                    while(compareNode.next.val < insertNode.val)   compareNode = compareNode.next;
                    //insert
                    preNode.next = insertNode.next;
                    insertNode.next = compareNode.next;
                    compareNode.next = insertNode;
                }
                //get next insert node
                insertNode = nextInsert;
            }
            return head;
        }
    }

Hope it will helpful. The thinking is  very straightforward:

 1. Insert before head.
 2. Insert after tail.(no need change the list).
 3. Insert between head and tail.


----------------------------------------------------------------------------------------------------
C++ recursive insertion sort.
        
    ListNode* insertionSortList(ListNode* head) {
        if (head == nullptr || head->next == NULL)
            return head;
        ListNode *h = insertionSortList(head->next);
        if (head->val <= h->val) {  // first case
            head->next = h;
            return head;
        }
        ListNode *node = h;   // second case
        while (node->next && head->val > node->next->val)
            node = node->next;
        head->next = node->next;
        node->next = head;
        return h;
    }

----------------------------------------------------------------------------------------------------
TLE for Python?
I have a Time Limit Exceeded when input a list of 5000 numbers.

    class Solution:
    # @param head, a ListNode
    # @return a ListNode
    def insertSort(self, head):
        if head==None or head.next==None:
            return head
        self.insertSort(head.next)
        l=head
        r=head.next
        while r!=None:
            if l.val>r.val:
                l.val,r.val=r.val,l.val
                l=r
                r=r.next
            else:
                return head
        return head
    def insertionSortList(self, head):
        return self.insertSort(head)
is there any solution for the problem?

----------------------------------------------------------------------------------------------------
Share my C++ solution
It is quite easy if you swap value instead of pointer. check my insertionSortListV. Once you understand the "swap by value" version. then "swap by pointer" is easy too. check insertionSortListP.

1. pi means pre-i.   like this:    A1->A2->pj->j->A5->A6-pi->i->... the 3 steps to swap i and j by pointer 

    SWAP(pi->next, pj->next, t);
    SWAP(i->next, j->next, t);
    SWAP(i, j, t);

if  J is the head, there is no pj. in order to handle this special case normally. I set up an ListNode object in the stack, called  hd. let pj->hd, hd->next = j. 

    #define SWAP(a, b, t) {t = a; a = b; b = t;}
    class Solution {
    public:
        ListNode *insertionSortListV(ListNode *head) {
            ListNode *i, *j;
            int v;
    
            for (i = head->next; i; i = i->next) {
                for (j = head; j != i; j = j->next) {
                    if (i->val < j->val)
                        SWAP(i->val, j->val, v);
                }
            }
            return head;
        }
    
        ListNode *insertionSortListP(ListNode *head) {
            ListNode hd(0);
            ListNode *i, *j, *t, *pi, *pj;
    
            i = head->next;
            j = head;
            hd.next = head;
            pi = head;
            pj = &hd;
            while (i) {
                while (j != i) {
                    if (i->val < j->val) {
                        SWAP(pi->next, pj->next, t);
                        SWAP(i->next, j->next, t);
                        SWAP(i, j, t);
                    }
                    pj = j;
                    j = j->next;
                }
                j = hd.next;
                pj = &hd;
                pi = i;
                i = i->next;
            }
            return hd.next;
    
        }
        ListNode *insertionSortList(ListNode *head) {
            // 0 or 1 element, no need to sort.
            if (!head || !head->next)
                return head;
    #if 0
            return insertionSortListV(head);
    #else
            return insertionSortListP(head);
    #endif
        }
    };

----------------------------------------------------------------------------------------------------
Java 34ms solution, clear logic with separate insert method
using insertion sort logic. Insert each new node into a sorted linked list with dummy head.
 

      public class Solution {
            public ListNode insertionSortList(ListNode head) {
                ListNode sortedHeadDummy = new ListNode(0);
                ListNode curr = head;
                while (curr != null) {
                    ListNode next = curr.next;
                    insert(sortedHeadDummy, curr);
                    curr = next;
                }
                return sortedHeadDummy.next;
            }
            
            private void insert(ListNode dummyHead, ListNode target) {
                // left to right scan to insert the target node
                ListNode curr = dummyHead;
                while (curr.next != null && curr.next.val < target.val) {
                    curr = curr.next;
                }
                target.next = curr.next;
                curr.next = target;
            }
        }

----------------------------------------------------------------------------------------------------
