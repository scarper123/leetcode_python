Java O(n+m) Time O(n) Space
public String[] findRestaurant(String[] list1, String[] list2) {
    Map<String, Integer> map = new HashMap<>();
    List<String> res = new LinkedList<>();
    int minSum = Integer.MAX_VALUE;
    for (int i=0;i<list1.length;i++) map.put(list1[i], i);
    for (int i=0;i<list2.length;i++) {
        Integer j = map.get(list2[i]);
        if (j != null && i + j <= minSum) {
            if (i + j < minSum) { res.clear(); minSum = i+j; }
            res.add(list2[i]);
        }
    }
    return res.toArray(new String[res.size()]);
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def findRestaurant(self, A, B):
    Aindex = {u: i for i, u in enumerate(A)}
    best, ans = 1e9, []

    for j, v in enumerate(B):
        i = Aindex.get(v, 1e9)
        if i + j < best:
            best = i + j
            ans = [v]
        elif i + j == best:
            ans.append(v)
    return ans


----------------------------------------------------------------------------------------------------
C++ 9 lines hash table easy to understand
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        vector<string>res;
        unordered_map<string,int>m;
        int min = INT_MAX;
        for(int i = 0; i < list1.size(); i++) m[list1[i]] = i;
        for(int i = 0; i < list2.size(); i++)
            if(m.count(list2[i]) != 0)
                if(m[list2[i]] + i < min) min = m[list2[i]] + i, res.clear(), res.push_back(list2[i]);
                else if(m[list2[i]] + i == min) res.push_back(list2[i]);
        return res;
    }


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Clean Code - 7 lines with Explanation
class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        int n = list1.size() + list2.size();
        map<string, vector<int>> m;
        for (int i = 0; i < list1.size(); i++) {
            m[list1[i]] = {i, n};
        }
        for (int j = 0; j < list2.size(); j++) {
            if (m.count(list2[j])) {
                m[list2[j]][1] = j;
            }
            else {
                m[list2[j]] = {n, j};
            }
        }

        int minsum = INT_MAX;
        map<int, vector<string>> sumMap;
        for (auto p : m) {
            int sum = p.second[0] + p.second[1];
            sumMap[sum].push_back(p.first);
            minsum = min(minsum, sum);
        }
        
        return sumMap[minsum];
    }
};


----------------------------------------------------------------------------------------------------
Java Solution, HashMap(s)
public class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        List<String> result = null;
        Map<String, Integer> map1 = new HashMap<>();
        Map<String, Integer> map2 = new HashMap<>();
        int min = Integer.MAX_VALUE;
        
        for (int i = 0; i < list1.length; i++) {
            map1.put(list1[i], i);
        }
        for (int i = 0; i < list2.length; i++) {
            map2.put(list2[i], i);
        }
        
        for (int i = 0; i < list1.length; i++) {
            if (map2.containsKey(list1[i])) {
                int sum = map1.get(list1[i]) + map2.get(list1[i]);
                if (sum < min) {
                    min = sum;
                    result = new ArrayList<String>();
                    result.add(list1[i]);
                }
                else if (sum == min) {
                    result.add(list1[i]);
                }
            }
        }
        
        String[] res = new String[result.size()];
        for (int i = 0; i < result.size(); i++) {
            res[i] = result.get(i);
        }
        
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Easy Java HashMap Solution:)
public String[] findRestaurant(String[] list1, String[] list2) {
        
        Map<String, Integer> map = new HashMap<>();
        Map<String, Integer> fi = new HashMap<>();
        List<String> res = new ArrayList<>();
        int min = Integer.MAX_VALUE;

        for (int i = 0; i < list1.length; i++)
            map.put(list1[i], i);

        for (int i = 0; i < list2.length; i++) {

            if (map.containsKey(list2[i])) {

                int indexsum = map.get(list2[i]) + i;
                fi.put(list2[i], indexsum);
                min = Math.min(min, indexsum);

            }

        }

        for (Map.Entry<String, Integer> entrySet : fi.entrySet())
            if (entrySet.getValue() == min)
                res.add(entrySet.getKey());
                
        return res.toArray(new String[res.size()]);

    }


----------------------------------------------------------------------------------------------------
Easy&amp;Fast Solution, without Map
<p>&#39;&#39;&#39;<br/>
public class Solution {<br/>
public String&#91;&#93; findRestaurant(String&#91;&#93; list1, String&#91;&#93; list2) {<br/>
List&lt;String&gt; result = new ArrayList&lt;String&gt;();<br/>
	boolean flag = false;<br/>
	for (int i = 0; i &lt; list1.length+list2.length-1; i++) {<br/>
			for (int j = 0; j &lt; list1.length &amp;&amp; j &lt;= i; j++) {<br/>
				if (i-j&lt;list2.length &amp;&amp; list1&#91;j&#93;.equals(list2&#91;i-j&#93;)) {<br/>
					result.add(list1&#91;j&#93;);<br/>
					flag = true;<br/>
				}<br/>
			}<br/>
			if (flag == true) {<br/>
				break;<br/>
			}<br/>
		}<br/>
	return (String&#91;&#93;)result.toArray(new String&#91;result.size()&#93;);<br/>
}<br/>
}<br/>
&#39;&#39;&#39;&#39;</p>


----------------------------------------------------------------------------------------------------
JAVA Easy Solution, Beat 90%
public class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        if (list1 == null || list1.length == 0 || list2 == null || list2.length == 0) return new String[0];
        int len1 = list1.length, len2 = list2.length, min = Integer.MAX_VALUE;
        List<String> list = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        
        for (int i = 0; i < len1; i++) {
            map.put(list1[i], i);
        }
        
        for (int i = 0; i < len2; i++) {
            if (map.get(list2[i]) != null) {
                int val = map.get(list2[i]);
                if (min > val + i) {
                    list.clear();
                    min = i + val;
                    list.add(list2[i]);
                } else if (min == val + i) {
                    list.add(list2[i]);
                }
            }
        }
        
        String res[] = new String[list.size()];
        
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        
        return res;
    }
}

----------------------------------------------------------------------------------------------------
Easy&amp;Fast Java Solution, without Map
public class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        List<String> result = new ArrayList<String>();
    	boolean flag = false;
    	for (int i = 0; i < list1.length+list2.length-1; i++) {
			for (int j = 0; j < list1.length && j <= i; j++) {
				if (i-j<list2.length && list1[j].equals(list2[i-j])) {
					result.add(list1[j]);
					flag = true;
				}
			}
			if (flag == true) {
				break;
			}
		}
    	return (String[])result.toArray(new String[result.size()]);
    }
}


----------------------------------------------------------------------------------------------------
HashMap Solution Java
    public String[] findRestaurant(String[] list1, String[] list2) {
       
       int l1=list1.length,l2=list2.length,sum=Integer.MAX_VALUE;
        HashMap<String,Integer> list = new HashMap();
        
        for(int i=0;i<l1;++i)
            list.put(list1[i],new Integer(i));
        
         ArrayList<String> res = new ArrayList();
      
        for(int i=0;i<l2;++i){
            int j=list.get(list2[i])!=null?list.get(list2[i]):-1;
            if(j>=0){
               if(sum==Integer.MAX_VALUE||sum>i+j){
                   res.clear();
                   res.add(list2[i]);
                  sum=i+j;
               }else if(min==sum){
                    res.add(list2[i]);
               }
            }
        }
    
        String[] result = new String[res.size()];
        for(int i=0;i<res.size();++i)
                result[i]=res.get(i);
        
       return result; 
    }
}

----------------------------------------------------------------------------------------------------
Intuitive Javascript Solution
var findRestaurant = function(list1, list2) {
    const commonInterest = [];
    
    list1.forEach((res, index1) => {
        const index2 = list2.indexOf(res);
        
        // collect an array of common interests with index sum as index
        if (index2 !== -1) {
            const indexSum = index1 + index2;
            
            if (!commonInterest[indexSum]) commonInterest[indexSum] = [];
            commonInterest[indexSum].push(res);
        }
    });
    
    // return the common interests with the minimum index sum
    for (let i = 0; i < commonInterest.length; i++)
        if (commonInterest[i]) return commonInterest[i];
};


----------------------------------------------------------------------------------------------------
Java hashmap and stack solution.
public String[] findRestaurant(String[] list1, String[] list2) {
    Map<String, Integer> map = new HashMap<>();
    Stack<String> res = new Stack<>();
    for (int i = 0; i < list1.length; i++) {
      map.put(list1[i], i);
    }
    int min = -1;
    for (int i = 0; i < list2.length; i++) {
      if (map.containsKey(list2[i])) {
        int sum = i + map.get(list2[i]);
        if (min > sum) {
          res.pop();
        }
        if (res.isEmpty() || min >= sum) {
          res.add(list2[i]);
          min = sum;
        }
      }
    }
    return res.toArray(new String[res.size()]);
  }


----------------------------------------------------------------------------------------------------
&#91;599. Minimum Index Sum of Two Lists&#93; c++_Ac
Solution {
 public:
 vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) 
{
    vector<string> res;
    unordered_map<string, int> mp1;
    unordered_map<string, int> mp2;
    for(int i = 0; i < list1.size(); ++i){
        mp1[list1[i]] = i;
    }
    for(int i = 0; i < list2.size(); ++i){
        mp2[list2[i]] = i;
    }
    int Index = INT_MAX;
    for(auto m: mp1){
        if(mp2.find(m.first) != mp2.end()){
            int tmp = mp2[m.first] + m.second;
            if(tmp == Index){
                res.push_back(m.first);
            }else if(tmp < Index){
                Index = tmp;
                res.clear();
                res.push_back(m.first);
            }
            mp2.erase(m.first);
        }
    }
    return res;
}
};

----------------------------------------------------------------------------------------------------
UCSD Students?
<p>I wonder if this question is posted by a UCSD kid?</p>
<p>You will get sick of these restaurants before your second year.</p>


----------------------------------------------------------------------------------------------------
C++ easy O(n) solution, only one hashap
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        vector<string> res;
        unordered_map<string, int> dict;
        for(int i=0;i<list1.size();i++) dict[list1[i]]=i+1;
        for(int i=0;i<list2.size();i++) {
            if(dict.find(list2[i])!=dict.end()) dict[list2[i]]+=i+1;
        }
        for(int i=0;i<list1.size();i++) {
            if(dict[list1[i]]==i+1) dict[list1[i]]=INT_MAX;
        }
        int cur=INT_MAX;
        for(unordered_map<string, int>::iterator p=dict.begin();p!=dict.end();p++) {
            if(p->second==cur) res.push_back(p->first);
            else if(p->second<cur) {
                cur=p->second;
                res.clear();
                res.push_back(p->first);
            }
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
As a c coder,I can only do it in a not elegant way~
char** findRestaurant(char** list1, int list1Size, char** list2, int list2Size, int* returnSize) {
    int i=0,j=0,min=2001,count=0;
    char buf[1000][31]={0X0};
    for(i=0;i<list1Size;i++){
        for(j=0;j<list2Size;j++){
            if(strcmp(list1[i],list2[j])==0){
                if((i+j) < min)  {
                    printf("min=%d,i=%d,j=%d\n",min,i,j);
                    min=(i+j);
                    memset(buf,0,sizeof(buf));
                    count=0;
                    strcpy(buf[count++],list1[i]);
                    puts(list1[i]);
                }
                else if((i+j) == min){
                    strcpy(buf[count++],list1[i]);
                    puts(list1[i]);
                }
            }
        }
    }
    
    *returnSize = count;
    char** retarr=(char**)calloc(*returnSize ,sizeof(char*));
    for(i=0;i<count;i++){
        retarr[i]=calloc(31,sizeof(char));
        strcpy(retarr[i],buf[i]);
    }
    return retarr;
}


----------------------------------------------------------------------------------------------------
Java single HashMap w&#x2F;o keep refreshing output list
public class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        Map<String, Integer> m = new HashMap<>();
        List<String> ans = new ArrayList<>();
        Integer min = Integer.MAX_VALUE;
        
        // 1. Put all list1's strings into map with negative index 
        for(int i = 0; i < list1.length; i++) {
            m.put(list1[i], -i);
        }
        
        // 2. If string exists in map then replace it with index sum
        for(int i = 0; i < list2.length; i++) {
            Integer v = m.get(list2[i]);
            if(v != null) {
                v = Math.abs(v) + i;
                m.put(list2[i], v);
                min = Math.min(min, v);
            }
        }

        // 3. Add all strings with minimum value into output
        for(Map.Entry<String, Integer> e : m.entrySet()) {
            // value negative will take effect here
            if(min.equals(e.getValue())) {
                ans.add(e.getKey());
            }
        }
        
        return ans.toArray(new String[0]);
    }
}


----------------------------------------------------------------------------------------------------
scala version
  def findRestaurant(list1: List[String], list2: List[String]): List[String] = {
    val intersect = list1.intersect(list2)
    var result = Stack[String]()
    for (str <- intersect) {
      val rank = list1.indexOf(str) + list2.indexOf(str)
      if (result.isEmpty) result.push(str)
      else {
        val preRank = list1.indexOf(result.top) + list2.indexOf(result.top)
        if (rank == preRank) result.push(str)
        else if (rank < preRank) {
          result.clear()
          result.push(str)
        }
      }
    }
    result.toList
  }


----------------------------------------------------------------------------------------------------
Simple accepted python answer with explanation
class Solution(object):
    def findRestaurant(self, list1, list2):
        """
        :type list1: List[str]
        :type list2: List[str]
        :rtype: List[str]
        """
        common = []
        # for i in range(len(list1)):
        i = 0
        while i < len(list1):
            if list1[i] in list2:
                common.append(list1[i])
                i+=1
            else:
                i+=1
        if len(common)==0 or len(common)==1:
            return common
        # elif list1.index(common[i]) i in range(len(common)) 
        common_sum = []
        for i in range(len(common)):
            common_sum.append(list1.index(common[i])+list2.index(common[i]))
        # common_sum_sorted = sorted(common_sum)
        # for i in range(len(common)):
        if common_sum.count(common_sum[0])==1:
            return [common[0]]
        if common_sum.count(common_sum[0])>=1:
            return common[0:common_sum.count(common_sum[0])]
            


----------------------------------------------------------------------------------------------------
