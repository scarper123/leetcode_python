Python, Straightforward with Explanation
def scheduleCourse(self, A):
    pq = []
    start = 0
    for t, end in sorted(A, key = lambda (t, end): end):
        start += t
        heapq.heappush(pq, -t)
        while start > end:
            start += heapq.heappop(pq)
    return len(pq)


----------------------------------------------------------------------------------------------------
Short Java code using PriorityQueue
public class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses,(a,b)->a[1]-b[1]); //Sort the courses by their deadlines (Greedy! We have to deal with courses with early deadlines first)
        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)->b-a);
        int time=0;
        for (int[] c:courses) 
        {
            time+=c[0]; // add current course to a priority queue
            pq.add(c[0]);
            if (time>c[1]) time-=pq.poll(); //If time exceeds, drop the previous course which costs the most time. (That must be the best choice!)
        }        
        return pq.size();
    }
}


----------------------------------------------------------------------------------------------------
C++ 13 lines With Explanation
cls

----------------------------------------------------------------------------------------------------
C++ Short &amp; Elegant O(nlogn) Time, O(k) Space Solution
class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        sort(courses.begin(), courses.end(), [](vector<int> a, vector<int> b){return a[1] < b[1];});
        priority_queue<int> heap;
        int now = 0;
        for (int i = 0; i < courses.size(); ++ i)
        {
            heap.push(courses[i][0]);
            now += courses[i][0];
            if (now > courses[i][1])
                now -= heap.top(), heap.pop();
        }
        return heap.size();
    }
};



----------------------------------------------------------------------------------------------------
Simple Java Solution
public class Solution {
    public int scheduleCourse(int[][] courses) {
        int r = courses.length,c=0,ans=0,l=r,temp=0;
        
        if(r != 0){
            c = courses[0].length;
        }else{
            return 0;
        }
        Arrays.sort(courses, new Comparator<int[]>(){
            public int compare(int[] a,int[] b){
                 return a[1]-b[1];
            }
        });
        
        
        PriorityQueue<int[]> heap = new PriorityQueue<int[]>(l,new Comparator<int[]>(){
            public int compare(int[] a,int[] b){
                return b[0] - a[0];
            }
            
        });
        heap.offer(courses[0]);
        temp += courses[0][0];
        for(int i=1;i<l;i++){
            int[] curr = heap.poll();

            if(temp+courses[i][0] <= courses[i][1]){
               
                    heap.offer(courses[i]);
                    temp += courses[i][0];
            }else if(temp-curr[0]+courses[i][0] <= courses[i][1] && courses[i][0] < curr[0]){
                temp -= curr[0];
                curr = courses[i];
                temp += courses[i][0];
            }
            
            heap.offer(curr);
        }
        ans = heap.size();
        
        return ans;
    }
}


----------------------------------------------------------------------------------------------------
A little Difficult, just do some optimization on a O(N^2) algorithm
public class Solution {

    public int scheduleCourse(int[][] courses) {
        if(courses == null || courses.length == 0) return 0;
        Arrays.sort(courses, (a,b)->a[1]==b[1]?Integer.compare(a[0], b[0]):Integer.compare(a[1], b[1]));
        // int[] { diff, index }
        TreeSet<int[]> map = new TreeSet<>((a,b)->a[0]==b[0]?Integer.compare(b[1], a[1]):Integer.compare(b[0], a[0]));
        List<Integer> firstk = new ArrayList<>();
        firstk.add(0);
        List<int[]> removed = new ArrayList<>();
        for(int[] a : courses){
            removed.clear();
            Iterator<int[]> it = map.iterator();
            while(it.hasNext()){
                int[] e = it.next();
                if(e[0] > a[0]){
                    it.remove();
                    removed.add(e);
                }else
                    break;
            }
            if(firstk.get(firstk.size() - 1) + a[0] <= a[1]){
                firstk.add(firstk.get(firstk.size() - 1) + a[0]);
                int[] x = new int[]{a[0], firstk.size() - 1};
                map.add(x);
                removed.add(x);
            }
            for(int[] t : removed){
                firstk.set(t[1], firstk.get(t[1]) - t[0] + a[0]);  // update value at index
                t[0] = a[0];  // update diff
            }
            for(int[] t : removed){
                t[0] = firstk.get(t[1]) - firstk.get(t[1]-1);  // update diff
            }
            map.addAll(removed);
        }
        return firstk.size() - 1;
    }
}


----------------------------------------------------------------------------------------------------
Java Solution using Array sort and Heap
    public static int scheduleCourse(int[][] courses) {
        int t=0;
        if (courses.length == 1)
            return 1;

        Arrays.sort(courses, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[1] > o2[1]) return 1;
                if (o1[1] < o2[1]) return -1;
                return 0;
            }
        });

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

        for (int [] c : courses){
            if (c[0]+t <= c[1]){
                t += c[0];
                maxHeap.add(c[0]);
            }
            else {
                if (c[0] < maxHeap.peek()  && (c[0] + t-maxHeap.peek() < c[1])){
                    t -= maxHeap.remove();
                    t+= c[0];
                    maxHeap.add(c[0]);
                }
            }
        }
        return maxHeap.size();
    }


----------------------------------------------------------------------------------------------------
C# AC solution with Sort and BinarySearch
public class Solution {
    public int ScheduleCourse(int[,] courses)
    {
        var c = courses.To2D();
        Array.Sort(c, Comparer<int[]>.Create((a, b) => a[1] == b[1] ? a[0].CompareTo(b[0]) : a[1].CompareTo(b[1])));
        courses = c.To2D();

        var sl = new List<int>();
    
        var n = courses.GetLength(0);
        var timeTillNow = 0;
        for (var i = 0; i < n; ++i)
        {
            if (timeTillNow + courses[i, 0] <= courses[i, 1]) // valid
            {
                Add(sl, courses[i, 0]);
                timeTillNow += courses[i, 0];
            }
            else if (sl.Last() > courses[i, 0]) // we already sorted end time, if time cost is small the pre, always better to switch
            {
                timeTillNow += courses[i, 0] - sl.Last();
                sl.RemoveAt(sl.Count - 1);
                Add(sl, courses[i, 0]);
            }
            // time cost even big , ignore.
        }

        return sl.Count;
    }
    
    public void Add(List<int> l, int val)
    {
        var index = l.BinarySearch(val);
        index = index < 0 ? ~index : index;
        l.Insert(index, val);
    }
}

public static class ArrayExtensions
{

    public static T[][] To2D<T>(this T[,] arr)
    {
        var ret = new T[arr.GetLength(0)][];
        for (var i = 0; i < arr.GetLength(0); i++)
        {
            ret[i] = new T[arr.GetLength(1)];
            for (var j = 0; j < arr.GetLength(1); j++)
            {
                ret[i][j] = arr[i,j];
            }
        }

        return ret;
    }

    public static T[,] To2D<T>(this T[][] arr)
    {
        var ret = new T[arr.Length, arr[0].Length];
        for(var i = 0; i < arr.Length; i++)
        {
            for(var j = 0; j < arr[0].Length; j++)
            {
                ret[i, j] = arr[i][j];
            }
        }

        return ret;
    }
}


----------------------------------------------------------------------------------------------------
Simple Java solution with comments
public class Solution {
    
    public int scheduleCourse(int[][] courses) {
        // max heap "(x,y) -> y-x" denotes descending order
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>((x,y) -> y-x);
        // sort courses based on the second column (day to complete)
        Arrays.sort(courses, (a,b) -> a[1] - b[1]);
        
        int coursesTaken = 0;
        int currentDay = 0;
        for(int i=0; i<courses.length; i++) {
            if(currentDay + courses[i][0] <= courses[i][1]) {
                coursesTaken++;
                currentDay += courses[i][0];
                maxHeap.add(courses[i][0]);
            } else if(maxHeap.peek() > courses[i][0]) {
                if(currentDay + courses[i][0] - maxHeap.peek() <= courses[i][1]) {
                    //System.out.println("couldn't take, so remove max then add this: "+courses[i][0]+","+ courses[i][1]);
                    //System.out.println("max days course so far : "+maxHeap.peek());
                    currentDay = currentDay - maxHeap.poll() + courses[i][0];
                    maxHeap.add(courses[i][0]);
                }
            }
        }
        return coursesTaken;
    }
}


----------------------------------------------------------------------------------------------------
Java 97ms nlogn solution beats 95%
public int scheduleCourse(int[][] courses) {
        TreeMap<Integer, Integer> map = new TreeMap<>();
        Arrays.sort(courses, new Comparator<int[]>(){
            public int compare(int[] i1, int[] i2){
                if(i1[1] == i2[1]) return i1[0] - i2[0];
                return i1[1] - i2[1];
            }
        });
        int cur = 0;
        for(int[] i : courses){
            cur += i[0];
            if(cur <= i[1]) map.put(i[0], map.getOrDefault(i[0], 0) + 1);
            else{
                Integer key = map.lastKey();
                if(key != null && key > i[0]){
                    map.put(i[0], map.getOrDefault(i[0], 0) + 1);
                    map.put(key, map.get(key) - 1);
                    if(map.get(key) == 0) map.remove(key);
                    cur = cur - key;
                }else
                    cur -= i[0];
            }
        }
        int count = 0;
        for(Map.Entry<Integer, Integer> e : map.entrySet())
            count += e.getValue();
       	return count;
    }


----------------------------------------------------------------------------------------------------
Java OOO using TopologicalSort


    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if (null == prerequisites){
            return new int[0];
        }

        Course[] graph = buildGraph(numCourses, prerequisites);

        Set<Course> grey = new HashSet<>();
        Set<Course> black = new HashSet<>();
        List<Integer> list = new ArrayList<>();

        for (Course course : graph){
            if (null != course) {
                boolean hasCycles = hasCycles(course, grey, black, list);
                if (hasCycles) {
                    return new int[0];
                }
            }
        }

        int[] result = new int[list.size()];

        int i = 0;
        for (Integer val : list){
            result[i] = val;
            i++;
        }

        return result;
    }


    private boolean hasCycles(Course course, Set<Course> grey, Set<Course> black, List<Integer> list){
        grey.add(course);

        for (Course dependent : course.getDependents()){
            if (!black.contains(dependent)){
                if (grey.contains(dependent)){
                    return true;
                }

                boolean cycle = hasCycles(dependent, grey, black, list);
                if (cycle){
                    return true;
                }
            }
        }


        grey.remove(course);

        if (!black.contains(course)) {
            list.add(course.num);
            black.add(course);
        }

        return false;
    }

    private Course[] buildGraph(int n, int[][] pre){
        Course[] courses = new Course[n];
        for (int i = 0; i< n; i++){
            courses[i] = new Course(i);
        }

        for (int[] row : pre){
            int p = row[0];
            int d = row[1];

            Course parent = courses[p];
            Course dependent = courses[d];
            parent.addDependent(dependent);
        }

        return courses;
    }

    private static class Course{
        int num;
        List<Course> dependent = new ArrayList<>();

        public Course(int v){
            num = v;
        }

        public void addDependent(Course d){
            dependent.add(d);
        }

        public List<Course> getDependents(){
            return dependent;
        }
    }




----------------------------------------------------------------------------------------------------
C++ code Beats at least 80% of total, sometimes beats 100% :P

class Solution {
private:
	struct Big {
		constexpr bool operator()(pair<uint32_t, uint32_t> const & a, pair<uint32_t, uint32_t> const & b) const noexcept
		{
			return a.first < b.first;
		}
	};
	struct Small {
		constexpr bool operator()(pair<uint32_t, uint32_t> const & a, pair<uint32_t, uint32_t> const & b) const noexcept
		{
			return a.second > b.second || (a.second > b.second&&a.first> b.first);
		}
	};

	struct SmallDate {
		constexpr bool operator()(pair<uint32_t, uint32_t> const & a, pair<uint32_t, uint32_t> const & b) const noexcept
		{
			return a.first> b.first;
		}
	};
public:
	int scheduleCourse(vector<vector<int>>& courses) {

		if (courses.size() == 0)
		{
			return 0;
		}

		uint32_t total = 0, counter = 0;
		map<uint32_t, priority_queue<pair<uint32_t, uint32_t>, vector<pair<uint32_t, uint32_t>>, SmallDate>> m;
		priority_queue<pair<uint32_t, uint32_t>, vector<pair<uint32_t, uint32_t>>, Small> _pools;
		priority_queue<pair<uint32_t, uint32_t>, vector<pair<uint32_t, uint32_t>>, Big> _using;

		for (size_t i = 0; i < courses.size(); ++i)
		{
			//if (courses[i][1] >= courses[i][0])
			//{
				_pools.push(pair<uint32_t, uint32_t>(courses[i][0], courses[i][1]));

			//}
		}

		while (!_pools.empty())
		{
			if (total + _pools.top().first <= _pools.top().second)
			{
				total += _pools.top().first;
				_using.push(_pools.top());
				counter++;
			}
			else
			{
				if (!_using.empty() && _using.top().first > _pools.top().first)
				{
					total -= _using.top().first;
					pair<uint32_t, uint32_t> tmp = _using.top();
					_using.pop();
					total += _pools.top().first;
					_using.push(_pools.top());

					if (m.find(tmp.second) != m.end())
					{
						while (!m[tmp.second].empty() && total + m[tmp.second].top().first <= _pools.top().second)
						{
							total += m[tmp.second].top().first;
							_using.push(m[tmp.second].top());
							counter++;
						}
					}
				}
				else
				{
					m[_pools.top().second].push(_pools.top());
				}
			}

			_pools.pop();
		}

		return counter;
	}
};



----------------------------------------------------------------------------------------------------
Iterative C++ Clean &amp; Fast
class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        int cnt = 1, size = courses.size();
        sort(courses.begin(), courses.end(), 
            [](const vector<int> &a, const vector<int> &b){return a[0] == b[0] ? a[1] < b[1] : a[0] < b[0];});
        for (int i = 1; i < size; ++i) {
            int j = cnt - 1, t = courses[i][0], d = courses[i][1];;            
            bool ok = true;
            for (; j >= 0; --j) {
                if (d >= courses[j][1]) {
                    if (courses[j][0] + t > d) ok = false;
                    break;
                } else if (courses[j][0] + t > courses[j][1]) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                for (int i = cnt; i > j && i > 0; --i) {
                    courses[i][0] = courses[i - 1][0] + t;
                    courses[i][1] = courses[i - 1][1];
                }
                courses[j + 1][1] = d;
                if (j < 0) courses[0][0] = t;
                ++cnt;
            }
        }
        return cnt;
    }
};


----------------------------------------------------------------------------------------------------
