Java O(n) solution using bit manipulation and HashMap
public class Solution {
    public int findMaximumXOR(int[] nums) {
        int max = 0, mask = 0;
        for(int i = 31; i >= 0; i--){
            mask = mask | (1 << i);
            Set<Integer> set = new HashSet<>();
            for(int num : nums){
                set.add(num & mask);
            }
            int tmp = max | (1 << i);
            for(int prefix : set){
                if(set.contains(tmp ^ prefix)) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;
    }
}


----------------------------------------------------------------------------------------------------
Python 6 lines, bit by bit
nums

----------------------------------------------------------------------------------------------------
Java O(n) solution using Trie
    class Trie {
        Trie[] children;
        public Trie() {
            children = new Trie[2];
        }
    }
    
    public int findMaximumXOR(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        // Init Trie.
        Trie root = new Trie();
        for(int num: nums) {
            Trie curNode = root;
            for(int i = 31; i >= 0; i --) {
                int curBit = (num >>> i) & 1;
                if(curNode.children[curBit] == null) {
                    curNode.children[curBit] = new Trie();
                }
                curNode = curNode.children[curBit];
            }
        }
        int max = Integer.MIN_VALUE;
        for(int num: nums) {
            Trie curNode = root;
            int curSum = 0;
            for(int i = 31; i >= 0; i --) {
                int curBit = (num >>> i) & 1;
                if(curNode.children[curBit ^ 1] != null) {
                    curSum += (1 << i);
                    curNode = curNode.children[curBit ^ 1];
                }else {
                    curNode = curNode.children[curBit];
                }
            }
            max = Math.max(curSum, max);
        }
        return max;
    }


----------------------------------------------------------------------------------------------------
C++ Trie 69ms beats 85%
class Solution {
public:
    class TreeNode {
    public:
        TreeNode* next[2];
        TreeNode () {next[0] = NULL; next[1] = NULL;};
    };
    TreeNode* buildTree(vector<int>& nums) {
        TreeNode* root = new TreeNode(), *cur;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            cur = root;
            for (int j = 31; j >= 0; j--) {
                int index = ((num >> j) & 1);
                if (cur->next[index] ==  NULL)
                    cur->next[index] = new TreeNode();
                cur = cur->next[index];
            }
        }
        return root;
    }
    
    int helper(TreeNode* cur, int num) {
        int res = 0;
        for (int i = 31; i >= 0; i--) {
            int index = ((num >> i) & 1) ? 0 : 1;
            if (cur->next[index]) {
                res <<= 1;
                res |= 1;
                cur = cur->next[index];
            } else {
                res <<= 1;
                res |= 0;
                cur = cur->next[index ? 0 : 1];
            }
        }
        return res;
    }
    
    int findMaximumXOR(vector<int>& nums) {
        int res = 0;
        TreeNode* root = buildTree(nums);
        
        for (auto i : nums) {
            res = max(res, helper(root, i));
        }
        
        return res;
    }
};


----------------------------------------------------------------------------------------------------
C++, O(n) solution, explanation added
int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        
        if (n == 0 || n == 1)
            return 0;
        if (n == 2)
            return nums.at(0) ^ nums.at(1);
        
        list<int> set0;
        list<int> set1;
        int i;
        int j;
        int maxValue;
        
        for (i = 30; i >= 0; i--) {
            for (j = 0; j < n; j++) {
                if ((nums.at(j) & (1<<i)) == 0)
                    set0.push_back(nums.at(j));
                else
                    set1.push_back(nums.at(j));
            }
            
            if (set0.size() != 0 && set1.size() != 0) {
                maxValue = pow(2, i);
                break;
            }
            else {
                set0.clear();
                set1.clear();
            }
        }
        
        if (i == -1)
            return 0;
        
        maxValue += getMaxXor(set0, set1, i-1);
        
        return maxValue;
}

int getMaxXor(list<int>& set0, list<int>& set1, int pos) {
        int maxValue;
        list<int> set0list0;
        list<int> set0list1;
        list<int> set1list0;
        list<int> set1list1;
        int i;
        list<int>::iterator it;
        
        if (set0.size() == 0 || set1.size() == 0 || pos < 0)
            return 0;
        
        for (it = set0.begin(); it != set0.end(); it++) {
            int value = *it;
            if ((value & (1<<pos)) == 0)
                set0list0.push_back(value);
            else
                set0list1.push_back(value);
        }
        
        for (it = set1.begin(); it != set1.end(); it++) {
            int value = *it;
            if ((value & (1<<pos)) == 0)
                set1list0.push_back(value);
            else
                set1list1.push_back(value);
        }
        
        if (set0list0.size() == 0 && set1list0.size() == 0)
            maxValue = getMaxXor(set0, set1, pos-1);
        else if (set0list1.size() == 0 && set1list1.size() == 0)
            maxValue = getMaxXor(set0, set1, pos-1);
        else {
            int maxValue1 = getMaxXor(set0list0, set1list1, pos-1);
            int maxValue2 = getMaxXor(set0list1, set1list0, pos-1);
            maxValue = pow(2, pos) + (maxValue1 > maxValue2 ? maxValue1 : maxValue2);
        }
        
        return maxValue;
 }


----------------------------------------------------------------------------------------------------
A solution based on &#64;bartoszkp&#x27;s, with missing test cases
[15, 15, 9, 3, 2]

----------------------------------------------------------------------------------------------------
31ms O(n) Java solution using Trie
public class Solution {
    public class Node {
        Node one;
        Node zero;
        Node() {
            this.one = null;
            this.zero = null;
        }
        Node set(int n) {
            if (n == 0) {
                if (this.one == null) this.one = new Node();
                return this.one;
            }
            if (this.zero == null) this.zero = new Node();
            return this.zero;
        }
    }
    
    public int findMaximumXOR(int[] nums) {
        Node root = new Node();
        int re = 0;
        for (int num : nums) {
            int digit = num;
            int tmp = 0;
            Node setNode = root;
            Node findNode = root;
            int pos = 30;
            while (pos >= 0) {
                digit = (num >> pos) & 1;
                setNode = setNode.set(digit);
                if (digit == 1) {
                    if (findNode.one != null) {
                        tmp = tmp | (1 << pos);
                        findNode = findNode.one;
                    } else {
                        findNode = findNode.zero;
                    }
                } else {
                    if (findNode.zero != null) {
                        tmp = tmp | (1 << pos);
                        findNode = findNode.zero;
                    } else {
                        findNode = findNode.one;
                    }
                }
                pos--;
            }
            re = Math.max(re, tmp);
        }
        return re;
    }
}


----------------------------------------------------------------------------------------------------
Java, bit manipulation and divide into two groups.
public class Solution {
    public int findMaximumXOR(int[] nums) {
       int max = Integer.MIN_VALUE;
       int highBit = 0, count = 0;
       for(int num: nums) max = Math.max(max, num);
       while(count<=31){
           if((max & (1<<count)) != 0) highBit = count;
           count++;
       }
       List<Integer> isOne = new ArrayList<>();
       List<Integer> notOne = new ArrayList<>();
       
       for(int num: nums){
           if(((num>>highBit) & 1) == 1) isOne.add(num);
           else notOne.add(num);
       }
       
       return recur(isOne, notOne, highBit-1);
    }
    private int recur(List<Integer> isOne, List<Integer> notOne, int highBit){
        if(isOne.size()==1 && notOne.size()==1) return isOne.get(0) ^ notOne.get(0);
        
        List<Integer> l11 = new ArrayList<>();
        List<Integer> l10 = new ArrayList<>();
        List<Integer> l01 = new ArrayList<>();
        List<Integer> l00 = new ArrayList<>();
        
        for(int num: isOne){
            if(((num>>highBit) & 1) != 0) l11.add(num);
            else l10.add(num);
        }
        
        for(int num: notOne){
            if(((num>>highBit) & 1) != 0) l01.add(num);
            else l00.add(num);
        }
        
        int max = 0;
        if(l11.size()!=0 && l00.size()!=0) max = recur(l11, l00, highBit-1);
        if(l10.size()!=0 && l01.size()!=0) max = Math.max(max, recur(l10,l01,highBit-1));
        return max;
    }
}



----------------------------------------------------------------------------------------------------
Little advice about the problem definition
int findMaximumXOR(vector<unsigned int>& nums) {}


----------------------------------------------------------------------------------------------------
Java simple greedy + bit manipulation solution, O(n) time, with explanation (without HashMap)
public class Solution {
    public int findMaximumXOR(int[] nums) {
        int max = 0;
        if(nums == null || nums.length == 0) return 0;
        List<Integer> left = new ArrayList<>(), right = new ArrayList<>();
        
        for(int i = 0;i<nums.length;i++){
            max= Math.max(max, nums[i]);
        }
        int p = 31;
        while(p>0 && (max & (1<<p)) == 0) p--;
        int fact = 0;
        while(p>=0 && (left.isEmpty() || right.isEmpty())){
            fact = 1<<p;
            for(int i = 0;i<nums.length;i++){
                if((nums[i] & fact) == 0){
                    left.add(nums[i]);
                } else {
                    right.add(nums[i]);
                }
            }
            p--;
        }
        if(left.isEmpty() || right.isEmpty()) fact = 0;
        // System.out.println(fact);
        return fact+maxXOR(p, left, right);
    }
    
    public int maxXOR(int p, List<Integer> left, List<Integer> right){
        if(p<0) return 0;
        // int fact;
        List<Integer> leftZero  = new ArrayList<>(), rightZero  = new ArrayList<>();
        List<Integer> leftOne = new ArrayList<>(), rightOne = new ArrayList<>();
        int fact = 1<<p;
        
        while(p>=0 && ((leftZero.isEmpty() || rightOne.isEmpty()) && (leftOne.isEmpty() || rightZero.isEmpty()))){
            fact = 1<<p;
            leftZero.clear();
            leftOne.clear();
            rightZero.clear();
            rightOne.clear();
            fill(fact, left, leftZero, leftOne);
            fill(fact, right, rightZero, rightOne);
            p--;
        }
        if(((leftZero.isEmpty() || rightOne.isEmpty()) && (leftOne.isEmpty() || rightZero.isEmpty()))) {
            return 0;
        }
        // System.out.println("+"+fact);
        return fact+Math.max(maxXOR(p, leftZero, rightOne), maxXOR(p, rightZero, leftOne)); 
    }
    
    public void fill(int fact, List<Integer> list, List<Integer> zero, List<Integer> one){
        for(Integer num:list){
            if((fact & num) == 0) {
                zero.add(num);
            } else {
                one.add(num);
            }
        }
    }
}

----------------------------------------------------------------------------------------------------
Ugly but straight forward Python O(n) Trie solution
class Solution(object):
    def findMaximumXOR(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        head=[None,None]
        for num in nums:
            node=head
            for bit in range(31,-1,-1):
                chd=int(bool(num&(1<<bit)))
                if node[chd]==None:
                    NewNode=[None,None]
                    node[chd]=NewNode
                    node=NewNode
                else:
                    node=node[chd]
        maxXor=0
        for num in nums:
            node=head
            curXor=0
            for bit in range(31,-1,-1):
                chd=int(bool(num&(1<<bit)))
                if node[1^chd]:
                    curXor|=1<<bit
                    node=node[1^chd]
                else:
                    node=node[chd] 
            maxXor=max(maxXor,curXor)
            
        return maxXor


----------------------------------------------------------------------------------------------------
Java O(n) recursion solution 36ms
public class Solution {
    public int findMaximumXOR(int[] nums) {
        List<Integer> left = new ArrayList<>();
        List<Integer> right = new ArrayList<>();
        for(int i=0; i<nums.length; i++) {
            left.add(nums[i]);
            right.add(nums[i]);
        }
        return helper(left, right, 1<<30);
        
    }
    public int helper(List<Integer> left, List<Integer> right, int bit) {
        if(left.size()==0||right.size()==0) return 0;
        if(left.size()==1||right.size()==1) {
            int max = 0;
            for(Integer l: left) {
                for(Integer r: right) {
                    max = Math.max(max, l^r);
                }
            }
            return max;
        }
        List<Integer> oneLeft = new ArrayList<>();
        List<Integer> zeroLeft = new ArrayList<>();
        List<Integer> oneRight = new ArrayList<>();
        List<Integer> zeroRight = new ArrayList<>();
        while((oneLeft.size()==0||zeroRight.size()==0)&&(oneRight.size()==0||zeroLeft.size()==0)&&bit!=0) {
            oneLeft = new ArrayList<>();
            zeroLeft = new ArrayList<>();
            oneRight = new ArrayList<>();
            zeroRight = new ArrayList<>();
            for(Integer i:left) {
                if((i&bit)==0) zeroLeft.add(i);
                else oneLeft.add(i);
            }
            for(Integer i:right) {
                if((i&bit)==0) zeroRight.add(i);
                else oneRight.add(i);
            }
            bit >>= 1;
        }
        return Math.max(helper(oneLeft, zeroRight, bit), helper(zeroLeft, oneRight, bit));
    }
}


----------------------------------------------------------------------------------------------------
C++, 22 ms, beats 99.5%, array partitioning similar to quick sort
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        return helper(nums, 0, n-1, 0, n-1, 0, 30);
    }
private:
    // (ls, le) and (rs, re) are two ranges of nums, which gives max xor value to current bit;
    // bit decreases from 30 to 0, i.e., working from most significant bit on the left towards right;
    // Similar to quicksort, partition (ls, le) to two ranges (ls, j-1) and (j, le) by swapping elements
    // the range on the left with current bit = 1, and the range on right is 0; We do the same to (rs, re)
    // In order to set the current bit in the answer, i.e. val, to be 1, the left (ls, le) and right (rs,re) ranges must have subranges with opposite bit. If so, val = (val << 1) + 1; otherwise, val = val << 1.
    int helper(vector<int>& nums, int ls, int le, int rs, int re, int val, int bit) {
        if (bit == -1) return val;
        int mask = 1<<bit, j = ls, k = rs;
        for (int i = ls; i <= le; i++) 
            if (nums[i]&mask) swap(nums[i], nums[j++]);
        for (int i = rs; i <= re; i++) 
            if (nums[i]&mask) swap(nums[i], nums[k++]);
        // the left range has two subranges, the answer is max of (bit 1 subrange on the left and bit 0 subrange on the right) or (bit 0 subrange on the left and bit 1 subrange on the right)
        if (j > ls && j <= le) {
            int ans = 0;
            if (k > rs) 
                ans = helper(nums, j, le, rs, k-1, val*2+1, bit-1);
            if (k <= re) 
                ans = max(ans, helper(nums, ls, j-1, k, re, val*2+1, bit-1));
            return ans;
        }
        // the left range has only bit 0 subrange
        else if (j <= ls) {
            // check whether the right range has bit 1 subrange
            if (k > rs) 
                return helper(nums, ls, le, rs, k-1, val*2+1, bit-1);
            else 
                return helper(nums, ls, le, rs, re, val*2, bit-1);
        }
        // the left range has only bit 1 subrange
        else {
            // check whether the right range has bit 0 subrange
            if (k <= re) 
                return helper(nums, ls, le, k, re, val*2+1, bit-1);
            else 
                return helper(nums, ls, le, rs, re, val*2, bit-1);
        }
    }
};


----------------------------------------------------------------------------------------------------
C++ bitwise iteration, with search space pre-elimination and search direction optimization
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        uint e = nums.size();
        if (!e) return 0;
        uint x = 0, m = 0, w = -1;
        for (auto& n : nums) {
            m |= n;
            w &= n;
        }
        m &= ~w;
        unordered_set<uint> s;
        sort(nums.begin(), nums.end());
        for (uint i = 1<<31; i; i >>= 1) {
            if (!(m & i)) continue;
            uint t = x | i;
            for (uint j = 0, k = e-1, d = 0; j <= k; d = !d) {
                int n = d ? nums[k--] : nums[j++];
                if (s.count((n & t) ^ t)) {
                    x = t;
                    break;
                } else s.insert(n & t);
            }
            s.clear();
        }
        return x;
    }
};


----------------------------------------------------------------------------------------------------
Trie TLE is bad for medium
<p>Actually I used python to solve.<br/>
I tried two methods, one is I wrote a Trie, the other is I use set .Of course the time complexity is O(32 * n), but I both got TLE.</p>
<p>I know we can write like some posts to save time, and this can pass.<br/>
<strong>But I still don&#39;t think directly using trie and result TLE is suitable for a medium problem.</strong></p>


----------------------------------------------------------------------------------------------------
C++ O(nlogk) solution with ordering bits, with O(logk) additional memory for recursion stack
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        if (nums.size() < 2) {
            return 0;
        } else if (nums.size() == 2) {
            return nums[0] ^ nums[1];
        }
        
        auto max = *max_element(nums.begin(), nums.end());
        auto msb = static_cast<int>(log2(max));
        auto msbSplit
            = partition(nums.begin(), nums.end(), [&](const int& n) { return (n & (1 << msb)) != 0; });
        
        while (msbSplit == nums.begin() || msbSplit == nums.end()) {
            --msb;
            if (msb == 0) {
                return 0;
            }
            
            msbSplit
                = partition(nums.begin(), nums.end(), [&](const int& n) { return (n & (1 << msb)) != 0; });
        }

        return findMaximumXor(nums.begin(), msbSplit, msbSplit, nums.end(), msb);
    }
    
    int findMaximumXor(const vector<int>::iterator& beginLeft,
                       const vector<int>::iterator& endLeft,
                       const vector<int>::iterator& beginRight,
                       const vector<int>::iterator& endRight,
                       int msb) {
        if (beginLeft == endLeft|| beginRight == endRight) {
            return 0;
        }
        
        if (msb == 0 || (distance(beginLeft, endLeft) == 1 && distance(beginRight, endRight) == 1)) {
            return *beginLeft ^ *beginRight;
        }

        auto mask = 1 << (msb - 1);
        auto splitLeft
            = partition(beginLeft, endLeft, [&](const int& n) { return (n & mask) != 0; });
        auto splitRight
            = partition(beginRight, endRight, [&](const int& n) { return (n & mask) != 0; });
            
        auto result1 = findMaximumXor(beginLeft, splitLeft, splitRight, endRight, msb - 1);
        auto result2 = findMaximumXor(splitLeft, endLeft, beginRight, splitRight, msb - 1);
            
        auto result = max(result1, result2);
        
        if (result == 0) {
            result = findMaximumXor(beginLeft, endLeft, beginRight, endRight, msb - 1);
        }
        
        return result;
    }
};


----------------------------------------------------------------------------------------------------
Intuitive Python solution
class Solution(object):
    def findMaximumXOR(self, nums):
        r = 0
        l = [[nums, nums]]
        for i in range(31, -1, -1):
            count = 0
            newL = []
            for pair in l:
                zz, zo = [], []
                for zero in pair[0]:
                    if (zero >> i) & 1 == 0:
                        zz.append(zero)
                    else:
                        zo.append(zero)
                oz, oo = [], []
                for one in pair[1]:
                    if (one >> i) & 1 == 0:
                        oz.append(one)
                    else:
                        oo.append(one)
                if len(zz) > 0 and len(oo) > 0:
                    newL.append([zz, oo])
                    count += 1
                if len(zo) > 0 and len(oz) > 0:
                    newL.append([zo, oz])
                    count += 1
            if count > 0:
                l = newL
                r += 1 << i
        return r


----------------------------------------------------------------------------------------------------
Java Trie + short explanation
public class Solution {
    public int findMaximumXOR(int[] nums) {
        Trie trie = new Trie();
        for (int val : nums) {
            trie.insert(val);
        }
        
        int ans = 0;
        for (int val : nums) {
            ans = Math.max(ans, trie.count(val));
        }
        return ans;
    }
    
    public class Trie {

        private TrieNode root;
    
        public Trie() {
            root = new TrieNode();
        }
    
        public void insert(int num) {
            TrieNode cur = root;
            for (int i=31; i>=0; i--) {
                int val = (num>>i)&1;
                if (cur.getNode(val)==null) cur.addNode(val);
                cur = cur.getNode(val);
            }
        }
    
        public int count(int num) {
            TrieNode cur = root;
            int ans = 0;
            for (int i=31; i>=0; i--) {
                int val = (num>>i)&1;
                if (cur.getNode(val^1)==null) {
                    cur = cur.getNode(val);
                } else {
                    cur = cur.getNode(val^1);
                    ans |= (1<<i);
                }
            }
            return ans;
        }
    
        private class TrieNode {
            private TrieNode childNodes [];
    
            public TrieNode() {
                childNodes = new TrieNode[2];
            }
    
            public TrieNode getNode(Integer letter) {
                return childNodes[letter];
            }
            
            public void addNode(Integer letter) {
                childNodes[letter] = new TrieNode();
            }
        }
    }
}


----------------------------------------------------------------------------------------------------
How do you even think of getting an O(n) solution for this?
<p>I had absolutely no idea how to even approach this... how are we expected to do this exactly?</p>


----------------------------------------------------------------------------------------------------
23ms C++ DP version, beat 99.09%!
class Solution {
    int max_xor = 0;

  public:
    int findMaximumXOR(const vector<int> &nums) {
        vector<bitset<32>> temp(nums.size());
        transform(nums.cbegin(), nums.cend(), temp.begin(),
                  [](const int i) { return bitset<32>((unsigned)i); });

        dp(move(temp), {}, 32 - 1, 0);
        return max_xor;
    }

  private:
    void dp(const vector<bitset<32>> nums_0, const vector<bitset<32>> nums_1,
            const int nth_bit, bitset<32> prev_val) {
        if (nth_bit == -1) {
            if (max_xor < prev_val.to_ulong()) {
                max_xor = (int)prev_val.to_ulong();
            }
            return;
        }

        if (nums_0.empty() || nums_1.empty()) {
            const auto &ref = nums_0.empty() ? nums_1 : nums_0;
            vector<bitset<32>> new_nums_0;
            vector<bitset<32>> new_nums_1;

            for (const auto i : ref) {
                if (i[nth_bit]) {
                    new_nums_1.push_back(i);
                } else {
                    new_nums_0.push_back(i);
                }
            }

            if (!new_nums_0.empty() && !new_nums_1.empty()) {
                prev_val[nth_bit] = 1;
            }
            if (may_beat_max(prev_val, nth_bit))
                return dp(move(new_nums_0), move(new_nums_1), nth_bit - 1,
                          prev_val);
        } else {
            vector<bitset<32>> new_nums_0_0;
            vector<bitset<32>> new_nums_1_1;

            vector<bitset<32>> new_nums_0_1;
            vector<bitset<32>> new_nums_1_0;

            for (const auto i : nums_0) {
                if (i[nth_bit]) {
                    new_nums_0_1.push_back(i);
                } else {
                    new_nums_0_0.push_back(i);
                }
            }
            for (const auto i : nums_1) {
                if (i[nth_bit]) {
                    new_nums_1_1.push_back(i);
                } else {
                    new_nums_1_0.push_back(i);
                }
            }

            if (!new_nums_0_0.empty() && !new_nums_1_1.empty()) {
                prev_val[nth_bit] = 1;
                dp(move(new_nums_0_0), move(new_nums_1_1), nth_bit - 1,
                   prev_val);
            }

            if (!new_nums_0_1.empty() && !new_nums_1_0.empty()) {
                prev_val[nth_bit] = 1;
                dp(move(new_nums_1_0), move(new_nums_0_1), nth_bit - 1,
                   prev_val);
            }

            if (prev_val[nth_bit] == 0) {
                if (may_beat_max(prev_val, nth_bit))
                    return dp(move(nums_0), move(nums_1), nth_bit - 1,
                              prev_val);
            }
        }
    }

    inline bool may_beat_max(bitset<32> val, int nth) {
        auto a = val.to_ulong() >> nth;
        auto b = max_xor >> nth;

        if (a < b) {
            return false;
        } else if (a != b) {
            max_xor = (int)val.to_ulong();
            return true;
        } else {
            return true;
        }
    }
};


----------------------------------------------------------------------------------------------------
