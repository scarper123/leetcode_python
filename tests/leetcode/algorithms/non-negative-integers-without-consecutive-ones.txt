Java Concise O(nm) time
public int[][] matrixReshape(int[][] nums, int r, int c) {
    int n = nums.length, m = nums[0].length;
    if (r*c != n*m) return nums;
    int[][] res = new int[r][c];
    for (int i=0;i<r*c;i++) 
        res[i/c][i%c] = nums[i/m][i%m];
    return res;
}


----------------------------------------------------------------------------------------------------
One loop
public int[][] matrixReshape(int[][] nums, int r, int c) {
    int m = nums.length, n = nums[0].length;
    if (r * c != m * n)
        return nums;
    int[][] reshaped = new int[r][c];
    for (int i = 0; i < r * c; i++)
        reshaped[i/c][i%c] = nums[i/n][i%n];
    return reshaped;
}

----------------------------------------------------------------------------------------------------
Python Solutions
def matrixReshape(self, nums, r, c):
    if r * c != len(nums) * len(nums[0]):
        return nums
    it = itertools.chain(*nums)
    return [list(itertools.islice(it, c)) for _ in xrange(r)]

----------------------------------------------------------------------------------------------------
Easy Java Solution
public class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int m = nums.length, n = nums[0].length;
        if (m * n != r * c) return nums;
        
        int[][] result = new int[r][c];
        int row = 0, col = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[row][col] = nums[i][j];
                col++;
                if (col == c) {
                    col = 0;
                    row++;
                }
            }
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code - 5 lines (2 Solution)
class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        int m = nums.size(), n = nums[0].size();
        if (m * n != r * c) {
            return nums;
        }

        vector<vector<int>> res(r, vector<int>(c, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int k = i * n + j;
                res[k / c][k % c] = nums[i][j];
            }
        }

        return res;
    }
};


----------------------------------------------------------------------------------------------------
C solution
n

----------------------------------------------------------------------------------------------------
Python, Simple with Explanation
def matrixReshape(self, A, nR, nC):
    if len(A) * len(A[0]) != nR * nC:
        return A
        
    vals = [val for row in A for val in row]
    ans = [[None] * nC for _ in xrange(nR)]
    i = 0
    for r in xrange(nR):
        for c in xrange(nC):
            ans[r][c] = vals[i]
            i += 1
    return ans

----------------------------------------------------------------------------------------------------
Python solution
class Solution(object):
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        nrows = len(nums)
        ncols = len(nums[0])
        
        if nrows * ncols == r * c:
            onedArray = []
            reshaped = [[0] * c for i in range(r)]
            for x in nums:
                onedArray += x
            for index, item in enumerate(onedArray):
                placeRow = index / c
                placeCol = index % c
                reshaped[placeRow][placeCol] = item
            return reshaped
        else:
            return nums


----------------------------------------------------------------------------------------------------
Easy-to-understand python solution
class Solution(object):
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        if len(nums) * len(nums[0]) != r * c:
            return nums
            
        ans = [[]]
        for i in range(len(nums)):
            for j in range(len(nums[0])):
                k = nums[i][j]
                if len(ans[-1]) < c:
                    ans[-1].append(k)
                else:
                    ans.append([k])
        return ans


----------------------------------------------------------------------------------------------------
39ms simple C++ solution
class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        int area=nums.size()*nums[0].size();
        if(area!=r*c) return nums;
        vector<vector<int> > res(r);
        int i=0,j=0;
        int rows=nums.size(),cols=nums[0].size();
        for(int m=0;m<rows;++m)
        {
           for(int n=0;n<cols;++n)
            {
                res[i].push_back(nums[m][n]);
                if((++j)%c==0) ++i;
            }
        }
        return res;
    }
};

----------------------------------------------------------------------------------------------------
where is wrong ,my submit of No.566
<p>class Solution {<br/>
public:<br/>
vector&lt;vector&lt;int&gt;&gt; matrixReshape(vector&lt;vector&lt;int&gt;&gt;&amp; nums, int r, int c) {<br/>
vector&lt;int&gt; tmp;<br/>
for(int i=0;i&lt;nums.size();i++)<br/>
{<br/>
for(int j=0;j&lt;nums&#91;i&#93;.size();j++)<br/>
{<br/>
tmp.push_back(nums&#91;i&#93;&#91;j&#93;);<br/>
}<br/>
}<br/>
if(tmp.size()==r*c)<br/>
{<br/>
int t=0;<br/>
vector&lt;vector&lt;int&gt;&gt; ans;<br/>
for(int i=0;i&lt;r;i++)<br/>
{<br/>
for(int j=0;j&lt;c;j++)<br/>
{<br/>
ans&#91;i&#93;.push_back(tmp&#91;t++&#93;);<br/>
}<br/>
}<br/>
return ans;<br/>
}<br/>
else<br/>
{<br/>
return nums;<br/>
}<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
scala version
  def matrixReshape(nums: Array[Array[Int]], r: Int, c: Int): Array[Array[Int]] = {
    var finalMatrix: Array[Array[Int]] = Array.ofDim(r, c)
    val hgt = nums.length
    val len = nums(0).length
    if (hgt * len != r * c) nums 
    else {
      for (i <- 0 until r * c) finalMatrix(i / c)(i % c) = nums(i / len)(i % len)
      finalMatrix
    }
  }


----------------------------------------------------------------------------------------------------
share my java solution!
public class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int[][] res=new int[r][c];
        
        if(nums.length*nums[0].length!=r*c){
            return nums;
        }
        
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums[0].length;j++){
                int row=(i*nums[0].length+j)/c;
                int col=(i*nums[0].length+j)%c;
                res[row][col]=nums[i][j];
            }
        }
        
        return res;
    }
}


----------------------------------------------------------------------------------------------------
C++ easy to understand beats 90.72%
    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
        if(nums.size()*nums[0].size()!=r*c) return nums;
        vector<vector<int>>res(r,vector<int>(c));
        int row=0;
        int col=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                res[i][j]=nums[row][col];
                col++;
                if(col==nums[0].size()) col=0,row++;
            }
        }
        return res;
    }


----------------------------------------------------------------------------------------------------
Python solution with comments
class Solution(object):
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        
        # check if nums is empty
        if not nums :
            return nums
            
        # calculate h(height) and w(width) of nums
        h = len(nums)
        w = len(nums[0])
        
        # check if the reshape operation is valid
        if h*w != r*c :
            return nums
            
        # build reshaped list
        res = [[0]*c for _ in xrange(r)] 
        
        # do reshape
        for i in xrange(h*w):
                res[i/c][i%c] = nums[i/w][i%w]
        return res


----------------------------------------------------------------------------------------------------
Follow up: What if the columns of the given matrix (nums) do not have the same length? Java 1pass solution
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        if ((nums.length == 0) || (nums.length > 100)) return nums;
        int[][] res = new int[r][c];
        int count = 0;          //1-dimension index of entry;
        for (int[] column : nums) {
            if ((column.length == 0) || (column.length > 100)) return nums; 
            for (int i : column) {
                if (count + 1 > r * c) return nums;         //return original if output matrix is too small; 
                res[count / c][count % c] = i;
                count++;
            }
        }
        if (count < r * c) return nums;                 //return original if output matrix is too big;
        return res;
    }


----------------------------------------------------------------------------------------------------
Two java solution with thinking process
public int[][] matrixReshape(int[][] nums, int r, int c) {
        int row = nums.length;
        int col = nums[0].length;
        if(r*c != row*col) return nums;
        
        int[][] newMatrix = new int[r][c];
        for(int i=0; i<r*c; ++i){
            newMatrix[i/c][i%c] = nums[i/col][i%col];
        }
        
        return newMatrix;
    }


----------------------------------------------------------------------------------------------------
Python Solution
class Solution(object):
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        nums_flat = sum(nums, [])
        n = len(nums_flat)
        if n == 0 or n != r * c:
            return nums
        else:
            return [nums_flat[i:i+c] for i in range(0, n, c)]


----------------------------------------------------------------------------------------------------
