In place simple solution
First, reverse the whole string, then reverse each word.

    void reverseWords(string &s) {
        reverse(s.begin(), s.end());
        int storeIndex = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] != ' ') {
                if (storeIndex != 0) s[storeIndex++] = ' ';
                int j = i;
                while (j < s.size() && s[j] != ' ') { s[storeIndex++] = s[j++]; }
                reverse(s.begin() + storeIndex - (j - i), s.begin() + storeIndex);
                i = j;
            }
        }
        s.erase(s.begin() + storeIndex, s.end());
    }


----------------------------------------------------------------------------------------------------
Clean Java two-pointers solution (no trim( ), no split( ), no StringBuilder)
    public class Solution {
      
      public String reverseWords(String s) {
        if (s == null) return null;
        
        char[] a = s.toCharArray();
        int n = a.length;
        
        // step 1. reverse the whole string
        reverse(a, 0, n - 1);
        // step 2. reverse each word
        reverseWords(a, n);
        // step 3. clean up spaces
        return cleanSpaces(a, n);
      }
      
      void reverseWords(char[] a, int n) {
        int i = 0, j = 0;
          
        while (i < n) {
          while (i < j || i < n && a[i] == ' ') i++; // skip spaces
          while (j < i || j < n && a[j] != ' ') j++; // skip non spaces
          reverse(a, i, j - 1);                      // reverse the word
        }
      }
      
      // trim leading, trailing and multiple spaces
      String cleanSpaces(char[] a, int n) {
        int i = 0, j = 0;
          
        while (j < n) {
          while (j < n && a[j] == ' ') j++;             // skip spaces
          while (j < n && a[j] != ' ') a[i++] = a[j++]; // keep non spaces
          while (j < n && a[j] == ' ') j++;             // skip spaces
          if (j < n) a[i++] = ' ';                      // keep only one space
        }
      
        return new String(a).substring(0, i);
      }
      
      // reverse a[] from a[i] to a[j]
      private void reverse(char[] a, int i, int j) {
        while (i < j) {
          char t = a[i];
          a[i++] = a[j];
          a[j--] = t;
        }
      }
      
    }

----------------------------------------------------------------------------------------------------
My accepted Java solution
    String[] parts = s.trim().split("\\s+");
    String out = "";
    for (int i = parts.length - 1; i > 0; i--) {
        out += parts[i] + " ";
    }
    return out + parts[0];

I'm splitting on the regex for one-or-more whitespace, this takes care of multiple spaces/tabs/newlines/etc in the input. Since the input could have leading/trailing whitespace, which would result in empty matches, I first trim the input string.

Now there could be three possibilities:

 1. The input is empty: "", parts will contain [""]. The for loop is skipped and "" + "" is returned.
 2. The input contains only one part: "a", parts will contain ["a"]. The for loop is skipped and "" + "a" is returned.
 3. The input contains multiple parts: "a b c", reverse the order of all but the first part: "c b " in the for loop and return "c b " + "a".

Obviously this is not the fastest or most memory efficient way to solve the problem, but optimizations should *only* be done when they are needed. Readable code is usually more important than efficient code.

How to make it efficient?

 1. Use a StringBuilder to concatenate the string parts, instead of concatenating strings directly. This will (I assume) build something like a linked-list of string parts, and only allocate the new string when you need it, instead of on each concatenation.
 2. Iterate over the string, instead of using trim/split. Store the index of the last character in the word, when you find the first character, copy the substring to the output string.
 3. Instead of using substring, insert the word-characters directly in the StringBuilder. Assuming they're using a linked-list or tree, this could be a whole last faster.


----------------------------------------------------------------------------------------------------
C++ solution, in place: runtime O(n), memory O(1)
The idea is to ignore the extra spaces, reverse words one by one and reverse the whole string in the end.
I think for the interview it is good to show that substr or istringstream can be used too.
[The idea is taken from here][1]

    class Solution {
    public:
    
        // function to reverse any part of string from i to j (just one word or entire string)
        void reverseword(string &s, int i, int j){
            while(i<j){
              char t=s[i];
              s[i++]=s[j];
              s[j--]=t;
            } 
        }
        
        void reverseWords(string &s) {
            
            int i=0, j=0;
            int l=0;
            int len=s.length();
            int wordcount=0;
            
            while(true){
                while(i<len && s[i] == ' ') i++;  // skip spaces in front of the word
                if(i==len) break;
                if(wordcount) s[j++]=' ';
                l=j;
                while(i<len && s[i] != ' ') {s[j]=s[i]; j++; i++;} 
                reverseword(s,l,j-1);                // reverse word in place
                wordcount++;
                
            }
            
            s.resize(j);                           // resize result string
            reverseword(s,0,j-1);                  // reverse whole string
        }
    };


  [1]: http://www.ardendertat.com/2011/10/31/programming-interview-questions-12-reverse-words-in-a-string/

----------------------------------------------------------------------------------------------------
Java 3-line builtin solution
    public String reverseWords(String s) {
        String[] words = s.trim().split(" +");
        Collections.reverse(Arrays.asList(words));
        return String.join(" ", words);
    }

----------------------------------------------------------------------------------------------------
Why when input is &quot; &quot;, expected is &quot;&quot;?
I got "Wrong answer" as:
Input:	" "
Output:	" "
Expected:	""

I think for input " ", the output is supposed to be " " when reversing the string, am I missing something here?

----------------------------------------------------------------------------------------------------
Accepted simple cpp code in just a few lines
    class Solution {
    public:
        void reverseWords(string &s) {
            string result;
            int pos = 0;
            for (int i = 0; i < s.size(); i ++){
                if (s[i] == ' '){
                    if (i > pos )
                        result = s.substr(pos,i-pos)+ " " + result ;
                    pos = i + 1;
                }
                else if (i == s.size()-1)
                    result = s.substr(pos,s.size()-pos)+" "+result;
            }
            s = result.substr(0,result.size()-1) ;
        }
    };

----------------------------------------------------------------------------------------------------
5 lines C++ using &lt;stringstream&gt;
    void reverseWords(string &s) {
        istringstream is(s);
        string tmp;
        is >> s;
        while(is >> tmp) s = tmp + " " + s;
        if(s[0] == ' ') s = "";
    }

----------------------------------------------------------------------------------------------------
My Accept Answer of Python with one line
My Python code using the function of array and string. Both time and memory is O(n).

    class Solution:
    # @param s, a string
    # @return a string
    def reverseWords(self, s):
        return " ".join(s.strip().split()[::-1])

----------------------------------------------------------------------------------------------------
Is my solution good enough?
Following is my accepted solution. However I found it quite long and not concise. Can someone help me improving my code?

    void reverseStr(string &s, int start, int end)
        {
            int i = start;
            int j = end;
            while(i<j)
            {
                swap(s[i],s[j]);
                i++;
                j--;
            }
        }
        void reverseStr(string &s)
        {
            reverseStr(s, 0, s.size()-1);
        }
        void reverseWords(string &s) {
            //reverse entire
            reverseStr(s);
            //reverse each word
            int start = 0;
            int end = 0;
            int i = 0;
            //remove leading space
            while(s.size() >0 && s[0] == ' ')
            {
                s.erase(0,1);
            }
            //add one space to the end so that it is easy to read word
            s += ' ';
            for(int i = 0; i < s.size(); ++i)
            {
                if(s[i] != ' ')
                    end++;
                //remove multiple space
                while(s[i] == ' ' && i < s.size()-1 && s[i+1] == ' ')
                {
                    s.erase(i,1);
                }
                //reverse word
                if(s[i] == ' ')
                {
                    if(end>start)
                    {
                        reverseStr(s, start, end-1);
                        start = end + 1;
                        end = start;
                    }
                }
            }
            //remove last ' '
            s.erase(s.size()-1, 1);
            
            
        }

----------------------------------------------------------------------------------------------------
In-place Java solution with comments just for fun
Hi guys!

Just to keep it more interesting made it in-place in Java without using any additional library functions except converting String to char[]. Check it out. :)

    // reverses the part of an array and returns the input array for convenience
    public char[] reverse(char[] arr, int i, int j) {
        while (i < j) {
            char tmp = arr[i];
            arr[i++] = arr[j];
            arr[j--] = tmp;
        }
        return arr;
    }

    public String reverseWords(String s) {
        // reverse the whole string and convert to char array
        char[] str = reverse(s.toCharArray(), 0, s.length()-1);
        int start = 0, end = 0; // start and end positions of a current word
        for (int i = 0; i < str.length; i++) {
            if (str[i] != ' ') { // if the current char is letter 
                str[end++] = str[i]; // just move this letter to the next free pos
            } else if (i > 0 && str[i-1] != ' ') { // if the first space after word
                reverse(str, start, end-1); // reverse the word
                str[end++] = ' '; // and put the space after it
                start = end; // move start position further for the next word
            }
        }
        reverse(str, start, end-1); // reverse the tail word if it's there
        // here's an ugly return just because we need to return Java's String
        // also as there could be spaces at the end of original string 
        // we need to consider redundant space we have put there before
        return new String(str, 0, end > 0 && str[end-1] == ' ' ? end-1 : end);
    }

Have a nice coding there!

----------------------------------------------------------------------------------------------------
Java in-place 3 ms solution | beats 88%
    class Solution {
  

> Blockquote

/**
In place word reverse ignoring new String object built. Idea is to reverse each word then reverse the whole string. Space is tackled by trimming and shifting chars to left i.e if i points to space and i-1 also point to space shift chars starting from i+1 left by one place. Decrement end pointer pointing to end of string.

Example steps: 

 1. s ="  Hello World    "

 2. Trim s = "Hello World"

 3. Reverse each word - s ="olleH dlroW" 

 4. Reverse whole string s= "World Hello" 

@param s

@return reversed string object
*/

> Blockquote

	public static String reverseWords(String s) {
		if (s == null)
			return null;

		char[] str = s.toCharArray();
		int start = 0, end = str.length - 1;

		// Trim start of string
		while (start <= end && str[start] == ' ')
			start++;

		//Trim end of string
		while (end >= 0 && str[end] == ' ')
			end--;

		if (start > end)
			return new String("");

		int i = start;
		while (i <= end) {
			if (str[i] != ' ') {
				// case when i points to a start of word -  find the word reverse it
				int j = i + 1;
				while (j <= end && str[j] != ' ')
					j++;
				reverse(str, i, j - 1);
				i = j;
			} else {
				if (str[i - 1] == ' ') {
					//case when prev char is also space - shift char to left by 1 and decrease end pointer
					int j = i;
					while (j <= end - 1) {
						str[j] = str[j + 1];
						j++;
					}
					end--;
				} else
					// case when there is just single space
					i++;
			}
		}
		//Now that all words are reversed, time to reverse the entire string pointed by start and end - This step reverses the words in string
		reverse(str, start, end);
		// return new string object pointed by start with len = end -start + 1
		return new String(str, start, end - start + 1);
	}

	private static void reverse(char[] str, int begin, int end) {
		while (begin < end) {
			char temp = str[begin];
			str[begin] = str[end];
			str[end] = temp;
			begin++;
			end--;
		}
	}
}

----------------------------------------------------------------------------------------------------
Are we allowed to use Java build-in functions?
Hi all,<br>
I solved this problem by using java build-in functions: split and trim. I'm wondering if we are expected to use them or not, because this problem may become too easy by using these functions.

    public String reverseWords(String s) {
        if (s == null || s.length() <= 0) return s;
        String[] words = s.split(" +");
        StringBuilder ret = new StringBuilder();
        for (int i = words.length - 1; i >= 0; i--)
            if (words[i].length() > 0) ret.append(words[i]).append(" ");
        return ret.toString().trim();
    }


----------------------------------------------------------------------------------------------------
Simple Java Solution
    public class Solution {
        public String reverseWords(String s) {
            String [] words = s.split(" ");
            StringBuilder sb = new StringBuilder();
            int end = words.length - 1;
            for(int i = 0; i<= end; i++){
                if(!words[i].isEmpty()) {
                    sb.insert(0, words[i]);
                    if(i < end) sb.insert(0, " ");
                }
            }
            return sb.toString();
        }
    }

----------------------------------------------------------------------------------------------------
My 10-line Java code that beats 73% of the submissions
Here is my concise and fast code that beats 73% of Java submissions. 

I scan from the end to make the concatenation logic clear and use `StringBuilder` to make the String concatenation faster. I also use `trim` when returning the results to avoid boundary checking.

Hope it helps.


    public static String reverseWords(String s) {
        StringBuilder res = new StringBuilder();
        for (int start = s.length() - 1; start >= 0; start--) {
            if (s.charAt(start) == ' ') continue;
            int end = start;
            while (start >= 0 && s.charAt(start) != ' ') start--;
            res.append(s.substring(start + 1, end + 1)).append(" ");
        }
        return res.toString().trim();
    }

----------------------------------------------------------------------------------------------------
One line accepted python code
One line accepted python code, although that is no the interview goal. 


    class Solution:
    # @param s, a string
    # @return a string
    def reverseWords(self, s):
        return ' '.join(reversed(s.split()))

----------------------------------------------------------------------------------------------------
0 ms easy solution in C
    void reverse(char *start,char *end)
    {
        while(end > start)
        {
            char temp = *start;
            *start = *end;
            *end = temp;
            start++,end--;
        }
    }
    
    void trim(char *S)
    {
        int count = 0;
        int N = strlen(S);
        int flag = 1;
        for(int i=0;i<N;i++)
        {
            if(S[i] != ' ')
            {
                S[count++] = S[i];
                flag = 0;
            }
            else
            {
                if(!flag)
                {
                    S[count++] = S[i];
                    flag = 1;
                }
            }
        }
        if(count >= 1 && S[count-1] == ' ')
            S[count-1] = '\0';
        else
            S[count] = '\0';
    }
    
    void reverseWords(char *S)
    {
        trim(S);
        char *temp = S,*prev = S;
        while(*temp)
        {
            temp++;
            if(*temp == ' ')
            {
                reverse(prev,temp-1);
                prev = temp+1;
            }
            else if(*temp == '\0')
            {
                reverse(prev,temp-1);
            }
        }
        reverse(S,temp-1);
    }

----------------------------------------------------------------------------------------------------
In place O(1) C solution; clear 3-step algorithm
    void swapC(char *a, char *b)
    {
      char tmp = *a; *a = *b; *b=tmp;
    }
    
    void rev(char* start, char* end)
    {
      while(end>start)  swapC(end--, start++);
    }
    
    void reverseWords(char *s)
    {
      /* For C programmers: Try to solve it in-place in O(1) space. */
      /* 3-step algorthm
         1. use runner/chaser to eliminate all unnecessary spaces
         2. rev the entire string
         3. rev word by word*/
      int len = strlen(s);
      if(len < 2 && !isspace(*s)) return;
      
      /* 1. trim off all unnecessary spaces */
      char* runner, *chaser;
      for(runner = s, chaser=s; *runner!='\0'; runner++)
      {
        if(isspace(*runner))
        {
          while(isspace(*(runner+1)) && *(runner+1)!=0) runner++;
          if(*(runner+1) == 0) break;
          if(chaser == s) continue;
        }
        if(runner!=chaser)    swapC(runner, chaser);
        chaser++;
      }
      *chaser = 0;
      len = strlen(s);
    
      /* 2. rev the entire string */
      rev(s, s+len-1);
      
      /* 3. rev word by word */
      for(char *wHead =s, *wTail=s; wHead < s+len; wHead = wTail+2)
      {
        for(wTail=wHead; !isspace(*(wTail+1)) && *(wTail+1) != 0; wTail++);
        rev(wHead, wTail);
      }
    }



----------------------------------------------------------------------------------------------------
In-place Java Solution, with detailed explanation.
We can reverse each word first, then reverse the whole string, finnaly trim the string.

Let us consider a general case:

Step 1:

    +---+---+---+---+---+---+---+---+---+---+---+
    |   |   | a | b |   |   | c |   |   | d | e |
    +---+---+---+---+---+---+---+---+---+---+---+

Step 2:

    +---+---+---+---+---+---+---+---+---+---+---+
    |   |   | b | a |   | c |   | e | d |   |   |
    +---+---+---+---+---+---+---+---+---+---+---+

Step 3:

    +---+---+---+---+---+---+---+---+---+---+---+
    |   |   | d | e |   | c |   | a | b |   |   |
    +---+---+---+---+---+---+---+---+---+---+---+

Step 4:

            +---+---+---+---+---+---+---+
            | d | e |   | c |   | a | b |
            +---+---+---+---+---+---+---+

We can reverse a part of a string easily:

    private void reverseString(char[] chars, int s, int e) {
        if (chars == null || s >= e || e >= chars.length) {
            return;
        }

        while (s < e) {
            char tmp = chars[s];
            chars[s] = chars[e];
            chars[e] = tmp;
            s++;
            e--;
        }
    }

The hardest part is from step 1 to step 2.

For a string, we introduce 4 variables:

1.  `len`, the lenth of the string.
2.  `last`, the index of the last character in the string.
3.  `chars`, the character array of a string.
4.  `i`, the iteration pointer, from 0 to `len`:

We can iterate the whole string from the start to the end, during the iteration process, we reverse every word.

We introduce 3 variables:

    start        end
      |           |
      v           v
    +---+---+---+---+---+---+---+---+---+---+---+
    |   |   | a | b |   |   | c |   |   | d | e |
    +---+---+---+---+---+---+---+---+---+---+---+
              ^
              |
            first

1. `start`, the first position where a part of the string should be reversed.
2. `end`, the last position where a part of the string should be reversed.
    If the next character is blank and current blank is not blank, we mark current `i` as `end`:

        while (i < last && chars[i] != ' ' && chars[i + 1] != ' ') {
            i++;
        }
        end = i;

3. `first`, the first position where the character is not blank.

        while (i < len && chars[i] == ' ') {
            i++;
        }
        first = i;

Now we reverse the string for `start` to `end` and then we leave a blank after the last character, next round we reverse another part of the string:

                start        end
                  |           |
                  v           v
    +---+---+---+---+---+---+---+---+---+---+---+
    | b | a |   |   |   |   | c |   |   | d | e |
    +---+---+---+---+---+---+---+---+---+---+---+
                              ^
                              |
                            first
We can know the the position of the last character is:

    start + (end - first)

and the position of the blank will be:

    start + (end - first) + 1

Next round, we reverse the part of the string from the next position after the blank.

The code is here:


    public String reverseWords(String s) {
        if (s == null) {
            return s;
        }
        char[] chars = s.toCharArray();

        int len = chars.length;
        int last = len - 1;

        int i = 0;
        int start = 0;
        int first = 0;
        int end = 0;

        while (i < len) {

            start = i;

            while (i < len && chars[i] == ' ') {
                i++;
            }
            first = i;

            while (i < last && chars[i] != ' ' && chars[i + 1] != ' ') {
                i++;
            }
            end = i;

            reverseString(chars, start, end);

            i = start + (end - first) + 1;

            // move to next
            i++;
        }

        reverseString(chars, 0, len - 1);

        return String.valueOf(chars).trim();
    }


----------------------------------------------------------------------------------------------------
My java solution, few lines.
    public class Solution {
        public String reverseWords(String s) {
            if(s == null) return "";
            
            int i = 0;
            String newStr = "";
            String word = "";
            while(i<s.length()){
                char c = s.charAt(i);
                if(c == ' '){
                    if(newStr != "" && word != "")
                        newStr = word + " " + newStr;
                    if(newStr == "" && word != "")
                        newStr = word;
                    word = "";
                }else{
                    word += c;
                }
                i++;
            }
            if(newStr != "" && word != "")
                newStr = word + " " + newStr;
            if(newStr == "" && word != "")
                newStr = word;
                
            return newStr;
        }
    }

----------------------------------------------------------------------------------------------------
