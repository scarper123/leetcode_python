C++ concise log(n) solution
    class Solution {
    public:
      bool search(int A[], int n, int target) {
        int lo =0, hi = n-1;
        int mid = 0;
        while(lo<hi){
              mid=(lo+hi)/2;
              if(A[mid]==target) return true;
              if(A[mid]>A[hi]){
                  if(A[mid]>target && A[lo] <= target) hi = mid;
                  else lo = mid + 1;
              }else if(A[mid] < A[hi]){
                  if(A[mid]<target && A[hi] >= target) lo = mid + 1;
                  else hi = mid;
              }else{
                  hi--;
              }
              
        }
        return A[lo] == target ? true : false;
      }
    };

----------------------------------------------------------------------------------------------------
My 8ms C++ solution (o(logn) on average, o(n) worst case)
The idea is the same as the previous one without duplicates

    1) everytime check if targe == nums[mid], if so, we find it.
    2) otherwise, we check if the first half is in order (i.e. nums[left]<=nums[mid]) 
      and if so, go to step 3), otherwise, the second half is in order,   go to step 4)
    3) check if target in the range of [left, mid-1] (i.e. nums[left]<=target < nums[mid]), if so, do search in the first half, i.e. right = mid-1; otherwise, search in the second half left = mid+1;
    4)  check if target in the range of [mid+1, right] (i.e. nums[mid]<target <= nums[right]), if so, do search in the second half, i.e. left = mid+1; otherwise search in the first half right = mid-1;

The only difference is that due to the existence of duplicates, we can have nums[left] == nums[mid] and in that case, the first half could be out of order (i.e. NOT in the ascending order, e.g. [3 1 2 3 3 3 3]) and we have to deal this case separately. In that case, it is guaranteed that nums[right] also equals to nums[mid], so what we can do is to check if nums[mid]== nums[left] == nums[right] before the original logic, and if so, we can move left and right both towards the middle by 1. and repeat.  

    class Solution {
    public:
        bool search(vector<int>& nums, int target) {
            int left = 0, right =  nums.size()-1, mid;
            
            while(left<=right)
            {
                mid = (left + right) >> 1;
                if(nums[mid] == target) return true;
    
                // the only difference from the first one, trickly case, just updat left and right
                if( (nums[left] == nums[mid]) && (nums[right] == nums[mid]) ) {++left; --right;}
    
                else if(nums[left] <= nums[mid])
                {
                    if( (nums[left]<=target) && (nums[mid] > target) ) right = mid-1;
                    else left = mid + 1; 
                }
                else
                {
                    if((nums[mid] < target) &&  (nums[right] >= target) ) left = mid+1;
                    else right = mid-1;
                }
            }
            return false;
        }
    };


----------------------------------------------------------------------------------------------------
When there are duplicates, the worst case is O(n). Could we do better?
Since we will have some duplicate elements in this problem, it is a little tricky because sometimes we cannot decide whether to go to the left side or right side. So for this condition, I have to probe both left  and right side simultaneously to decide which side we need to find the number. Only in this condition, the time complexity may be *O(n)*. The rest conditions are always *O(log n)*.

For example:

input: `113111111111`,  Looking for *target* `3`.

Is my solution correct? My code is as followed:

    public class Solution {
        public boolean search(int[] A, int target) {
            // IMPORTANT: Please reset any member data you declared, as
            // the same Solution instance will be reused for each test case.
            int i = 0;
            int j = A.length - 1;
            while(i <= j){
                int mid = (i + j) / 2;
                if(A[mid] == target)
                    return true;
                else if(A[mid] < A[i]){
                    if(target > A[j])
                        j = mid - 1;
                    else if(target < A[mid])
                        j = mid - 1;
                    else
                        i = mid + 1;
                }else if(A[mid] > A[i]){
                    if(target < A[mid] && target >= A[i])
                        j = mid - 1;
                    else
                        i = mid + 1;
                }else{ // A[mid] == A[i]
                    if(A[mid] != A[j])
                        i = mid + 1;
                    else{
                        boolean flag = true;
                        for(int k = 1; mid - k >= i && mid + k <= j; k++){
                            if(A[mid] != A[mid - k]){
                                j = mid - k;
                                flag = false;
                                break;
                            }else if(A[mid] != A[mid + k]){
                                i = mid + k;
                                flag = false;
                                break;
                            }
                        }
                        if(flag)
                            return false;
                    }
                }
            }
            return false;
        }
    }

----------------------------------------------------------------------------------------------------
Neat JAVA solution using binary search
        public boolean search(int[] nums, int target) {
            int start = 0, end = nums.length - 1, mid = -1;
            while(start <= end) {
                mid = (start + end) / 2;
                if (nums[mid] == target) {
                    return true;
                }
                //If we know for sure right side is sorted or left side is unsorted
                if (nums[mid] < nums[end] || nums[mid] < nums[start]) {
                    if (target > nums[mid] && target <= nums[end]) {
                        start = mid + 1;
                    } else {
                        end = mid - 1;
                    }
                //If we know for sure left side is sorted or right side is unsorted
                } else if (nums[mid] > nums[start] || nums[mid] > nums[end]) {
                    if (target < nums[mid] && target >= nums[start]) {
                        end = mid - 1;
                    } else {
                        start = mid + 1;
                    }
                //If we get here, that means nums[start] == nums[mid] == nums[end], then shifting out
                //any of the two sides won't change the result but can help remove duplicate from
                //consideration, here we just use end-- but left++ works too
                } else {
                    end--;
                }
            }
            
            return false;
        }

In case anyone wonders, yes I agree that we don't need to check two parts. It's just that Doing that can slightly boost the performance, no asymptotic difference though.

----------------------------------------------------------------------------------------------------
Medium level question is follow up for a hard level question?
It says this problem is a follow up for Search in Rotated Sorted Array.

Search in Rotated Sorted Array is a hard level question.

It is kinda un-intuitive for a medium level question to be a follow up for a hard question since I am doing all medium level questions first before I do hard level questions.

If this problem is easier than Search in Rotated Sorted Array, then I think Search in Rotated Sorted Array should be the follow up problem for this, not the other way around.

----------------------------------------------------------------------------------------------------
Python easy to understand solution (with comments).
        
    def search(self, nums, target):
        l, r = 0, len(nums)-1
        while l <= r:
            mid = l + (r-l)//2
            if nums[mid] == target:
                return True
            while l < mid and nums[l] == nums[mid]: # tricky part
                l += 1
            # the first half is ordered
            if nums[l] <= nums[mid]:
                # target is in the first half
                if nums[l] <= target < nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
            # the second half is ordered
            else:
                # target is in the second half
                if nums[mid] < target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return False

----------------------------------------------------------------------------------------------------
Easy C++ Solution based on Version I of the Problem
For those who have already solved **Search in Rotated Sorted Array**, this problem can be solved similarly using codes for that problem and simply adding codes to skip the duplicates.

For **Search in Rotated Sorted Array**, I post solutions in C/C++/Python [here][1] (C and C++ only needs 11 lines). 

Now, based on the above codes, you can solve this problem by simply adding two lines to skip duplicates both starting from left and right.

    class Solution {
    public: 
        bool search(vector<int>& nums, int target) {
            int l = 0, r = nums.size() - 1;
            while (l <= r) {
                while (l < r && nums[l] == nums[l + 1]) l++; // skip duplicates from the left
                while (r > l && nums[r] == nums[r - 1]) r--; // skip duplicates from the right
                int mid = (l + r) / 2;
                if (nums[mid] == target) return true; 
                if (nums[mid] > target) {
                    if (nums[l] <= target || nums[mid] < nums[l]) r = mid - 1;
                    else l = mid + 1;
                }
                else {
                    if (nums[l] > target || nums[mid] >= nums[l]) l = mid + 1;
                    else r = mid - 1;
                }
            } 
            return false;
        }
    }; 

  [1]: https://leetcode.com/discuss/46655/11-lines-c-c-python-solutions

----------------------------------------------------------------------------------------------------
Simple C++ solution explained
To see more details about the thought process, please go to my other [post][1]. The only difference here comparing to "[33. Search in Rotated Sorted Array(Hard)][2]" is to add a separate condition check for nums[mid] == nums[r], because here we can't decide which side to take, only knowing that nums[r] is not equal to target, so move r to the left one step at a time, which may potentially cause the runtime to go linear which may answer the follow up question.

    class Solution {
    public:
        bool search(vector<int>& nums, int target) {
            int l = 0, r = nums.size() - 1;        
            while(l <= r){  
                int mid = l + (r - l) / 2;            
                if(nums[mid] == target) return true;
                if(nums[mid] > nums[r]){
                    if(target > nums[mid] || target <= nums[r]) l = mid + 1;    
                    else r = mid - 1;                                                               
                }else if(nums[mid] == nums[r]){
                    r --;   // may cause linear time here, e.g. [7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], search for 0
                }
                else{
                    if(target <= nums[r] && target > nums[mid]) l = mid + 1; 
                    else r = mid - 1;                                                               
                }
            }
            return false;        
        }
    };


  [1]: https://leetcode.com/discuss/94276/simple-concise-solution-detailed-explanation-thought-process
  [2]: https://leetcode.com/problems/search-in-rotated-sorted-array/

----------------------------------------------------------------------------------------------------
Java solution with comments
    public boolean search(int[] A, int target) {
        int start = 0;
        int end = A.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (A[mid] == target) // case 0
                return true;
            // finally start == mid == end, if case 0, return true, else end the loop
            else if (A[start] == A[mid])
                start++;
            else if (A[end] == A[mid])
                end--;
            else if (A[start] <= target && target <= A[mid]) // case 1
                end = mid;
            else if (A[mid] < target && target <= A[end]) // case 2
                start = mid + 1;
            else if (A[start] > A[mid]) // case 2 is false, so target in this range
                end = mid;
            else   // case A[mid] > A[end] and case 1 is false, similar to above
                start = mid + 1;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
AC answer based on &quot;Search in Rotate Sorted Array&quot; so two problems &quot;consolidated&quot; as one
The only difference is the two "while" lines, so we don't have to remember/understand totally different solutions for these two series problems: "Search in Rotate Sorted Array" and "Search in Rotate Sorted Array II"


    public boolean search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // System.out.format("start=%d,mid=%d,end=%d\n",start,mid,end);
            if (nums[mid] == target) return true;
            
            // need to handle: 1,3,1,1,1
            while (nums[start] == nums[mid] && start != mid) {
                start ++;
            }
            while (nums[mid] == nums[end] && mid != end) {
                end --;
            }

            // the following is the same as problem I
            if (nums[start] <= nums[mid]) {
                if (nums[start] <= target && target < nums[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (nums[mid] < target && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        
        return false;
    }

----------------------------------------------------------------------------------------------------
Java 1ms binary search solution with comments
public class Solution {
    public boolean search(int[] nums, int target) {
        // note here end is initialized to len instead of (len-1)
        int start = 0, end = nums.length;
        while (start < end) {
            int mid = (start + end) / 2;
            if (nums[mid] == target) return true;
            if (nums[mid] > nums[start]) { // nums[start..mid] is sorted
                // check if target in left half
                if (target < nums[mid] && target >= nums[start]) end = mid;
                else start = mid + 1;
            } else if (nums[mid] < nums[start]) { // nums[mid..end] is sorted
                // check if target in right half
                if (target > nums[mid] && target < nums[start]) start = mid + 1;
                else end = mid;
            } else { // have no idea about the array, but we can exclude nums[start] because nums[start] == nums[mid]
                start++;
            }
        }
        return false;
    }
}


----------------------------------------------------------------------------------------------------
Take it as a sorted array with binary search in python
 This problem can be simply seen as a searching problem in a sorted array. The only difference is to first find the start and end point and extend the index. The extended virtual index will not cause extra space, because you do not need to store them at the end of the original array, but only map them to the original ones. As shown below:

    class Solution:
        # @param A a list of integers
        # @param target an integer
        # @return a boolean
        def search(self, A, target):
            if len(A) == 0:
                return False
            else:
                start = 0
                end = len(A) - 1
                # To find the start point(smallest integer)
                for i in range(len(A)-1):
                    if A[i] > A[i+1]:
                        start = i+1
                        end = i + len(A)    # Extend the index of the list
                while start<=end:
                    mid = start + (end - start)/2
                    cur = A[mid%len(A)] #To get the index in original list
                    if cur == target:
                        return True
                    elif cur > target:
                        end = mid - 1
                    else:
                        start = mid + 1
                
                return False

----------------------------------------------------------------------------------------------------
C++ binary search solution.
        
    bool search(vector<int>& nums, int target) {
        int l = 0, r = nums.size()-1;
        while (l<=r) {
            int mid = (r-l)/2+l;
            if (nums[mid] == target)
                return true;
            if (nums[mid] < nums[r]) {
                if (nums[mid]<target && target<=nums[r])
                    l = mid+1;
                else
                    r = mid-1;
            } else if (nums[mid] > nums[r]) {
                if (nums[l]<=target && target<nums[mid])
                    r = mid-1;
                else
                    l = mid+1;
            } else
                r--;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Binary search java solution
    public boolean search(int[] nums, int target) {
        int l = 0, h = nums.length-1;
        while(l <= h){
            int mid = l + (h-l)/2;
            if(nums[mid] == target)     return true;
            if(nums[mid] == nums[h])    h--;
            else if(nums[mid] < nums[h]){
                if(target > nums[mid] && target <= nums[h])
                    l = mid + 1;
                else
                    h = mid - 1;
            }else{
                if(target >= nums[l] && target < nums[mid])
                    h = mid - 1;
                else
                    l = mid + 1;
            }
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Simple Java Solution using binary search
public class Solution {
    public boolean search(int[] nums, int target) {
        int l=0,r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target) return true;
            if(nums[l]<nums[mid]){
                if(nums[l]<=target&&target<nums[mid]){
                    r=mid-1;
                }else{
                    l=mid+1;
                }
            }else if(nums[l]>nums[mid]){
                if(nums[mid]<target&&target<=nums[r]){
                    l=mid+1;
                }else{
                    r=mid-1;
                }
            }
            else{
                l++;
            }
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
C++ 10 ms solution
class Solution {
public:
    bool search(int A[], int n, int target) {
        return binSearch(A, 0, n-1, target);
    }
    
    bool binSearch(int a[], int l, int h, int target) {
        if (l > h) {
            return false;
        }
        
        int m = (l+h)/2;
        
        if (a[m] == target) {
            return true;
        }
        
        // the code does not change much except handling the condition like
        // [1,3,1,1,1] or [1,1,1,3,1] & searching for 3
        if (a[m] == a[l] && a[m] == a[h]) {
            if (!binSearch(a, l, m-1, target)) {
                return binSearch(a, m+1, h, target);
            }
            return true;
        }
        
        if (a[m] >= a[l]) {
            if(target >= a[l] && target < a[m]) {
                return binSearch(a, l, m-1,target);
            } else {
                return binSearch(a, m+1, h, target);
            } 
        } else {
            if (target > a[m] && target <= a[h]) {
                return binSearch(a, m+1, h,target);
            } else {
                return binSearch(a, l, m-1, target);
            }
        }
    }
};

----------------------------------------------------------------------------------------------------
My concise C++ solution with explanation (o(N) worst case, o(logN) on average)
The idea is the same as the previous one without duplicates

    1) everytime check if targe == nums[mid], if so, we find it.
    2) otherwise, we check if the first half is in order (i.e. nums[left]<=nums[mid]) 
      and if so, go to step 3), otherwise, the second half is in order,   go to step 4)
    3) check if target in the range of [left, mid-1] (i.e. nums[left]<=target < nums[mid]), if so, do search in the first half, i.e. right = mid-1; otherwise, search in the second half left = mid+1;
    4)  check if target in the range of [mid+1, right] (i.e. nums[mid]<target <= nums[right]), if so, do search in the second half, i.e. left = mid+1; otherwise search in the first half right = mid-1;

The only difference is that due to the existence of duplicates, we can have nums[left] == nums[mid] and in that case, the first half could be out of order (i.e. NOT in the ascending order, e.g. [3 1 2 3 3 3 3]) and we have to deal this case separately. In that case, it is guaranteed that nums[right] also equals to nums[mid], so what we can do is to check if nums[mid]== nums[left] == nums[right] before the original logic, and if so, we can move left and right both towards the middle by 1. and repeat.  

    class Solution {
    public:
        bool search(vector<int>& nums, int target) {
            int left = 0, right =  nums.size()-1, mid;
            
            while(left<=right)
            {
                mid = (left + right) >> 1;
                if(nums[mid] == target) return true;
    
                // the only difference from the first one, trickly case, just updat left and right
                if( (nums[left] == nums[mid]) && (nums[right] == nums[mid]) ) {++left; --right;}
                else if(nums[left] <= nums[mid])
                {// first half is in order
                    if( (nums[left]<=target) && (nums[mid] > target) ) right = mid-1; // if target is in the first half
                    else left = mid + 1; 
                }
                else
                { // second half is in order
                    if((nums[mid] < target) &&  (nums[right] >= target) ) left = mid+1; // if target is in the second half
                    else right = mid-1;
                }
            }
            return false;
        }
    };



----------------------------------------------------------------------------------------------------
O(lgN) with worst case of O(N)
    public bool Search(int[] nums, int target) {
        int sIndex = 0, left = 0, right = nums.Length - 1;
        //1. find the smallest element O(lgN) with worst O(N)
        while (left < right) {
            int mid = (left + right) / 2;
            if (nums[mid] > nums[right]) left = mid + 1;
            else if (nums[mid] < nums[right]) right = mid;
            else
                while (right > mid && nums[right] == nums[mid]) right--;
                if (right != mid) {
                    if (nums[right] > nums[mid]) left = ++right;
                    else left = right;
                }
        }
        sIndex = nums[right] > nums[0] ? 0 : right;
        //2. Identify the value range
        if (sIndex != 0 && target >= nums[0]) { left = 0; right = sIndex - 1; }
        else { left = sIndex; right = nums.Length - 1; }
        //3. Binary search it O(lgN)
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] == target) return true;
            else if (nums[mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
My 1ms java solution, very easy to understand
    public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return false;
        
        int left = 0, right = nums.length-1;
        while(left <= right){
            int mid = left + (right - left)/2;
            if(nums[mid] == target) return true;                //find target
            if(nums[mid] == nums[left]) left++;                  //find a duplicates num
            else if(nums[mid] > nums[left]){                    
                if(target >= nums[left] && target < nums[mid]) right = mid - 1;
                else left = mid + 1;
            }
            else{
                if(target > nums[mid] && target <= nums[right]) left = mid + 1;
                else right = mid - 1;
            }
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
I think how to understand the algorithm is as following
from here:

https://oj.leetcode.com/discuss/25633/i-think-how-to-understand-the-algorithm-is-as-following



class Solution
{
    public:
        bool search(int A[], int n, int target)
        {
            if(n == 0){
                return false;
            }

            int start = 0;
            int end   = n - 1;

            while(start < end){
                int middle = start + (end - start) / 2;

                // thing is this time to detect which iterval is "normal" is harder
                // we need more strict condition
                
                // the first one is normal
                if(A[middle] > A[end]){
                    if(A[start] <= target && target <= A[middle]){
                        end = middle;
                    }else{
                        start = middle + 1;
                    }
                    continue;
                }
                
                // the second one is normal
                if(A[middle] < A[end]){
                    if(A[middle] < target && target <= A[end]){
                        start = middle + 1;
                    }else{
                        end = middle;
                    }
                    continue;
                }
                // can not determine, use end--, since middle == end is impossible in the loop

                end--;

            }
            return (A[start] == target) ? true : false;
        }
};


----------------------------------------------------------------------------------------------------
