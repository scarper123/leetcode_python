2-4 lines, every language
Just divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1. Also try divisor 4 if that makes the code simpler / less repetitive.

**C++ / C**

    for (int i=2; i<6 && num; i++)
        while (num % i == 0)
            num /= i;
    return num == 1;

**Ruby**

    (2..5).each { |i| num /= i while num % i == 0 } if num > 0
    num == 1

Or:

    require 'prime'
    num > 0 && num.prime_division.all? { |p, _| p < 6 }

**Python**

    for p in 2, 3, 5:
        while num % p == 0 < num:
            num /= p
    return num == 1

**Java / C#**

    for (int i=2; i<6 && num>0; i++)
        while (num % i == 0)
            num /= i;
    return num == 1;

**Javascript**

    for (var p of [2, 3, 5])
        while (num && num % p == 0)
            num /= p;
    return num == 1;

---

**General**

Would be a bit cleaner if I did the zero-test outside, and discarding negative numbers right away can speed things up a little, but meh... I don't want to add another line and indentation level :-)

    if (num > 0)
        for (int i=2; i<6; i++)
            while (num % i == 0)
                num /= i;
    return num == 1;





----------------------------------------------------------------------------------------------------
My 2ms java solution
    public boolean isUgly(int num) {
        if(num==1) return true;
        if(num==0) return false;
    	while(num%2==0) num=num>>1;
    	while(num%3==0) num=num/3;
    	while(num%5==0) num=num/5;
        return num==1;
    }

----------------------------------------------------------------------------------------------------
Simple java solution with explanation
    public boolean isUgly(int num) {
        if (num <= 0) {return false;}
        if (num == 1) {return true;}
        if (num % 2 == 0) {
            return isUgly(num/2);
        }
        if (num % 3 == 0) {
            return isUgly(num/3);
        }
        if (num % 5 == 0) {
            return isUgly(num/5);
        }
        return false;
    }


----------
idea: 

 - (1) basic cases: <= 0 and == 1
 - (2) other cases: since the number can contain the factors of 2, 3, 5, I just remove those factors. So now, I have a number without any factors of 2, 3, 5. 
 - (3) after the removing, the number (new number) can contain a) the factor that is prime and meanwhile it is >= 7, or b) the factor that is not the prime and the factor is not comprised of 2, 3 or 5. In both cases, it is false (not ugly number). 

For example, new number can be 11, 23 --> not ugly number (case a)). new number also can be 49, 121 --> not ugly number (case b))

----------------------------------------------------------------------------------------------------
My python solution

    def isUgly(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num <= 0:
            return False
        for x in [2, 3, 5]:
            while num % x == 0:
                num = num / x
        return num == 1

----------------------------------------------------------------------------------------------------
Java solution, greatest divide by 2, 3, 5
clean solution to greatest divide the num using 2, 3, and 5.

    public class Solution {
        public static boolean isUgly(int num) {
            if (num <= 0) {
                return false;
            }
            
            int[] divisors = {2, 3, 5};
            
            for(int d : divisors) {
                while (num % d == 0) {
                    num /= d;
                }
            }
            return num == 1;
        }
    }

----------------------------------------------------------------------------------------------------
Simple C++ solution
    bool isUgly(int num) {
        if(num == 0) return false;
        
        while(num%2 == 0) num/=2;
        while(num%3 == 0) num/=3;
        while(num%5 == 0) num/=5;
        
        return num == 1;
    }

----------------------------------------------------------------------------------------------------
Share my simple Java solution
Continually divide the number by 2,3,5. If it's ugly, the result must be 1.

    public class Solution {
        public boolean isUgly(int num) {
            if(num <= 0) return false;
            while((num % 2) == 0) num /= 2;
            while((num % 3) == 0) num /= 3;
            while((num % 5) == 0) num /= 5;
            return num == 1;
        }
    }

Thanks to braydenCN's advice. Revised some code.

----------------------------------------------------------------------------------------------------
Java clean solution is this O(logn) time?
    public class Solution {
        public boolean isUgly(int num) {
            if (num == 0) {
                return false;
            }
            int[] divisors = {2, 3, 5};
            for (int divisor : divisors) {
                while(num % divisor == 0) {
                    num /= divisor;
                }
            }
            return num == 1;
        }
    }

if the num == 2^30, then we divide it by 2, 30 times which is log2(n). but what if it has all 2,3,5 factors.
Still log(n) ?

----------------------------------------------------------------------------------------------------
2ms Solution in JAVA
public class Solution {
    
    public boolean isUgly(int num) {
        if(num == 0) {
            return false;
        }
        while(num % 5 == 0) {
            num /= 5;
        }
        while(num % 3 == 0) {
            num /= 3;
        }
        while(num % 2 == 0) {
            num /= 2;
        }
        if(num == 1) {
            return true;
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
Python: 1-line solution
    class Solution(object):
        def isUgly(self, num):
            """
            :type num: int
            :rtype: bool
            """
            #n = (2**30)*(3**20)*(5**13) = 4570198050078720000000000000L
            return False if num < 1 or (4570198050078720000000000000L)%num != 0 else True


but my runtime is 60 ms.How should i improve it?

----------------------------------------------------------------------------------------------------
Simplest java solution
    public boolean isUgly(int num) {
        if (num == 0) return false;
        while (num % 2 == 0) num /= 2;
        while (num % 3 == 0) num /= 3;
        while (num % 5 == 0) num /= 5;
        return num == 1;
    }

----------------------------------------------------------------------------------------------------
5 line Java Solution, 2ms
    public boolean isUgly(int num) {
        if(num <= 0) return false;
        while(num % 2 == 0) num /= 2;
        while(num % 3 == 0) num /= 3;
        while(num % 5 == 0) num /= 5;
        return num == 1;
    }

----------------------------------------------------------------------------------------------------
4ms short C++ solution
    class Solution {
    public:
        bool isUgly(int num) {
            if (num == 1) return true;
            if (num <= 0) return false;
            while (num % 2 == 0) num /= 2;
            while (num % 3 == 0) num /= 3;
            while (num % 5 == 0) num /= 5;
            return num == 1;
        }
    };

----------------------------------------------------------------------------------------------------
Java , Python , C++ solutions for you guyz !!!
JAVA 

    public class Solution {
        public boolean isUgly(int num) {
              if (num==0)
            return false;
            else {
                while(num!=1)
                {
                    if(num%2==0)
                    num/=2;
                    else if(num%3==0)
                    num/=3;
                    else if(num%5==0)
                    num/=5;
                    else break;
                }
                
                if(num==1)
                return true;
                else return false;
            }
        }
    }

C++ 

    class Solution {
    public:
        bool isUgly(int num) {
            if (num==0)
            return false;
            else {
                while(num!=1)
                {
                    if(num%2==0)
                    num/=2;
                    else if(num%3==0)
                    num/=3;
                    else if(num%5==0)
                    num/=5;
                    else break;
                }
                
                if(num==1)
                return true;
                else return false;
            }
        }
    };

Python

    class Solution(object):
        def isUgly(self, num):
             if num==0:
                 return False
             else :
                 while(num!=1 and (num%2==0 or num%3==0 or num%5==0)):
                     if num%2==0:
                         num/=2
                     elif num%3==0:
                         num/=3
                     else:
                         num/=5
             if num==1:
                 return True
             else:
                 return False
        

----------------------------------------------------------------------------------------------------
Simple Java solution for Ugly Number problem
    public class Solution {
        public boolean isUgly(int num) {
            if (num == 0)
                return false;
                
            if (num == 1)
                return true;
            
            while (num % 5 == 0)
                num /= 5;
            
            while (num % 3 == 0)
                num /= 3;
                
            while (num % 2 == 0)
                num /= 2;
            
            return num == 1;
        }
    }

----------------------------------------------------------------------------------------------------
4ms Solution in C++
    class Solution {
    public:
        bool isUgly(int num) {
            if(num < 1)
                return false;
            
            for(int i = 2; i <= 5; i++)
            {
                while(num%i == 0)
                    num /= i;
            }
            
            if(num != 1)
                return false;
            return true;
        }
    };

----------------------------------------------------------------------------------------------------
Java Solution( with explanation in code)
    public class Solution {
        public boolean isUgly(int num) {
            if(num<=0){
                return false;
            }
            while((num&1)==0){
                //number is divisible by 2
                num = num/2;
            }
            while(num%5==0){
                //number is divisible by 5
                num = num/5;
            }
            while(num%3==0){
                //number is divisible by 5
                num = num/3;
            }
            return num==1;
        }
    }

----------------------------------------------------------------------------------------------------
Easy to understand Python solution. Beat 90% python submissions.
    class Solution(object):
    def isUgly(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num == 0:
            return False
            
        while num%2 == 0:
            num = num/2
        while num%3 == 0:
            num = num/3
        while num%5 == 0:
            num = num/5
        
        if num == 1:
            return True
        else:
            return False

----------------------------------------------------------------------------------------------------
Recursive solution is faster than iterative solution
Recursive solution in c++ is faster
 

bool isUgly(int num) {

        if(num<1)return false;
        if(num==1) return true;
        if(num%2==0) return isUgly(num/2);
        else if(num%3==0) return isUgly(num/3);
        else if(num%5==0) return isUgly(num/5);
        else return false;
}

----------------------------------------------------------------------------------------------------
5 lines C++ solution
Since we're given a fixed amount of allowed prime factors, we can simply factor them out and check if the remainder is equal to 1 - if it's greater than 1, than there were other prime factors and the number is not ugly

    bool isUgly(int num) {
        if(num <= 0) return false;
        while(num % 3 == 0) num /= 3;
        while(num % 2 == 0) num /= 2;
        while(num % 5 == 0) num /= 5;
        return num == 1;        
    }

----------------------------------------------------------------------------------------------------
