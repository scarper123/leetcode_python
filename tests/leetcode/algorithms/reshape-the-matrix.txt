Verbose Java Solution, Bucket
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        boolean[] mark = new boolean[24 * 60];
        for (String time : timePoints) {
            String[] t = time.split(":");
            int h = Integer.parseInt(t[0]);
            int m = Integer.parseInt(t[1]);
            if (mark[h * 60 + m]) return 0;
            mark[h * 60 + m] = true;
        }
        
        int prev = 0, min = Integer.MAX_VALUE;
        int first = Integer.MAX_VALUE, last = Integer.MIN_VALUE;
        for (int i = 0; i < 24 * 60; i++) {
            if (mark[i]) {
                if (first != Integer.MAX_VALUE) {
                    min = Math.min(min, i - prev);
                }
                first = Math.min(first, i);
                last = Math.max(last, i);
                prev = i;
            }
        }
        
        min = Math.min(min, (24 * 60 - last + first));
        
        return min;
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Clean Code
class Solution {
public:
    int findMinDifference(vector<string>& times) {
        int n = times.size();
        sort(times.begin(), times.end());
        int mindiff = INT_MAX;
        for (int i = 0; i < times.size(); i++) {
            int diff = abs(timeDiff(times[(i - 1 + n) % n], times[i]));
            diff = min(diff, 1440 - diff);
            mindiff = min(mindiff, diff);
        }
        return mindiff;
    }

private:
    int timeDiff(string t1, string t2) {
        int h1 = stoi(t1.substr(0, 2));
        int m1 = stoi(t1.substr(3, 2));
        int h2 = stoi(t2.substr(0, 2));
        int m2 = stoi(t2.substr(3, 2));
        return (h2 - h1) * 60 + (m2 - m1);
    }
};


----------------------------------------------------------------------------------------------------
Java sorting with a sentinel node
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        int n = timePoints.size();
        List<Time> times = new ArrayList<>();
        for (String tp : timePoints) {
            String[] strs = tp.split(":");
            times.add(new Time(Integer.parseInt(strs[0]), Integer.parseInt(strs[1])));
        }
        Collections.sort(times);
        Time earlist = times.get(0);
        times.add(new Time(earlist.h + 24, earlist.m));
        int minDiff = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int diff = (int) Math.abs(times.get(i).getDiff(times.get(i + 1)));
            minDiff = Math.min(minDiff, diff);
        }
        return minDiff;
    }
    
}

class Time implements Comparable<Time> {
    int h;
    int m;
    public Time(int h, int m) {
        this.h = h;
        this.m = m;
    }
    
    public int compareTo(Time other) {
        if (this.h == other.h) {
            return this.m - other.m;
        }
        return this.h - other.h;
    }
    
    public int getDiff(Time other) {
        return (this.h - other.h) * 60 + (this.m - other.m);            
    }
}


----------------------------------------------------------------------------------------------------
Java 10 liner solution. Simplest so far
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        int mm = Integer.MAX_VALUE;
        List<Integer> time = new ArrayList<>();
        
        for(int i = 0; i < timePoints.size(); i++){
            Integer h = Integer.valueOf(timePoints.get(i).substring(0, 2));
            time.add(60 * h + Integer.valueOf(timePoints.get(i).substring(3, 5)));
        }
        
        Collections.sort(time, (Integer a, Integer b) -> a - b);
        
        for(int i = 1; i < time.size(); i++){
            System.out.println(time.get(i));
            mm = Math.min(mm, time.get(i) - time.get(i-1));
        }
        
        int corner = time.get(0) + (1440 - time.get(time.size()-1));
        return Math.min(mm, corner);
    }
}

----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def findMinDifference(self, A):
    def convert(time):
        return int(time[:2]) * 60 + int(time[3:])
    minutes = map(convert, A)
    minutes.sort()
    
    return min( (y - x) % (24 * 60) 
                for x, y in zip(minutes, minutes[1:] + minutes[:1]) )


----------------------------------------------------------------------------------------------------
Java O(nlog(n))&#x2F;O(n) Time O(1) Space Solutions
public int findMinDifference(List<String> timePoints) {

    boolean[] timeSeen = new boolean[1440];
    for (String s : timePoints) {
        int mins = Integer.parseInt(s.split(":")[0])*60 + Integer.parseInt(s.split(":")[1]);
        if (timeSeen[mins]) return 0;
        timeSeen[mins] = true;
    }
    
    Integer firstTimeSeen = null, prevTimeSeen = null, minDiff = Integer.MAX_VALUE;
    for (int i=0;i<1440;i++) {
        if (!timeSeen[i]) continue;
        if (firstTimeSeen == null) {firstTimeSeen = i; prevTimeSeen = i;}
        else {
          minDiff = Math.min(minDiff, Math.min(i - prevTimeSeen, 1440 - i + prevTimeSeen));
          prevTimeSeen = i;
        }
    }
    
    minDiff = Math.min(minDiff, Math.min(prevTimeSeen - firstTimeSeen, 1440 - prevTimeSeen + firstTimeSeen));
    return minDiff;
}


----------------------------------------------------------------------------------------------------
PriorityQueue Solution
public int findMinDifference(List<String> timePoints) {
	PriorityQueue<Integer> pq = new PriorityQueue<>();
	for (String s : timePoints) {
		int h = Integer.valueOf(s.substring(0,2));
		int m = Integer.valueOf(s.substring(3));
		pq.offer(h*60+m);
	}
	if (pq.size() < 2) return 0;
	int res = Integer.MAX_VALUE, first = pq.poll();
	int cur = first;
	while (!pq.isEmpty()) {
		int next = pq.poll();
		res = Math.min(res, next-cur);
		cur = next;
	}
	return Math.min(res, 24*60-cur+first);
}


----------------------------------------------------------------------------------------------------
python sort &amp; bucket solution
class Solution(object):
    def findMinDifference(self, timePoints):
        """
        :type timePoints: List[str]
        :rtype: int
        """
        if len(timePoints) > 1440:
            return 0
        buckets = [0] * 1440
        for tp in timePoints:
            seconds = int(tp[:2]) * 60 + int(tp[3:])
            buckets[seconds] += 1
            if buckets[seconds] > 1:
                return 0
        s = [i for i, cnt in enumerate(buckets) if cnt]
        return min(s2 - s1 for s1, s2 in zip(s, s[1:] + [1440 + s[0]]))


----------------------------------------------------------------------------------------------------
easy to understand java solution
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        int n = timePoints.size();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            String[] s = timePoints.get(i).split(":");
            nums[i] = Integer.parseInt(s[0])*60  + Integer.parseInt(s[1]);
        }
        Arrays.sort(nums);        
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int cur = nums[i];
            int pre = nums[(n - 1 + i) % n];
            int diff = Math.abs(cur - pre);
            diff = Math.min(diff, 1440 - diff);
            min = Math.min(diff, min);
        } 
        return min;
    }
}


----------------------------------------------------------------------------------------------------
7-liner &quot;O(1)&quot; solution: only 60*24 possible different time points!
    int findMinDifference(vector<string>& times) {
      if (times.size() > 60*24) return 0; // must have duplicates!
      sort(times.begin(), times.end()); // sort times in ascending order
      
      int minDiff = INT_MAX, pre = timeToInt(times.back()) - 60*24; // previous time in minutes
      for (auto& t:times)
        minDiff = min(minDiff, timeToInt(t)-pre), pre = timeToInt(t);
      return minDiff;
    }
    
    // convert time point string to int of minutes
    int timeToInt(const string& t) {
      return 60*stoi(t.substr(0,2)) + stoi(t.substr(3,2));    
    }


----------------------------------------------------------------------------------------------------
My accepted 1.5 circle solu
 public static int findMinDifference(List<String> timePoints) {
        List<Integer> minList = new ArrayList<>();
        for (int i = 0; i < timePoints.size(); i++){
                String[] timeArr = timePoints.get(i).split(":");
                int h = Integer.parseInt(timeArr[0]);
                int m = Integer.parseInt(timeArr[1]);
                int total = h * 60 + m;
                minList.add(total);
                if (total < 720){
                    minList.add(total + 1440);
                }
        }
        
        Collections.sort(minList);
        int min = Integer.MAX_VALUE;
        for(int i = 1; i < minList.size(); i++){
            min = Math.min(min,minList.get(i) - minList.get(i - 1));
        }
        return min;
    }


----------------------------------------------------------------------------------------------------
Easy to understand Java solution, no magic math involved
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        Collections.sort(timePoints);
        
        int min = Integer.MAX_VALUE;
        for (int i = 1; i < timePoints.size(); i++) {
            min = Math.min(min, difference(timePoints.get(i-1), timePoints.get(i)));
        }
        
        int startHour = Integer.parseInt(timePoints.get(0).substring(0,2));
        startHour += 24;
        return Math.min(min, difference(timePoints.get(timePoints.size()-1), startHour + timePoints.get(0).substring(2,5)));
    }
    
    private int difference(String start, String end) {
        return (Integer.parseInt(end.substring(0,2)) - Integer.parseInt(start.substring(0,2))) * 60 + Integer.parseInt(end.substring(3,5)) - Integer.parseInt(start.substring(3,5));
    }
}


----------------------------------------------------------------------------------------------------
No Wrapper class, No extra space. Easy to understand Java version.
    if(timePoints == null || timePoints.size() == 0){
        return 0;
    }

    Collections.sort(timePoints);

    String[] pre = timePoints.get(0).split(":");
    int res = Integer.MAX_VALUE;

    for(int i = 1; i <= timePoints.size(); i++){
        String[] cur = i == timePoints.size() ? timePoints.get(0).split(":") : timePoints.get(i).split(":");

        int hDiff = Integer.parseInt(cur[0]) - Integer.parseInt(pre[0]);
        int mDiff = Integer.parseInt(cur[1]) - Integer.parseInt(pre[1]);
        int localMin = Math.min(Math.abs(hDiff * 60 + mDiff), 1440 - Math.abs(hDiff * 60 + mDiff));
        res = Math.min(res, localMin);
        pre = cur;
    }

    return res;
    
}

----------------------------------------------------------------------------------------------------
share my easy understandable java solution!
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        if(timePoints==null || timePoints.size()<=1) return 0;
        
        Collections.sort(timePoints,new Comparator<String>(){
              public int compare(String a,String b){
                  return a.compareTo(b);
              }
        });
        
        int min=Integer.MAX_VALUE;
        for(int i=1;i<timePoints.size();i++){
            String[] str1=timePoints.get(i-1).split(":");
            String[] str2=timePoints.get(i).split(":");
            
            int h1=Integer.parseInt(str1[0]);
            int m1=Integer.parseInt(str1[1]);
            
            int h2=Integer.parseInt(str2[0]);
            int m2=Integer.parseInt(str2[1]);
            
            int dif1=h2*60-h1*60+m2-m1;
            min=Math.min(min,dif1);
        }
        
        String[] str1=timePoints.get(timePoints.size()-1).split(":");
        String[] str2=timePoints.get(0).split(":");
            
        int h1=Integer.parseInt(str1[0]);
        int m1=Integer.parseInt(str1[1]);
            
        int h2=Integer.parseInt(str2[0]);
        int m2=Integer.parseInt(str2[1]);
        
        int dif2=24*60-(h1*60+m1)+h2*60+m2;
        min=Math.min(dif2,min);
        
        return min;
        
    }
}


----------------------------------------------------------------------------------------------------
c++ Clean Easy Beat 80%
    vector<int>time;
    for(int i =0;i<tp.size();i++){
        time.push_back(getInt(tp[i]));
    }
    sort(time.begin(),time.end());
    int minDiff = INT_MAX;
    for(int i=0;i<time.size()-1;i++){
        minDiff = min(minDiff,time[i+1]-time[i]);
    }
    minDiff = min(minDiff,(60*24)-(time.back()-time[0]));
    return minDiff;
    
}


----------------------------------------------------------------------------------------------------
Easy to understand Java O(n) solution
public class Solution {
    public int findMinDifference(List<String> timePoints) {
        int N = timePoints.size();
        int[] minuteArr = new int[N];
        int i=0;
        for(String timePoint : timePoints) {
            minuteArr[i++] = toMinutes(timePoint);
        }
        Arrays.sort(minuteArr);
        
        int min = 24*60 - minuteArr[N-1] + minuteArr[0];
        
        for(i=1; i<N; i++) {
            min = Math.min(min, minuteArr[i]-minuteArr[i-1]);
        }
        
        return min;
    }
    
    private int toMinutes (String time) {
        String[] arr = time.split(":");
        return (Integer.parseInt(arr[0]) * 60) + Integer.parseInt(arr[1]);
    }
}


----------------------------------------------------------------------------------------------------
easy understanding Python solution
class Solution(object):
	def findMinDifference(self, timePoints):
		minsList = map(self.mins,timePoints)
		minsList.sort()
		diffList= [ min(abs(minsList[i]-minsList[i+1]) , 24*60-abs(minsList[i]-minsList[i+1]) ) if i!=len(minsList)-1 else  min(abs(minsList[i]-minsList[0]) , 24*60-abs(minsList[i]-minsList[0]) )   for i in range(len(minsList)) ]
		print diffList
		return min(diffList)

	def mins(self,strs):
		h,m=strs.split(":")
		return int(h)*60+int(m)


----------------------------------------------------------------------------------------------------
C++ solution, 12ms
#define CHAR2INT(ch) (ch - '0')

class Solution {
public:
    int findMinDifference(vector<string>& time_points) {
        int clock[2880] = {};    // 2 * 24 * 60
        int curr = 0, tend = 1440;
        for(string time_point : time_points) {
            curr = (CHAR2INT(time_point[0]) * 10 + CHAR2INT(time_point[1])) * 60 + 
                    CHAR2INT(time_point[3]) * 10 + CHAR2INT(time_point[4]);  //Real time.
            tend = curr + 1440;   //time + 24 * 60, time for loop.
            ++clock[curr];
            ++clock[tend]; 
        }
        int last = curr, min_ret = INT_MAX;
        for(++curr; curr <= tend; ++curr) {
            if(clock[curr] > 1) {
                return 0;
            } else if(clock[curr]) {
                min_ret = min(min_ret, curr - last);
                last = curr;
            }
        }
        return min_ret;
    }
};


----------------------------------------------------------------------------------------------------
C++ easy solution, sort
class Solution {
public:
   
    int findMinDifference(vector<string>& timePoints) {
        vector<HourMin> time;
        for(int i = 0;i<timePoints.size();i++)
        {
            string timePoint = timePoints[i];
            int pos = timePoint.find(':');
            string hour = timePoint.substr(0,pos);
            string min = timePoint.substr(pos+1);
            HourMin  item(stoll(hour),stoll(min));
            time.push_back(item);
        }
        sort(time.begin(),time.end(),[](HourMin a, HourMin b){ return a.hour!=b.hour?a.hour<b.hour:a.min<b.min;});
        HourMin first = time[0];
        first.hour+=24;
        time.push_back(first);
        
        int minMinutes = INT_MAX;
        HourMin pre = time[0];
        for(int i = 1;i<time.size();i++)
        {
            HourMin curr = time[i];
            minMinutes = min(minMinutes,calculate(curr,pre));
            pre = curr;
        }    
        return minMinutes;     
    }
private:
     struct HourMin
    {
        int hour;
        int min;
        HourMin(int _hour,int _min){hour = _hour;min=_min;}
    };
    int calculate(HourMin curr,HourMin pre)
    {
        return curr.hour*60+curr.min - (pre.hour*60+pre.min);
    };
};


----------------------------------------------------------------------------------------------------
