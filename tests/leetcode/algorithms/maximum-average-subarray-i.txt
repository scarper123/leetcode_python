Java Two Pointers Solution
public class Solution {
    public boolean judgeSquareSum(int c) {
        if (c < 0) {
            return false;
        }
        int left = 0, right = (int)Math.sqrt(c);
        while (left <= right) {
            int cur = left * left + right * right;
            if (cur < c) {
                left++;
            } else if (cur > c) {
                right--;
            } else {
                return true;
            }
        }
        return false;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
b*b = c - a*a

----------------------------------------------------------------------------------------------------
Java 3-Liner
public static boolean judgeSquareSum(int c) {
  for (int i=0;i<=Math.sqrt(c);i++) 
    if (Math.floor(Math.sqrt(c-i*i)) == Math.sqrt(c-i*i)) return true;
  return false;
}  


----------------------------------------------------------------------------------------------------
HashSet, Java, quick solution, one for loop
public class Solution {
    public boolean judgeSquareSum(int c) {
        HashSet<Integer> set = new HashSet<Integer>();
        
        for (int i = 0; i <= Math.sqrt(c); i++) {
            set.add(i * i);
            if (set.contains(c - i * i)) {
                return true;
            }
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
Fermat
require 'prime'

def judge_square_sum(c)
  c == 0 || c.prime_division.all? { |p, e| p % 4 != 3 || e.even? }
end


----------------------------------------------------------------------------------------------------
Swift solution - Binary Search, Set, Two Pointers
class Solution {
    func judgeSquareSum_BinarySearch(_ c: Int) -> Bool {
        let sqrtC = Int(sqrt(Double(c)))
        
        for i in 0...sqrtC {
            var left = i
            var right = sqrtC
            let middle = (i + sqrtC) / 2
            while left <= right {
                if i * i + middle * middle == c {
                    return true
                } else if i * i + middle * middle < c {
                    left = middle + 1
                } else {
                    right = middle - 1
                }
            }
        }
        
        return false
    }
    
    func judgeSquareSum_TwoPointer(_ c: Int) -> Bool {
        var left = 0
        var right = Int(sqrt(Double(c)))
        
        while left <= right {
            let sum = left * left + right * right
            if sum == c {
                return true
            } else if sum < c {
                left += 1
            } else {
                right -= 1
            }
        }
        
        return false
    }
    
    func judgeSquareSum_Set(_ c: Int) -> Bool {
        var set = Set<Int>()
        
        for i in 0...Int(sqrt(Double(c))) {
            let i2 = i * i
            set.insert(i2)
            if set.contains(c - i2) {
                return true
            }
        }
        
        return false
    }
}


----------------------------------------------------------------------------------------------------
16ms - Java
public boolean judgeSquareSum(int c) {
        int i=0;
        int j = (int) Math.sqrt(c);
        while(i<=j){
            if((i*i + j*j) < c) i++;
            else if((i*i + j*j) > c) j--;
            else return true;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Simple C++ Solution
bool judgeSquareSum(int c) {
        int a = 0;
        int b = sqrt(c);
        
        while(a <= b){
            
            if(a*a + b*b == c)return true;
            else if(a*a + b*b > c)b--;
            else a++;
        }
        return false;
    }


----------------------------------------------------------------------------------------------------
Java Solution
public static Boolean check (int c){
        HashSet<Integer> hs = new HashSet<>();

        for (int i=0; i<=Math.sqrt(c); i++) {
            hs.add(i * i);
        }

        for (int i=0; i<=Math.sqrt(c); i++){
            if (hs.contains(c - (i*i)))
                return true;
        }
        return false;
    }


----------------------------------------------------------------------------------------------------
C++ very simple O(1) space solution
bool judgeSquareSum(int c) {
        for(int i=0;i<=sqrt(c);i++) {
            int t=sqrt(c-i*i);
            if(t*t==c-i*i) return true;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Python - 2sum modified
class Solution(object):
    def judgeSquareSum(self, c):
        """
        :type c: int
        :rtype: bool
        """
        maxs = 1
        while (maxs * maxs) < c :
            maxs +=1 
        
        
        lo = 0
        hi = maxs
        while lo <= hi:
            if ((lo * lo) + (hi * hi)) == c :
                return True
            if ((lo * lo) + (hi * hi)) < c :
                lo += 1
            if ((lo * lo) + (hi * hi)) > c :
                hi -= 1
        
        # Bruthe force until maxs O(n^2)
        # for i in range(1,maxs):
        #    for j in range(1,maxs):
        #        if c == (i*i + j*j):
        #            return True
        
        return False

----------------------------------------------------------------------------------------------------
1 line Python
class Solution(object):
    def judgeSquareSum(self, c):
        """
        :type c: int
        :rtype: bool
        """
        return any(c - a*a == int((c - a*a) ** 0.5) ** 2 for a in range(int(c ** 0.5) + 1))


----------------------------------------------------------------------------------------------------
C++ solution. Similar to other solutions.
class Solution{
public:
    bool judgeSquareSum(int c){
        for(int i = 0; i <= sqrt(c); i++){
            int sum_left = (c - i*i);
            if(sqrt(sum_left) == floor(sqrt(sum_left))){
                for(int j = i; j <= sqrt(sum_left); j++){
                    if(i*i + j*j > c)
                    	break;
                    if(i*i + j*j == c)
                        return true;
                }
            }
        }
        return false;
    }
};


----------------------------------------------------------------------------------------------------
Simple Java solution but time limit exceeded
public boolean judgeSquareSum(int c) {
        for(int i=0; i<=c; i++)
            for(int j=0; j<=c; j++)
                if(i*i+j*j == c) return true;
    return false;


----------------------------------------------------------------------------------------------------
share my java solution! similar to target sum!
public class Solution {
    public boolean judgeSquareSum(int c) {
        if(c==0) return true;
        int i=0;
        int j=(int)Math.sqrt(c);
        
        while(i<=j){
            int num=i*i+j*j;
            if(num==c){
                return true;
            }else if(num<c){
                i++;
            }else{
                j--;
            }
        }
        return false;
    }
}



----------------------------------------------------------------------------------------------------
O(nlogn) time and O(1) space binary search solution.
class Solution {
public:
    bool judgeSquareSum(int c) {
        int r = sqrt(c);
        if (r * r == c)
        {
            return true;
        }
        
        for (int i = r; i >= 0; --i)
        {
            if (isSquarable(c - i * i))
            {
                return true;
            }
        }
        
        return false;
    }
    
private:
    bool isSquarable(int c)
    {
        int r = sqrt(c);
        if (r * r == c)
        {
            return true;
        }
        
        int b = 0;
        int e = r;
        
        while (b <= e)
        {
            int m = b + (e - b) / 2;
            
            if (m * m == c)
            {
                return true;
            }
            
            if (m * m < c)
            {
                b = m + 1;
            }
            else
            {
                e = m - 1;
            }
        }
        
        return false;
    }
};


----------------------------------------------------------------------------------------------------
Use two pointer like in &quot;Two Sum&quot;
public class Solution {
    public boolean judgeSquareSum(int c) {
        int root = (int) Math.sqrt(c);
        int left = 0, right = root;
        while (left <= right) {
            if (left * left + right * right < c) {
                left++;
            }
            else if (left * left + right * right > c) {
                right--;
            }
            else {
                return true;
            }
        }
        return false;
        
    }
}


----------------------------------------------------------------------------------------------------
Straightforward Java Solution
public boolean judgeSquareSum(int c) {
        if(c==0) return true;
        double t = Math.sqrt((double)c);
        for(int i = 0;i<=t+1;i++){
            long cc = (long)c;
            long rest = cc - i*i;
            double d = Math.sqrt((double)rest);
            if(d%1==0){ // double num % 1 would keep the decimal part, for example 3.5d%1=0.5
                return true;
            }
        }
        return false;
    }


----------------------------------------------------------------------------------------------------
4 line Python. Beats 100%
    def judgeSquareSum(self, c):
        for i in range(int(math.sqrt(c)) + 1):
            if math.sqrt(c - i*i).is_integer():
                return True
        return False


----------------------------------------------------------------------------------------------------
TLE Thought: multiplication is slower than Math.sqrt(double)  in Java??
public boolean judgeSquareSum(int c) {
    
    for (int a = 0; a <= (int) Math.sqrt(c); a++) {  //only diff here
        int b2 = c - a * a;
        int b = (int) Math.sqrt(b2);
        
        if(b * b == b2) {
            return true;
        }
    }
    
    return false;
}


----------------------------------------------------------------------------------------------------
