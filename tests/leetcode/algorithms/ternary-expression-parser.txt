Java solution using bit manipulation
public char findTheDifference(String s, String t) {
	int n = t.length();
	char c = t.charAt(n - 1);
	for (int i = 0; i < n - 1; ++i) {
		c ^= s.charAt(i);
		c ^= t.charAt(i);
	}
	return c;
}

----------------------------------------------------------------------------------------------------
Simple JAVA 8ms solution, 4 lines
public class Solution {
    public char findTheDifference(String s, String t) {
        // Initialize variables to store sum of ASCII codes for 
        // each string
        int charCodeS = 0, charCodeT = 0;
        // Iterate through both strings and char codes
        for (int i = 0; i < s.length(); ++i) charCodeS += (int)s.charAt(i);
        for (int i = 0; i < t.length(); ++i) charCodeT += (int)t.charAt(i);
        // Return the difference between 2 strings as char
        return (char)(charCodeT - charCodeS);
    }
}

UPDATE:
Thanks to @zzhai for providing this optimization! :) 
"1 optimization: As t.length() is just 1 character longer than s.length(), we can use 1 pass to process both strings (20% better runtime performance)."
public char findTheDifference(String s, String t) {
        int charCode = t.charAt(s.length());
        // Iterate through both strings and char codes
        for (int i = 0; i < s.length(); ++i) {
              charCode -= (int)s.charAt(i);
              charCode += (int)t.charAt(i); 
        }
        return (char)charCode;
    }


----------------------------------------------------------------------------------------------------
Concise C++ solution using XOR
class Solution {
public:
    char findTheDifference(string s, string t) {
        char r=0;
        for(char c:s) r ^=c;
        for(char c:t) r ^=c;
        return r;
    }
};


----------------------------------------------------------------------------------------------------
1-liners and 2-liner in Python
class Solution(object):
    def findTheDifference(self, s, t):
        s, t = sorted(s), sorted(t)
        return t[-1] if s == t[:-1] else [x[1] for x in zip(s, t) if x[0] != x[1]][0]


----------------------------------------------------------------------------------------------------
Java Solution using array: 6ms
        for (int i = 0; i < 26; i++) alpha[i] = 0;
        for (char c : s.toCharArray())
            alpha[ c - 'a' ]++;

        for (char c : t.toCharArray()) {
           //could do decrement first, then check but yeah
            if (--alpha[c - 'a'] < 0)
                return c;
        }

        return 0;

----------------------------------------------------------------------------------------------------
3 Different Python Solutions (Dictionary, Difference, XOR)
class Solution(object):
    """
    xor
    """
    def findTheDifference(self, s, t):
        code = 0
        for ch in s + t:
            code ^= ord(ch)
        return chr(code)


----------------------------------------------------------------------------------------------------
Output:&quot;e&quot; Expected:&#x27;e&#x27;
<p>What is wrong with leetcode judging system?<br/>
No matter what language I try, it always says:<br/>
--&gt; Output:&#34;e&#34; Expected:&#39;e&#39;<br/>
Aren&#39;t them the same :| ?</p>


----------------------------------------------------------------------------------------------------
Java 5 ms Beats 98.12%
    public char findTheDifference(String s, String t) {
        char[] array1 = s.toCharArray();
        char[] array2 = t.toCharArray();
        
        int asciis = 0;
        int asciit = 0;
        
        for(int i = 0; i < array1.length; i++){
            asciis += (int)array1[i];
        }
        
        for(int i = 0; i < array2.length; i++){
            asciit += (int)array2[i];
        }
        
        return (char)(asciit-asciis);
    }
}```

----------------------------------------------------------------------------------------------------
Javascript solution using sum of characters
var findTheDifference = function(s, t) {
    if (s.length === 0) return t;
    var letters = 'abcdefghijklmnopqrstuvwxyz';
    var sSum = s.split('').map(e => e.charCodeAt(0) - 'a'.charCodeAt(0)).reduce((a, b) => a + b);
    var tSum = t.split('').map(e => e.charCodeAt(0) - 'a'.charCodeAt(0)).reduce((a, b) => a + b);
    return letters[tSum -sSum];
};


----------------------------------------------------------------------------------------------------
Python solution which beats 96%
def findTheDifference(self, s, t):
    """
    :type s: str
    :type t: str
    :rtype: str
    """
    ans = 0
    for c in s + t:
        ans ^= ord(c)
    return chr(ans)


----------------------------------------------------------------------------------------------------
Two Java Solutions using XOR &#x2F; Sum
public char findTheDifference(String a, String b) {
    char result = b.charAt(b.length() - 1);
    for (int i = 0; i < a.length(); i++) {
        result += b.charAt(i);
        result -= a.charAt(i);
    }
    return result;
}


----------------------------------------------------------------------------------------------------
Java&#x2F;C++ 1-liner
char findTheDifference(string s, string t) {
    return accumulate(begin(t), end(t), accumulate(begin(s), end(s), 0, bit_xor<int>()), bit_xor<int>());
}

char findTheDifference(string s, string t) {
    return accumulate(begin(t), end(t), 0) - accumulate(begin(s), end(s), 0);
}

char findTheDifference(string s, string t) {
    char x = 0;
    for (char c : s + t)
        x ^= c;
    return x;
}

----------------------------------------------------------------------------------------------------
Concise, very simple C solution
char findTheDifference(char* s, char* t) {
    int sum1=0,sum2=0;
    for(;*s;s++)
        sum1+=*s;
    for(;*t;t++)
        sum2+=*t;
    return sum2-sum1;



----------------------------------------------------------------------------------------------------
Simple JAVA Solution Using XOR

    public char findTheDifference(String s, String t) {
        char c = t.charAt(t.length()-1);
        
        for (int i = 0; i < s.length(); i++) {
            c ^= s.charAt(i) ^ t.charAt(i);
        }
        
        return c;
    }


----------------------------------------------------------------------------------------------------
Simple Java solution using ASCII sum in O(n)
public class Solution {
    public char findTheDifference(String s, String t) {
        char sum_s = 'a';
	char sum_t = 'a';
	int i = 0;
	for (; i < s.length(); i++) {
            sum_s += s.charAt(i);
            sum_t += t.charAt(i);
	}
	sum_t += t.charAt(i);
	return (char) (sum_t - sum_s);
    }
}


----------------------------------------------------------------------------------------------------
Java Solution
	// In the loop below, add the previous value of sum,
	// add the ASCII value of each character of string t
	// and subtract ASCII value of each character of string s.
	for(int i=0;i<s.length();i++){
        sum1=(int) (sum1+t.charAt(i)-s.charAt(i));
    }
    // Add the ASCII value of last character of the string t     
    sum1=(int) sum1+t.charAt(t.length()-1);
    
    return (char) sum1;
}


----------------------------------------------------------------------------------------------------
Java solution with 6ms
public class Solution {
    public char findTheDifference(String s, String t) {
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        char t1 = 0;
        for(char c1:sArray)
            t1^=c1;
        for(char c2:tArray)
            t1^=c2;
        return(char)t1;
    }
}


----------------------------------------------------------------------------------------------------
Use char as int for summation, O(N) time and O(1) space
public char findTheDifference(String s, String t) {
    
    if (s == null || t == null || s.length() + 1 != t.length())
        return (char)0;
    
    int sum = 0;
    int i = 0;
    for (i = 0; i <s.length(); i++)  {
        sum += t.charAt(i);
        sum -= s.charAt(i);
    }
    
    sum += t.charAt(i);
    
    return (char)sum;
    
}

----------------------------------------------------------------------------------------------------
Java Solution
public class Solution {
    public char findTheDifference(String s, String t) {
        int sum1=0;
        int sum2=0;
        for(int i=0;i<s.length();i++){
            sum1+=s.charAt(i);
        }
        for(int i=0;i<t.length();i++){
            sum2+=t.charAt(i);
        }
        int a=sum2-sum1;
        char c=(char)(a);
        return c;
            
        
    }
}


----------------------------------------------------------------------------------------------------
1-liners Python + Ruby
def findTheDifference(self, s, t):
    return chr(sum(map(ord, t)) - sum(map(ord, s)))

def findTheDifference(self, s, t):
    return chr(reduce(int.__xor__, map(ord, s+t)))

----------------------------------------------------------------------------------------------------
