My java solution with FIFO queue
        public List<String> letterCombinations(String digits) {
        LinkedList<String> ans = new LinkedList<String>();
        String[] mapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        ans.add("");
        for(int i =0; i<digits.length();i++){
            int x = Character.getNumericValue(digits.charAt(i));
            while(ans.peek().length()==i){
                String t = ans.remove();
                for(char s : mapping[x].toCharArray())
                    ans.add(t+s);
            }
        }
        return ans;
    }


----------------------------------------------------------------------------------------------------
My iterative sollution, very simple under 15 lines
This is my solution, FYI

    vector<string> letterCombinations(string digits) {
        vector<string> res;
        string charmap[10] = {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        res.push_back("");
        for (int i = 0; i < digits.size(); i++)
        {
            vector<string> tempres;
            string chars = charmap[digits[i] - '0'];
            for (int c = 0; c < chars.size();c++)
                for (int j = 0; j < res.size();j++)
                    tempres.push_back(res[j]+chars[c]);
            res = tempres;
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
Iterative c++ solution in 0ms
    vector<string> letterCombinations(string digits) {
        vector<string> result;
        if(digits.empty()) return vector<string>();
        static const vector<string> v = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        result.push_back("");   // add a seed for the initial case
        for(int i = 0 ; i < digits.size(); ++i) {
            int num = digits[i]-'0';
            if(num < 0 || num > 9) break;
            const string& candidate = v[num];
            if(candidate.empty()) continue;
            vector<string> tmp;
            for(int j = 0 ; j < candidate.size() ; ++j) {
                for(int k = 0 ; k < result.size() ; ++k) {
                    tmp.push_back(result[k] + candidate[j]);
                }
            }
            result.swap(tmp);
        }
        return result;
    }


Simple and efficient iterative solution.

Explanation with sample input "123"

Initial state:

- result = {""}

Stage 1 for number "1":

- result has {""}
- candiate is "abc"
- generate three strings "" + "a", ""+"b", ""+"c" and put into tmp,
  tmp = {"a", "b","c"}
- swap result and tmp (swap does not take memory copy)
- Now result has {"a", "b", "c"}
 
Stage 2 for number "2":

- result has {"a", "b", "c"}
- candidate is "def"
- generate nine strings and put into tmp,
   "a" + "d", "a"+"e", "a"+"f", 
   "b" + "d", "b"+"e", "b"+"f",
   "c" + "d", "c"+"e", "c"+"f" 
- so tmp has {"ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" }
- swap result and tmp
- Now result has {"ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" }

Stage 3 for number "3":

- result has {"ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" }
- candidate is "ghi"
- generate 27 strings and put into tmp,
-  add "g" for each of "ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" 
-  add "h" for each of "ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" 
-  add "h" for each of "ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" 
- so, tmp has
            {"adg", "aeg", "afg", "bdg", "beg", "bfg", "cdg", "ceg", "cfg"
             "adh", "aeh", "afh", "bdh", "beh", "bfh", "cdh", "ceh", "cfh" 
             "adi", "aei", "afi", "bdi", "bei", "bfi", "cdi", "cei", "cfi" }
- swap result and tmp
- Now result has
            {"adg", "aeg", "afg", "bdg", "beg", "bfg", "cdg", "ceg", "cfg"
             "adh", "aeh", "afh", "bdh", "beh", "bfh", "cdh", "ceh", "cfh" 
             "adi", "aei", "afi", "bdi", "bei", "bfi", "cdi", "cei", "cfi" }


Finally, return result.

----------------------------------------------------------------------------------------------------
My recursive solution using Java

 

       public class Solution {
        	private static final String[] KEYS = { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
        
        	public List<String> letterCombinations(String digits) {
        		List<String> ret = new LinkedList<String>();
        		combination("", digits, 0, ret);
        		return ret;
        	}
        
        	private void combination(String prefix, String digits, int offset, List<String> ret) {
        		if (offset >= digits.length()) {
        			ret.add(prefix);
        			return;
        		}
        		String letters = KEYS[(digits.charAt(offset) - '0')];
        		for (int i = 0; i < letters.length(); i++) {
        			combination(prefix + letters.charAt(i), digits, offset + 1, ret);
        		}
        	}
        }

----------------------------------------------------------------------------------------------------
One line python solution
    class Solution:
        # @return a list of strings, [s1, s2]
        def letterCombinations(self, digits):
            if '' == digits: return []
            kvmaps = {
                '2': 'abc',
                '3': 'def',
                '4': 'ghi',
                '5': 'jkl',
                '6': 'mno',
                '7': 'pqrs',
                '8': 'tuv',
                '9': 'wxyz'
            }
            return reduce(lambda acc, digit: [x + y for x in acc for y in kvmaps[digit]], digits, [''])

----------------------------------------------------------------------------------------------------
Python solution
    class Solution:
        # @param {string} digits
        # @return {string[]}
        def letterCombinations(self, digits):
            mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                       '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
            if len(digits) == 0:
                return []
            if len(digits) == 1:
                return list(mapping[digits[0]])
            prev = self.letterCombinations(digits[:-1])
            additional = mapping[digits[-1]]
            return [s + c for s in prev for c in additional]

----------------------------------------------------------------------------------------------------
8-line Backtracking-Function C++ Solution
Most concise backtracking function, no?

    class Solution {
    public:
        vector<string> letterCombinations(string digits) 
        {
            vector<string> res;
            if(digits.size()==0) return res;
            string local;
            vector<vector<char>> table(2,vector<char>());
            table.push_back(vector<char>{'a','b','c'}); // index 2
            table.push_back(vector<char>{'d','e','f'}); // 3
            table.push_back(vector<char>{'g','h','i'});
            table.push_back(vector<char>{'j','k','l'}); // 5
            table.push_back(vector<char>{'m','n','o'});
            table.push_back(vector<char>{'p','q','r','s'}); // 7
            table.push_back(vector<char>{'t','u','v'});
            table.push_back(vector<char>{'w','x','y','z'}); // 9
            
            backtracking(table,res,local,0,digits);
            return res;
        }
        
        void backtracking(const vector<vector<char>>& table, vector<string>& res, string& local, int index, const string& digits) {
            if(index==digits.size())
                res.push_back(local);
            else
                for(int i=0;i<table[digits[index]-'0'].size();i++) {
                    local.push_back(table[digits[index]-'0'][i]);
                    backtracking(table, res, local, index+1, digits);
                    local.pop_back();
                }
        }
    };

----------------------------------------------------------------------------------------------------
Easy understand Java Solution
 method **combine** is to add new letters to old list, using 2 for-loop.

for example:

gave digits = "23"

i=0 -> result=combine("abc", [""]) ---> [a,b,c];

i=1 -> result=combine("def", [a,b,c]) ---> [ad,bd,cd, ae,be,ce, af,bf,cf];

 

      public class Solution {
            public static List<String> letterCombinations(String digits) {
                String digitletter[] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
                List<String> result = new ArrayList<String>();
        
                if (digits.length()==0) return result;
                
                result.add("");
                for (int i=0; i<digits.length(); i++) 
                    result = combine(digitletter[digits.charAt(i)-'0'],result);
                
                return result;
            }
            
            public static List<String> combine(String digit, List<String> l) {
                List<String> result = new ArrayList<String>();
                
                for (int i=0; i<digit.length(); i++) 
                    for (String x : l) 
                        result.add(x+digit.charAt(i));
        
                return result;
            }
        }



----------------------------------------------------------------------------------------------------
My C++ solution use DFS
        vector<string> letterCombinations(string digits) {
        vector<string> str;//str for final resut
        string save;//save for temporary answer
        int convert[10] = {0, 3, 6, 9, 12, 15, 19, 22, 26};
        dfs(str, save, digits, 0, digits.size(), convert);
        return str;
        }
        void dfs(vector<string> &str, string save, 
             string dig, int now, int size, int *convert){
        if(now == size){
            str.push_back(save);
            return;
        }
        int tmp = dig[now] - '0' - 2;//change '2' to 0, '3' to 1...
        for(int i = convert[tmp]; i < convert[tmp+1]; i++){
            save.push_back('a' + i);//ex: a,b,c | d,e,f
            dfs(str, save, dig, now + 1, size, convert);
            save.pop_back();
        }
        }

----------------------------------------------------------------------------------------------------
My simple Java solution
     public class Solution {
     String[][] refer={{},{},{"a","c","b"},{"d","e","f"},{"g","h","i"},{"j","k","l"},{"m","n","o"},{"p","q","r","s"},{"t","u","v"},{"w","x","y","z"}};
	    
	    public List<String> letterCombinations(String digits) {	        
	    	List<String> list=new ArrayList<String>();
	    	if(!digits.equals("")){helper(list,digits,""); return list;}
	    	 return list;	    	
	    }
	    private void helper(List<String> list,String digits,String s){
	    	   if(digits.length()==0){ list.add(s); return;}
	    		int idx=Integer.parseInt(digits.substring(0, 1)); 
	    		for(String k:refer[idx]){
	    		  helper(list,digits.substring(1,digits.length()),s+k);	
	    		}		
	    	return;
	    }
	        
}

----------------------------------------------------------------------------------------------------
AC Python solution
    class Solution:
        # @return a list of strings, [s1, s2]
        def letterCombinations(self, digits):
            self.dict = {"1":"", "2":"abc", "3":"def", "4":"ghi", "5":"jkl", "6":"mno", "7":"pqrs","8":"tuv","9":"wxyz","10":" "}
            result = [""]
            for digit in digits:
                lst = self.dict[digit]
                newresult = []
                for char in lst:
                    for str in result:
                        newresult.append(str+char)
                result = newresult
            return result

----------------------------------------------------------------------------------------------------
Concise 15 line Java Iterative Solution, very Straight Forward with Brief Explanation
Assume we have current answer {x1,x2,x3,x4} in the list and there is one more digit to go. The last digit has two choices: "a" and "b"; Then what we do is to first assign "a" to each element in the current answer list and put we get into a new list, {x1a,x2a,x3a,x4a}. Then assign "b" and we get {x1a,x2a,x3a,x4a,x1b,x2b,x3b,x4b}. That's the basic operation for one digit.
Starting from an empty list, do the previous steps digit by digit. And your answer will finally come out.

    public List<String> letterCombinations(String digits) {
		String[] data = new String[] { " ", "", "abc", "def", "ghi", "jkl",
				"mno", "pqrs", "tuv", "wxyz" };
		List<String> ans = new ArrayList<String>();
		for (int i = 0; i < digits.length(); i++) {
			char[] c = data[digits.charAt(i) - '0'].toCharArray();
			List<String> sub = new ArrayList<String>();
			for (int j = 0; j < c.length; j++) {
				if (ans.isEmpty())
					ans.add("");
				for (String s : ans) {
					sub.add(s + c[j]);
				}

				ans = sub;
			}
		}
		return ans;

	}

----------------------------------------------------------------------------------------------------
JAVA---------------Easy Version To UnderStand!!!!!!!!!!!!!!!
    public static void DFS(String digits, List<String> result, StringBuffer s, int start,
			HashMap<Integer, String> map) {
		if (start == digits.length())
			result.add(s.toString());
		else {
			String tmp = map.get(digits.charAt(start) - '0');
			for (int i = 0; i < tmp.length(); i++) {
				s.append(tmp.charAt(i));
				DFS(digits, result, s, start + 1, map);
				s.deleteCharAt(s.length() - 1);
			}
		}
	}

	public static List<String> letterCombinations(String digits) {
		if (digits == null || digits.length() == 0)
			return new ArrayList<String>();
		HashMap<Integer, String> map = new HashMap<Integer, String>();
		map.put(0, "");
		map.put(1, "");
		map.put(2, "abc");
		map.put(3, "def");
		map.put(4, "ghi");
		map.put(5, "jkl");
		map.put(6, "mno");
		map.put(7, "pqrs");
		map.put(8, "tuv");
		map.put(9, "wxyz");
		List<String> result = new ArrayList<String>();
		StringBuffer s = new StringBuffer();
		DFS(digits, result, s, 0, map);
		return result;
	}


----------------------------------------------------------------------------------------------------
Python easy to understand backtracking solution.
    def letterCombinations(self, digits):
        if not digits:
            return []
        dic = {"2":"abc", "3":"def", "4":"ghi", "5":"jkl", "6":"mno", "7":"pqrs", "8":"tuv", "9":"wxyz"}
        res = []
        self.dfs(digits, dic, 0, "", res)
        return res
        
    def dfs(self, digits, dic, index, path, res):
        if len(path) == len(digits):
            res.append(path)
            return 
        for i in xrange(index, len(digits)):
            for j in dic[digits[i]]:
                self.dfs(digits, dic, i+1, path+j, res)

----------------------------------------------------------------------------------------------------
Fast, backtracking, easy to understand, with explanations!
   

     public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<String>();
        String[][] map={{},{},{"a","c","b"},{"d","e","f"},{"g","h","i"},{"j","k","l"},{"m","n","o"},{"p","q","r","s"},,{"t","u","v"},{"w","x","y","z"}};
        String single="";
        if(digits == null || digits.length() == 0){                 //corner case;
            return result;
        }
        helper(result, single, digits, map,0);                     //go into recursive
        return result;
    }
    private void helper(List<String> result, String single, String digits, String[][] map,int start){
        if (start >= digits.length()){                                     // go out condition
            result.add(single);
            return;
        }
        int index = digits.charAt(start)-'0';
        String[] current = map[index];                                  //get letter collection of current digit
        for(int i = 0; i < current.length; i++){
            single = single + current[i];                                //add one letter to current prefix
            helper(result, single, digits, map, start + 1);    //go recursive
            single=single.substring(0,single.length()-1);    //remove the last digit, prepare to change to another letter
        }
    }
}

----------------------------------------------------------------------------------------------------
I use deep first search (DFS) idea. Is there any better solutions?
Each path of DFS is a valid combination. We can solve the problem by enumerating every path. 

----------------------------------------------------------------------------------------------------
0ms (less than 1ms) C++ Solution
