Java O(n) Time O(n) Space
public boolean isPossible(int[] nums) {
    Map<Integer, Integer> freq = new HashMap<>(), appendfreq = new HashMap<>();
    for (int i : nums) freq.put(i, freq.getOrDefault(i,0) + 1);
    for (int i : nums) {
        if (freq.get(i) == 0) continue;
        else if (appendfreq.getOrDefault(i,0) > 0) {
            appendfreq.put(i, appendfreq.get(i) - 1);
            appendfreq.put(i+1, appendfreq.getOrDefault(i+1,0) + 1);
        }   
        else if (freq.getOrDefault(i+1,0) > 0 && freq.getOrDefault(i+2,0) > 0) {
            freq.put(i+1, freq.get(i+1) - 1);
            freq.put(i+2, freq.get(i+2) - 1);
            appendfreq.put(i+3, appendfreq.getOrDefault(i+3,0) + 1);
        }
        else return false;
        freq.put(i, freq.get(i) - 1);
    }
    return true;
}


----------------------------------------------------------------------------------------------------
Java O(n) time &amp; O(1) space solution
public boolean isPossible(int[] nums) {
    int pre = Integer.MIN_VALUE, p1 = 0, p2 = 0, p3 = 0;
    int cur = 0, cnt = 0, c1 = 0, c2 = 0, c3 = 0;
        
    for (int i = 0; i < nums.length; pre = cur, p1 = c1, p2 = c2, p3 = c3) {
        for (cur = nums[i], cnt = 0; i < nums.length && cur == nums[i]; cnt++, i++);
            
        if (cur != pre + 1) {
            if (p1 != 0 || p2 != 0) return false;
            c1 = cnt; c2 = 0; c3 = 0;
                
        } else {
            if (cnt < p1 + p2) return false;
            c1 = Math.max(0, cnt - (p1 + p2 + p3));
            c2 = p1;
            c3 = p2 + Math.min(p3, cnt - (p1 + p2));
        }
    }
    
    return p1 == 0 && p2 == 0;
}


----------------------------------------------------------------------------------------------------
Simple C++ Greedy O(nlogn) Solution (with explanation)
class Solution {
public:
	bool isPossible(vector<int>& nums)
	{
		unordered_map<int, priority_queue<int, vector<int>, std::greater<int>>> backs;

		// Keep track of the number of sequences with size < 3
		int need_more = 0;

		for (int num : nums)
		{
			if (! backs[num - 1].empty())
			{	// There exists a sequence that ends in num-1
				// Append 'num' to this sequence
				// Remove the existing sequence
				// Add a new sequence ending in 'num' with size incremented by 1 
				int count = backs[num - 1].top();
				backs[num - 1].pop();
				backs[num].push(++count);

				if (count == 3)
					need_more--;
			}
			else
			{	// There is no sequence that ends in num-1
				// Create a new sequence with size 1 that ends with 'num'
				backs[num].push(1);
				need_more++;
			}
		}
		return need_more == 0;
	}
};


----------------------------------------------------------------------------------------------------
C++, DP easy to understand, O(n) time O(1) space
class Solution {
public:
    bool isPossible(vector<int>& nums) {
        int n = nums.size(), k = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i]-nums[i-1] > 1) {
                if (!check(nums, k, i)) 
                    return false;
                k = i;
            }
        }
        return check(nums, k, n);
    }
private:
    bool check(vector<int>& nums, int s, int e) {
        int ones = 0, twos = 0, tot = 0;
        for (int i = s+1, cnt = 1; i <= e; i++) {
            if (i < e && nums[i] == nums[i-1])
                cnt++;
            else {
                if (cnt < ones + twos) return false;
                twos = ones;
                ones = max(0, cnt-tot);
                tot = cnt;
                cnt = 1;
            }
        }
        return ones == 0 && twos == 0;
    }
};


----------------------------------------------------------------------------------------------------
Please explain why &#91;1,2,3,4,5&#93; is correct
<p>result should be false or just note the length of input  is guaranteed &gt;= 6</p>


----------------------------------------------------------------------------------------------------
Python, O(N) Straightforward Solution
def isPossible(self, A):
    counts = [(x, len(list(group)))
              for x, group in itertools.groupby(A)]

    def possible(chunk):
        starts, ends = [], []
        prev_count = 0
        for time, count in enumerate(chunk):
            if count > prev_count:
                starts.extend([time] * (count - prev_count))
            elif count < prev_count:
                ends.extend([time-1] * (prev_count - count))
            prev_count = count

        ends.extend([time] * count)
        return all(e >= s+2 for s, e in zip(starts, ends))

    chunk = []
    prev = None
    for x, count in counts:
        if prev is None or x - prev == 1:
            chunk.append(count)
        else:
            if not possible(chunk):
                return False
            chunk = []
        prev = x

    return possible(chunk)


----------------------------------------------------------------------------------------------------
Python Solution using PriorityQueue
import heapq
class Solution(object):
    def isPossible(self, A):
        runs = {} # end -> [lengths]
        for v in A:
            if v - 1 not in runs:
                if v not in runs:
                    runs[v] = [1]
                else:
                    heapq.heappush(runs[v], 1)
            else:
                length = heapq.heappop(runs[v-1]) + 1
                if len(runs[v-1]) == 0:
                    del runs[v-1]
                if v not in runs:
                    runs[v] = []
                heapq.heappush(runs[v], length)
        for v, arr in runs.items():
            if len(arr) > 0 and min(arr) < 3:
                return False
        return True


----------------------------------------------------------------------------------------------------
Python esay understand solution
def isPossible(self, nums):
        left = collections.Counter(nums)
        end = collections.Counter()
        for i in nums:
            if not left[i]: continue
            left[i] -= 1
            if end[i - 1] > 0:
                end[i - 1] -= 1
                end[i] += 1
            elif left[i + 1] and left[i + 2]:
                left[i + 1] -= 1
                left[i + 2] -= 1
                end[i + 2] += 1
            else:
                return False
        return True

----------------------------------------------------------------------------------------------------
New solution using a Queue, Iterate once only, beat 99.5% (18ms) in java
public class Solution {
    Queue<int[]> queue;
    int timestamp;
    int dif;
    public boolean isPossible(int[] nums) {
        if (nums == null || nums.length == 0) return false;
        int precount = 0;                 // count at the last timestamp
        int count = 1;                    // count at the current timestamp
        dif = 0;                          // change of the count at the current timestamp, dif = 1 means a new                                                    thread starts; dif = -1 means a thread ends
        timestamp = 0;
        queue = new LinkedList<>();    // using a queue to record the running thread, int[] includs a starting timestamp, and the number of theads that start at this timestamp are still running. 
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1] + 1) {// not consecutive, means all the threads end now  
                dif = count - precount;
                if (!processQueue()) return false;
                timestamp++;
                dif = -count;
                if (!processQueue()) return false;
                if (!queue.isEmpty()) return false;     // check whether all the runing threads end now   
                precount = 0;                           
                count = 1;
                timestamp = 0;
            } else if (nums[i] == nums[i - 1]) {
                count++;
            } else {
                dif = count - precount;
                if (!processQueue()) return false;
                precount = count;
                count = 1;
                timestamp++;
            }
        }
        dif = count - precount;
        if (!processQueue()) return false;
        timestamp++;
        dif = -count;
        if (!processQueue()) return false;
        return queue.isEmpty();                        // check whether all the runing threads end now
    }
    
    public boolean processQueue() {
        // if the number of running threads changes (dif != 0), dif > 0 means new thread starts, put into queue; dif < 0 means old thread ends, poll from queue, and check whether this thread has run for 3+ timestamps. 
        if (dif > 0) {
            queue.offer(new int[]{timestamp, dif});
        } else {
            while(dif < 0) {
                if (queue.isEmpty() || timestamp - queue.peek()[0] < 3) {
                    return false;
                } else if (queue.peek()[1] + dif > 0) {
                    queue.peek()[1] += dif;
                    break;
                } else {
                    dif += queue.poll()[1];
                }
            }
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
Anyone failing case 178?
<p>I was using greedy to solve this and not passing case 178.<br/>
It is hard to debug and I am lazy. If anyone once failed or is failing the same case, please share some thought. Thanks~</p>


----------------------------------------------------------------------------------------------------
The problem is unclear and tests seem contradictive
<p>Two test cases:</p>
<p>&#91;1,2,3,4,4,5&#93; yields false<br/>
&#91;1,2,3&#93; yields true</p>
<p>If the original array without split can be a sub-sequence, then &#91;1,2,3,4,4,5&#93; can be a sub-sequence where 3 consecutive integers are present. So the result should be True.</p>
<p>If it&#39;s not, then how can &#91;1,2,3&#93; be True?</p>


----------------------------------------------------------------------------------------------------
Please clarify or rephrase the problem description
<p>&#91;1,2,3,4,4&#93; returns false, but it still satisfies &#39;where each subsequence consists of at least 3 consecutive integers&#39;, it didn&#39;t ask for the whole subsequence to be consecutive.</p>


----------------------------------------------------------------------------------------------------
C++ O(n) solution, two pass
bool isPossible(vector<int>& nums) {
        unordered_map<int,int> cnt, tails;
        for(int &i : nums) cnt[i]++;
        for(int &i : nums){
            if(!cnt[i]) continue;
            cnt[i]--;
            if(tails[i-1] > 0){
                tails[i-1]--;
                tails[i]++;
            }
            else if(cnt[i+1] && cnt[i+2]){
                cnt[i+1]--;
                cnt[i+2]--;
                tails[i+2]++;
            }
            else return false;
        }
        return true;
    }


----------------------------------------------------------------------------------------------------
why the output of Example 3 in the question is false? Thanks!
<p>Hi there, I have a question about the example 3 in the question. I&#39;m wondering why the output of &#91;1,2,3,4,4,5&#93; is false. I&#39;m thinking that it can be split into two consecutive sequence as &#91;1,2,4&#93;, &#91;3,4,5&#93;.</p>
<p>Thanks for your help!</p>


----------------------------------------------------------------------------------------------------
Greedy algorithm explanation and code.
public boolean isPossible(int[] nums) {
    List<Integer> counts = new ArrayList<>();
    int current = nums[0];
    int count = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == current) {
            count++;
        }
        else {
            counts.add(count);
            if (nums[i] - current > 1) {
                if (!checkList(counts)) {
                    return false;
                };
                counts = new ArrayList<Integer>();
            }
            current = nums[i];
            count = 1;
        }
    }
    if (count > 0) {
        counts.add(count);
    }
    return checkList(counts);
}

private boolean checkList(List<Integer> counts) {
    if (counts.size() < 3) {
        return false;
    }
    while (counts.size() > 0) {
        int end = -1;
        for (int i = 1; i<counts.size(); i++) {
            if (counts.get(i) < counts.get(i-1)) {
                end = i-1;
                break;
            }
        }
        if (end == -1) end = counts.size() - 1;
        if (end < 2) return false;
        int toRemove = 1; // So here is the place I was wrong. It used to be counts.get(0); 
        for (int i = 0; i<=end; i++) {
            counts.set(i, counts.get(i) - toRemove);    
        }
        while(counts.size() > 0) {
            if (counts.get(0) == 0) counts.remove(0);
            else break;
        }
    }
    return true;
}

----------------------------------------------------------------------------------------------------
Greedy Java DP match single&#x2F;double previous entries first
public class Solution {
    public boolean isPossible(int[] nums) {
        List<int[]> list = new ArrayList<>();
        for(int i = 0; i < nums.length;){
            int j = i;
            while(i < nums.length && nums[i] == nums[j]){
                i++;
            }
            list.add(new int[]{nums[j], i - j});
        }

        if(nums.length == 0) return true;

        int k = 0;
        int[][] a = new int[2][3];
        a[k][0] = list.get(0)[1];
        for(int i = 1; i <= list.size(); i++){
            if(i == list.size() || list.get(i)[0] != list.get(i-1)[0] + 1){
                a[1 - k][0] = 1;
                a[1 - k][1] = a[1 - k][2] = 0;
                if(a[k][0] != 0 || a[k][1] != 0) return false;
            }else if(list.get(i)[1] < a[k][0] + a[k][1]){
                return false;
            }else{
                int n = list.get(i)[1];
                a[1 - k][1] = a[k][0];
                a[1 - k][2] = Math.min(a[k][1] + a[k][2], n - a[k][0]);
                a[1 - k][0] = n - a[1-k][1] - a[1-k][2];
            }
            k = 1 - k;
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
C++ O(n)
class Solution {
public:
    bool isPossible(vector<int>& nums) {
        unordered_map<int,int>pool, ends;
        for(auto e : nums) pool[e]++;
        for(auto e : nums)
        {
            if(pool[e] == 0) continue;
            if(ends[e-1] > 0)
            {
                ends[e-1]--;
                ends[e]++;
            }
            else if(pool[e+1] > 0 && pool[e+2] > 0)
            {
                pool[e+1]--;
                pool[e+2]--;
                ends[e+2]++;
            }
            else
                return false;
            pool[e]--;
        }
        return true;
    }
};

----------------------------------------------------------------------------------------------------
C++ O(n) solution beats 100% now!
    bool isPossible(vector<int>& nums) {
        unordered_map<int, int> ct, end;
        for(int i=0;i<nums.size();i++) ct[nums[i]]++;
        for(int i=0;i<nums.size();i++) {
            if(ct[nums[i]]<=0) continue;
            if(end[nums[i]-1]>0) {
                ct[nums[i]]--;
                end[nums[i]-1]--, end[nums[i]]++;
            }
            else if(ct[nums[i]+1]>0&&ct[nums[i]+2]>0) {
                ct[nums[i]]--, ct[nums[i]+1]--, ct[nums[i]+2]--;
                end[nums[i]+2]++;
            }
            else return false;
        }
        return true;
    }

----------------------------------------------------------------------------------------------------
Need some clarification.
<p>The question said &#34;you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers&#34;. However, There is no way to split &#91;1,2,3,4,5&#93; into two subsequences, for example, but it seems like the problem expect this case to be True? Am I interpreting this wrong?</p>


----------------------------------------------------------------------------------------------------
a silly one that doesn&#x27;t do exactly what&#x27;s been asked for
bool Solution::isPossible(std::vector<int>& nums) {

	while (nums.size() > 1) {
		if (nums.at(0) + 1 == nums.at(1)) {
			nums.erase(nums.begin(), nums.begin() + 2);
		}
		else if (nums.at(0) == nums.at(1)) {//remove the duplicate
			nums.erase(nums.begin(), nums.begin() + 1);
		}
		else { //if the first set isn't a sequence done
			return false;

		}
	}
	if (nums.size()==0) return true;
	return false;
}


----------------------------------------------------------------------------------------------------
