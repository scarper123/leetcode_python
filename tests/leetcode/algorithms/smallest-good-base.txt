&#91;JAVA&#93; Clean Code with Explanations and Running Time &#91;2 Solutions&#93;
8 * (long) n)

----------------------------------------------------------------------------------------------------
Java O(1) Solution - Math Problem
public class Solution {
    public int arrangeCoins(int n) {
        return (int)((-1 + Math.sqrt(1 + 8 * (long)n)) / 2);
    }
}


----------------------------------------------------------------------------------------------------
C++ 1 line code
<p>Concept:</p>
<p>1+2+3+...+x = n<br/>
-&gt; (1+x)x/2 = n<br/>
-&gt; x^2+x = 2n<br/>
-&gt; x^2+x+1/4 = 2n +1/4<br/>
-&gt; (x+1/2)^2 = 2n +1/4<br/>
-&gt; (x+0.5) = sqrt(2n+0.25)<br/>
-&gt; x = -0.5 + sqrt(2n+0.25)</p>
<p>int arrangeCoins(int n) {<br/>
return floor(-0.5+sqrt((double)2*n+0.25));<br/>
}</p>


----------------------------------------------------------------------------------------------------
O(logn) binary search java solution
public int arrangeCoins(int n) {   
        //convert int to long to prevent integer overflow
        long nLong = (long)n;
        
        long st = 0;
        long ed = nLong;
        
        long mid = 0;
        
        while (st <= ed){
            mid = st + (ed - st) / 2;
            
            if (mid * (mid + 1) <= 2 * nLong){
                st = mid + 1;
            }else{
                ed = mid - 1;
            }
        }
        
        return (int)(st - 1);
    }


----------------------------------------------------------------------------------------------------
&#91;JAVA&#93; Cleaner and easier to understand solution.
    public int arrangeCoins(int n) {
        if(n < 1)
            return 0;
        for(int i = 1; ;i++){
            n -=i;
            if(n < 0)
                return i-1;
        }
    }
}


----------------------------------------------------------------------------------------------------
441. Arranging Coins - Python solution
class Solution(object):
     def arrangeCoins(self, n):
         from math import sqrt
         return int((sqrt(1+8*n) - 1) / 2)


----------------------------------------------------------------------------------------------------
&#91;C&#93;&#91;JAVA&#93; Elegant One Line of Code, Clear Explanation Provided
using: x= (-b + sqrt[ b^2 - 4 a* c])/2a  { a=1, b=1, c=-2 }

x= floor((-1 + sqrt(1+8*n))/2);


----------------------------------------------------------------------------------------------------
3 lines C++ easy to understand
    int arrangeCoins(int n) {
        int i = 1;
        while(n >= i) n -= i, i++;
        return i - 1;
    }


----------------------------------------------------------------------------------------------------
Python 1-line solution by solving a quadratic equation
def arrangeCoins(self, n):
        """
        :type n: int
        :rtype: int
        """
        return int((1+8*n)**0.5 - 1) / 2


----------------------------------------------------------------------------------------------------
C++ Three solutions: O(n), O(logn), O(1)
class Solution {
public:
    int way1(int n) {
        int level = 1;
        for (long sum = 0; sum <= n; level++) 
            sum += level;
        return max(level - 2, 0);    
    }
    
    int way2(int n) {
        return sqrt(2 * (long)n + 1 / 4.0) - 1 / 2.0;
    }
    
    int arrangeCoins(int n) {
        long low = 1, high = n;
        while (low < high) {
            long mid = low + (high - low + 1) / 2;
            if ((mid + 1) * mid / 2.0 <= n) low = mid;
            else high = mid - 1;
        }
        return high;
    }
};


----------------------------------------------------------------------------------------------------
C++_9ms_Accepted
class Solution {
public:
int arrangeCoins(int n) {
    if(n <= 1) return n;
    long left = 0, right = n;
    while(left <= right){
        long mid = left + (right - left)/2;
        long sum = ((1 + mid) * mid)/2;
        if(sum <= n){left = mid + 1;}
        else {right = mid - 1;}
    }
    return left - 1;
}
};

----------------------------------------------------------------------------------------------------
Java One Line Code
<p>public int arrangeCoins(int n) {<br/>
	        return (int)(((Math.sqrt(1/8.0+n)<em>2</em>Math.sqrt(2.0))-1)/2.0);<br/>
}</p>


----------------------------------------------------------------------------------------------------
Share my easy &amp; simple Java Binary Search Solution
public class Solution {
    public int arrangeCoins(int n) {
        int lo = 0, hi = n;
        while(lo<=hi){
            long mid = lo + (hi-lo)/2, a = (1+mid), b = (2+mid);
            if(a*mid/2<=(long)n && a*b/2>(long)n) return (int)mid;
            else if(a*mid/2>(long)n) hi = (int)mid-1;
            else lo = (int)mid + 1;
        }
        return lo;
    }
}
``

----------------------------------------------------------------------------------------------------
Simple one line Java solution with exmplanation
```public int arrangeCoins(int n) {
        return (int) ((Math.sqrt(1+8L*n)-1)/2.0);
    }```

----------------------------------------------------------------------------------------------------
Java solution in one line
/* O(1):
 *   k(k+1) <= 2*n < (k+1)*(k+2)
 *   Math.sqrt(2*n-0.75)-1.5 < k <= Math.sqrt(2*n+0.25)-0.5
 * */
public int arrangeCoins(int n) {
    // return (int) (Math.sqrt(2*(double)n+0.5)-0.5);   // it's a mistake
    return (int) (Math.sqrt(2*(double)n+0.25)-0.5);
}

----------------------------------------------------------------------------------------------------
Java one line math solution,O(1)
public int arrangeCoins(int n) {
return (int) (-1.0 + Math.sqrt((8L * n) + 1)) >> 1;
}


----------------------------------------------------------------------------------------------------
Java simple solution with Explanation
public int arrangeCoins(int n) {
        if(n<=1) {
            return n;
        }
        int count=n;
        for(int i=1;i<=n;i++) {
            if(i>count) {
                return i-1;
            }
            
            count = count-i;
        }
        return 0;
    }


----------------------------------------------------------------------------------------------------
Easy C++ solution
class Solution {
public:
    int arrangeCoins(int n) {
        if (n < 2) return n;
        long number_sums = 0;
        for (int i = 1; ; i++) {
            number_sums += i + 1;
            if (number_sums >= n) return i;
        }
    }
};


----------------------------------------------------------------------------------------------------
