Java O(n) Solution---Easy to understand
public class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] arr = new int[26];
        for (int i = 0; i < magazine.length(); i++) {
            arr[magazine.charAt(i) - 'a']++;
        }
        for (int i = 0; i < ransomNote.length(); i++) {
            if(--arr[ransomNote.charAt(i)-'a'] < 0) {
                return false;
            }
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
O(m+n) one-liner Python
def canConstruct(self, ransomNote, magazine):
    return not collections.Counter(ransomNote) - collections.Counter(magazine)

----------------------------------------------------------------------------------------------------
Java Map solution
 public boolean canConstruct(String ransomNote, String magazine) {
        Map<Character, Integer> magM = new HashMap<>();
        for (char c:magazine.toCharArray()){
            int newCount = magM.getOrDefault(c, 0)+1;
            magM.put(c, newCount);
        }
        for (char c:ransomNote.toCharArray()){
            int newCount = magM.getOrDefault(c,0)-1;
            if (newCount<0)
                return false;
            magM.put(c, newCount);
        }
        return true;
    }


----------------------------------------------------------------------------------------------------
Two AC C++ solutions (unordered_map&#x2F;vector)
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        vector<int> vec(26, 0);
        for (int i = 0; i < magazine.size(); ++i)
            ++vec[magazine[i] - 'a'];
        for (int j = 0; j < ransomNote.size(); ++j)
            if (--vec[ransomNote[j] - 'a'] < 0)
                return false;
        return true;
    }
};


----------------------------------------------------------------------------------------------------
Share My Easy to Understand 5 lines of Java Code, 13ms beats 96%
public boolean canConstruct3(String ransomNote, String magazine) {
    Map<Character, Integer> map = new HashMap<>();
    for (char c : magazine.toCharArray()) {
        int count = map.containsKey(c) ? map.get(c) + 1 : 1;
        map.put(c, count);
    }
    for (char c : ransomNote.toCharArray()) {
        int newCount = map.containsKey(c) ? map.get(c) - 1 : -1;
        if (newCount == -1) return false;
        map.put(c, newCount);
    }
    return true;
}



----------------------------------------------------------------------------------------------------
Many different ways: 1-liners, 2-liners &amp; Concise 4-liner in Python, 80ms
class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        s1, s2, i = sorted(ransomNote), sorted(magazine), 0
        for c in s2:
            if i==len(s1) or c>s1[i]:
                break
            if c==s1[i]:
                i += 1
        return i==len(s1)


----------------------------------------------------------------------------------------------------
My javascript solution

var canConstruct = function(ransomNote, magazine) {
    if (ransomNote.length > magazine.length) { return false; }
    var ransomNoteArr = ransomNote.split('');
    var oldMagazineLength = magazine.length;
    ransomNoteArr.forEach(function(item,index){
        magazine = magazine.replace(item,'');
    });
    if(oldMagazineLength == magazine.length +ransomNoteArr.length) {
        return true;
    } else {
        return false;
    }
};


----------------------------------------------------------------------------------------------------
python,set(),count()
class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        for i in set(ransomNote):
            if ransomNote.count(i) > magazine.count(i):
                return False
        return True


----------------------------------------------------------------------------------------------------
6 Lines 32ms C++ Clean Solution
bool canConstruct(string ransomNote, string magazine) {
        vector<int> magazLetters(128, 0);
        for(char m : magazine)
            magazLetters[m]++;
        for(char r : ransomNote)
            if(--magazLetters[r]<0) return false;
        return true;
    }


----------------------------------------------------------------------------------------------------
Improved Solution: Shortcut on the Magazine not the RansomNote
public boolean canConstruct(String ransomNote, String magazine) {
	if(ransomNote.length()>magazine.length()) return false;
	if(ransomNote.isEmpty() && magazine.isEmpty()) return true;
	Map<Character,Integer> charsCount = new HashMap<>();
	for(char c: ransomNote.toCharArray()) {
		if(charsCount.containsKey(c)) {
			charsCount.put(c, charsCount.get(c)+1);
		} else {
			charsCount.put(c, 1);
		}
	}
	for(char c: magazine.toCharArray()) {
		if(charsCount.containsKey(c)) {
			int count = charsCount.get(c);
			if(--count==0) charsCount.remove(c);
			else charsCount.put(c, count);
		}
		if(charsCount.keySet().size()==0) {
			return true;
		}
	}
	return false;
}


----------------------------------------------------------------------------------------------------
use C in 8ms
int arr[128]={0x00};
char * q = magazine;
char *p =ransomNote;
while(*q)
{
    arr[*q]++;
    q++;
}


while(*p)
{
    if(!arr[*p])
    {
        return false;
    }
    arr[*p]--;
    p++;
}
return true;


----------------------------------------------------------------------------------------------------
Java concise solution using one array
public boolean canConstruct(String ransomNote, String magazine) {
        int[] cnt = new int[26];
        for(char c: magazine.toCharArray()){
            cnt[c-'a']++;
        }
        
        for(char c: ransomNote.toCharArray()){
            if(--cnt[c-'a']<0)
                return false;
        }
        return true;
    }



----------------------------------------------------------------------------------------------------
C 6ms solution
bool canConstruct(char* ransomNote, char* magazine) {
    int len_r = strlen(ransomNote);
    int len_m = strlen(magazine);
    int count_r[26] = {0};
    int count_m[26] = {0};
    int i;
    for(i = 0; i < len_r; ++i) ++count_r[ransomNote[i]-'a'];
    for(i = 0; i < len_m; ++i) ++count_m[magazine[i]-'a'];
    for(i = 0; i < 26; ++i)
        if(count_r[i] > count_m[i]) break;
    if(26 == i) return true;
    return false;
}


----------------------------------------------------------------------------------------------------
Python Solution - Substring
class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        for ch in ransomNote:
            index = -1
            try:
                index = magazine.index(ch)
            except ValueError:
                index = -1
            if index == -1:
                return False
            magazine = magazine[:index] + magazine[index+1:]
        return True


----------------------------------------------------------------------------------------------------
19ms Easy to Understand C++ solution
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        int lettersLeft = ransomNote.size(); // Remaining # of letters to be found in magazine
        int arr[26] = {0};
        for (int j = 0; j < ransomNote.size(); j++) {
            arr[ransomNote[j] - 'a']++; // letter - 'a' gives a value of 0 - 25 for each lower case letter a-z
        }
        
        int i = 0;
        while (i < magazine.size() && lettersLeft > 0) {
            if (arr[magazine[i] - 'a'] > 0) {
                arr[magazine[i] - 'a']--;
                lettersLeft--;
            }
            i++;
        }
        if (lettersLeft == 0) {
            return true;
        } else {
            return false;
        }
    }
};


----------------------------------------------------------------------------------------------------
28ms C++ solution
class Solution {
public:
bool canConstruct(string ransomNote, string magazine) {
    int m[26]; memset(m, 0, sizeof(m));
    int cnt = 0;
    
    for (char c : ransomNote) {
        m[c - 'a']++, cnt++;
    }
    
    for (char c : magazine) {
        if (m[c - 'a'] > 0) {
            m[c - 'a']--;
            if (--cnt == 0) {
                return true;
            }
        } 
    }
    
    return cnt == 0;
}
};

----------------------------------------------------------------------------------------------------
C++ easy solution using unordered_map
class Solution {
    unordered_map<char, int> count;
public:
    bool canConstruct(string ransomNote, string magazine) {
        if(ransomNote.empty())
            return true;
        if(magazine.empty())
            return false;
        for(auto c: magazine)
            count[c]++;
        for(auto c: ransomNote) {
            if(count.find(c) == count.end() || count[c] == 0)
                return false;
            count[c]--;
        }
        return true;
    }
};


----------------------------------------------------------------------------------------------------
C++ vector solution
     bool canConstruct(string ransomNote, string magazine) {
        vector<int> m(128, 0);
        for (char d : magazine) m[d]++;
        for (char c: ransomNote){
            if (m[c]==0) return false;
            m[c]--;
        }
        return true;
    } 


----------------------------------------------------------------------------------------------------
AC O(N) solution in Java using bucket
 public boolean canConstruct(String ransomNote, String magazine) {
        int[] table = new int[26];
        for (int i = 0; i < ransomNote.length(); i++) {
            char c = ransomNote.charAt(i);
            table[c-'a']++;
        }
        
        for (int i = 0; i < magazine.length(); i++) {
            char c = magazine.charAt(i);
            table[c-'a']--;
        }
        
        for (int k : table) {
            if (k > 0) return false;
        }
        return true;
    }


----------------------------------------------------------------------------------------------------
java solution
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] counter = new int[26];
        for (char c : magazine.toCharArray()) {
            counter[c - 'a']++;
        }
        for (char c : ransomNote.toCharArray()) {
            if (--counter[c - 'a'] < 0) {
                return false;
            }
        }
        return true;
    }

----------------------------------------------------------------------------------------------------
