My 8 line Java solution
        public int searchInsert(int[] A, int target) {
            int low = 0, high = A.length-1;
            while(low<=high){
                int mid = (low+high)/2;
                if(A[mid] == target) return mid;
                else if(A[mid] > target) high = mid-1;
                else low = mid+1;
            }
            return low;
        }


----------------------------------------------------------------------------------------------------
C++ O(logn) Binary Search that handles duplicate
If there are duplicate elements equal to *target*, my code will always return the one with smallest index.

    class Solution {
    public:
        int searchInsert(vector<int>& nums, int target) {
            int low = 0, high = nums.size()-1;
    
            // Invariant: the desired index is between [low, high+1]
            while (low <= high) {
                int mid = low + (high-low)/2;
    
                if (nums[mid] < target)
                    low = mid+1;
                else
                    high = mid-1;
            }
    
            // (1) At this point, low > high. That is, low >= high+1
            // (2) From the invariant, we know that the index is between [low, high+1], so low <= high+1. Follwing from (1), now we know low == high+1.
            // (3) Following from (2), the index is between [low, high+1] = [low, low], which means that low is the desired index
            //     Therefore, we return low as the answer. You can also return high+1 as the result, since low == high+1
            return low;
        }
    };

----------------------------------------------------------------------------------------------------
Very concise and efficient solution in Java
I have several solutions to this problem; this is the most concise and efficient one I have.

    public class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0, high = nums.length;
        while(low < high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] < target)
                low = mid + 1;
            else
                high = mid;
        }
        return low;
    }
}

----------------------------------------------------------------------------------------------------
Python one liner 48ms
    class Solution(object):
        def searchInsert(self, nums, target):
            """
            :type nums: List[int]
            :type target: int
            :rtype: int
            """       
            return len([x for x in nums if x<target])

----------------------------------------------------------------------------------------------------
Python beats 98%
    class Solution(object):
    def searchInsert(self, nums, key):
        if key > nums[len(nums) - 1]:
            return len(nums)

        if key < nums[0]:
            return 0

        l, r = 0, len(nums) - 1
        while l <= r:
            m = (l + r)/2
            if nums[m] > key:
                r = m - 1
                if r >= 0:
                    if nums[r] < key:
                        return r + 1
                else:
                    return 0

            elif nums[m] < key:
                l = m + 1
                if l < len(nums):
                    if nums[l] > key:
                        return l
                else:
                    return len(nums)
            else:
                return m

Once the left border is larger than key, than return index. Once the right border is less than key, then return index.

----------------------------------------------------------------------------------------------------
Simple Binary Search Solution
I think the solution does not need a lot of if statement.
Only two cases:
1 if found, just return current index
2 if not found, return next index where the search end

    int search(int A[], int start, int end, int target) {
        if (start > end) return start;
        int mid = (start + end) / 2;
        if (A[mid] == target) return mid;
        else if (A[mid] > target) return search(A, start, mid - 1, target);
        else return search(A, mid + 1, end, target);
    }
    int searchInsert(int A[], int n, int target) {
        return search(A, 0, n - 1, target);
    }

----------------------------------------------------------------------------------------------------
Simple Java solution
    public int searchInsert(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] >= target)
                return i;
        }
        return nums.length;
    }

----------------------------------------------------------------------------------------------------
My 8ms accepted code.
    class Solution {
    public:
        int searchInsert(int A[], int n, int target) {
            int low = 0,high = n - 1;
    		while (low <= high){
    			int mid = (low + high) / 2;
    			if(A[mid]==target) return mid;
    			else if (A[mid] >target){
    				high = mid - 1;
    			}
    			else{
    				low = mid + 1;
    			}
    		}
    		return low;
    	}
    };

----------------------------------------------------------------------------------------------------
A simple CPP solution with lower_bound
Actually, what we need here is std::lower_bound in C++ STL, which returns an iterator pointing to the first element that does not less than target. And then, things are quite simple:

    class Solution {
    public:
        int searchInsert(vector<int>& nums, int target) {
            return lower_bound(nums.begin(), nums.end(), target) - nums.begin();
        }
    };
Or we can implement an inline lower_bound:

    class Solution {
    public:
        int searchInsert(vector<int>& nums, int target) {
            auto first = nums.begin(), last = nums.end();
            while (first < last) {
                auto mid = first + ((last - first) >> 1);
                if (*mid < target) {
                    first = mid + 1;
                } else {
                    last = mid;
                }
            }
            return first - nums.begin();
        }
    };

----------------------------------------------------------------------------------------------------
My understanding of (lower bound,upper bound) binary search, in C++, thanks to two post
thanks to [A simple CPP solution with lower_bound][1]
and [C++ O(logn) Binary Search that handles duplicate][2],  thanks to phu1ku 's answer on the second post.

links for [std::lower_bound][3]  and  [std::upper_bound][4]

    class Solution {
    public:
        int searchInsert(vector<int>& nums, int target) {
            /// return index of first one that comp(item,target)==true, or nums.size() if not found
			/// comp is greater or equal to for lower_bound
			/// comp is greater for upper_bound
            int first=0, last=nums.size(), mid;
            while (first<last) {
                mid=first+((last-first)>>1); // first<=mid, mid<last
				/// if comp(item,target)==false, advance first
				// if(nums[mid]<=target) // for upper_bound
				if (nums[mid]<target) // for lower_bound
					first=mid+1; // first always increases
				else /// else recede last
					last=mid; // last always decreases (even last-first==1)
            }
            return first;
        }
    };



  [1]: https://leetcode.com/discuss/41251/a-simple-cpp-solution-with-lower_bound
  [2]: https://leetcode.com/discuss/39829/c-o-logn-binary-search-that-handles-duplicate
  [3]: http://en.cppreference.com/w/cpp/algorithm/lower_bound
  [4]: http://en.cppreference.com/w/cpp/algorithm/upper_bound

----------------------------------------------------------------------------------------------------
Accepted O(logN) Java solution, binary search
    public class Solution {
        public int searchInsert(int[] A, int target) {
            
            if(A.length == 0)return 0;
            
            int left = 0, right = A.length - 1;
            int mid = 0;
            
            while(left <= right){
                
                if(target<A[left])return left;
                if(target>A[right])return right+1;
                
                mid = (left+right)/2;
                
                if(A[mid]==target)return mid;
                else if(target < A[mid]){
                    right = mid-1;
                }else{
                    left = mid +1;
                }
                
            }
            return -1;
            
            
        }
    }

----------------------------------------------------------------------------------------------------
Short Accepted C# O(log(n)) Solution 189ms
    public class Solution {
        public int SearchInsert(int[] nums, int target) {
            int begin = 0, end = nums.Length - 1;
            while(begin <= end)
            {
                if(begin == end)
                    break;
                if(nums[(begin+end)/2] > target)
                    end = (begin+end)/2;
                else if(nums[(begin+end)/2] < target)
                    begin = (begin+end)/2 + 1;
                else if(nums[(begin+end)/2] == target)
                    return (begin+end)/2;
            }
            if(nums[begin] >= target)
                return begin;
            if(nums[begin] < target)
                return begin + 1;
            return -1;
        }
    }

----------------------------------------------------------------------------------------------------
6 line O(logN) Java Solution
This is similar to the question Search for a range.

Use a binary search to find the index.

    public int searchInsert(int[] A, int target) {
        int i=0, j=A.length-1;
        while (i<j) {
            int mid = i+(j-i)/2;
            if (A[mid]<target) i=mid+1; else j=mid;
        }
        return (A[i]<target) ? i+1 : i;
    }

----------------------------------------------------------------------------------------------------
Standard binary search template maybe better than other posts

start stores the in-valid position, end stores the biggest valid position.

      (start, end] 

Code:

       class Solution {
        public:
            int searchInsert(vector<int>& nums, int target) {
                if(nums.size()==0)  return 0;
                int start=-1, end=nums.size();
                
                while(end-start>1){
                    int mid=(start+end)/2;
                    if(target <= nums[mid]) end=mid;
                    else  start=mid;
                }
                return end;
            }
        };

----------------------------------------------------------------------------------------------------
Straightforward Java Solution Using Binary Search
    public int searchInsert(int[] nums, int target) {
        if(nums.length == 0) return 0;
        if(target <= nums[0]) return 0;
        if(target > nums[nums.length-1]) return nums.length;
        
        int low = 0;
        int high = nums.length-1;
        int mid = (low+high)/2;
        
        while(low != mid) {
            if(target == nums[mid]) return mid;
            if(target < nums[mid]) high = mid;
            else low = mid;
            mid = (low+high)/2;
        }
        return high;
    }

----------------------------------------------------------------------------------------------------
C++ solution using binary search
 int searchInsert(vector<int>& nums, int target) {
        int begin = 0, end = nums.size()-1, mid = 0;
        while(begin<=end){
            mid = (begin+end)/2;
            if(nums[mid]<target) begin = (mid++)+1;
            else end = mid-1;
        }
        return mid;
    }


----------------------------------------------------------------------------------------------------
Time limit exceeds
I was trying to solve the problem using binary search. I was implementing a rather basic binary search with some modification in python, and the result shows that I exceeded the time limit. Cannot think of an algorithm that is faster than the O(log n) binary search. Can anyone give some advice?

    class Solution:
    # @param A, a list of integers
    # @param target, an integer to be inserted
    # @return integer
    def searchInsert(self, A, target):
        # A is sorted, using the general idea of binary search to
        # find the position
        length = len(A)
        if length > 0:
            midPos = (length - 1) / 2
        else:
            # insert first if the array is empty
            return 0

        firstPos = 0
        lastPos = length - 1

        while (firstPos < lastPos):
            print "midPos is:", midPos
            print "firstPos is:", firstPos, "lastPos is:", lastPos
            if A[midPos] == target:
                targetPos = midPos
            elif A[midPos] > target:
                # if midPos is the first, insert first, otherwise check
                # for the previous digit
                if midPos == 0:
                    return 0
                elif A[midPos - 1] <= target:
                    return midPos
                else:
                    lastPos = midPos - 1
                    midPos = (firstPos + lastPos) / 2
            else:
                if midPos == length - 1:
                    return length
                elif A[midPos + 1] >= target:
                    return midPos + 1
                else:
                    firstPos = midPos + 1
                    midPos = (firstPos + lastPos) / 2
        return firstPos

----------------------------------------------------------------------------------------------------
My Ruby Solution
    # @param {Integer[]} nums
    # @param {Integer} target
    # @return {Integer}
    def search_insert(nums, target)
        return 0 if nums.nil?
        left = 0
        right = nums.size - 1
        while left <= right do
            mid = (right - left) / 2 + left
            if nums[mid] == target
                return mid
            elsif target > nums[mid]
                left = mid + 1
            else
                right = mid - 1
            end
        end
        left
    end

----------------------------------------------------------------------------------------------------
A fast and concise python solution, 40ms, binary search
For input without duplicates:

    def searchInsert(self, nums, target):
        l , r = 0, len(nums)-1
        while l <= r:
            mid=(l+r)/2
            if nums[mid]== target:
                return mid
            if nums[mid] < target:
                l = mid+1
            else:
                r = mid-1
        return l


----------
For input with duplicates, we only need a little bit modification:


    def searchInsert(self, nums, target): # works even if there are duplicates. 
        l , r = 0, len(nums)-1
        while l <= r:
            mid=(l+r)/2
            if nums[mid] < target:
                l = mid+1
            else:
                if nums[mid]== target and nums[mid-1]!=target:
                    return mid
                else:
                    r = mid-1
        return l



This is a very simple binary search. (Surprisingly, all the binary search solutions I found here are much longer than mine.)<br>  The first solution only works when there is no duplicate. In this case, we return `mid` whenever `nums[mid]==target`. The second solution deals with the case where duplicates are allowed.<br> Note that it would exit the `while` loop ONLY when `target` is not in `nums`. When this happens, the if and else statement in the last loop will also adjust `l` so we simply return l at the end.<br>
 

    examples:
    nums=[1,3,5,7,9,11,13,15,17]
    (1) target 12, last loop: (l,r)= (5, 5) ; end of loop (l,r)= (6, 5), answer = 6
    (2) target 14, last loop: (l,r)= (7, 8) ; end of loop (l,r)= (7, 6), answer = 7

  


----------------------------------------------------------------------------------------------------
Simple java solution( binary search)
    public class Solution {
     public int searchInsert(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        return position(nums, 0, nums.length - 1, target);

    }

    private int position(int[] nums, int start, int end, int target) {
        if(start > end){
            return start;
        }

        int mid = (start + end) / 2;
        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] > target) {
            return position(nums, start, mid - 1, target);
        } else {
            return position(nums, mid + 1, end, target);
        }

    }
}

----------------------------------------------------------------------------------------------------
