Java O(n) time O(k) space
public boolean checkSubarraySum(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<Integer, Integer>(){{put(0,-1);}};;
    int runningSum = 0;
    for (int i=0;i<nums.length;i++) {
        runningSum += nums[i];
        if (k != 0) runningSum %= k; 
        Integer prev = map.get(runningSum);
        if (prev != null) {
            if (i - prev > 1) return true;
        }
        else map.put(runningSum, i);
    }
    return false;
}


----------------------------------------------------------------------------------------------------
Need to pay attention to a lot of corner cases...
public class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        // Since the size of subarray is at least 2.
        if (nums.length <= 1) return false;
        // Two continuous "0" will form a subarray which has sum = 0. 0 * k == 0 will always be true.
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == 0 && nums[i + 1] == 0) return true;
        }

        // At this point, k can't be "0" any longer.
        if (k == 0) return false;
        // Let's only check positive k. Because if there is a n makes n * k = sum, it is always true -n * -k = sum.
        if (k < 0) k = -k;

        Map<Integer, Integer> sumToIndex = new HashMap<>();
        int sum = 0;
        sumToIndex.put(0, -1);

        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            // Validate from the biggest possible n * k to k
            for (int j = (sum / k) * k; j >= k; j -= k) {
                if (sumToIndex.containsKey(sum - j) && (i - sumToIndex.get(sum - j) > 1)) return true;
            }
            if (!sumToIndex.containsKey(sum)) sumToIndex.put(sum, i);
        }

        return false;
    }
}


----------------------------------------------------------------------------------------------------
Concise C++ solution, use set instead of map
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size(), sum = 0, pre = 0;
        unordered_set<int> modk;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            int mod = k == 0 ? sum : sum % k;
            if (modk.count(mod)) return true;
            modk.insert(pre);
            pre = mod;
        }
        return false;
    }
};

----------------------------------------------------------------------------------------------------
Python with explanation.  62ms  Time O(min(n, k)) mostly
class Solution(object):
    def checkSubarraySum(self, nums, k):

        
        if k == 0:
            # if two continuous zeros in nums, return True
            # time O(n)
            for i in range(0, len(nums) - 1):
                if nums[i] == 0 and nums[i+1] == 0:
                    return True
            return False
        
        k = abs(k)
        if len(nums) >= k * 2:
            return True
        
        #if n >= 2k: return True
        #if n < 2k:  time O(n) is O(k)  

        sum = [0]
        for x in nums:
            sum.append((sum[-1] + x) % k)
        
        Dict = {}
        for i in range(0, len(sum)):
            if Dict.has_key(sum[i]):
                if i - Dict[sum[i]] > 1:
                    return True
            else:
                Dict[sum[i]] = i
        
        return False


----------------------------------------------------------------------------------------------------
Not smart solution, but easy to understand
public class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        if (nums == null || nums.length == 0)   return false;
        
        int[] preSum = new int[nums.length+1];
        
        for (int i = 1; i <= nums.length; i++) {
            preSum[i] = preSum[i-1] + nums[i-1];
        }
        
        for (int i = 0; i < nums.length; i++) {
            for (int j = i+2; j <= nums.length; j++) {
                if (k == 0) {
                    if (preSum[j] - preSum[i] == 0) {
                        return true;
                    }
                } else if ((preSum[j] - preSum[i]) % k == 0) {
                    return true;
                }
            }
        }
        return false;
    }
}


----------------------------------------------------------------------------------------------------
Python Simple (Prefix sum)
def checkSubarraySum(self, A, k):
    P = [0] #P[i] = sum(A[:i]), mod abs(k) if k != 0
    for x in A:
        v = P[-1] + x
        if k: v %= abs(k)
        P.append(v)
    
    seen = set()
    for i in xrange(len(P) - 3, -1, -1):
        seen.add(P[i+2])
        if P[i] in seen:
            return True
    return False


----------------------------------------------------------------------------------------------------
Share my O(n) C++ accumulation-modulo solution with thinking process and explanation
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        if(nums.size() < 2) return false;
        if(k == 0)
        {
            for(int i = 1; i < nums.size(); i++)
            {
                if(nums[i] == 0 && nums[i - 1] == 0) return true;
            }
            return false;
        }else{
            int i = 0;
            map<int, int> res;
            while(true)
            {
                if(i != 0 && nums[i] % k == 0)
                {
                    return true;
                }else{
                    if(res.find(nums[i] % k) == res.end())
                    { 
                         res[nums[i] % k] = i;
                    }else{
                         if(i - res[nums[i] % k] > 1) return true;
                    }
                }
                i++;
                if(i == nums.size()) return false;
                nums[i] += nums[i - 1];
            }
        }
    }
};


----------------------------------------------------------------------------------------------------
Simple Python (10 lines) with Explanation 58ms O(n) time - O(k) space
class Solution(object):
    def checkSubarraySum(self, nums, k):
        if k == 0:
            return any(nums[i] == 0 and nums[i + 1] == 0 for i in xrange(len(nums) - 1))
        mods, cum_sum_mod_k = {0: -1}, 0
        for i, n in enumerate(nums):
            cum_sum_mod_k = (cum_sum_mod_k + n) % k
            if cum_sum_mod_k in mods and i - mods[cum_sum_mod_k] > 1:
                return True
            if cum_sum_mod_k not in mods:
                mods[cum_sum_mod_k] = i
        return False


----------------------------------------------------------------------------------------------------
Share my AC solution
public boolean checkSubarraySum(int[] nums, int k) {
	int n = nums.length;
	int[] sums = new int[n+1];
	for (int i = 1; i <= n; i++) {
		sums[i] = sums[i-1] + nums[i-1];
		for (int j = 0; j < i-1; j++) {
			int dif = sums[i]-sums[j];
			if (dif == 0 && k == 0) return true;
			else if (k == 0) continue;
			else if ((sums[i]-sums[j]) % k == 0) return true;
		}
	}
	return false;
}


----------------------------------------------------------------------------------------------------
Python 89ms O(n) time
class Solution(object):
    def checkSubarraySum(self, nums, k):
        a = set([0, nums[0]])
        for i in xrange(1, len(nums)):
            nums[i] += nums[i - 1]
            if nums[i] == k == 0 or k and nums[i] % k in a:
                return True
            k and a.add(nums[i] % k)
        return False


----------------------------------------------------------------------------------------------------
&#91;Continuous Subarray Sum&#93; &#91;C++&#93; - Clean Solution
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        map<int, int> sumto;
        for (int i = 0; i < nums.size(); i++) {
            sumto[i] = sumto[i - 1] + nums[i];
        }

        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (k != 0 && (sumto[j] - sumto[i - 1]) % k == 0 || k == 0 && (sumto[j] - sumto[i - 1]) == 0) {
                    return true;
                }
            }
        }

        return false;
    }
};


----------------------------------------------------------------------------------------------------
Easy Understanding Java Solution with HashMap
public class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int reminderSum = 0;
        for(int i = 0; i < nums.length; i++) {
            reminderSum += nums[i];
            if(k!=0) reminderSum %= k;
            if(map.containsKey(reminderSum)) {
                if(i - map.get(reminderSum) > 1) return true;
            } else {
                map.put(reminderSum, i);
            }
        }
        return false;
    }
}


----------------------------------------------------------------------------------------------------
My CPP solution using unordered_map, O(n) time and O(k) space
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        if (nums.size() < 2) return false;
        if (k == 0) k = INT_MAX;
        int sum = 0;
        unordered_map<int, int> map;
        map[0] = -1;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (map.find(sum % k) == map.end()) {
                map[sum % k] = i;
            } else {
                if (i - map[sum % k] > 1) {
                    return true;
                }
            }
        }
        return false;
    }
};


----------------------------------------------------------------------------------------------------
if(k&gt;0 &amp;&amp; (nums.length-k)&gt;1) return true;  beat  98% people
<p>just add one line ,it worked well ,<br/>
public static boolean checkSubarraySum(int&#91;&#93; nums, int k) {<br/>
if(k&gt;0 &amp;&amp; (nums.length-k)&gt;1) return true;<br/>
Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(){{put(0,-1);}};;<br/>
int runningSum = 0;<br/>
for (int i=0;i&lt;nums.length;i++) {<br/>
runningSum += nums&#91;i&#93;;<br/>
if (k != 0) runningSum %= k;<br/>
Integer prev = map.get(runningSum);<br/>
if (prev != null) {<br/>
if (i - prev &gt; 1) return true;<br/>
}<br/>
else map.put(runningSum, i);<br/>
}<br/>
return false;<br/>
}</p>


----------------------------------------------------------------------------------------------------
O(n) time O(k) space solution
    public boolean checkSubarraySum(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        int len = nums.length, i;
        if (k == 0) {
            if (len > 1 && nums[0] == 0 && nums[1] == 0)
                return true;
            return false;
        }
        int sum = 0;
        map.put(0, 1);
        
        for (i=0;i<len;i++) {
            sum = (sum + nums[i]) % k;
            Integer count = map.get(sum);
            
            if (count == null) 
                map.put(sum, 1);
            else {
                if (nums[i] % k != 0) {
                    return true;
                } else if (count > 1)
                    return true;
                else
                    map.put(sum, count + 1);
            }
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
O(n^2) without any extra space
class Solution(object):
    def checkSubarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        n = len(nums)
        if n > 1:
            
            for i in range(n):
                isum = nums[i]
                for j in range(i+1,n):
                    isum += nums[j]
                    if (k != 0 and (isum % k) == 0) or (isum == 0 and k == 0):
                        return True
                    
        return False

----------------------------------------------------------------------------------------------------
Clean Queue C++ Solution
    int i,size=nums.size(),flag=0,j;
    
    queue<int> q;
    
    q.push(nums[0]);
    
    for(i=1;i<size;i++)
    {
        int qsize=q.size();
        
        for(j=qsize;j>0;j--)
        {
            int num=q.front();
            
            if((num+nums[i])==0 && j>=1 && k==0)
            {
                flag=1;
                break;
            }
    
            if(j>=1 && k!=0 && (num+nums[i])%k==0)
            {
                flag=1;
                break;
            }
        
            q.pop();
            q.push(num+nums[i]);
        }
        
        q.push(nums[i]);
        
        if(flag==1)
        break;
    }
    
    
    if(flag==1)
    return true;
    else
    return false;
    
}


----------------------------------------------------------------------------------------------------
