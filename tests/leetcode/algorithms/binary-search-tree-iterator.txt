&quot;Explain-like-I&#x27;m-five&quot; Java Solution in O(n)
I'm sure somewhere can be simplified so it'd be nice if anyone can let me know. The pattern was that:

say n = 4, you have {1, 2, 3, 4}

If you were to list out all the permutations you have 

1 + (permutations of 2, 3, 4)
<br>2 + (permutations of 1, 3, 4)
<br>3 + (permutations of 1, 2, 4)
<br>4 + (permutations of 1, 2, 3)

<br>We know how to calculate the number of permutations of n numbers... n! So each of those with permutations of 3 numbers means there are 6 possible permutations. Meaning there would be a total of 24 permutations in this particular one. So if you were to look for the (k = 14) 14th permutation, it would be in the 

3 + (permutations of 1, 2, 4) subset. 

To programmatically get that, you take k = 13 (subtract 1 because of things always starting at 0) and divide that by the 6 we got from the factorial, which would give you the index of the number you want. In the array {1, 2, 3, 4}, k/(n-1)! = 13/(4-1)! = 13/3! = 13/6 = 2. The array {1, 2, 3, 4} has a value of 3 at index 2. So the first number is a 3.

Then the problem repeats with less numbers.

The permutations of {1, 2, 4} would be:

1 + (permutations of 2, 4)
<br>2 + (permutations of 1, 4)
<br>4 + (permutations of 1, 2)

But our k is no longer the 14th, because in the previous step, we've already eliminated the 12 4-number permutations starting with 1 and 2. So you subtract 12 from k.. which gives you 1. Programmatically that would be...

k = k - (index from previous) * (n-1)! = k - 2*(n-1)! = 13 - 2*(3)! = 1

In this second step, permutations of 2 numbers has only 2 possibilities, meaning each of the three permutations listed above a has two possibilities, giving a total of 6. We're looking for the first one, so that would be in the 1 + (permutations of 2, 4) subset. 

Meaning: index to get number from is k / (n - 2)!  = 1 / (4-2)! = 1 / 2! = 0.. from {1, 2, 4}, index 0 is 1

<br>so the numbers we have so far is 3, 1... and then repeating without explanations.

<br>{2, 4}
<br>k = k - (index from pervious) * (n-2)! = k - 0 * (n - 2)! = 1 - 0 = 1;
<br>third number's index = k / (n - 3)! = 1 / (4-3)! = 1/ 1! = 1... from {2, 4}, index 1 has 4
<br>Third number is 4

<br>{2}
<br>k = k - (index from pervious) * (n - 3)! = k - 1 * (4 - 3)! = 1 - 1 = 0;
<br>third number's index = k / (n - 4)! = 0 / (4-4)! = 0/ 1 = 0... from {2}, index 0 has 2
<br>Fourth number is 2

<br>Giving us 3142. If you manually list out the permutations using DFS method, it would be 3142. Done! It really was all about pattern finding.



    public class Solution {
    public String getPermutation(int n, int k) {
        int pos = 0;
        List<Integer> numbers = new ArrayList<>();
        int[] factorial = new int[n+1];
        StringBuilder sb = new StringBuilder();
        
        // create an array of factorial lookup
        int sum = 1;
        factorial[0] = 1;
        for(int i=1; i<=n; i++){
            sum *= i;
            factorial[i] = sum;
        }
        // factorial[] = {1, 1, 2, 6, 24, ... n!}
        
        // create a list of numbers to get indices
        for(int i=1; i<=n; i++){
            numbers.add(i);
        }
        // numbers = {1, 2, 3, 4}
        
        k--;
        
        for(int i = 1; i <= n; i++){
            int index = k/factorial[n-i];
            sb.append(String.valueOf(numbers.get(index)));
            numbers.remove(index);
            k-=index*factorial[n-i];
        }
        
        return String.valueOf(sb);
    }
}

----------------------------------------------------------------------------------------------------
An iterative solution for reference
Recursion will use more memory, while this problem can be solved by iteration. I solved this problem before, but I didn't realize that using k = k-1 would avoid dealing with case k%(n-1)!==0. Rewrote this code, should be pretty concise now. 

Only thing is that I have to use a list to store the remaining numbers, neither linkedlist nor arraylist are very efficient, anyone has a better idea?

The logic is as follows: for n numbers the permutations can be divided to (n-1)! groups, for n-1 numbers can be divided to (n-2)! groups, and so on. Thus k/(n-1)! indicates the index of current number, and k%(n-1)! denotes remaining index for the remaining n-1 numbers.
We keep doing this until n reaches 0, then we get n numbers permutations that is kth. 

    public String getPermutation(int n, int k) {
            List<Integer> num = new LinkedList<Integer>();
            for (int i = 1; i <= n; i++) num.add(i);
            int[] fact = new int[n];  // factorial
            fact[0] = 1;
            for (int i = 1; i < n; i++) fact[i] = i*fact[i-1];
            k = k-1;
            StringBuilder sb = new StringBuilder();
            for (int i = n; i > 0; i--){
                int ind = k/fact[i-1];
                k = k%fact[i-1];
                sb.append(num.get(ind));
                num.remove(ind);
            }
            return sb.toString();
        }

----------------------------------------------------------------------------------------------------
Most concise C++ solution, minimal memory required
    string getPermutation(int n, int k) {
        int i,j,f=1;
        // left part of s is partially formed permutation, right part is the leftover chars.
        string s(n,'0');
        for(i=1;i<=n;i++){
            f*=i;
            s[i-1]+=i; // make s become 1234...n
        }
        for(i=0,k--;i<n;i++){
            f/=n-i;
            j=i+k/f; // calculate index of char to put at s[i]
            char c=s[j];
            // remove c by shifting to cover up (adjust the right part).
            for(;j>i;j--)
                s[j]=s[j-1];
            k%=f;
            s[i]=c;
        }
        return s;
    }



----------------------------------------------------------------------------------------------------
Sharing my straightforward C++ solution with explanation
    string getPermutation(int n, int k) {
        int pTable[10] = {1};
        for(int i = 1; i <= 9; i++){
            pTable[i] = i * pTable[i - 1];
        }
        string result;
        vector<char> numSet;
        numSet.push_back('1');
        numSet.push_back('2');
        numSet.push_back('3');
        numSet.push_back('4');
        numSet.push_back('5');
        numSet.push_back('6');
        numSet.push_back('7');
        numSet.push_back('8');
        numSet.push_back('9');
        while(n > 0){
            int temp = (k - 1) / pTable[n - 1];
            result += numSet[temp];
            numSet.erase(numSet.begin() + temp);
            k = k - temp * pTable[n - 1];
            n--;
        }
        return result;
    }

In this program, `pTable` refers to permutation table and `numSet` refers to a set of numbers from 1 to 9. Before while loop, we need to initialize `pTable` and `numSet`, which is trivial.

In while loop, we do these following things.

1 calculate which number we will use.

2 remove that number from `numSet`.

3 recalculate k.

4 `n--`. 

Finally, we return result.

----------------------------------------------------------------------------------------------------
Share my Python solution with detailed explanation
The idea is as follow:

For permutations of n, the first (n-1)! permutations start with 1, next (n-1)! ones start with 2, ... and so on. And in each group of (n-1)! permutations, the first (n-2)! permutations start with the smallest remaining number, ...

take n = 3 as an example, the first 2 (that is, (3-1)! ) permutations start with 1, next 2 start with 2 and last 2 start with 3. For the first 2 permutations (123 and 132), the 1st one (1!) starts with 2, which is the smallest remaining number (2 and 3). So we can use a loop to check the region that the sequence number falls in and get the starting digit. Then we adjust the sequence number and continue.

    import math
    class Solution:
        # @param {integer} n
        # @param {integer} k
        # @return {string}
        def getPermutation(self, n, k):
            numbers = range(1, n+1)
            permutation = ''
            k -= 1
            while n > 0:
                n -= 1
                # get the index of current digit
                index, k = divmod(k, math.factorial(n))
                permutation += str(numbers[index])
                # remove handled number
                numbers.remove(numbers[index])
    
            return permutation


----------------------------------------------------------------------------------------------------
0ms C++ 12-line concise solution (no recursion, no helper function)
Attached please find my solution.

Idea:

- For an n-element permutation, there are (n-1)! permutations started with '1', (n-1)! permutations started with '2', and so forth. Therefore we can determine the value of the first element.

- After determining the first element, there are (n-1) candidates left. Then there are (n-2)! permutations started with the minimum element within the remaining set, and so forth.

Complexities:

- Time complexity: O(n^2)   

- Space complexity: O(n)

==

    class Solution {
    public:
        string getPermutation(int n, int k) {
            // initialize a dictionary that stores 1, 2, ..., n. This string will store the permutation.
            string dict(n, 0);
            iota(dict.begin(), dict.end(), '1');
            
            // build up a look-up table, which stores (n-1)!, (n-2)!, ..., 1!, 0!
            vector<int> fract(n, 1);
            for (int idx = n - 3; idx >= 0; --idx) {
                fract[idx] = fract[idx + 1] * (n - 1 - idx);
            }
            
            // let k be zero base
            --k;
            
            // the main part.
            string ret(n, 0);
            for (int idx = 0; idx < n; ++idx) {
                int select = k / fract[idx];
                k %= fract[idx];
                ret[idx] = dict[select];
                dict.erase(next(dict.begin(), select)); // note that it is an O(n) operation
            }
            return ret;
        }
    };




----------------------------------------------------------------------------------------------------
Does anyone have a better idea? Share my accepted python code here
It's obvious that if we try to come up with n! solutions one by one until it reach kth element - O(k), it will exceed the time limit. Therefore, I tried to implement a mathematical solution as follows:

     class Solution:
        # @return a string
        def getPermutation(self, n, k):
    
            ll = [str(i) for i in range(1,n+1)] # build a list of ["1","2",..."n"]
    
            divisor = 1
            for i in range(1,n): # calculate 1*2*3*...*(n-1)
                divisor *= i
    
            answer = ""
            while k>0 and k<=divisor*n:  # there are only (divisor*n) solutions in total 
                group_num = k/divisor
                k %= divisor
    
                if k>0: # it's kth element of (group_num+1)th group
                    choose = ll.pop(group_num)
                    answer += choose
                else: # it's last element of (group_num)th group
                    choose = ll.pop(group_num-1) 
                    answer += choose
                    ll.reverse() # reverse the list to get DESC order for the last element
                    to_add = "".join(ll)
                    answer += to_add
                    break
    
                divisor/=len(ll)
    
            return answer
     
Briefly take **(n,k) = (4,21)** for example, in the first iteration we divide the solution set into 4 groups: "1xxx", "2xxx", "3xxx", and "4xxx", while each group has 3! = 6 members. 

From 21/6 = 3...3, we know that the 21th element is the 3rd element in the (3+1)th group. In this group, we can divide it into 3 sub-groups again: "41xx", "42xx" and "43xx", and each group has 2!=2 members. 

Then, we calculate 3/2 and get 1...1, so it's the 1st element of (1+1)nd sub-group - "421x", and now it reach the base case with only one possibility - **"4213"**.

Anyone pass the problem with different ideas?


----------------------------------------------------------------------------------------------------
Simple 0s C++ solution
since n will be between 1 and 9 inclusive. pre-calculate the factorials is faster.

    class Solution {
    public:
        string getPermutation(int n, int k) {
            string res;
            string nums = "123456789";
            int f[10] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
            --k;
            for (int i = n; i >= 1; --i) {
                int j = k / f[i - 1];
                k %= f[i - 1];
                res.push_back(nums[j]);
                nums.erase(nums.begin() + j);
            }
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
Clean Java Solution
The basic idea is to decide which is the correct number starting from the highest digit.
Use k divide the factorial of (n-1), the result represents the ith not used number.
Then update k and the factorial to decide next digit.


 public String getPermutation(int n, int k) {

       LinkedList<Integer> notUsed = new LinkedList<Integer>();

		int weight = 1;

		for (int i = 1; i <= n; i++) {
			notUsed.add(i);
			if (i == n)
				break;
			weight = weight * i;
		}

		String res = "";
		k = k - 1;
		while (true) {
			res = res + notUsed.remove(k / weight);
			k = k % weight;
			if (notUsed.isEmpty())
				break;
			weight = weight / notUsed.size();
		}

		return res;
    }


----------------------------------------------------------------------------------------------------
Share my easy understand solution with comments - Java
     public int nFatorial(int n ) {
        	if(n == 0)
        		return 1;
        	return n * nFatorial(n - 1);
     }
    
    public String getPermutation(int n, int k) {
        	if(n == 0)
        		return "";
        	
        	String res = "";
    
        	// numbers to be added to result string
            List<Integer> num = new ArrayList<Integer>();
            
            // initialization, 0 just for padding
            for(int i = 0; i <= n; i++)
            	num.add(i);
            
            int factorial;
            int index;
            
            for(int i = n; i > 0; i--) {
            	factorial = nFatorial(i - 1);
    
            	// calculate current number index
            	index = (int) Math.ceil(k / (double) factorial);
            	
            	res += num.get(index);
            	
            	// after adding, delete it from rest set
            	num.remove(index);
            	
            	// update k for the next loop
            	k = k % factorial;
            	if(k == 0)
            		k = factorial;
            }
            return res;
    }
    

----------------------------------------------------------------------------------------------------
An efficient Java solution, without extra space or previous calculation of factorial
This problem consists of two parts.

Part one, find the array A[0..n-1] that satisfies:

**k-1  =  (n-1)!*A[0]  +  (n-2)!*A[1]  + ... +  2!*A[n-3]  +  1!*A[n-2]  +  0!*A[n-1]**

and **0 <= A[i] < n-i** (so the last item in the formula above is always 0).

It's obvious that the array A[0..n-1] can be calculated either from 0 to n-1 or reversely. In order to avoid previous calculation of factorial, A[0..n-1] is calculated from end to start here.

Part two, translate A[0..n-1] into final sequence number. A[0..n-1] can be translated from end to start step by step, just like the mathematical solution of Joseph Circle.

    public class Solution {
        public String getPermutation(int n, int k) {
    		k--;
    		int fact = 1;
    		char[] result = new char[n];
    		result[n - 1] = '1';
    		for (int i = 2; i <= n; i++) {
    			fact *= i;
    			result[n - i] = (char) (k % fact * i / fact + '1');
    			for (int j = n - i + 1; j < n; j++) {
    				result[j] += result[j] >= result[n - i] ? 1 : 0;
    			}
    			k -= k % fact;
    		}
    		return new String(result);
        }
    }

----------------------------------------------------------------------------------------------------
Easy to understand solution with sample
    class Solution {
        int getPermutationNumber(int n) {
            int result = 1;
            for(int i=1;i<=n;++i) {
                result *=i;
            }
            
            return result;
        }
        
    public:
        string getPermutation(int n, int k) {
            // 1234, 1243, 1324, 1342, 1423,1432,
            // n*(n-1)!
            // k/(n-1)!
            // k= k%(n-1)!
            // 123: n=3, k=4  => k=4-1 (for indexing from 0)
            // 3/(2!)=1, head[1]==2, k%(2!) = 1
            // 1/(1!)=1, head[1]==3, k%(1!) = 0
            // 0/(0!)=0, head[0]=1
            vector<int> result;        
            vector<int> nums;
            for(int i=1;i<=n;++i) {
                nums.push_back(i);
            }
            
            k=k-1;
            for(int i=0;i<n;++i) {
                int perms = getPermutationNumber(n-1-i);
                int index = k/perms;
                result.push_back(nums[index]);
                k%=perms;
                nums.erase(nums.begin()+index);
            }
            
            string s="";
            for(int i=0;i<result.size();++i) {
                s += std::to_string(result[i]);
            }
            
            return s;
        }
    };

----------------------------------------------------------------------------------------------------
44ms python solution
    from math import factorial  
    class Solution(object):
    
        def getPermutation(self, n, k):
            """
            :type n: int
            :type k: int
            :rtype: str
            """
            res = []
            nums = [i for i in xrange(1, n+1)]
            while n-1 >= 0:
                num, k = k/factorial(n-1), k % factorial(n-1)
                if k > 0:
                    res.append(str(nums[num]))
                    nums.remove(nums[num])
                else:
                    res.append(str(nums[num-1]))
                    nums.remove(nums[num-1])
    
                n -= 1
    
            return ''.join(res)



----------------------------------------------------------------------------------------------------
Python I think this is clean code. with some of my explanation
If we have n numbers then the total combinations would be factorial(n) which means same starting number should have (n - 1)! sequences.  

If we do k mod (n - 1)! then we can get the corresponding starting number and append to the result.

Note that we need to maintain another array to mark visited numbers(I take remove to make sure we will not revisit the number again, each remove takes O(n) time )

The total time complexity would be O(n^2).

    class Solution(object):
        def getPermutation(self, n, k):
            """
            :type n: int
            :type k: int
            :rtype: str
            """
            nums = map(str, range(1, 10))
            k -= 1
            factor = 1
            for i in range(1, n):
                factor *= i
            res = []
            for i in reversed(range(n)):
                res.append(nums[k / factor])
                nums.remove(nums[k / factor])
                if i != 0:
                    k %= factor
                    factor /= i
            return "".join(res)
     



----------------------------------------------------------------------------------------------------
C++, 4ms, recursive solution with explanation.


    // We have to return the k-th permutation 
    // in lexicographic order.
    //
    // We can take a recursive approach.
    // The lexicographic order means that first
    // we have those starting with digit 1 then
    // those starting with 2 and so on until
    // digit n.
    // 
    // For example, for n = 4, we have: 
    // k   perm
    // --------
    // 1   1234
    // 2   1243
    // 3   1324
    // 4   1342
    // 5   1423
    // 6   1432
    //
    // 7   2134
    // 8   2143
    // 9   2314
    // 10  2341
    // 11  2413
    // 12  2431
    // 
    // 13  3124
    // 14  3142
    // 15  3214
    // 16  3241
    // 17  3412
    // 18  3421
    // 
    // 19  4123
    // 20  4132
    // 21  4213
    // 22  4231
    // 23  4312
    // 24  4321
    //
    // Since there are n digits, the number of all 
    // permutations starting with a given digit d
    // is equal to (n-1)!.
    // Given k, the permutation order number,
    // we can determine which one is the first 
    // digit d: d = [(k-1)/(n-1)!]+1;
    // 
    // Once we determined the first digit
    // we recursively determine the remaining
    // digits.
    // 
    // We keep all digits in a vector: {1,2,3,...,n}.
    // Once we determine a digit we remove it
    // from there and recursively solve
    // the problem for the remaining n-1 digits.
    // The formula above to determine the digit
    // is written slightly different in code
    // such that instead of the digit we first
    // get its index in this vector.
    //
    // From k we can also determine k for the
    // n-1 problem as: prevK = k%prevFact.
    // This is the order number within the 
    // current digit's group.
    //
    // Now we can recursively solve the problem 
    // for n-1 and prevK and determine the rest 
    // of the digits.
    //
    class Solution
    {
        int factorial(int n)
        {
            int fact = 1;
            for (int i = 1; i <= n; i++)
                fact *= i;
    
            return fact;
        }
    
        string getPermutation(int n, int k, vector<int>& digits)
        {
            if (n == 1)
            {
                return to_string(digits[0]);
            }
    
            int prevFact = factorial(n - 1);
    
            int idx = (k - 1) / prevFact;
            int d = digits[idx];
    
            digits.erase(digits.begin() + idx);
    
            int prevK = k%prevFact;
            if (prevK == 0)
                prevK = prevFact;
    
            string prev = getPermutation(n - 1, prevK, digits);
    
            return to_string(d) + prev;
        }
    
    public:
        string getPermutation(int n, int k)
        {
            vector<int> digits;
            for (int i = 1; i <= n; i++)
            {
                digits.push_back(i);
            }
    
            return getPermutation(n, k, digits);
        }
    };



----------------------------------------------------------------------------------------------------
C++ 0ms observation solution
    class Solution {
    public:
        string getPermutation(int n, int k) {
            int mloop[10] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
            string ans;
            vector<int> remain;
            for (int i = 1; i <= n; ++i) {
                remain.push_back(i);
            }
            for (int i = n; i > 0; --i) {
                int j = ((k - 1) % mloop[i]) / mloop[i - 1];
                ans += (remain[j] + '0');
                remain.erase(remain.begin() + j);
            }
            return ans;
        }
    };

    ()1234           (1)234         (12)34        (123)4
    1 1234           1 234           1 34     =>    1 4
    2 1243           2 243     =>    2 43
    3 1324           3 324
    4 1342  =>       4 3....
    5 1423
    6 1432
    7 2134
    8 2......

----------------------------------------------------------------------------------------------------
Share my 0ms C++ solution with explanation
