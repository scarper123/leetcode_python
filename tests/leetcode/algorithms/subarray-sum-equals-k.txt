Java Solution, DFS + BFS
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int m = board.length, n = board[0].length;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(click);
        
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int row = cell[0], col = cell[1];
            
            if (board[row][col] == 'M') { // Mine
                board[row][col] = 'X';
            }
            else { // Empty
                // Get number of mines first.
                int count = 0;
                for (int i = -1; i < 2; i++) {
                    for (int j = -1; j < 2; j++) {
                        if (i == 0 && j == 0) continue;
                        int r = row + i, c = col + j;
                        if (r < 0 || r >= m || c < 0 || c < 0 || c >= n) continue;
                        if (board[r][c] == 'M' || board[r][c] == 'X') count++;
                    }
                }
                
                if (count > 0) { // If it is not a 'B', stop further BFS.
                    board[row][col] = (char)(count + '0');
                }
                else { // Continue BFS to adjacent cells.
                    board[row][col] = 'B';
                    for (int i = -1; i < 2; i++) {
                        for (int j = -1; j < 2; j++) {
                            if (i == 0 && j == 0) continue;
                            int r = row + i, c = col + j;
                            if (r < 0 || r >= m || c < 0 || c < 0 || c >= n) continue;
                            if (board[r][c] == 'E') {
                                queue.add(new int[] {r, c});
                                board[r][c] = 'B'; // Avoid to be added again.
                            }
                        }
                    }
                }
            }
        }
        
        return board;
    }
}


----------------------------------------------------------------------------------------------------
Straight forward Java solution
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int x = click[0], y = click[1];
        if (board[x][y] == 'M') {
            board[x][y] = 'X';
            return board;
        }
        
        dfs(board, x, y);
        return board;
    }
    
    int[] dx = {-1, 0, 1, -1, 1, 0, 1, -1};
    int[] dy = {-1, 1, 1, 0, -1, -1, 0, 1};
    private void dfs(char[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y] != 'E')  return;
        
        int num = getNumsOfBombs(board, x, y);
    
        if (num == 0) {
            board[x][y] = 'B';
            for (int i = 0; i < 8; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                dfs(board, nx, ny);
            }
        } else {
            board[x][y] = (char)('0' + num);
        }
        
    }
    
    private int getNumsOfBombs(char[][] board, int x, int y) {
        int num = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                int nx = x + i, ny = y + j;
                if (nx < 0 || nx >= board.length || ny < 0 || ny >= board[0].length)    continue;
                if (board[nx][ny] == 'M' || board[nx][ny] == 'X') {
                    num++;
                }
            }
        }
        return num;
    }
}


----------------------------------------------------------------------------------------------------
C++ DFS solution, easy to understand
class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        if(board[click[0]][click[1]] == 'M'){
            board[click[0]][click[1]] = 'X';
            return board;
        }
        reveal(board,click[0],click[1]);
        return board;
    }
    
    bool inboard(const vector<vector<char>>& board, int x, int y){
        return ( x>=0 && x<board.size() && y>=0 && y<board[0].size() );
    }
    
    void reveal(vector<vector<char>>& board, int x, int y){
        if(!inboard(board,x,y)) return;
        if(board[x][y] == 'E'){
            //search 8 adjacent squares
            int count = 0;
            if(inboard(board,x-1,y-1) && board[x-1][y-1] == 'M') count++;
            if(inboard(board,x-1,y  ) && board[x-1][y  ] == 'M') count++;
            if(inboard(board,x-1,y+1) && board[x-1][y+1] == 'M') count++;
            if(inboard(board,x  ,y-1) && board[x  ][y-1] == 'M') count++;
            if(inboard(board,x  ,y+1) && board[x  ][y+1] == 'M') count++;
            if(inboard(board,x+1,y-1) && board[x+1][y-1] == 'M') count++;
            if(inboard(board,x+1,y  ) && board[x+1][y  ] == 'M') count++;
            if(inboard(board,x+1,y+1) && board[x+1][y+1] == 'M') count++;

            if(count>0)
                board[x][y] = '0'+count;
            else{
                board[x][y] = 'B';
                reveal(board,x-1,y-1);
                reveal(board,x-1,y  );
                reveal(board,x-1,y+1);
                reveal(board,x  ,y-1);
                reveal(board,x  ,y+1);
                reveal(board,x+1,y-1);
                reveal(board,x+1,y  );
                reveal(board,x+1,y+1);
            }
        }
    }
};


----------------------------------------------------------------------------------------------------
10 line python solution
not n and map(self.updateBoard, (board,) * 8, [(row + d[0], col + d[1]) for d in directions])

----------------------------------------------------------------------------------------------------
Simple Python (DFS)
def updateBoard(self, A, click):
    click = tuple(click)
    R, C = len(A), len(A[0])
    
    def neighbors(r, c):
        for dr in xrange(-1, 2):
            for dc in xrange(-1, 2):
                if (dr or dc) and 0 <= r + dr < R and 0 <= c + dc < C:
                    yield r + dr, c + dc
    
    stack = [click]
    seen = {click}
    while stack:
        r, c = stack.pop()
        if A[r][c] == 'M':
            A[r][c] = 'X'
        else:
            mines_adj = sum( A[nr][nc] in 'MX' for nr, nc in neighbors(r, c) )
            if mines_adj:
                A[r][c] = str(mines_adj)
            else:
                A[r][c] = 'B'
                for nei in neighbors(r, c):
                    if A[nei[0]][nei[1]] in 'ME' and nei not in seen:
                        stack.append(nei)
                        seen.add(nei)
    return A


----------------------------------------------------------------------------------------------------
Java naive solution with explanation
public char[][] updateBoard(char[][] board, int[] click) {
    int x = click[0];
    int y = click[1];
    if(board[x][y] == 'M') board[x][y] = 'X';
    else if(countmines(board,x,y)>0) board[x][y] = (char)(countmines(board,x,y) + '0');
    else update(board,x,y);
    return board;
}
private void update(char[][] board, int i, int j){
    if(i<0||i>=board.length||j<0||j>=board[0].length) return;
    if(board[i][j]=='E'){
        if(countmines(board,i,j)==0) {
            board[i][j] = 'B';
            update(board,i,j-1);
            update(board,i-1,j);
            update(board,i,j+1);
            update(board,i+1,j);
            update(board,i-1,j-1);
            update(board,i+1,j+1);
            update(board,i+1,j-1);
            update(board,i-1,j+1);
        }
        else{
            board[i][j] = (char)(countmines(board,i,j) + '0');
        }
    }
}

private int countmines(char[][] board,int i, int j){ // just count mines in the neighborhood.
    int count = 0;
    if(i-1>=0&&board[i-1][j]=='M')count++;
    if(i+1<board.length&&board[i+1][j]=='M')count++;
    if(j-1>=0&&board[i][j-1]=='M')count++;
    if(j+1<board[0].length&&board[i][j+1]=='M')count++;
    if(i-1>=0&&j-1>=0&&board[i-1][j-1]=='M')count++;
    if(i+1<board.length&&j+1<board[0].length&&board[i+1][j+1]=='M') count++;
    if(i-1>=0&&j+1<board[0].length&&board[i-1][j+1]=='M') count++;
    if(i+1<board.length&&j-1>=0&&board[i+1][j-1]=='M') count++;
    return count;
}

----------------------------------------------------------------------------------------------------
Python Solution - DFS - Simple code - No hashtable Required
import collections
class Solution(object):
    def updateBoard(self, board, click):
        if not board:
            return
        m, n = len(board), len(board[0])
        queue = collections.deque()
        queue.append((click[0], click[1]))
        valid_neighbours = lambda (i, j): 0<=i<m and 0<=j<n

        while queue:
            x, y = queue.pop()
            if board[x][y] == 'M':
                board[x][y] = 'X'
            else:
                # Filter out the valid neighbours
                neighbours = filter(valid_neighbours, [(x-1, y), (x+1, y), 
                    (x, y-1), (x, y+1), (x-1, y-1), (x+1, y-1), (x-1, y+1), (x+1, y+1)])
                # Count the number of mines amongst the neighbours
                mine_count = sum([board[i][j]=='M' for i, j in neighbours])
                # If at least one neighbour is a potential mine, store the mine count.
                if mine_count > 0:
                    board[x][y] = str(mine_count)
                # If no neighbour is a mine, then add all unvisited neighbours
                # to the queue for future processing
                else:
                    board[x][y] = 'B'
                    queue.extend([(i, j) for (i, j) in neighbours if board[i][j]=='E'])
        return board


----------------------------------------------------------------------------------------------------
C++ 16 lines BFS
vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
    deque<pair<int, int>> q({ { click[0], click[1] } });
    while (!q.empty()) {
        auto c = q.front().first, r = q.front().second, mines = 0;
        vector<pair<int, int>> neighbours;
        if (board[c][r] == 'M') board[c][r] = 'X';
        else for (auto i = -1; i <= 1; ++i) {
            for (auto j = -1; j <= 1; ++j) {
                if (c + i >= 0 && r + j >= 0 && c + i < board.size() && r + j < board[0].size()) {
                    if (board[c + i][r + j] == 'M') ++mines;
                    else if (mines == 0 && board[c + i][r + j] == 'E') neighbours.push_back({ c + i, r + j});
                }
            }
        }
        if (mines > 0) board[c][r] = '0' + mines;
        else for (auto n : neighbours) {
            board[n.first][n.second] = 'B';
            q.push_back(n);
        }
        q.pop_front();
    }
    return board;
}


----------------------------------------------------------------------------------------------------
Easy BFS Java code
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int m = board.length, n = board[0].length;
        Queue<int[]> q = new LinkedList<>();
        
        if(board[click[0]][click[1]] == 'M') {
            board[click[0]][click[1]] = 'X';
            return board;
        } else {
            board[click[0]][click[1]] = 'B';
        }
        
        int[] dx = {1, 1, 0, -1, -1, -1,  0, 1};
        int[] dy = {0, 1, 1,  1,  0, -1, -1, -1};
        
        q.offer(click);
        
        while(!q.isEmpty()) {
            int[] cur = q.poll();
            
            int count = 0;
            
            for(int k = 0; k < 8; k++) {
                int i = cur[0] + dx[k], j = cur[1] + dy[k];
                if(i < 0 || i >= m || j < 0 || j >= n) continue;
                if(board[i][j] == 'M') {
                    count++;
                }
            }
            
            if(count != 0) {
                board[cur[0]][cur[1]] = (char)('0' + count);
            } else {
                for(int k = 0; k < 8; k++) {
                    int i = cur[0] + dx[k], j = cur[1] + dy[k];

                    if(i < 0 || i >= m || j < 0 || j >= n) continue;
                    if(board[i][j] == 'E') {
                        board[i][j] = 'B';
                        q.offer(new int[] {i, j});
                    }
                }
            }
        }
        
        return board;
    }
}


----------------------------------------------------------------------------------------------------
C test has problem
<p>C test has problem<br/>
cannot write to the pointer columnSizes</p>


----------------------------------------------------------------------------------------------------
Java DFS Solution, easy and straightforward
public char[][] updateBoard(char[][] board, int[] click) {
    int[] dx = {-1, -1, -1, 0, 1, 1, 1, 0};
    int[] dy = {-1, 0, 1, 1, 1, 0, -1, -1};
    update(board, click[0], click[1], dx, dy);
    return board;
}

private void update(char[][] board, int i, int j, int[] dx, int[] dy) {
    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] == 'B') return;
    
    if (board[i][j] == 'M') {
        board[i][j] = 'X';
        return;
    }
    
    int count = countAdjacentMines(board, i, j, dx, dy);
    if (count != 0) {
        board[i][j] = (char) (count + '0');
        return;
    }
    
    board[i][j] = 'B';
    for (int k = 0; k < 8; k++) {
        update(board, i + dx[k], j + dy[k], dx, dy);
    }
}

private int countAdjacentMines(char[][] board, int i, int j, int[] dx, int[] dy) {
    int count = 0;
    for (int k = 0; k < 8; k++) {
        int row = i + dx[k], col = j + dy[k];
        if (row >= 0 && row < board.length && col >= 0 && col < board[0].length && board[row][col] == 'M') count++;
    }
    return count;
}


----------------------------------------------------------------------------------------------------
C version has a problem
<p>It is crashing irrespective of what you set in your mallocd columnSizes. Please fix.</p>


----------------------------------------------------------------------------------------------------
Java solution, passing coordinate position as int not int&#91;&#93;
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        Deque<Integer> queue = new LinkedList<>();
        queue.addLast(click[0] * 50 + click[1]);
        while (!queue.isEmpty()) {
            int cur = queue.pollFirst();
            int row = cur / 50;
            int col = cur % 50;
            
            if (board[row][col] == 'M') {
                board[row][col] = 'X';
                return board;
            }
            
            // find out if there is any mine surround cur
            int count = 0;
            for (int i = Math.max(0, row - 1); i <= Math.min(row + 1, board.length - 1); i++) {
                for (int j = Math.max(0, col - 1); j <= Math.min(col + 1, board[0].length - 1); j++) {
                    if (board[i][j] == 'M') {
                        count++;
                    }
                }
            }
    
            if (count > 0) {
                board[row][col] = (char)(count + '0');
            } else {
                board[row][col] = 'B';
                for (int i = Math.max(0, row - 1); i <= Math.min(row + 1, board.length - 1); i++) {
                    for (int j = Math.max(0, col - 1); j <= Math.min(col + 1, board[0].length - 1); j++) {
                        if (board[i][j] == 'E') {
                            queue.addLast(i * 50 + j);
                            board[i][j] = 'U';
                        }
                    }
                }
            }
        }
        return board;
    }
}


----------------------------------------------------------------------------------------------------
Straightforward Java Solution
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int i = click[0];
        int j = click[1];
        
        if (board[i][j] == 'M') {
            board[i][j] = 'X';
            return board;
        }
        
        unrevealSquares(board, i, j); 
        return board;
    }
    
    private void unrevealSquares(char[][] board, int i, int j) {
        if (i < 0 || j < 0 || i == board.length || j == board[0].length || board[i][j] != 'E') return;
        
        int adjacent = adjacentMines(board, i, j);
        if (adjacent > 0) {
            board[i][j] = (char) (adjacent + '0');
        } else {
            board[i][j] = 'B';
            unrevealSquares(board, i-1, j);
            unrevealSquares(board, i, j-1);
            unrevealSquares(board, i+1, j);
            unrevealSquares(board, i, j+1);
            unrevealSquares(board, i-1, j-1);
            unrevealSquares(board, i-1, j+1);
            unrevealSquares(board, i+1, j-1);
            unrevealSquares(board, i+1, j+1);
        }
    }
    
    private int adjacentMines(char[][] board, int i, int j) {
        int m = board.length;
        int n = board[0].length;
        int count = 0;
        
        if (i > 0 && board[i-1][j] == 'M') count++;
        if (j > 0 && board[i][j-1] == 'M') count++;
        if (i < m-1 && board[i+1][j] == 'M') count++;
        if (j < n-1 && board[i][j+1] == 'M') count++;
        
        if (i > 0 && j > 0 && board[i-1][j-1] == 'M') count++;
        if (i < m-1 && j < n-1 && board[i+1][j+1] == 'M') count++;
        if (i > 0 && j < n-1 && board[i-1][j+1] == 'M') count++;
        if (j > 0 && i < m-1 && board[i+1][j-1] == 'M') count++;
        
        return count;
    }
}


----------------------------------------------------------------------------------------------------
Why this BFS code has TLE?
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int m = board.length;
        if(m == 0)  return board;
        int n = board[0].length;
        if(n == 0)  return board;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(click);
        int[][] dirs = new int[][]{{-1,-1}, {-1,0}, {-1,1}, {0,-1}, {0,1}, {1,-1}, {1,0}, {1,1}};
        while(!queue.isEmpty()) {
            int[] curr = queue.poll();
            if(board[curr[0]][curr[1]] == 'M') {
                board[curr[0]][curr[1]] = 'X';
                continue;
            }
            int count = 0;
            for(int[] dir : dirs) {
                int row = curr[0] + dir[0];
                int col = curr[1] + dir[1];
                if(row >= 0 && row < m && col >= 0 && col < n && (board[row][col] == 'M' || board[row][col] == 'X'))
                    count++;
            }
            if(count > 0) {
                board[curr[0]][curr[1]] = (char) ('0'+count);
                continue;
            }
            board[curr[0]][curr[1]] = 'B';
            for(int[] dir : dirs) {
                int row = curr[0] + dir[0];
                int col = curr[1] + dir[1];
                if(row >= 0 && row < m && col >= 0 && col < n && board[row][col] == 'E')
                    queue.add(new int[]{row, col});
            }
        }
        return board;
    }
}


----------------------------------------------------------------------------------------------------
C++ 12ms DFS AC solution
class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        if(board[click[0]][click[1]] == 'M'){
            board[click[0]][click[1]] = 'X';
            return board;
        }
        
        m = board.size(), n = board[0].size();
        dfs(board, click[0], click[1]);
        return board;
    }
    
private:
    int m, n;
    const vector<vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    void dfs(vector<vector<char>>& board, int x, int y){
        if(x < 0 || x >= m || y < 0 || y >= n) return;
        
        if(board[x][y] == 'E'){
            int cnt = 0;
            for(auto dir : dirs){
                int r = x + dir[0], c = y + dir[1];
                if(r >= 0 && r < m && c >= 0 && c < n) 
                    cnt += board[r][c] == 'M';
            }
            if(cnt)
                board[x][y] = cnt + '0';
            else{
                board[x][y] = 'B';
                for(auto dir : dirs) 
                    dfs(board, x + dir[0], y + dir[1]);
            }
        }
    }
};


----------------------------------------------------------------------------------------------------
&#91;JAVA&#93; DFS
class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
      return update(board, click[0], click[1]);
    }
    
    public char[][] update(char[][] board, int x, int y){
        if(board[x][y] == 'M'){
            board[x][y] = 'X';
        }
        else if(board[x][y] == 'E'){
            int count = 0;
            for(int i = x-1; i <= x+1; i++){
                for(int j = y-1; j <= y+1; j++){
                    if(i < board.length && 0 <= i && j < board[0].length && 0 <= j && board[i][j] == 'M'){
                        count++;
                    }
                }
            }
            
            if(count == 0){
                board[x][y] = 'B';
                for(int i = x-1; i <= x+1; i++){
                    for(int j = y-1; j <= y+1; j++){
                        if(i < board.length && 0 <= i && j < board[0].length && 0 <= j){
                            if(board[i][j] == 'E')
                                update(board, i, j);
                        }
                    }
                }
            }
            else{
                board[x][y] = (char)('0' + count);
            }
        }
        return board;
    }
}


----------------------------------------------------------------------------------------------------
Share my AC solution
public char[][] updateBoard(char[][] board, int[] click) {
	if (board.length == 0) return board;
	int a = click[0], b = click[1];
	if (board[a][b] == 'M') {
		board[a][b] = 'X';
	}else if (board[a][b] != 'B'){
		Maround(board, a, b, board.length, board[0].length);
	}
	return board;
}
	
private void Maround(char[][] board, int i, int j, int h, int w ){
	board[i][j] = 'B';
	int res = 0;
	for (int m = -1; m <= 1; m++) {
		for (int n = -1; n <= 1; n++) {
			int x = i+m, y = j+n;
			if (x>=0 && x<h && y>=0 && y<w){
				if (board[x][y] == 'M') res++;
			}
		}
	}
	if (res > 0) board[i][j] = String.valueOf(res).charAt(0);
	else {
		for (int m = -1; m <= 1; m++) {
			for (int n = -1; n <= 1; n++) {
				int x = i+m, y = j+n;
				if (x>=0 && x<h && y>=0 && y<w){
					if (board[x][y] != 'B') {
						Maround(board, x, y, h, w);
					}
				}
			}
		}
	}
}


----------------------------------------------------------------------------------------------------
Share my easy understand java solution
   private static final int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {1, 1}, {-1, -1}, {-1, 1}, {1, -1}};

   private int countMine(char[][] board, int i, int j) {
       int total = 0;
       for (int[] dir: dirs) {
           int r = i + dir[0];
           int c = j + dir[1];
           if (r < 0 || c < 0 || r >= board.length || c >= board[0].length) {
               continue;
           }
           
           if (board[r][c] == 'M') {
               total++;
           }
       }
       return total;
   }

   public char[][] updateBoard(char[][] board, int[] click) {
	   if (board == null || board.length == 0) {
		   return board;
	   }

	   if (click[0] < 0 || click[1] < 0 || click[0] >= board.length || click[1] >= board[0].length) {
    	   return board;
       }
       if (board[click[0]][click[1]] == 'M') {
    	   board[click[0]][click[1]] = 'X';
    	   return board;
       }
       return helper(board, click);
   }
   
   private char[][] helper(char[][] board, int[] click) {
       if (click[0] < 0 || click[1] < 0 || click[0] >= board.length || click[1] >= board[0].length) {
    	   return board;
       }
       
       if (board[click[0]][click[1]] == 'E') {
    	   int count = countMine(board, click[0], click[1]); 
    	   if ( count == 0) {
    		   board[click[0]][click[1]] = 'B';
    		   for (int[] dir : dirs) {
    			   helper(board, new int[]{click[0] + dir[0], click[1] + dir[1]});
    		   }
    	   }    	   
    	   else {
    		   board[click[0]][click[1]] = (char)('0' + count);
    	   }
       }
       return board;
	   
   }



----------------------------------------------------------------------------------------------------
Java solution, BFS using Queue
public class Solution {
    int[][] dirs = new int[][]{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    
    public char[][] updateBoard(char[][] board, int[] click) {

        int m = board.length;
        int n = board[0].length;

        int row = click[0];
        int col = click[1];
        
        if (board[row][col] == 'M') {
            board[row][col] = 'X';
            return board;
        }
        
        if (board[row][col] == 'E') {
            int mines = countmine(board, row, col);
            if (mines > 0) {
                board[row][col] = (char) ('0' + mines);
                return board;
            }
                
            board[row][col] = 'B';
                    
            Queue<Integer> q = new LinkedList<>();
            q.offer(row * n + col);
            while (!q.isEmpty()) {
                int tmp = q.poll();
                for (int[] dir : dirs) {
                    int x = tmp / n + dir[0];
                    int y = tmp % n + dir[1];
                    if (x >= 0 && x < m && y >= 0 && y < n && (board[x][y] == 'E')) {
                        mines = countmine(board, x, y);
                        if (mines > 0) {
                            board[x][y] = (char) ('0' + mines);
                        } else {
                            board[x][y] = 'B';
                            q.offer(x * n + y);
                        }
                    }
                }
            }
        }
        return board;
    }
    
    private int countmine(char[][] board, int row, int col) {
        int res = 0;
        for (int[] dir : dirs) {
                int x = row + dir[0];
                int y = col + dir[1];
                if (x >= 0 && x < board.length && y >= 0 && y < board[0].length && (board[x][y] == 'M' || board[x][y] == 'X'))
                        res++;
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
