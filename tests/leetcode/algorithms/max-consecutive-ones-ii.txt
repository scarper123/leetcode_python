Clean java solution: O(n^2) 166ms
public int numberOfBoomerangs(int[][] points) {
    int res = 0;

    Map<Integer, Integer> map = new HashMap<>();
    for(int i=0; i<points.length; i++) {
        for(int j=0; j<points.length; j++) {
            if(i == j)
                continue;
            
            int d = getDistance(points[i], points[j]);                
            map.put(d, map.getOrDefault(d, 0) + 1);
        }
        
        for(int val : map.values()) {
            res += val * (val-1);
        }            
        map.clear();
    }
    
    return res;
}

private int getDistance(int[] a, int[] b) {
    int dx = a[0] - b[0];
    int dy = a[1] - b[1];
    
    return dx*dx + dy*dy;
}

Time complexity:  O(n^2)
Space complexity: O(n)

----------------------------------------------------------------------------------------------------
Share my straightforward solution with HashMap, O(N^2)
public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        if(points.length==0 || points[0].length==0) return 0;
        int ret = 0;
        for(int i=0;i<points.length;i++){
            Map<Integer, Set<int[]>> map = new HashMap<>();
            int[] p = points[i];
            for(int j=0;j<points.length;j++){
                if(j==i) continue;
                int[] q = points[j];
                int dis = getDis(p, q);
                if(!map.containsKey(dis)) map.put(dis, new HashSet<int[]>());
                map.get(dis).add(q);
            }
            for(Integer key : map.keySet()){
                int size = map.get(key).size();
                if(size>=2) ret += (size*(size-1));
            }
        }
        return ret;
    }
    public int getDis(int[] p, int[] q){
        int a = p[0]-q[0];
        int b = p[1]-q[1];
        return a*a+b*b;
    }
}


----------------------------------------------------------------------------------------------------
Short Python O(n^2) hashmap solution
        res = 0
        for p in points:
            cmap = {}
            for q in points:
                f = p[0]-q[0]
                s = p[1]-q[1]
                cmap[f*f + s*s] = 1 + cmap.get(f*f + s*s, 0)
            for k in cmap:
                res += cmap[k] * (cmap[k] -1)
        return res



----------------------------------------------------------------------------------------------------
7 lines ~1050 ms C++
ctr

----------------------------------------------------------------------------------------------------
C++ clean solution O(n^2). Fully commented and explained.
int numberOfBoomerangs(vector<pair<int, int>>& points) {
    
    int res = 0;
    
    // iterate over all the points
    for (int i = 0; i < points.size(); ++i) {
        
        unordered_map<long, int> group(points.size());
        
        // iterate over all points other than points[i]
        for (int j = 0; j < points.size(); ++j) {
            
            if (j == i) continue;
            
            int dy = points[i].second - points[j].second;
            int dx = points[i].first - points[j].first;
            
            // compute squared euclidean distance from points[i]
            int key = dy * dy;
            key += dx * dx;
            
            // accumulate # of such "j"s that are "key" distance from "i"
            ++group[key];
        }
        
        for (auto& p : group) {
            if (p.second > 1) {
                /*
                 * for all the groups of points, 
                 * number of ways to select 2 from n = 
                 * nP2 = n!/(n - 2)! = n * (n - 1)
                 */
                res += p.second * (p.second - 1);
            }
        }
    }
    
    return res;
}


----------------------------------------------------------------------------------------------------
17 lines ~106 ms Java
public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int result = 0;
        HashMap<Integer,Integer> distMap = new HashMap<Integer,Integer>();
        for(int[] i : points) {
            for(int[] j : points) {
                if(i==j) continue;
                int dist = (i[0]-j[0])*(i[0]-j[0]) + (i[1]-j[1])*(i[1]-j[1]);
                int prevDist = distMap.containsKey(dist) ? distMap.get(dist) : 0;
                result += 2*prevDist;
                distMap.put(dist, prevDist+1);
            }
            distMap.clear();
        }
        return result;
    }
}


----------------------------------------------------------------------------------------------------
9-line Simple Python Solution with Hash O(n^2)
class Solution(object):
    def numberOfBoomerangs(self, points):
        count = 0
        for i in range(len(points)):
            h = {}
            for j in range(len(points)):
                if i != j:
                    dt = pow(points[i][0] - points[j][0], 2) + pow(points[i][1] - points[j][1], 2)
                    count += h.get(dt, 0)
                    h[dt] = h.get(dt, 0) + 1
        return count*2

----------------------------------------------------------------------------------------------------
Simple Java Solution using HashMap, beats 90%
public int numberOfBoomerangs(int[][] p) {
        int n = p.length;
        if(n==0) return 0;
        int count = 0;
        for(int i=0;i<n;i++){
            Map<Double,Integer> map = new HashMap<>();
            for(int j=0;j<n;j++){
                if(map.containsKey(distance(p[i],p[j]))){
                    int value = map.get(distance(p[i],p[j]));
                    count+=2*value;
                    map.put(distance(p[i],p[j]),value+1);
                } else {
                    map.put(distance(p[i],p[j]),1);
                }
            }
        }
        return count;
    }
    
    public Double distance(int[] a, int[]b){
        return Math.sqrt(Math.pow(a[0]-b[0],2) + Math.pow(a[1]-b[1],2));
    }```

----------------------------------------------------------------------------------------------------
1-line Python O(N^2)
def numberOfBoomrangs(self, points):
    nums = 0
    for x1, y1 in points:
        distance = collections.defaultdict(int)
        for x2, y2 in points:
            dx = abs(x2 - x1)
            dy = abs(y2 - y1)
            d = dx * dx + dy * dy
            distance[d] += 1

        nums += sum(n * (n-1) for n in distance.values())
    return nums


----------------------------------------------------------------------------------------------------
C# - HashTable solution O(n^2) time, O(n) space with explaination
    public int NumberOfBoomerangs(int[,] points) 
    {
        int n = points.GetLength(0);
        int count = 0;

        for (int p0 = 0; p0 < n; p0++)
        {
            // Keep a lookup of the distance from p0 to all other points
            // if you find another point with same distance give that distance
            // a count of 1 (one other point), if you see another point of this
            // distance move count to 2 and so on.  
            Dictionary<int,int> distSqMap = new Dictionary<int,int>();
            for (int p1 = 0; p1 < n; p1++)
            {
                if (p1 == p0) continue;
                
                // avoid square root calculation - do distance check against distance square
                int distSq = (points[p0,0] - points[p1,0])*(points[p0,0] - points[p1,0]) 
                        + (points[p0,1] - points[p1,1])*(points[p0,1] - points[p1,1]);
                
                if (!distSqMap.ContainsKey(distSq))
                {
                    distSqMap[distSq] = 0;
                }
                else
                {
                    distSqMap[distSq]++;
                }
            }
            
            // count number of combinations for groups of equally distanced points
            foreach (int groupCount in distSqMap.Values)
            {
                count += groupCount * (groupCount + 1);
            }
        }    
        
        return count;
    }


----------------------------------------------------------------------------------------------------
9 line Concise C++ Solution
class Solution {
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        int res = 0;
        for (int i = 0; i < points.size(); i++) {
            unordered_map<int, int> cache;
            for (int j = 0; j < points.size(); j++) 
                if (j != i) 
                    cache[pow(points[j].first - points[i].first, 2) + pow(points[j].second - points[i].second, 2)]++;
            for (auto& p : cache) 
                res += p.second * (p.second - 1);
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Accepted JavaScript solution
/**
 * @param {number[][]} points
 * @return {number}
 * use Map instead of JSON Object to avoid MLE or TLE
 */
var numberOfBoomerangs = function(points) {
    var len = points.length;
    var count = 0;
    
    for(var i = 0; i < len; i ++){
        var map = new Map();
        for(var jk = 0; jk < len; jk ++){
            if(i === jk){
                continue;
            }
            var d = getDistance(points[i], points[jk]);
            if(map.get(d)){
                map.set(d, map.get(d) + 1);
            }else{
                map.set(d, 1);
            }
        }
        map.forEach(function(m){
            count += m*(m - 1);
        });
    }
    
    return count;
};

function getDistance(i, j){
    return (i[0] - j[0])*(i[0] - j[0]) + (i[1] - j[1])*(i[1] - j[1]);
}


----------------------------------------------------------------------------------------------------
C++ 278ms Solution ~ 10 lines
class Solution {
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        int out=0;
        for (int i=0; i<points.size(); i++) {
            unordered_map<int,int> map;
            for (int j=0; j<points.size(); j++) {
                int xdist = points[i].first-points[j].first;
                int ydist = points[i].second-points[j].second;
                out+=(map[(xdist*xdist+ydist*ydist)]++)*2;
            }
        }
        return out;
    }
};


----------------------------------------------------------------------------------------------------
O(n^2) concise solution with explanation
class Solution {
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        int res = 0;
        for(int i = 0; i < points.size(); ++i) // all possible boomerang center points
        {
            unordered_map<int, int> m;
            for(int j = 0; j < points.size(); ++j)
            {
                int dx = points[i].first - points[j].first;
                int dy = points[i].second - points[j].second;
                ++m[dx*dx + dy*dy];
            }
            for(auto it = m.begin(); it != m.end(); ++it)
               res += it->second*(it->second-1);
            
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Python O(n^2) HashMap solution
class Solution(object):
    def numberOfBoomerangs(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        if len(points) < 3:
            return 0
        res = 0
        for i in range(len(points)):
            pDict = {}
            for j in range(len(points)):
                if j == i:
                    continue
                dis = pow(points[i][0] - points[j][0], 2) + pow(points[i][1] - points[j][1], 2)
                key = str(dis)
                if key in pDict:
                    pDict[key] += 1
                else:
                    pDict[key] = 1
            for p in pDict:
                if pDict[p] > 1:
                    res += pDict[p] * (pDict[p] - 1)
        return res


----------------------------------------------------------------------------------------------------
My java n^2 solution with explain
public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int ret  = 0;
        for(int i = 0; i < points.length; i++){
            
            for(int j = 0; j < points.length; j++){
                if(i == j){
                    continue;
                }
                int dis = (int)Math.pow(points[i][0] - points[j][0], 2) + (int)Math.pow(points[i][1] - points[j][1], 2);
                map.put(dis, map.getOrDefault(dis, 0) +1);
            }
            for(Integer key : map.keySet()){
                int num = map.get(key);
                if(num > 1){
                    ret += num * (num - 1); // (Pn2 = n!/(n-2)! = n*n-1)
                }
            }
            map.clear();
        }
        return ret;
    }
}


----------------------------------------------------------------------------------------------------
Very Simple Java Answer On2
public int numberOfBoomerangs(int[][] points) {
        int count = 0;
        for (int i = 0; i < points.length; i++) {
            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
            for (int j = 0; j < points.length; j++) {
                int dis = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) + (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                if (!map.containsKey(dis)) {
                    map.put(dis, 0);
                }
                count += map.get(dis) * 2;
                map.put(dis, map.get(dis) + 1);
            }
        }
        return count;
    }

----------------------------------------------------------------------------------------------------
27 lines JAVA O(N^2) HashMap Solution
public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int n = points.length;
        int res = 0;
        for(int i = 0; i < n; i++){
            Map<Integer,Integer> map = new HashMap<Integer,Integer>();
            for(int j = 0; j < n; j++){
                if(i!=j){
                    int key = getDis(points[i],points[j]);
                    map.putIfAbsent(key,0);
                    int val = map.get(key);
                    map.put(key,val+1);
                }
            }
            for(Integer k:map.keySet()){
                int tmp = map.get(k);
                if(tmp > 1){
                    res += (tmp * (tmp-1));
                }
            }
        }
        return res;
    }
    public int getDis(int[] a, int[] b){
        return (a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1]);
    }
}


----------------------------------------------------------------------------------------------------
C solution 246ms hash map
#define PRIME 5393
struct HashMap{
	long int dis;
	int number;
	struct HashMap *link;
}DistanceMap[PRIME];

long distance(int *a,int *b)
{
	return (int)pow(a[0]-b[0],2)+(int)pow(a[1]-b[1],2);
}

int numberOfBoomerangs(int** points, int pointsRowSize, int pointsColSize) {
    int i,j,k,count=0;
    
    for(i=0;i<pointsRowSize;i++)
    {
    	for(k=0;k<PRIME;k++)           //initialize hashtable
    	{
    		DistanceMap[k].dis = 0;
    		DistanceMap[k].number = 0;
    		DistanceMap[k].link = NULL;
	}
	for(j=0;j<pointsRowSize;j++)
    	{
    		if(j==i)
    			continue;
		add_to_map(distance(points[i],points[j]),DistanceMap);
	}
		
	for(k=0;k<PRIME;k++)
	{
		if(DistanceMap[k].number>=2)
			count+=DistanceMap[k].number*(DistanceMap[k].number-1);
		struct HashMap *ptr = &DistanceMap[k];
		while(ptr->link!=NULL)
		{
			ptr = ptr->link;
			if(ptr->number>=2)
			{
				count+=ptr->number*(ptr->number-1);
			}
		}
	}
		
	}
	return count;
}



int hash(int val)
{
	return abs(val%PRIME);
}

void add_to_map(long dis,struct HashMap* DistanceMap)
{
	int hashValue = hash(dis);
	
	if(DistanceMap[hashValue].dis==0)       //if this distance is not in hashmap
	{
		DistanceMap[hashValue].dis = dis;
		DistanceMap[hashValue].number = 1;
	}
	else     // if this distance is in hashmap
	{
		if(DistanceMap[hashValue].dis == dis)    
			DistanceMap[hashValue].number++;
		else  //refer to the diagram below
		{
			struct HashMap *prev = &DistanceMap[hashValue],*current = prev->link;
			
			while(1)
			{
				if(current == NULL)
				{
					struct HashMap *ptr = (struct HashMap*)malloc(sizeof(struct HashMap));
					ptr->dis = dis;
					ptr->number = 1;
					ptr->link = NULL; 
					prev->link = ptr;
					break;
				}
				else if(current != NULL && current->dis == dis)
				{
					current->number++;
					break;
				}
				else
				{
					current = current->link;
					prev = prev->link;
				}
					
			}
				
			
		}
		
	}
}



----------------------------------------------------------------------------------------------------
Swift solution got TLE
func numberOfBoomerangs(_ points: [[Int]]) -> Int {
         if points.count == 0 {
             return 0
         }
         var dictionary = [Int: Int]()
         var res = 0
         for p in points {
             for q in points {
                let x = p[0] - q[0]
                let y = p[1] - q[1]
                let distance =  x * x + y * y
                dictionary[distance] = (dictionary[distance] ?? 0 ) + 1
                res +=  2 * (dictionary[distance]! - 1)
             }
             dictionary.removeAll()
         }
        return res
    }


----------------------------------------------------------------------------------------------------
