Java Solution, MaxDepth
public class Solution {
    int max = 0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        maxDepth(root);
        return max;
    }
    
    private int maxDepth(TreeNode root) {
        if (root == null) return 0;
        
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        
        max = Math.max(max, left + right);
        
        return Math.max(left, right) + 1;
    }
}


----------------------------------------------------------------------------------------------------
Python, Simple with Explanation
def diameterOfBinaryTree(self, root):
    self.best = 1
    def depth(root):
        if not root: return 0
        ansL = depth(root.left)
        ansR = depth(root.right)
        self.best = max(self.best, ansL + ansR + 1)
        return 1 + max(ansL, ansR)
        
    depth(root)
    return self.best - 1


----------------------------------------------------------------------------------------------------
&#91;543. Diameter of Binary Tree&#93; C++_Recursive_with brief explanation
class Solution {
public:
int diameterOfBinaryTree(TreeNode* root) {
    if(root == nullptr) return 0;
    int res = depth(root->left) + depth(root->right);
    return max(res, max(diameterOfBinaryTree(root->left), diameterOfBinaryTree(root->right)));
}

int depth(TreeNode* root){
    if(root == nullptr) return 0;
    return 1 + max(depth(root->left), depth(root->right));
}
};

----------------------------------------------------------------------------------------------------
Simple Python
class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.ans = 0
        
        def depth(p):
            if not p: return 0
            left, right = depth(p.left), depth(p.right)
            self.ans = max(self.ans, left+right)
            return 1 + max(left, right)
            
        depth(root)
        return self.ans


----------------------------------------------------------------------------------------------------
Java easy to understand solution
public class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null){
            return 0;
        }
       int dia = depth(root.left) + depth(root.right);
       int ldia = diameterOfBinaryTree(root.left);
       int rdia = diameterOfBinaryTree(root.right);
       return Math.max(dia,Math.max(ldia,rdia));
        
    }
    public int depth(TreeNode root){
        if(root == null){
            return 0;
        }
        return 1+Math.max(depth(root.left), depth(root.right));
    }
    
}



----------------------------------------------------------------------------------------------------
C++ Solution, DFS
class Solution {
public:
    int maxdiadepth = 0;
    
    int dfs(TreeNode* root){        
        if(root == NULL) return 0;
        
        int leftdepth = dfs(root->left);
        int rightdepth = dfs(root->right);
        
        if(leftdepth + rightdepth > maxdiadepth) maxdiadepth = leftdepth + rightdepth;
        return max(leftdepth +1, rightdepth + 1);     
    }
    
    int diameterOfBinaryTree(TreeNode* root) {        
        dfs(root);
        
        return maxdiadepth;
    }
};


----------------------------------------------------------------------------------------------------
C solution, DFS 6ms with explanation.
 static inline int max(int a, int b) //return the highest value of two int, usefull to compute the hight
 {
     return a > b? a :b;
 }
static int height(struct TreeNode *t)
{
  if(!t)
    return 0;
  return 1 + max(height(t->left), height(t->right));
}

static void dfs(struct TreeNode *root, int *maxi)
{
    if(root)
    {
        if(root->left && !root->right)
            dfs(root->left, maxi);
        else if(root->right && !root->left)
            dfs(root->right, maxi);
        else
        {
            int hei = height(root->left) + height(root->right);
            if(hei > *maxi)
                *maxi = hei;
                
            dfs(root->left, maxi);
            dfs(root->right, maxi);
        }
    }
}
int diameterOfBinaryTree(struct TreeNode* root)
{
    if(!root)
      return 0;
    int max;
    max = height(root->left) + height(root->right);
    dfs(root->left, &max);
    dfs(root->right, &max);
    return max;      
}



----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code
public class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        int[] diameter = new int[1];
        height(root, diameter);
        return diameter[0];        
    }

    private int height(TreeNode node, int[] diameter) {
        if (node == null) {
            return 0;
        }
        int lh = height(node.left, diameter);
        int rh = height(node.right, diameter);
        diameter[0] = Math.max(diameter[0], lh + rh);
        return 1 + Math.max(lh, rh);
    }
}


----------------------------------------------------------------------------------------------------
implementation in C
// printf("%d\n",depth(root->left));
// printf("%d\n",depth(root->right));

int max =  depth(root->left) + depth(root->right); 

int l1 = diameterOfBinaryTree(root->left);
int l2 = diameterOfBinaryTree(root->right);


max = max < l1 ? l1 : max;
max = max < l2 ? l2 : max;
return max;


----------------------------------------------------------------------------------------------------
Why doesn&#x27;t it work with JavaScript?
var diameterOfBinaryTree = function(root) {
    var max={'val':0};
    maxDepth(root,max);
    return max.val;
};

function maxDepth(node,max){
    if(node === null)
        return 0;
    else{
        var left = maxDepth(node.left,max.val);
        var right = maxDepth(node.right,max.val);
        max.val = Math.max(max.val,left+right) ;

        return Math.max(left,right)+1;
    }
}


----------------------------------------------------------------------------------------------------
PostOrder JavaScript Soluton
var diameterOfBinaryTree = function(root) {
  let max = 0;
  function postOrder(root) {
    if (root === null) {
      return 0;
    }
    const left = postOrder(root.left);
    const right = postOrder(root.right);
    let path = left + right;
    if (max < path) {
      max = path;
    }
    return Math.max(left+1, right+1);
  }
  postOrder(root);
  return max;
};

----------------------------------------------------------------------------------------------------
Beautiful Java Recursive Solution
<p>Use three recursive methods:</p>
<pre>public class Solution {

    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null)return 0;
        int diameterPassRoot = searchLeftDeepest(root) + searchRightDeepest(root);
        return Math.max(Math.max(diameterOfBinaryTree(root.left),diameterOfBinaryTree(root.right)),diameterPassRoot);
    }
    
    public int searchLeftDeepest(TreeNode root){
        if(root == null)return 0;
        if(root.left == null)return 0;
        return Math.max(searchLeftDeepest(root.left),searchRightDeepest(root.left)) + 1;
    }
    
    public int searchRightDeepest(TreeNode root){
        if(root == null)return 0;
        if(root.right == null)return 0;
        return Math.max(searchLeftDeepest(root.right),searchRightDeepest(root.right)) + 1;
    }
}</pre>

----------------------------------------------------------------------------------------------------
Two Solutions
<p>// diameter O(n)<br/>
int dfs(TreeNode* root, int&amp; height){<br/>
if(!root) {height = 0; return 0;}<br/>
int lh = 0, rh = 0, ld = dfs(root-&gt;left, lh), rd = dfs(root-&gt;right, rh);<br/>
height = max(lh, rh)+1;<br/>
return max(lh+rh, max(ld, rd));<br/>
}<br/>
int diameterOfBinaryTree(TreeNode* root) {<br/>
int height = 0;<br/>
return dfs(root, height);<br/>
}</p>
<p>// O(n^2) solution<br/>
int depth(TreeNode* root){<br/>
return !root ? 0 : max(depth(root-&gt;left), depth(root-&gt;right)) + 1;<br/>
}<br/>
int diameterOfBinaryTree(TreeNode* root) {<br/>
return !root ? 0 : max(depth(root-&gt;left)+depth(root-&gt;right), max(diameterOfBinaryTree(root-&gt;left), diameterOfBinaryTree(root-&gt;right)));<br/>
}</p>


----------------------------------------------------------------------------------------------------
Intuitive Javascript Solution
var diameterOfBinaryTree = function(root) {
    let diameter = 0;
    
    dfs(root);
    
    return diameter;
    
    function dfs(node, level) {
        if (!node) return 0;
        
        const left = dfs(node.left);
        const right = dfs(node.right);
        
        // update diameter at every node
        diameter = Math.max(diameter, left + right);

        // update the largest number of edge so far
        return 1 + Math.max(left, right);
    }
};


----------------------------------------------------------------------------------------------------
C++ 6 lines DFS
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        DFS(root);
        return maxPath;
    }

private:
    int maxPath = 0;
    
    int DFS(TreeNode* root){
        if(!root) return 0;
        int left = DFS(root->left);
        int right = DFS(root->right);
        maxPath = max(maxPath, left + right);
        return 1 + max(left, right);
    }
};


----------------------------------------------------------------------------------------------------
6-liner C++ Post-order traversal
    int maxLen = 0;
    
    int diameterOfBinaryTree(TreeNode* r) {
        return maxDown(r), maxLen;
    }
    
    int maxDown(TreeNode* x) {
        if (!x) return 0;
        int maxL = maxDown(x->left), maxR = maxDown(x->right);
        maxLen = max(maxLen, maxL + maxR);
        return max(maxL, maxR) + 1;        
    } 


----------------------------------------------------------------------------------------------------
How to optimize it further? Two traversals
class Solution(object):
    def __init__(self):
        # a sort of variable to retain across recursive call
        # records diameter of tree recorded so far
        self.diameter = 0

    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def height(root):
            if root:
                return 1 + max( height(root.left) , height(root.right) )
            return 0
        
        if root:
            # a diameter of tree for a node is basically sum of height of left subtree and height of right subtree
            # find diameter of subtree rooted in left, and in right
            self.diameterOfBinaryTree(root.left)
            self.diameterOfBinaryTree(root.right)
            # find height of left subtree and right subtree
            left  = height(root.left)
            right =  height(root.right)
            # diameter of a tree rooted at root is sum of left subtree's height and sum of right subtree's height
            # self.diameter is a diameter of whole tree which is maximum diameter found so far
            self.diameter = max(self.diameter, left + right)
        
        return self.diameter

----------------------------------------------------------------------------------------------------
combine leetcode104--the max depth of binary tree
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        int lhigh = high(root.left);
        int rhigh = high(root.right);
        int ldiameter = diameterOfBinaryTree(root.left);
        int rdiameter = diameterOfBinaryTree(root.right);
        return Math.max(lhigh+rhigh, Math.max(ldiameter, rdiameter));
    }
    
    
    //leetcode104
    public int high(TreeNode root) {
        if(root == null) return 0;
        int left = high(root.left);
        int right = high(root.right);
        if(left > right) {
            return left+1;
        } else {
            return right+1;
        }
    }

----------------------------------------------------------------------------------------------------
Hi dear every one, I wonder why my solution is wrong. Thanks!
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        return longestPath(root.left)+longestPath(root.right);
    }
    
    public int longestPath(TreeNode root)
    {
        if(root==null) return 0;
        
        return 1+Math.max(longestPath(root.left), longestPath(root.right));
    }
}```

----------------------------------------------------------------------------------------------------
6 line easy code to find diameter :D
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

int ans = 0;

int findDia(TreeNode *root)
{
    if(!root)   return -1;
    int llen = 1+findDia(root->left);
    int rlen = 1+findDia(root->right);
    int temp = max(llen,rlen);
    int x = max(1+temp,llen+rlen+1);
    ans = max(ans,x);
    return temp;
}

class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root)   return 0;
        ans = 0;
        int p = findDia(root);
        return ans-1;
    }
};



----------------------------------------------------------------------------------------------------
