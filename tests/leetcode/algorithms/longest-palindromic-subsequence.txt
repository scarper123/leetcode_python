3 line C++
num          = 00000101
mask         = 11111000
~mask & ~num = 00000010


----------------------------------------------------------------------------------------------------
Java 1 line bit manipulation solution
public class Solution {
    public int findComplement(int num) {
        return ~num & (Integer.highestOneBit(num) - 1);
    }
}


----------------------------------------------------------------------------------------------------
Simple Python
class Solution(object):
    def findComplement(self, num):
        i = 1
        while i <= num:
            i = i << 1
        return (i - 1) ^ num


----------------------------------------------------------------------------------------------------
Java, very simple code and self-evident, explanation
    public int findComplement(int num) 
    {
        int i = 0;
        int j = 0;
        
        while (i < num)
        {
            i += Math.pow(2, j);
            j++;
        }
        
        return i - num;
    }


----------------------------------------------------------------------------------------------------
maybe fewest operations
int findComplement(int num) {
    int mask = num;
    mask |= mask >> 1;
    mask |= mask >> 2;
    mask |= mask >> 4;
    mask |= mask >> 8;
    mask |= mask >> 16;
    return num ^ mask;
}


----------------------------------------------------------------------------------------------------
Python 4 ways
    def findComplement(self, num):
        return ~num & ((1<<num.bit_length())-1)


----------------------------------------------------------------------------------------------------
Oneline C++ Solution
public:
    int findComplement(int num) {
        return ~num & ((1 <<(int)log2(num))-1);
    }
};

----------------------------------------------------------------------------------------------------
3 line pure C
Entered: 4=>100;
100 ^ 001 = 101;
101 ^ 010 = 111;
111 ^ 100 = 011;
Out:     011=>3;


----------------------------------------------------------------------------------------------------
Java one line solution without using AND (&amp;) or XOR (^)
    public int findComplement(int num) {
        return ~num + (Integer.highestOneBit(num) << 1);
    }


----------------------------------------------------------------------------------------------------
Wrong Judgment
<p>My solution to Number Complement was judged wrongly.<br/>
<a href="https://leetcode.com/contest/leetcode-weekly-contest-14/submissions/detail/88323029/" rel="nofollow">Here is my submission result.</a> However, when I copied my code and test case to the problem, I got the correct answer.</p>
<p><strong>UPD:</strong> Fixed, thanks Leetcode Team.</p>


----------------------------------------------------------------------------------------------------
Easy C++
class Solution {
public:
    int findComplement(int num) {
        int copy = num;
        int i = 0;

        while(copy != 0) {
            copy >>= 1;
            num ^= (1<<i);
            i += 1;
        }
        return num;
    }
};


----------------------------------------------------------------------------------------------------
Share my Java solution with explanation
public int findComplement(int num) {
        // find highest one bit
	int id = 31, mask = 1<<id;
	while ((num & mask)==0) mask = 1<<--id;
		
	// make mask
	mask = (mask<<1) - 1;
		
	return (~num) & mask;
}


----------------------------------------------------------------------------------------------------
Trivial Ruby one-liner
def find_complement(num)
  num.to_s(2).tr('01', '10').to_i(2)
end


----------------------------------------------------------------------------------------------------
3 line C++ solution
int findComplement(int num) {
        int revert = ~0;
        while(revert & num ) revert <<= 1;
        return revert ^ (~num);
    }


----------------------------------------------------------------------------------------------------
Java Solutions O(size(int)) time
public int findComplement(int num) {
    int copy = num, i=0;
    while (copy != 0) {
        copy >>= 1;
        num ^= (1<<i++);
    }
    return num;
}


----------------------------------------------------------------------------------------------------
Easy c++ without while and for
class Solution {
public:
    int findComplement(int num) {
        int c = (num | (num >> 1));
        c = (c | (c >> 2));
        c = (c | (c >> 4));
        c = (c | (c >> 8));
        c = (c | (c >> 16));
        return (~num & c);
    }
};


----------------------------------------------------------------------------------------------------
C# - 3 lines - O(highest set bit)
    public int FindComplement(int num) 
    {
        int mask = 1;
        while (mask < num) mask = (mask << 1) | 1;
        return ~num & mask;
    }


----------------------------------------------------------------------------------------------------
C++ 1 line code
<p>return (((unsigned)1 &lt;&lt; (32 - __builtin_clz(num))) - 1) ^ num;</p>
<p>using g++ built in function to count the number of leading zeros.</p>


----------------------------------------------------------------------------------------------------
Simple C# Bit Shifting Solution
public int FindComplement(int num) {
         string s = Convert.ToString(num, 2);
            for (int i = s.Length - 1; i >= 0; i--)
                num = num ^ (1 << i);
            return num;
    }


----------------------------------------------------------------------------------------------------
Straightforward Python
def findComplement(self, N):
    binary = bin(N)[2:]
    ans = 0
    for i, u in enumerate(binary[::-1]):
        if u == '0':
            ans += 2 ** i
    return ans


----------------------------------------------------------------------------------------------------
