A simple C++ solution
	class Stack {
	public:
		queue<int> que;
		// Push element x onto stack.
		void push(int x) {
			que.push(x);
			for(int i=0;i<que.size()-1;++i){
				que.push(que.front());
				que.pop();
			}
		}

		// Removes the element on top of the stack.
		void pop() {
			que.pop();
		}

		// Get the top element.
		int top() {
			return que.front();
		}

		// Return whether the stack is empty.
		bool empty() {
			return que.empty();
		}
	};

----------------------------------------------------------------------------------------------------
Only push is O(n), others are O(1). Using one queue. Combination of two shared solutions
    class MyStack 
    {
        Queue<Integer> queue;
        
        public MyStack()
        {
            this.queue=new LinkedList<Integer>();
        }
        
        // Push element x onto stack.
        public void push(int x) 
        {
           queue.add(x);
           for(int i=0;i<queue.size()-1;i++)
           {
               queue.add(queue.poll());
           }
        }
    
        // Removes the element on top of the stack.
        public void pop() 
        {
            queue.poll();
        }
    
        // Get the top element.
        public int top() 
        {
            return queue.peek();
        }
    
        // Return whether the stack is empty.
        public boolean empty() 
        {
            return queue.isEmpty();
        }
    }

----------------------------------------------------------------------------------------------------
Java solutions about three ways one of which utilizes one queue, and the others utilize two queues
First, let's see the most easiest way: one queue.
In this method,  the point is that after you add one element to the queue, rotate the queue to make the tail be the head.

    class MyStack {
    
    //one Queue solution
    private Queue<Integer> q = new LinkedList<Integer>();
    
    // Push element x onto stack.
    public void push(int x) {
        q.add(x);
        for(int i = 1; i < q.size(); i ++) { //rotate the queue to make the tail be the head
            q.add(q.poll());
        }
    }

    // Removes the element on top of the stack.
    public void pop() {
        q.poll();
    }

    // Get the top element.
    public int top() {
        return q.peek();        
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return q.isEmpty();
    }
    }

Then, two queue ways.

1  Push method is inefficient.

when you push an element, choose one empty queue(whichever when both are empty) to add this element, and then push all elements of the other queue into the chosen queue. After that, the newest element is at the head of the chosen queue so that whenever you want to do pop() or top(), you always get the newest element.

For example,

push(1):

[ , ,1]    [ , , ]

push(2):

[ , , ]   [ ,1,2]

push(3):

[ 1, 2,3 ] [ , , ] 


    class MyStack {
    //using two queue. The push is inefficient.
    private Queue<Integer> q1 = new LinkedList<Integer>();
    private Queue<Integer> q2 = new LinkedList<Integer>();
    public void push(int x) {
        if(q1.isEmpty()) {
            q1.add(x);
            for(int i = 0; i < q2.size(); i ++)
                q1.add(q2.poll());
        }else {
            q2.add(x);
            for(int i = 0; i < q1.size(); i++)
                q2.add(q1.poll());
        }
    }
    
    public void pop() {
        if(!q1.isEmpty()) 
            q1.poll();
        else
            q2.poll();
    }
    public int top() {
        return q1.isEmpty() ? q2.peek() : q1.peek();
    }
    public boolean empty() {
        return q1.isEmpty() && q2.isEmpty();
    }
    }

2 pop() and top() are inefficient

When you push elements, choose a queue which is not empty(whichever when both are empty).
When you do pop() or top(), first pop all elements of the queue except the tail into another empty queue, and then pop the tail which is your want.

For example:

push(1):

[ , , 1] [ , , ]

push(2):

[ ,2,1] [ , , ]

top();

[ , , 2] [ , ,1] -> [ , , ] [ ,2,1]

pop():

[ , , 1] [ , ,2]  -> [ , ,1] [ , , ]

push(3) :
 
[ ,3,1] [ , , ]

    class MyStack{
    //using two queue. The pop and top are inefficient.
    private Queue<Integer> q1 = new LinkedList<Integer>();
    private Queue<Integer> q2 = new LinkedList<Integer>();
    public void push(int x) {
        if(!q1.isEmpty()) 
            q1.add(x);
        else
            q2.add(x);
    }
    public void pop() {
        if(q1.isEmpty()) {
            int size = q2.size();
            for(int i = 1; i < size; i ++) {
                q1.add(q2.poll());
            }
            q2.poll();
        }else {
            int size = q1.size();
            for(int i = 1; i < size; i ++) {
                q2.add(q1.poll());
            }
            q1.poll();
        }
    }
    public int top() {
        int res;
        if(q1.isEmpty()) {
            int size = q2.size();
            for(int i = 1; i < size; i ++) {
                q1.add(q2.poll());
            }
            res = q2.poll();
            q1.add(res);
        }else {
            int size = q1.size();
            for(int i = 1; i < size; i ++) {
                q2.add(q1.poll());
            }
            res = q1.poll();
            q2.add(res);
        }
        return res;
    }
    public boolean empty() {
        return q1.isEmpty() && q2.isEmpty();
    }
    }

----------------------------------------------------------------------------------------------------
Concise 1 Queue - Java, C++, Python
**Explanation:**

Just use a queue where you *"push to front"* by pushing to back and then rotating the queue until the new element is at the front (i.e., size-1 times move the front element to the back).

---

**C++:** 0 ms

    class Stack {
        queue<int> q;
    public:
        void push(int x) {
            q.push(x);
            for (int i=1; i<q.size(); i++) {
                q.push(q.front());
                q.pop();
            }
        }
    
        void pop() {
            q.pop();
        }
    
        int top() {
            return q.front();
        }
    
        bool empty() {
            return q.empty();
        }
    };

---

**Java:** 140 ms

    class MyStack {
    
        private Queue<Integer> queue = new LinkedList<>();
    
        public void push(int x) {
            queue.add(x);
            for (int i=1; i<queue.size(); i++)
                queue.add(queue.remove());
        }
    
        public void pop() {
            queue.remove();
        }
    
        public int top() {
            return queue.peek();
        }
    
        public boolean empty() {
            return queue.isEmpty();
        }
    }

---

**Python:** 36 ms

    class Stack:
    
        def __init__(self):
            self._queue = collections.deque()
    
        def push(self, x):
            q = self._queue
            q.append(x)
            for _ in range(len(q) - 1):
                q.append(q.popleft())
            
        def pop(self):
            return self._queue.popleft()
    
        def top(self):
            return self._queue[0]
        
        def empty(self):
            return not len(self._queue)

----------------------------------------------------------------------------------------------------
O(1) purely with queues
**Note that I truly only use the allowed queue operations.** While I use `LinkedList`, I'm not using it as such. I only use it because in Java, `Queue` is only an interface and there is no class `Queue` (see [All Known Implementing Classes](https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html)).

What I do is I that I **simulate** a linked list stack purely with queues. Each queue only has two elements: an integer at the front and another queue at the back (that's where the remaining integers/queues live).

**Yes, I know this is silly :-)**  
Then again, forbidding to use stacks/vectors/etc is silly to begin with. Also, it's not actually silly if you consider that it's O(1) and thus much *better* than the usual O(n) solutions (and btw I did also write [some of those](https://leetcode.com/discuss/39814/easy-java-c-python)).

    class MyStack {
    
        private Queue queue;
    
        public void push(int x) {
            Queue q = new LinkedList();     // could be any queue type, see note above
            q.add(x);
            q.add(queue);
            queue = q;
        }
    
        public void pop() {
            queue.remove();
            queue = (Queue) queue.peek();
        }
    
        public int top() {
            return (int) queue.peek();
        }
    
        public boolean empty() {
            return queue == null;
        }
    }

----------------------------------------------------------------------------------------------------
Accepted clean Java solution
      class MyStack {
        Queue<Integer> q = new LinkedList<Integer>();
        
        // Push element x onto stack.
        public void push(int x) {
            q.add(x);
            
            int n = q.size();
            while (n-- > 1)
                q.add(q.poll());
        }
    
        // Removes the element on top of the stack.
        public void pop() {
            q.poll();
        }
    
        // Get the top element.
        public int top() {
            return q.peek();
        }
    
        // Return whether the stack is empty.
        public boolean empty() {
            return q.isEmpty();
        }
    
      }


----------------------------------------------------------------------------------------------------
One Queue Java Solution
    class MyStack {
        Queue<Integer> q = new LinkedList<Integer>();
        
        // Push element x onto stack.
        public void push(int x) {
            q.add(x);
        }
    
        // Removes the element on top of the stack.
        public void pop() {
            int size = q.size();
            for(int i = 1; i < size; i++)
                q.add(q.remove());
            q.remove();
        }
    
        // Get the top element.
        public int top() {
            int size = q.size();
            for(int i = 1; i < size; i++)
                q.add(q.remove());
            int ret = q.remove();
            q.add(ret);
            return ret;
        }
    
        // Return whether the stack is empty.
        public boolean empty() {
            return q.isEmpty();        
        }
    }

----------------------------------------------------------------------------------------------------
Accepted 0ms c++ solution with one queue.
    class Stack {
    public:
        // Push element x onto stack.
        void push(int x) {
    		nums.push(x);
        }
        // Removes the element on top of the stack.
        void pop() {
    		if (!empty()) {
    			int len = nums.size();
    			for (int i = 0; i != len - 1; ++i) {
    				nums.push(nums.front());
    				nums.pop();
    			}
    			nums.pop();
    		}
        }
        // Get the top element.
        int top() {
    		return nums.back();
        }
        // Return whether the stack is empty.
        bool empty() {
    		return nums.empty();
        }
    private:
    	std::queue<int> nums;
    };

Thanks for StefanPochmann to remind me that `back()` is forbidden, so the right solution should be:

    class Stack {
    public:
        // Push element x onto stack.
        void push(int x) {
    		int len = nums.size();
    		nums.push(x);
    		for (int i = 0; i != len; ++i) {
    			nums.push(nums.front());
    			nums.pop();
    		}
        }
        // Removes the element on top of the stack.
        void pop() {
    		nums.pop();
        }
        // Get the top element.
        int top() {
    		return nums.front();
        }
        // Return whether the stack is empty.
        bool empty() {
    		return nums.empty();
        }
    private:
    	std::queue<int> nums;
    };

----------------------------------------------------------------------------------------------------
Is there a faster solution?
I found that almost all solutions are either push time complexity is O(n) every time, or pop time complexity is  O(n) every time.

I wunder is there a faster solution that requires less time complexity in average?

----------------------------------------------------------------------------------------------------
Java Line 26: error: cannot find symbol: method top() why?
y
class Stack {

    Queue<Integer> queue1 = new LinkedList<Integer>();
    Queue<Integer> queue2 = new LinkedList<Integer>();

    // Push element x onto stack.
    public void push(int x) {
        while (!queue1.isEmpty()) {
            int num = queue1.poll();
            queue2.add(num);
        }
        queue1.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
        if (!queue1.isEmpty()) {
            queue1.poll();
            return;
        }
        while (queue2.size() != 1) {
            int num = queue2.poll();
            queue1.add(num);
        }
        queue2.poll();
    }
    
    // Get the top element.
    public int top() {
        if (!queue1.isEmpty()) {
            return queue1.peek();
        }
        while (queue2.size() != 1) {
            int num = queue2.poll();
            queue1.add(num);
        }
        int num = queue2.poll();
        queue1.add(num);
        return num;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue1.isEmpty() && queue2.isEmpty();
    }
}

----------------------------------------------------------------------------------------------------
Java all operations O(1) solution
Build a recursive data structure to simulate a stack.
Each item in the queue is either a number or another queue. The first added element is deep withing this structure:

    start:                  null
    push 1:             [1, null ]
    push 2:         [2, [1, null ] ] 
    push 3:     [3, [2, [1, null ] ] ]
    push 4: [4, [3, [2, [1, null ] ] ] ]
    pop   : queue.pop-front is 4, then queue.pop-front is [3, [2, [1, null ] ] ]
    pop   : queue.pop-front is 3, then queue.pop-front is [2, [1, null ] ]

And the code which needs a few "unsafe" operations in Java 5 Generics (the interface can still be type-safe though, because the structure is well-known and private):

    class MyStack {
        // push to back = add(), peek = peek(), pop from front = poll(), is empty = isEmpty()
        private Queue<Object> queue = null;
        public void push(int x) {
            Queue deeper = queue;
            queue = new LinkedList<Object>();
            queue.add(x);
            queue.add(deeper);
        }
        @SuppressWarnings("unchecked")
        public void pop() {
            // unused variable, just to show what's going on
            int x = (Integer)queue.poll();
            queue = (Queue<Object>)queue.poll();
        }
        public int top() {
            return (Integer)queue.peek();
        }
        public boolean empty() {
            return queue == null;
        }
    }

The main memory usage is still `O(n)` to store the `int` and there's one extra Queue object per item. It's actually a weird linked list implementation with a node being a queue of two items: containing data and next pointer. The recursive structure won't be a problem, because it's just pointers pointing around the heap randomly.

----------------------------------------------------------------------------------------------------
My c++ 0ms, very concise and simple
    class Stack {
    private:
    queue<int> q1,q2;
    public:
        // Push element x onto stack.
        void push(int x) {
            q2.push(x);
            while(!q1.empty()){
                q2.push(q1.front());
                q1.pop();
            }
            swap(q1,q2);
        }
    
        // Removes the element on top of the stack.
        void pop() {
            if(!q1.empty())
            q1.pop();
        }
    
        // Get the top element.
        int top() {
            return q1.front();
        }
    
        // Return whether the stack is empty.
        bool empty() {
            return q1.empty();
        }
    };

----------------------------------------------------------------------------------------------------
Python solution - O(1) (O(n) for push) 48ms
    class Stack:
        # initialize your data structure here.
        def __init__(self):
            self.stack = collections.deque([])
    
        # @param x, an integer
        # @return nothing
        def push(self, x):
            self.stack.append(x)
    
        # @return nothing
        def pop(self):
            for i in range(len(self.stack) - 1):
                self.stack.append(self.stack.popleft())
    
            self.stack.popleft()
    
        # @return an integer
        def top(self):
            return self.stack[-1]
    
        # @return an boolean
        def empty(self):
            return len(self.stack) == 0



----------------------------------------------------------------------------------------------------
Java solution with two queues
class MyStack {


    Queue q1  = new LinkedList();
    Queue q2 = new LinkedList();

    public void push(int x) {
    	if(!q2.isEmpty())
    		q2.add(x);
    	else
    		q1.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
    	if(!q2.isEmpty()){
    		while(q2.size()>1){
            	q1.add(q2.poll());
            }
            q2.poll();
    	}
    	else{
    		while(q1.size()>1){
            	q2.add(q1.poll());
            }
            q1.poll();
    	}
    		
        
    }

    // Get the top element.
    public  int top() {
    	int e = 0 ;
        if(!q2.isEmpty()){
        	
        	while(q2.size()>1){
             	q1.add(q2.poll());
        	 }
        	 e = (int) q2.poll();
        	 q1.add(e);
        }
        else
        {
        	
        	 while(q1.size()>1){
              	q2.add(q1.poll());
        	 }
         	 e = (int) q1.poll();
         	 q2.add(e);
        }
		return e;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        if(q1.isEmpty()&&q2.isEmpty()) return true;
        else return false;
    }
}


----------------------------------------------------------------------------------------------------
0ms C++ solution avoided using .size( )
    class Stack {
        public:
        // Push element x onto stack.
        void push(int x) {
            if( q1.empty() ){ 
                q1.push(x);
                while (!q2.empty()){
                    q1.push(q2.front());
                    q2.pop();
                }
            }
            else{ 
                q2.push(x); 
                while (!q1.empty()){
                    q2.push(q1.front());
                    q1.pop();
                }
            }
        }
    
        // Removes the element on top of the stack.
        void pop() {
            if (!q1.empty()) { q1.pop(); }
            else{ q2.pop(); }
        }
    
        // Get the top element.
        int top() {
            if (!q1.empty()) { return q1.front(); }
            else{ return q2.front(); }
        }
    
        // Return whether the stack is empty.
        bool empty() {
            return q1.empty() && q2.empty();
        }
    private:
        queue<int> q1, q2;
    };

----------------------------------------------------------------------------------------------------
C++ Single Queue Implementation
    class Stack {
    private:
    queue <int> Q;   
    public:
        // Push element x onto stack.
        void push(int x) {
            Q.push(x);
        }
    
        // Removes the element on top of the stack.
        void pop() {
            
            for (int i=0; i<Q.size()-1; i++)
            {
                Q.push(Q.front());
                Q.pop();
            }
            Q.pop(); 
        }
    
        // Get the top element.
        int top() {
            return Q.back();
        }
    
        // Return whether the stack is empty.
        bool empty() {
            return Q.empty();
        }
    };

----------------------------------------------------------------------------------------------------
Java easy understanding solution.  Only push() takes O(n)
The general idea is that we maintain the stack order in the queue.

Assuming the queue "queue" already contains the stack order of previous push.  Then the next push(x) operation could be divided into  steps:

1.  We create a new queue "temp" and offer the value x to it.
2.  Then we offer the values in "queue" into "temp"
3.  We assign "queue" with "temp" (queue=temp)

In this way, the queue maintains the stack order again.

    class MyStack {

    private Queue<Integer> queue = new ArrayDeque<>();

    // Push element x onto stack.
    public void push(int x) {
        Queue<Integer> temp = new ArrayDeque<>();
        temp.offer(x);
        for (int i : queue) temp.offer(i);
        queue = temp;
    }

    // Removes the element on top of the stack.
    public void pop() {
        queue.poll();
    }

    // Get the top element.
    public int top() {
        return queue.peek();
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue.isEmpty();
    }
 }

Hope this can help you guys!

----------------------------------------------------------------------------------------------------
Simple Java Solution (Any improvements to this?)
    class MyStack {
        Queue<Integer> q = new LinkedList<Integer>();
        // Push element x onto stack.
        public void push(int x) {
            q.add(x);
            for (int i = 0; i < q.size() - 1; i++) {
                q.add(q.remove());    
            }
        }
    
        // Removes the element on top of the stack.
        public void pop() {
            q.remove();
        }
    
        // Get the top element.
        public int top() {
            return q.peek();
        }
    
        // Return whether the stack is empty.
        public boolean empty() {
            return q.isEmpty();
        }
    }

Any suggestions as to what could be done to make this better/more efficient or is this it?

----------------------------------------------------------------------------------------------------
C# Simple Solution to rotate Queue to get a Stack
    public class Stack {
        Queue<int> qStack = new Queue<int>();
    
        // Push element x onto stack.
        public void Push(int x) {
            qStack.Enqueue(x);
            for(int i = 0; i < qStack.Count - 1; i++)
                qStack.Enqueue(qStack.Dequeue());
        }
    
        // Removes the element on top of the stack.
        public void Pop() {
            qStack.Dequeue();
        }
    
        // Get the top element.
        public int Top() {
            return qStack.Peek();
        }
    
        // Return whether the stack is empty.
        public bool Empty() {
            return qStack.Count == 0 ? true : false;
        }
    }

----------------------------------------------------------------------------------------------------
C++ STL with only one queue

    class Stack {
    public:
    queue<int> vque;
    void push(int x) {
        int n = vque.size();
        
        vque.push(x);
        for(int i = 0; i < n; i ++)
        {
            int n = vque.front();
            vque.pop();
            vque.push(n);
        }
    }

    // Removes the element on top of the stack.
    void pop() {
        vque.pop();
    }

    // Get the top element.
    int top() {
        return vque.front();
    }

    // Return whether the stack is empty.
    bool empty() {
        return vque.empty();
    }
};

----------------------------------------------------------------------------------------------------
