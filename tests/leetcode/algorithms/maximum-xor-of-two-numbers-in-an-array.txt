1ms Java DP Solution with Detailed Explanation
public int combinationSum4(int[] nums, int target) {
    int[] comb = new int[target + 1];
    comb[0] = 1;
    for (int i = 1; i < comb.length; i++) {
        for (int j = 0; j < nums.length; j++) {
            if (i - nums[j] >= 0) {
                comb[i] += comb[i - nums[j]];
            }
        }
    }
    return comb[target];
}


----------------------------------------------------------------------------------------------------
My 3ms Java DP solution
public class Solution {
    public int combinationSum4(int[] nums, int target) {
        Arrays.sort(nums);
        int[] res = new int[target + 1];
        for (int i = 1; i < res.length; i++) {
	    for (int num : nums) {
	        if (num > i)
		    break;
		else if (num == i)
		    res[i] += 1;
		else
		    res[i] += res[i-num];
	    }
	}
        return res[target];
    }
}


----------------------------------------------------------------------------------------------------
C++ template for ALL Combination Problem Set
class Solution {
public:
    vector<vector<int>> getFactors(int n) {
        vector<vector<int>> result;
        vector<int> path;
        helper(n, 2, path, result);
        return result;
    }
    void helper(int remain, int start, vector<int> path, vector<vector<int>> &result) {
        if (remain == 1) {
            if (path.size() > 1) result.push_back(path);
        } else {
            for (int i = start; i <= remain; ++i) {
                if (remain % i == 0) {
                    path.push_back(i);
                    helper(remain / i, i, path, result);
                    path.pop_back();
                }
            }
        }
    }
};


----------------------------------------------------------------------------------------------------
JAVA recursion solution using HashMap as memory.
public class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    public int combinationSum4(int[] nums, int target) {
        int count = 0;
        if (nums == null || nums.length ==0 || target < 0 ) return 0;
        if ( target ==0 ) return 1;
        if (map.containsKey(target)) return map.get(target);
        for (int num: nums){
            count += combinationSum4(nums, target-num);
        }
        map.put(target, count);
        return count;
    }
}


----------------------------------------------------------------------------------------------------
7-liner in Python, and follow-up question
class Solution(object):
    def combinationSum4WithLength(self, nums, target, length, memo=collections.defaultdict(int)):
        if length <= 0: return 0
        if length == 1: return 1 * (target in nums)
        if (target, length) not in memo: 
            for num in nums:
                memo[target, length] += self.combinationSum4(nums, target - num, length - 1)
        return memo[target, length]


----------------------------------------------------------------------------------------------------
JAVA: follow-up using recursion and memorization.
Map<Integer, Map<Integer,Integer>> map2 = new HashMap<>();
    private int helper2(int[] nums, int len, int target, int MaxLen) {
    	int count = 0;
        if (  len > MaxLen  ) return 0;
        if ( map2.containsKey(target) && map2.get(target).containsKey(len)) { 
        	return map2.get(target).get(len);
        }
        if ( target == 0 )   count++;
        for (int num: nums) {
            count+= helper2(nums, len+1, target-num, MaxLen);
        }
        if ( ! map2.containsKey(target) ) map2.put(target, new HashMap<Integer,Integer>());
        Map<Integer,Integer> mem = map2.get(target);
        mem.put(len, count);
        return count;
    }
       
    public int combinationSum42(int[] nums, int target, int MaxLen) {
        if (nums == null || nums.length ==0 || MaxLen <= 0 ) return 0;
        map2 = new HashMap<>();
        return helper2(nums, 0,target, MaxLen);
    }


----------------------------------------------------------------------------------------------------
6 lines C++ DP solution
    int combinationSum4(vector<int>& nums, int target) {
        vector<int> result(target + 1);
        result[0] = 1;
        for (int i = 1; i <= target; ++i) {
            for (int x : nums) {
                if (i >= x) {
                    result[i] += result[i - x];
                }
            }
        }
        
        return result[target];
    }


----------------------------------------------------------------------------------------------------
Are you kidding me? It is Combination??
<p>&#91;1,1,2&#93; and &#91;2, 1, 1&#93; are two different combinations, never heard this before...<br/>
Mr. Permutation is unhappy and angry~</p>


----------------------------------------------------------------------------------------------------
What if negative numbers are allowed in the given array?
<p>Anyone has concise solution for this case? If we still need to use the same code, it will lead to infinite loop? how to fix it?</p>


----------------------------------------------------------------------------------------------------
A summary of all combination sum problem in LC, C++
practical

----------------------------------------------------------------------------------------------------
Python DP &amp; DFS Solution
class Solution(object):
    def combinationSum4(self, nums, target):
        nums.sort()
        path=[]
        combs=[]
        self.dfs(nums, target, path, combs)
        return len(combs)
    def dfs(self, nums, target, path, combs):
        if target==0:
            combs.append(path)
        for i in xrange(0,len(nums)):
            if nums[i]>target:
                break
            self.dfs(nums, target-nums[i], path+[nums[i]], combs)

----------------------------------------------------------------------------------------------------
My 0ms C++ DP solution
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        int n = nums.size();
        int f[target + 1] = {0};
        f[0] = 1;
        for (int i = 0; i <= target; ++i) {
            if (f[i] == 0) {
                continue;
            }
            for (int j = 0; j < n; ++j) {
                int t = i + nums[j];
                if (t <= target) {
                    f[t] += f[i];
                }
            }
        }
        return f[target];
    }
};


----------------------------------------------------------------------------------------------------
Clean three solutions in C++
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) 
    {
        int arr[target+1]{1, 0};
        for(int i = 1, size = nums.size(); i <= target; ++i)
            for(int j = 0; j < size; ++j)
                if(i>=nums[j]) arr[i] += arr[i-nums[j]];
        return arr[target];
    }
};


----------------------------------------------------------------------------------------------------
Simple Java DP
public class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] ways = new int[target + 1];
        ways[0] = 1;
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i - nums[j] >= 0) {
                    ways[i] += ways[i - nums[j]];
                }
            }
        }
        return ways[target];
    }
}

----------------------------------------------------------------------------------------------------
C++ O(n*target) DP solution with idea sharing, similar to coin change problem
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        if (nums.size() == 0 || target <= 0) return 0;
        vector<int> dp(target + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= target; ++i) 
            for (int j = 0; j < nums.size(); ++j) 
                if (nums[j] <= i) dp[i] += dp[i - nums[j]];
        return dp[target];
    }
};


----------------------------------------------------------------------------------------------------
Python solution DP way to do BFS 56ms
class Solution(object):
    def combinationSum4(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return 0
        start = min(nums)
        if start > target:
            return 0
        # record number of combinations for i
        dp = [1] + [0] * target
        for i in range(len(dp)):
            # skip numbers that have no combinations
            if dp[i] != 0:
                for n in nums:
                    if i + n < len(dp):
                        dp[i + n] += dp[i]
        return dp[-1]


----------------------------------------------------------------------------------------------------
DP solution (Java)
public int combinationSum4(int[] nums, int target) 
    {
        if (target <= 0) return 0;
        
        Arrays.sort(nums);
        int[] count = new int[target+1];
        count[0] = 1;
        for (int i=1; i<=target; i++)
        {
            for (int num : nums)
            {
                if (num > i) break;
                count[i] += count[i-num];
            }
        }
        return count[target];
    }


----------------------------------------------------------------------------------------------------
Why static array cannot be used here in C++?
class Solution {
private:
    unordered_map<int, int> map;
public:
    int combinationSum4(vector<int>& nums, int target) {
        if(nums.empty() || target<0) return 0;
        if(target == 0) return 1;
        if(map.count(target)) return map[target];
        long count = 0;
        for(int i = 0; i < nums.size(); ++i)
            count += combinationSum4(nums, target-nums[i]);
        return map[target] = count;
    }
};


----------------------------------------------------------------------------------------------------
C++ very simple DP soultion
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        int n = (int)nums.size();
        if (n == 0) return 0;
        vector<int> dp(target + 1);
        dp[0] = 1;
        for (int i = 1; i <= target; i++)   {
            for (int v: nums) {
                if (i - v < 0) continue;
                dp[i] += dp[i - v];
            }
        }
        return dp[target];
    }
};

----------------------------------------------------------------------------------------------------
Clean 0ms DP C++ Solution with good expalanation (two implementation flavors)
    int combinationSum4(vector<int>& nums, int target) {
        int dp[target+1];
        for (int i=0; i<=target; i++) dp[i] = 0;
        dp[0] = 1;
        for (int i=0; i<=target; i++) {
            for (int j=0; j<nums.size(); j++) {
                int next = i + nums[j];
                if (next <= target) dp[next] += dp[i];
            }
        }
        return dp[target];
    }


----------------------------------------------------------------------------------------------------
