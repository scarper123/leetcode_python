Simple Solution
        public static String intToRoman(int num) {
    		String M[] = {"", "M", "MM", "MMM"};
    	    String C[] = {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
    	    String X[] = {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
    	    String I[] = {"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
    	    return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];
    	}

----------------------------------------------------------------------------------------------------
My java solution easy to understand
Reference:
http://blog.csdn.net/beiyeqingteng/article/details/8547565

public class Solution {
    public String intToRoman(int num) {
        
        int[] values = {1000,900,500,400,100,90,50,40,10,9,5,4,1};
        String[] strs = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
        
        StringBuilder sb = new StringBuilder();
        
        for(int i=0;i<values.length;i++) {
            while(num >= values[i]) {
                num -= values[i];
                sb.append(strs[i]);
            }
        }
        return sb.toString();
    }
}

----------------------------------------------------------------------------------------------------
Two lines can do the job
String[] romanPieces={"","I","II","III","IV","V","VI","VII","VIII","IX",
						"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC",
						"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM",
						"","M","MM","MMM","MMMM"};
return romanPieces[num/1000+30]+romanPieces[(num/100)%10+20]
					+romanPieces[(num/10)%10+10]+romanPieces[num%10];

----------------------------------------------------------------------------------------------------
Simple JAVA solution
    public String intToRoman(int num) {
        String M[] = {"", "M", "MM", "MMM"};
        String C[] = {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
        String X[] = {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
        String I[] = {"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
        return M[num/1000] + C[(num%1000)/100]+ X[(num%100)/10] + I[num%10];
    }

----------------------------------------------------------------------------------------------------
Share My Python Solution 96ms
    M = ["", "M", "MM", "MMM"];
    C = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"];
    X = ["", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"];
    I = ["", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"];
    return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10];

----------------------------------------------------------------------------------------------------
Easy to understand Java solution
public class Solution {

    public enum Type{
        M(1000),CM(900),D(500),CD(400),C(100),XC(90),L(50),XL(40),X(10),IX(9),V(5),IV(4),I(1);
        private final int value;
        Type(int value) {
            this.value = value;
        }
    };
    public String intToRoman(int num) {
        StringBuilder output = new StringBuilder();
        for (Type t:Type.values()) {
            while (num>=t.value) {
                output.append(t);
                num -= t.value;
            }
        }
        return output.toString();
    }

}

----------------------------------------------------------------------------------------------------
Sharing my really simple solution with explanation
    string intToRoman(int num) {
        string table[4][10] = {{"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"},
                               {"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"},
                               {"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"},
                               {"", "M", "MM", "MMM"}
                              };
        string result;
        int count = 0;
        while(num > 0){
            int temp = num % 10;
            result = table[count][temp] + result;
            num /= 10;
            count++;
        }
        return result;
    }

The basic idea is really simple: replace every digit in num by roman numerals.

For example, we have a num: 2438.

2 --> "MM"

4 --> "CD"

3 --> "XXX"

8 --> "VIII"

Then the result is "MMCDXXXVIII".

----------------------------------------------------------------------------------------------------
How to improve code?
I know the easy way of solving this problem is using **23 case** statements (10 for numbers [1-10], 10 for [10-100], 10 for [1000-3000]). But the code does not look good and it's getting bit long. I'm thinking even applying the rules for converting may also make the code complex. Any suggestions? 

----------------------------------------------------------------------------------------------------
Share my iterative Solution
    public String intToRoman(int num) {
        int[] weights={1000,900,500,400,100,90,50,40,10,9,5,4,1};
        String[] tokens={"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
        StringBuilder rs=new StringBuilder("");
        int start=0;
        while(num>0){
            for(int i=start;i<13;i++){
                if(num>=weights[i]){
                    num-=weights[i];
                    rs.append(tokens[i]);
                    break;
                }
                start=i+1; // skip those impossible check, make it faster
            }
        }
        return rs.toString();
    }

----------------------------------------------------------------------------------------------------
Esay C++ solution 43ms
    class Solution {
    public:
    	const static string THOUS[];
    	const static string HUNDS[];
    	const static string TENS[];
    	const static string ONES[];
        string intToRoman(int num) {
    		string result;
    		result += THOUS[(int)(num/1000)%10];
    		result += HUNDS[(int)(num/100)%10];
    		result += TENS[(int)(num/10)%10];
    		result += ONES[num%10];
    		return result;
        }
    };
    
    const string Solution::THOUS[]	= {"","M","MM","MMM"};
    const string Solution::HUNDS[]	= {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
    const string Solution::TENS[]	= {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
    const string Solution::ONES[]	= {"","I","II","III","IV","V","VI","VII","VIII","IX"};

----------------------------------------------------------------------------------------------------
Python simple solution.
        
    def intToRoman1(self, num):
        values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ]
        numerals = [ "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" ]
        res, i = "", 0
        while num:
            res += (num//values[i]) * numerals[i]
            num %= values[i]
            i += 1
        return res
        
    def intToRoman(self, num):
        values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ]
        numerals = [ "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" ]
        res = ""
        for i, v in enumerate(values):
            res += (num//v) * numerals[i]
            num %= v
        return res

----------------------------------------------------------------------------------------------------
My solutions in JAVA

    public String intToRoman(int num) {
        String data[] = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
        int value[] = {1000,900,500,400,100,90,50,40,10,9,5,4,1}, base = -1;
        StringBuilder result = new StringBuilder();

        for(int i = 0;i < data.length;i++){
            if((base=num/value[i])!=0){
                while(base--!=0)result.append(data[i]);
                num=num%value[i];
            }
        }
        return result.toString();
    }


----------------------------------------------------------------------------------------------------
The information is insufficient for this question
For example: how do you spell 1999 in roman?
MIM or MCMXCIX?

----------------------------------------------------------------------------------------------------
Straight forward Java recursive solution
    public class Solution {
        public String intToRoman(int num) {
            if (num>=1000) {
                return ("M"+intToRoman(num-1000));
            } else if (num>=900) {
                return ("CM"+intToRoman(num-900));
            } else if (num>=500) {
                return ("D"+intToRoman(num-500));
            } else if (num>=400) {
                return ("CD"+intToRoman(num-400));
            } else if (num>=100) {
                return ("C"+intToRoman(num-100));
            } else if (num>=90) {
                return ("XC"+intToRoman(num-90));
            } else if (num>=50) {
                return ("L"+intToRoman(num-50));
            } else if (num>=40) {
                return ("XL"+intToRoman(num-40));
            } else if (num>=10) {
                return ("X"+intToRoman(num-10));
            } else if (num>=9) {
                return ("IX"+intToRoman(num-9));
            } else if (num>=5) {
                return ("V"+intToRoman(num-5));
            } else if (num>=4) {
                return ("IV"+intToRoman(num-4));
            } else if (num>=1) {
                return ("I"+intToRoman(num-1));
            }
            return ("");
        }
    }

----------------------------------------------------------------------------------------------------
My java solution



        String res = "";
        String[] c = new String[]{"I","IV","V","IX","X","XL","L","XC","C","CD","D","CM","M"};
        int[] n = new int[]{1,4,5,9,10,40,50,90,100,400,500,900,1000};
        int i = 12;
        while(num > 0 && i>=0){
            if(num >= n[i]){
                res += c[i];
                num -= n[i];
            }else{
                i--;
            }
        }
        return res;

----------------------------------------------------------------------------------------------------
An accepted answer in Python using s.replace()
runtime:168 ms

    class Solution:
   
        # @return a string
        def intToRoman(self, num):
            result = num//1000 *'M' + num%1000//100*'C' + \
                         num%1000%100//10*'X' + num%1000%100%10*'I'

            result = result.replace('IIIIIIIII', 'IX')
            result = result.replace('IIIII','V')
            result = result.replace('IIII' , 'IV')
            result = result.replace('XXXXXXXXX', 'XC')
            result = result.replace('XXXXX' , 'L')
            result = result.replace('XXXX' , 'XL')
            result = result.replace('CCCCCCCCC', 'CM')
            result = result.replace('CCCCC', 'D')
            result = result.replace('CCCC', 'CD')
            return (result)

----------------------------------------------------------------------------------------------------
My easy understanding solution.

    string intToRoman(int num) 
    {   
        string s;  
    
        while (num > 0)
        {   
            if (num >= 1000) {s += "M"; num-=1000; continue;}
            if (num >= 900)  {s += "CM"; num-=900; continue;}
            if (num >= 500)  {s += "D"; num-=500; continue;}
            if (num >= 400)  {s += "CD"; num-=400; continue;}
            if (num >= 100)  {s += "C"; num-=100; continue;}
            if (num >= 90)   {s += "XC"; num-=90; continue;}
            if (num >= 50)   {s += "L"; num-=50; continue;}
            if (num >= 40)   {s += "XL"; num-=40; continue;}
            if (num >= 10)   {s += "X"; num-=10; continue;}
            if (num >= 9)    {s += "IX"; num-=9; continue;}
            if (num >= 5)    {s += "V"; num-=5; continue;}
            if (num >= 4)    {s += "IV"; num-=4; continue;}
            if (num == 3)    {s += "III"; num-=3; continue;}
            if (num == 2)    {s += "II"; num-=2; continue;}
            if (num == 1)    {s += "I"; num-=1; continue;}
        }   
    
        return s;
    }   


----------------------------------------------------------------------------------------------------
My short java code
    public class Solution {
        
        String[][] base = new String[][]{{"I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"},
                                    {"X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"},
                                    {"C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"},
                                    {"M", "MM", "MMM", "", "", "", "", "", ""}};
        
        public String intToRoman(int num) {
            String r = "";
            for (int i = 0; num != 0; num /= 10, i++) {
                if (num % 10 == 0)
                    continue;
                r = base[i][num % 10-1] + r;
            }
            return r;
        }
    }



----------------------------------------------------------------------------------------------------
My accepted solution in Java using array
The key of my solution is count the num of every digits,and using array to append it.

    public class Solution {
        public String intToRoman(int num) {
            StringBuffer res=new StringBuffer();
            String[] aryC={"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
            String[] aryX={"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
            String[] aryI={"","I","II","III","IV","V","VI","VII","VIII","IX"};
            int Mnums=num/1000;        //1000
            int Cnums=(num%1000)/100;  //100
            int Xnums=(num%100)/10;    //10
            int Inums=num%10;          //1
            for(int i=Mnums;i>0;i--)
            {
                res.append("M");
            }
            res.append(aryC[Cnums]);
            res.append(aryX[Xnums]);
            res.append(aryI[Inums]);
            return res.toString();
        }
    }

----------------------------------------------------------------------------------------------------
A solution applies to numbers in any range
    public class Solution {
        public String intToRoman(int num) {
            return (romanDigit((num / 1000) % 10, "M", "XX", "XX")) + 
                   (romanDigit((num / 100) % 10, "C", "D", "M")) +
                   (romanDigit((num / 10) % 10, "X", "L", "C")) +
                   (romanDigit(num % 10, "I", "V", "X"));
        }
        
        public String romanDigit(int n, String onechar, String fivechar, String tenchar) {
            if (n == 0) return "";
            if (n == 1) return onechar;
            if (n == 2) return onechar + onechar;
            if (n == 3) return onechar + onechar + onechar;
            if (n == 4) return onechar + fivechar;
            if (n == 5) return fivechar;
            if (n == 6) return fivechar + onechar;
            if (n == 7) return fivechar + onechar + onechar;
            if (n == 8) return fivechar + onechar + onechar + onechar;
            if (n == 9) return onechar + tenchar;
            
            return null;
        }
    }


I know the listing way is not so good, but just realized that the patterns are the same and can be summarized as "onechar", "fivechar" and "tenchar", which will simplify the solution a little bit. 

----------------------------------------------------------------------------------------------------
