Java Solution, 3 lines, HashSet
public class Solution {
    public int distributeCandies(int[] candies) {
        Set<Integer> kinds = new HashSet<>();
        for (int candy : candies) kinds.add(candy);
        return kinds.size() >= candies.length / 2 ? candies.length / 2 : kinds.size();
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def distributeCandies(self, candies):
    return min(len(candies) / 2, len(set(candies)))


----------------------------------------------------------------------------------------------------
C++, bitset, beats 99.60%
int distributeCandies(vector<int>& candies) {
        bitset<200001> hash;
        int count = 0;
        for (int i : candies) {
            if (!hash.test(i+100000)) {
               count++;
               hash.set(i+100000);
            }
        }
        int n = candies.size();
        return min(count, n/2);
    }


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Clean Code - 2 Solutions: Set and Sort
class Solution {
public:
    int distributeCandies(vector<int>& candies) {
        size_t kinds = 1;
        sort(candies.begin(), candies.end());
        for (int i = 0; i < candies.size(); i++) {
            kinds += candies[i] != candies[i - 1];
        }
        return min(kinds, candies.size() / 2);
    }
};


----------------------------------------------------------------------------------------------------
Python 1-line
def distributeCandies(self, candies):
	return min(len(candies) / 2,len(set(candies)))

----------------------------------------------------------------------------------------------------
1-line JavaScript O(n) solution using Set
var distributeCandies = function(candies) {
    return Math.min(new Set(candies).size, candies.length / 2);
};


----------------------------------------------------------------------------------------------------
Java 8 one line solution O(n)
public class Solution {
    public int distributeCandies(int[] candies) {
        return Math.min(candies.length / 2, IntStream.of(candies).boxed().collect(Collectors.toSet()).size());
    }
}


----------------------------------------------------------------------------------------------------
Java hashset solution
public int distributeCandies(int[] candies) {
    Set<Integer> set = new HashSet<>();
    for(Integer candie : candies) {
        set.add(candie);
        if(set.size() == candies.length/2) return set.size();
    }
    return Math.min(set.size(), candies.length/2);
}

----------------------------------------------------------------------------------------------------
Java solution beats 99.07%

    public int distributeCandies(int[] candies) {
        int[] b = new int[200001];
        int nonEmptyBucketNo = 0;
        for (int i : candies) if (b[i + 100000]++ == 0) nonEmptyBucketNo++;
        return nonEmptyBucketNo <= candies.length / 2 ? nonEmptyBucketNo : candies.length / 2;
    }


----------------------------------------------------------------------------------------------------
c++ solution
<p>class Solution {<br/>
public:<br/>
int distributeCandies(vector&lt;int&gt;&amp; candies) {<br/>
unordered_set&lt;int&gt; s;<br/>
for (int i : candies) s.insert(i);<br/>
return min(s.size(), candies.size() / 2);<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
C++ 1-liner
int distributeCandies(vector<int>& c) {
    return min(unordered_set<int>(begin(c), end(c)).size(), c.size() / 2);
}


----------------------------------------------------------------------------------------------------
2 solutions base on 1 idea: efficient way, or less line way :D
public int DistributeCandies(int[] candies) {
    return candies.Distinct().ToArray().Length > candies.Length/2 ? candies.Length/2 : candies.Distinct().ToArray().Length;
}

----------------------------------------------------------------------------------------------------
Java 8 Solution: Using Stream
public class Solution {
    public int distributeCandies(int[] candies) {
        int len = candies.length;
        int max = (int)Arrays.stream(candies).distinct().count();
        return Math.min(max, len/2);
    }
}


----------------------------------------------------------------------------------------------------
6 lines Python solution with explanation
class Solution(object):
    def distributeCandies(self, candies):
        amt = len(candies)/2
        s = set(candies)
        if len(s) < amt:
            return len(s)
        else:
            return amt


----------------------------------------------------------------------------------------------------
scala version
  def distributeCandies(candies: Array[Int]): Int = {
    var set = Set.empty[Int]
    for (candy <- candies) set += candy
    if (set.size < candies.length / 2) set.size else candies.length / 2
  }


----------------------------------------------------------------------------------------------------
Java one line solution with stream
long

----------------------------------------------------------------------------------------------------
C# &#91;O(n)&#93;: Pragmatic Approach (Easy to Understand; With Comments)
public int DistributeCandies(int[] candies) {
        
        var uniqueCandies = new Dictionary<int, int>();
        // Count the number of TYPES of candies by adding each type to a list (using a hash).
        foreach (var candy in candies)
        {
            uniqueCandies[candy] = 1;
        }
        
        // Assume that the sister will get one of each TYPE of candy and that her brother gets the rest.
        // (This assumes she gets the maximum possible number of TYPES of candies.)
        int sistersCandies = uniqueCandies.Keys.Count;
        int brothersCandies = candies.Length - sistersCandies;
        
        // The only time she wouldn't get this maximum number of candies is if she has MORE candies than her brother.
        // In this case, she needs to share so that they have at least got the same number of candies.
        // In other words, she splits the difference with her brother.
        int diff = sistersCandies - brothersCandies;
        if (diff <= 0)
        {
            return sistersCandies;
        }
        // Split the difference:
        return sistersCandies - (diff / 2);
        
    }


----------------------------------------------------------------------------------------------------
Ruby solution
def distribute_candies(candies)
  [candies.uniq.size, candies.size / 2].min
end


----------------------------------------------------------------------------------------------------
Java 8 API 1 line solution (no Hash Map)
public class Solution {
    public int distributeCandies(int[] candies) {
        return Math.min(candies.length / 2, (int) Arrays.stream(candies).distinct().count());
    }
}


----------------------------------------------------------------------------------------------------
Java one line
[[topic:post_is_deleted]]

----------------------------------------------------------------------------------------------------
