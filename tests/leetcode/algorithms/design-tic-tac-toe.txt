Accepted Java O(n) solution in 5 lines
The idea is simple. It creates a size 26 int arrays as buckets for each letter in alphabet. It increments the bucket value with String s and decrement with string t. So if they are anagrams, all buckets should remain with initial value which is zero. So just checking that and return

    public class Solution {
        public boolean isAnagram(String s, String t) {
            int[] alphabet = new int[26];
            for (int i = 0; i < s.length(); i++) alphabet[s.charAt(i) - 'a']++;
            for (int i = 0; i < t.length(); i++) alphabet[t.charAt(i) - 'a']--;
            for (int i : alphabet) if (i != 0) return false;
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
2 C++ Solutions with Explanations
----------
**Hash Table**

This idea uses a hash table to record the times of appearances of each letter in the two strings `s` and `t`. For each letter in `s`, it increases the counter by `1` while for each letter in `t`, it decreases the counter by `1`. Finally, all the counters will be `0` if they two are anagrams of each other.

The first implementation uses the built-in `unordered_map` and takes 36 ms.

    class Solution {
    public:
        bool isAnagram(string s, string t) {
            if (s.length() != t.length()) return false;
            int n = s.length();
            unordered_map<char, int> counts;
            for (int i = 0; i < n; i++) {
                counts[s[i]]++;
                counts[t[i]]--;
            }
            for (auto count : counts)
                if (count.second) return false;
            return true;
        }
    };

Since the problem statement says that "the string contains only lowercase alphabets", we can simply use an array to simulate the `unordered_map` and speed up the code. The following implementation takes 12 ms.

    class Solution {
    public:
        bool isAnagram(string s, string t) {
            if (s.length() != t.length()) return false;
            int n = s.length();
            int counts[26] = {0};
            for (int i = 0; i < n; i++) { 
                counts[s[i] - 'a']++;
                counts[t[i] - 'a']--;
            }
            for (int i = 0; i < 26; i++)
                if (counts[i]) return false;
            return true;
        }
    };

----------
**Sorting**

For two anagrams, once they are sorted in a fixed order, they will become the same. This code is much shorter (this idea can be done in just 1 line using Python as [here][1]). However, it takes much longer time --- 76 ms in C++.

    class Solution {
    public:
        bool isAnagram(string s, string t) { 
            sort(s.begin(), s.end());
            sort(t.begin(), t.end());
            return s == t; 
        }
    };

  [1]: https://leetcode.com/discuss/49372/python-1-line-solution-88ms

----------------------------------------------------------------------------------------------------
Share my java solution
        public class Solution {
        public boolean isAnagram(String s, String t) {
            if(s.length()!=t.length()){
                return false;
            }
            int[] count = new int[26];
            for(int i=0;i<s.length();i++){
                count[s.charAt(i)-'a']++;
                count[t.charAt(i)-'a']--;
            }
            for(int i:count){
                if(i!=0){
                    return false;
                }
            }
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
Python solutions (sort and dictionary).
        
    def isAnagram1(self, s, t):
        dic1, dic2 = {}, {}
        for item in s:
            dic1[item] = dic1.get(item, 0) + 1
        for item in t:
            dic2[item] = dic2.get(item, 0) + 1
        return dic1 == dic2
        
    def isAnagram2(self, s, t):
        dic1, dic2 = [0]*26, [0]*26
        for item in s:
            dic1[ord(item)-ord('a')] += 1
        for item in t:
            dic2[ord(item)-ord('a')] += 1
        return dic1 == dic2
        
    def isAnagram3(self, s, t):
        return sorted(s) == sorted(t)

----------------------------------------------------------------------------------------------------
Simple fast java solution (beats 97%)
    public boolean isAnagram(String s, String t) {
        
        int[] charsMap = new int['z'-'a'+1];
        
        for(char c: s.toCharArray()) {
            int pos = c - 'a';
            charsMap[pos]++;
        }
        
        for(char c: t.toCharArray()) {
            int pos = c - 'a';
            charsMap[pos]--;
        }
        
        for(int count: charsMap) {
            if(count != 0) {
                return false;
            }
        }
        
        return true;
    }

----------------------------------------------------------------------------------------------------
Jave simple and efficient solution
    public boolean isAnagram(String s, String t) {
            if(s == null || t == null || s.length() != t.length()) return false;
            int[] count = new int[26];
            int len = t.length();
            for(int i = 0; i < len; i++) {
                count[t.charAt(i) - 'a']++;
            }
            for(int i = 0; i < len; i++) {
                char c = s.charAt(i);
                if(count[c - 'a'] > 0) {
                    count[c - 'a']--;
                } else {
                    return false;
                }
            }
            return true;
        }

----------------------------------------------------------------------------------------------------
0ms C++solution,O(n)time
      bool isAnagram(string s, string t) {
        int alp[26]={};
        for (int i = 0; i < s.length(); i++) 
            alp[s.at(i) - 'a']++;
        for (int i = 0; i < t.length(); i++)
            alp[t.at(i) - 'a']--;
        for (int i=0;i<26;i++)
            if (alp[i] != 0) 
                return false;
            return true;
       }

----------------------------------------------------------------------------------------------------
Java solution using sort
    public class Solution {
    public boolean isAnagram(String s, String t) 
    {
        char[] sChar = s.toCharArray();
        char[] tChar = t.toCharArray();
        
        Arrays.sort(sChar);
        Arrays.sort(tChar);
        
        return Arrays.equals(sChar, tChar);   
    }
}

----------------------------------------------------------------------------------------------------
C array&#91;26&#93; simple solution
use array[26] and update the array

    bool isAnagram(char* s, char* t) {
        if(s==NULL && t==NULL) return true;
        if(strlen(s) != strlen(t)) return false;
        
        int a[26]={0};
        for(int i=0;i<strlen(s);i++){
            a[s[i]-'a']++;
            a[t[i]-'a']--;
        }
    
        for(int i=0;i<26;i++){
            if(a[i]<0) return false;
        }
        return true;
    }

----------------------------------------------------------------------------------------------------
9ms Java solution
public class Solution {
    
    public boolean isAnagram(String s, String t) {
        
        if(s.length() != t.length()) {
            return false;
        }
        
        int[] count = new int[26];

        for(int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            count[t.charAt(i) - 'a']--;
        }
        
        for(int x : count) {
            if(x != 0) return false;
        }
        
        return true;
    }
}

----------------------------------------------------------------------------------------------------
Java O(n) solution for strings of arbitrary characters
The idea is to count how much of each character strings contain. If two strings are anagrams, they should contain the equal number of particular characters. Size of array is chosen according to the size of ASCII table.

       public class Solution {
            public boolean isAnagram(String s, String t) {
                if (s.length()!=t.length()) return false;
                int[] c=new int[256];
                for (int i=0; i<s.length(); ++i){
                    c[s.charAt(i)]++; 
                    c[t.charAt(i)]--;
                }
                
                for (int i=0; i<256; ++i){
                    if (c[i]!=0) return false;
                }
                return true;
            }
        }

----------------------------------------------------------------------------------------------------
My C++ Solution
    class Solution {
    public:
        bool isAnagram(string s, string t) {
            if(s.size() != t.size()) return false;
            int a[26] = {0};
            for(int i = 0; i < s.size(); i ++) {
                a[s[i]%26]++;
                a[t[i]%26]--;
            }
            for(int i = 0; i < 26; i++) {
                if(a[i] != 0) return false;
            }
            return true;
        }
    };

----------------------------------------------------------------------------------------------------
Simple Java 4ms solution
    public class Solution {
        public boolean isAnagram(String s, String t) {
            if (s.length() != t.length()) return false;
            char[] cs = s.toCharArray();
            char[] ct = t.toCharArray();
            int[] map = new int[127];
            int count = 0;
            for (int i = 0; i < cs.length; i++) {
                if(++map[cs[i]] == 1) count ++;
                if(--map[ct[i]] == 0) count --;
            }
            return count == 0;
        }
    }

----------------------------------------------------------------------------------------------------
3m fastest java solution
    public class Solution {
        public boolean isAnagram(String s, String t) {
            int length = s.length();
            if(length != t.length()) {
                return false;
            }
            char[] str_s = s.toCharArray();
            char[] str_t = t.toCharArray();
            int[] mask = new int[256];
            for(char c : str_s) {
                mask[c]++;
            }
            for(char c : str_t) {
                if(mask[c] > 0) {
                    mask[c]--;
                } else {
                    return false;
                }
            }
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
The 3 ms fastest  AC for alphabets and 6 ms universal AC for Unicode in Java
    public class Solution {
        //6ms solution for inputs contain unicode characters
        public boolean isAnagram0(String s, String t) {
            if(s==null || t==null || s.length()!=t.length())
                return false;
            char[] sc = s.toCharArray();
            char[] tc = t.toCharArray();
            Arrays.sort(sc);
            Arrays.sort(tc);
            if(new String(sc).equals(new String(tc)))
                return true;
            return false;
        }
        
        //3ms basic ASCII 
        public boolean isAnagram(String s, String t) {
            if(s==null || t==null || s.length()!=t.length())
                return false;
            int[] alphabets = new int[256];
            char[] sc = s.toCharArray();
            char[] tc = t.toCharArray();
            for(char c : sc){
                alphabets[c]++;
            }
            for(char c : tc){
                if(alphabets[c]>0)
                    alphabets[c]--;
                else
                    return false;
            }
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
My solutions in C++, Java, Python, C, C#, JavaScript, and Ruby
C++:

            int c[256] = {};
            for (int i = 0; i < s.size(); i++) { c[s[i]]++; }
            for (int i = 0; i < t.size(); i++) { c[t[i]]--; }
            for (int i = 0; i < 256; i++) {
                if (c[i]) { return false; }
            }
            return true;

Java:


        int[] c = new int[256];
        for (int i = 0; i < s.length(); i++) {
            c[s.charAt(i)]++;
        }
        for (int i = 0; i < t.length(); i++) {
            c[t.charAt(i)]--;
        }
        return Arrays.stream(c).reduce(0, (a, b) -> Math.abs(a) + Math.abs(b)) == 0;

Python:

    return sorted(s) == sorted(t)

C:

    bool isAnagram(char* s, char* t) {
        int c[256];
        for (int i = 0; i < 256; i++) { c[i] = 0; }
        while (*s != '\0') { c[*s++]++; }
        while (*t != '\0') { c[*t++]--; }
        for (int i = 0; i < 256; i++) {
            if (c[i] != 0) {
                return false;
            }
        }
        return true;
    }

C#:

        return new string(s.OrderBy(c => c).ToArray()) == new string(t.OrderBy(c => c).ToArray());

JavaScript:

    return s.split('').sort().toString() === t.split('').sort().toString()

Ruby:

    return s.split('').sort() == t.split('').sort()



----------------------------------------------------------------------------------------------------
3 solutions: sort, hash array and prime.
1.Sort

    public boolean isAnagram(String s, String t) {
        if (s == t || s.equals(t)) {
            return true;
        }
        char[] sArray = s.toCharArray();
        Arrays.sort(sArray);
        String sortedS = new String(sArray);
        char[] tArray = t.toCharArray();
        Arrays.sort(tArray);
        String sortedT = new String(tArray);
        return sortedS.equals(sortedT);
    }

2.Hash Array

    public boolean isAnagram(String s, String t) {
        int[] hash = new int[26];
        for (int i = 0; i < s.length(); i++) {
            hash[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < t.length(); i++) {
            hash[t.charAt(i) - 'a']--;
        }
        for (int i = 0; i < hash.length; i++) {
            if (hash[i] != 0) {
                return false;
            }
        }
        return true;
    }
3.Prime

    private static final int[] PRIMES = new int[]{3, 5, 7, 11 ,13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
            73, 79, 83, 89, 97, 101, 107};
    public boolean isAnagram(String s, String t) {
        return hash(s) == hash(t);
    }

    private long hash(String s) {
        long hash = 1;
        for (int i = 0; i < s.length(); i++) {
            hash *= PRIMES[s.charAt(i) - 'a'];
        }
        return hash;
    }

----------------------------------------------------------------------------------------------------
My Java Solution (8ms)
public class Solution {

    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length() ) return false;
        int[] alphabet = new int[26];
        for(int i = 0; i< 26; i++) {
            alphabet[i] = 0;
        }
        for(int i = 0; i < s.length(); i++) {
            alphabet[s.charAt(i) - 'a']++;
        }
        for(int i = 0; i < t.length(); i++) {
            alphabet[t.charAt(i) - 'a']--;
            if(alphabet[t.charAt(i) -'a'] < 0) return false;
        }
        return true;
            
        
    }
}

----------------------------------------------------------------------------------------------------
Simple C++ solution. O(n) time O(1) space
class Solution {
public:
    bool isAnagram(string s, string t) {
        
        if(s.length() != t.length())
            return false;
            
        int count[26] = {0};    
            
        for(int i=0;i<s.length();i++)
        {
            count[s[i]-'a']++;
            count[t[i]-'a']--;
        }
        
        for(int i=0;i<26;i++)
            if(count[i] != 0)
                return false;
        
        return true;        
    }
};

----------------------------------------------------------------------------------------------------
My easy ac JAVA solution
    public boolean isAnagram(String s, String t) {
        char[] schar = s.toCharArray();
        char[] tchar = t.toCharArray();
        Arrays.sort(schar);
        Arrays.sort(tchar);
        
        String s1 = new String(schar);
        String s2 = new String(tchar);
        if(s1.equals(s2)) return true;
        else return false;
    }


----------------------------------------------------------------------------------------------------
