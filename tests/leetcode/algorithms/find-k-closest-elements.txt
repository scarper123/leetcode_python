C++ O(N) solution
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        vector<TreeNode*> stk;
        for (int i = 0; i < nums.size(); ++i)
        {
            TreeNode* cur = new TreeNode(nums[i]);
            while (!stk.empty() && stk.back()->val < nums[i])
            {
                cur->left = stk.back();
                stk.pop_back();
            }
            if (!stk.empty())
                stk.back()->right = cur;
            stk.push_back(cur);
        }
        return stk.front();
    }
};


----------------------------------------------------------------------------------------------------
Java solution, recursion
public class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if (nums == null) return null;
        return build(nums, 0, nums.length - 1);
    }
    
    private TreeNode build(int[] nums, int start, int end) {
        if (start > end) return null;
        
        int idxMax = start;
        for (int i = start + 1; i <= end; i++) {
            if (nums[i] > nums[idxMax]) {
                idxMax = i;
            }
        }
        
        TreeNode root = new TreeNode(nums[idxMax]);
        
        root.left = build(nums, start, idxMax - 1);
        root.right = build(nums, idxMax + 1, end);
        
        return root;
    }
}


----------------------------------------------------------------------------------------------------
&#91;Java&#x2F;C++&#93; Simple recursive method.
   TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return helper(nums, 0, nums.size() - 1);
    }
    
    //max_index denotes the index of the maximum number in range [left, right]
    TreeNode* helper(vector<int>& nums, int left, int right){
        if(left>right)return NULL;
        
        int max_index = left;
        for(int i = left; i<=right; i++){
            if(nums[i] > nums[max_index])max_index = i; 
        }
        
        TreeNode* root = new TreeNode(nums[max_index]);
        root->left = helper(nums, left, max_index - 1);
        root->right = helper(nums, max_index + 1, right);
        return root;
    }


----------------------------------------------------------------------------------------------------
C++ 9 lines O(n log n) map, plus stack with binary search
TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
    vector<TreeNode*> s { new TreeNode(nums[0]) };
    for (int i = 1; i < nums.size(); ++i) {
        TreeNode* cur = new TreeNode(nums[i]);
        auto it = upper_bound(s.rbegin(), s.rend(), cur, 
                              [](const TreeNode* a, const TreeNode* b) { return a->val < b->val; });
        if (it != s.rend()) (*it)->right = cur;
        if (it != s.rbegin()) cur->left = *next(it, -1);
        s.resize(distance(it, s.rend()));
        s.push_back(cur);
    }
    return s.front();
}


----------------------------------------------------------------------------------------------------
Python Simple DFS
def constructMaximumBinaryTree(self, nums):   
    dummy = TreeNode(None)
    def d(root, nums):
        if not nums:
            return 
        i = nums.index(max(nums))
        root.val = max(nums)
        if nums[:i]:
            root.left = TreeNode(None)
            d(root.left, nums[:i])
        if nums[i+1:]:
            root.right = TreeNode(None)
            d(root.right, nums[i+1:])
    d(dummy, nums)
    return dummy

----------------------------------------------------------------------------------------------------
Concise Python Solution with Explanation
class Solution(object):
    def constructMaximumBinaryTree(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        if not nums:
            return None

        i = nums.index(max(nums))

        node = TreeNode(nums[i])

        node.left = self.constructMaximumBinaryTree(nums[:i])
        node.right = self.constructMaximumBinaryTree(nums[i + 1:])

        return node


----------------------------------------------------------------------------------------------------
Swift 3 DFS recursive solution
func constructMaximumBinaryTree(_ nums: [Int]) -> TreeNode? {
    if nums.isEmpty {
        return nil
    }
    return helper(nums, 0, nums.count - 1)
}

func helper(_ nums: [Int], _ left: Int, _ right: Int) -> TreeNode? {
    if left == right {
        return TreeNode(nums[left])
    } else if left > right {
        return nil
    }
    var i = left, peak = 0, index = i
    while i <= right {
        if nums[i] > peak {
            peak = nums[i]
            index = i
        }
        i += 1
    }
    let root = TreeNode(nums[index])
    root.left = helper(nums, left, index - 1)
    root.right = helper(nums, index + 1, right)
    return root
}




----------------------------------------------------------------------------------------------------
Java&#x2F;Python Straight Forward Solution
def constructMaximumBinaryTree(self, nums):
        if not nums:
            return None
        root, maxi = TreeNode(max(nums)), nums.index(max(nums))
        root.left = self.constructMaximumBinaryTree(nums[:maxi])
        root.right = self.constructMaximumBinaryTree(nums[maxi + 1:])
        return root


----------------------------------------------------------------------------------------------------
Very simple tree insertion. No need recursion.
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return build(nums,0,nums.size()-1);
    }
    
    TreeNode* build(const vector<int>& nums, int left, int right){
        if(left>right) return nullptr;
        else if(left==right)   return new TreeNode(nums[left]);
        else{
            int L=-1, M=left, R=-1; //set index to -1 if not found
            for(int i=left+1; i<=right; i++){
                if(nums[i]>nums[M]){
                    L = M;
                    M = i;
                    R = -1;
                }
                else if(R==-1 || nums[i]>nums[R])
                    R = i;
            }
            // e.g. nums=[3,6,2,1,7,0,5,4]
            // L=1(nums[L]=6), M=4(nums[M]=7), R=6(nums[R]=5)
            
            TreeNode* n = new TreeNode(nums[M]);
            if(L!=-1){
                n->left = new TreeNode(nums[L]);
                n->left->left = build(nums,left,L-1);
                n->left->right = build(nums,L+1,M-1);
            }
            if(R!=-1){
                n->right = new TreeNode(nums[R]);
                n->right->left = build(nums,M+1,R-1);
                n->right->right = build(nums,R+1,right);
            }
            return n;
        }
    }


----------------------------------------------------------------------------------------------------
another way to recursion
public class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        if(nums == null) return null;
        TreeNode root = null;
        for(int i: nums)
            root = helper(root,i);
        return root;
    }
    
    private TreeNode helper(TreeNode x, int i){
        if(x == null) return new TreeNode(i);
        if(x.val > i) 
            x.right = helper(x.right,i);
        else
        {
            TreeNode root = new TreeNode(i);
            root.left = x;
            return root;
        }
        return x;
    }
}


----------------------------------------------------------------------------------------------------
Two C++ solution with explanation O(n)time O(1)space no recursion And O(n^2) recursion
//O(n^2) method
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if(nums.size()==0)
            return nullptr;
        return helpBuildTree(nums,0,nums.size()-1);
    }
    TreeNode* helpBuildTree(vector<int>& nums,int left,int right) {
        if(left>right)
            return nullptr;
        int maxIndex=left,maxNum=nums[left];
        for(int i=left+1;i<=right;++i)
        {
            if(nums[i]>maxNum)
            {
                maxNum=nums[i];
                maxIndex=i;
            }
        }
        //cout<<maxNum<<" ";
        TreeNode *head=new TreeNode(maxNum);
        head->left=helpBuildTree(nums,left,maxIndex-1);
        head->right=helpBuildTree(nums,maxIndex+1,right);
        return head;
        
    }


----------------------------------------------------------------------------------------------------
Java simple recursive solution with explanation
public class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return construct(nums, 0, nums.length - 1);    
    }
    
    private TreeNode construct(int[] nums, int lo, int hi) {
        if(hi < lo) {
            return null;
        }
        
        int maxIndex = findMaxIndex(nums, lo, hi);
        
        TreeNode node = new TreeNode(nums[maxIndex]);
        node.left = construct(nums, lo, maxIndex - 1);
        node.right = construct(nums, maxIndex + 1, hi);
        
        return node;
    }
    
    private int findMaxIndex(int[] nums, int lo, int hi) {
        int max = nums[lo], maxIndex = lo;
        for(int i = lo + 1; i <= hi; i++) {
           if(nums[i] > max) {
               max = nums[i];
               maxIndex = i;
           }
        }
        
        return maxIndex;
    }
}


----------------------------------------------------------------------------------------------------
Python recursive solution
    def constructMaximumBinaryTree(self, A):
        """
        :type A: List[int]
        :rtype: TreeNode
        """
        def getMax(A):
            n=len(A)
            idx=-1
            Maxv=-sys.maxint-1
            for i in xrange(n):
                if Maxv<A[i]:
                    idx=i
                    Maxv=A[i]
            return (idx,Maxv)

        def buildT(A):
            if len(A)==0: return None
            idx,Maxv=getMax(A)
            Node=TreeNode(Maxv)
            Node.left=buildT(A[:idx])
            Node.right=buildT(A[idx+1:])
            return Node
        root=buildT(A)
        return root


----------------------------------------------------------------------------------------------------
Memory Limit Exceed is too harsh.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int n = nums.size();
        
        //vector<vector<int>> dp;
        //vector<vector<int>> dp(n, vector<int>(n, -1));
        
        //for(int i=0;i<n;++i){
        //    dp[i][i] = i;
        //}
        
        //for(int i=0;i<n;++i){
        //    for(int j=i+1;j<n;++j){
         //       if(nums[j] > nums[dp[i][j-1]]){
         //           dp[i][j] = j;
         //       }else{
         //           dp[i][j] = dp[i][j-1];
         //       }
          //  }
        //}
        
        return bt(nums, dp, 0, n-1);
    }
    
    TreeNode* bt(const vector<int>& nums, const vector<vector<int>>& dp, int i, int j){
        std::cout << i << " " << j << std::flush;
        if(i>j)return nullptr;
        if(i==j)return new TreeNode{nums[i]};
        //int k = dp[i][j];
        auto it = max_element(nums.begin()+i, nums.begin()+j+1);
        int k = distance(nums.begin(), it);
        TreeNode* root = new TreeNode{nums[k]};
        if(i<k-1)
            root->left = bt(nums, dp, i, k-1);
        else if(i==k-1)
            root->left = new TreeNode{nums[i]};
        if(k+1<j)
            root->right = bt(nums, dp, k+1, j);
        else if(k+1 == j)
            root->right = new TreeNode(nums[j]);
        return root;
    }
};


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Clean Code
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return construct(nums, 0, nums.size() - 1);
    }

private:
    TreeNode* construct(vector<int>& nums, int lo, int hi) {
        if (lo > hi || lo >= nums.size() || hi < 0) return nullptr;

        int m = lo;
        for (int i = lo; i <= hi; i++) {
            if (nums[i] > nums[m]) {
                m = i;
            }
        }
        
        TreeNode* node = new TreeNode(nums[m]);
        node->left = construct(nums, lo, m - 1);
        node->right = construct(nums, m + 1, hi);
        return node;
    }
};


----------------------------------------------------------------------------------------------------
C++, recursive, average O(nlogn)
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int n = nums.size();
        return helper(nums, 0, n-1);
    }
private:
    TreeNode* helper(vector<int>& nums, int l, int r) {
        if (l > r) return nullptr;
        int idx = l;
        for (int i = l; i <= r; i++) {
            if (nums[i] > nums[idx]) idx = i;
        }
        TreeNode* root = new TreeNode(nums[idx]);
        root->left = helper(nums, l, idx-1);
        root->right = helper(nums, idx+1, r);
        return root;
    }
};


----------------------------------------------------------------------------------------------------
Recursive solution
public TreeNode ConstructMaximumBinaryTree(int[] nums)
{
    return ConstructMaximumBinaryTree(nums, 0, nums.Length - 1);
}

private TreeNode ConstructMaximumBinaryTree(int[] nums, int start, int end)
{
    if (start > end) return null;

    int maxIndex = FindMaxIndex(nums, start, end);

    TreeNode root = new TreeNode(nums[maxIndex]);

    root.left = ConstructMaximumBinaryTree(nums, start, maxIndex - 1);
    root.right = ConstructMaximumBinaryTree(nums, maxIndex + 1, end);

    return root;
}

private int FindMaxIndex(int[] nums, int start, int end)
{
    int maxIndex = -1;
    int max = int.MinValue;
    for (int i = start; i <= end; i++)
    {
        if (nums[i] >= max)
        {
            max = nums[i];
            maxIndex = i;
        }
    }
    return maxIndex;
}


----------------------------------------------------------------------------------------------------
No recursion solution in Java
public class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        Stack<TreeNode> stack = new Stack<>();
        for(int i = 0; i < nums.length; i++) {
            TreeNode cur = new TreeNode(nums[i]);
            while(!stack.empty() && stack.peek().val < nums[i]) {
                TreeNode temp = stack.pop();
                if(stack.empty() || stack.peek().val > nums[i]) {
                    cur.left = temp;
                    break;
                } else {
                    stack.peek().right = temp;
                } 
            }
            stack.push(cur);
        }
        while(!stack.empty()) {
            TreeNode temp = stack.pop();
            if(!stack.empty()) {
                stack.peek().right = temp;
            } else {
                return temp;
            }
        }
        return null;
    }
}


----------------------------------------------------------------------------------------------------
Simple and short recursive C++ solution, 9 lines
TreeNode *constructMaximumBinaryTree(vector<int>& nums) {
    return dnc(nums.begin(), nums.end());
}

TreeNode *dnc(vector<int>::iterator l, vector<int>::iterator r) {
    if (l == r) return nullptr;

    auto m = max_element(l, r);
    auto p = new TreeNode(*m);
    p->left = dnc(l, m);
    p->right = dnc(m + 1, r);
    return p;
}


----------------------------------------------------------------------------------------------------
