Java Binary Search O(log(n)) Shorter Than Others
public class Solution {
    public int singleNonDuplicate(int[] nums) {
        // binary search
        int n=nums.length, lo=0, hi=n/2;
        while (lo < hi) {
            int m = (lo + hi) / 2;
            if (nums[2*m]!=nums[2*m+1]) hi = m;
            else lo = m+1;
        }
        return nums[2*lo];
    }
}


----------------------------------------------------------------------------------------------------
Java Binary Search, short (7l), O(log(n)) w&#x2F; explanations
   public static int singleNonDuplicate(int[] nums) {
        int start = 0, end = nums.length - 1;

        while (start < end) {
            // We want the first element of the middle pair,
            // which should be at an even index if the left part is sorted.
            // Example:
            // Index: 0 1 2 3 4 5 6
            // Array: 1 1 3 3 4 8 8
            //            ^
            int mid = (start + end) / 2;
            if (mid % 2 == 1) mid--;

            // We didn't find a pair. The single element must be on the left.
            // (pipes mean start & end)
            // Example: |0 1 1 3 3 6 6|
            //               ^ ^
            // Next:    |0 1 1|3 3 6 6
            if (nums[mid] != nums[mid + 1]) end = mid;

            // We found a pair. The single element must be on the right.
            // Example: |1 1 3 3 5 6 6|
            //               ^ ^
            // Next:     1 1 3 3|5 6 6|
            else start = mid + 2;
        }

        // 'start' should always be at the beginning of a pair.
        // When 'start > end', start must be the single element.
        return nums[start];
    }


----------------------------------------------------------------------------------------------------
Short, compare nums&#91;i&#93; with nums&#91;i^1&#93;
public int singleNonDuplicate(int[] nums) {
    int lo = 0, hi = nums.length - 1;
    while (lo < hi) {
        int mid = (lo + hi) >>> 1;
        if (nums[mid] == nums[mid ^ 1])
            lo = mid + 1;
        else
            hi = mid;
    }
    return nums[lo];
}

----------------------------------------------------------------------------------------------------
Java Code by using binary search O(log(n))
    while(low < high) {
        int mid = low + (high - low)/2;
        if(nums[mid] != nums[mid+1] && nums[mid] != nums[mid-1])
            return nums[mid];
        else if(nums[mid] == nums[mid+1] && mid % 2 == 0)
            low = mid+1;
        else if(nums[mid] == nums[mid-1] && mid % 2 == 1)
            low = mid+1;
        else
            high = mid-1;
    }
    return nums[low];
}

----------------------------------------------------------------------------------------------------
C++ binary search
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size(), left = 0, right = n - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mid % 2 == 0) {
                if (nums[mid] == nums[mid-1]) right = mid - 2;
                else if (nums[mid] == nums[mid+1]) left = mid + 2;
                else return nums[mid];
            }
            else {
                if (nums[mid] == nums[mid-1]) left = mid + 1;
                else if (nums[mid] == nums[mid+1]) right = mid - 1;
            }
        }
        return nums[left];
    }
};


----------------------------------------------------------------------------------------------------
Ruby oneliner
def single_non_duplicate(nums)
  nums[2 * (0..nums.size/2).bsearch { |i| nums[2*i] != nums[2*i+1] }]
end


----------------------------------------------------------------------------------------------------
Using Collections.binarySearch (for fun)
public int singleNonDuplicate(int[] nums) {
    List list = new ArrayList() {
        public int size() {
            return nums.length;
        }
        public Integer get(int index) {
            return isOff(index) + isOff(index - 1);
        }
        int isOff(int i) {
            return i == size() - 1 || i >= 0 && nums[i] != nums[i ^ 1] ? 1 : 0;
        }
    };
    return nums[Collections.binarySearch(list, 1)];
}

----------------------------------------------------------------------------------------------------
Easy to Understand Java solution O(log n) using Binary Search
public class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        int low =0;
        int high = nums.length -1;
        int mid;
        boolean left;
        boolean leftFirst;
        boolean leftSecond;

        while(low<high)
        {
            mid = low + (high-low)/2;
        
            if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1])
            return nums[mid];
            //conditions to be true if an element is in left side 
            leftFirst = (nums[mid] == nums[mid-1]) && (mid)%2==0; //if its the second occurence of that element 
            leftSecond = (nums[mid] == nums[mid+1]) && (mid)%2==1; //if its the first occurence of that element 
            left = leftFirst||leftSecond;  //if any of the above conditions are true, We will go left
            
            if(left)
                high = mid-1;
            else
                low = mid+1;
        }
        return nums[low];
    }
}


----------------------------------------------------------------------------------------------------
JavaScript solution using Array.find
/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNonDuplicate = function(nums) {
    return nums.find(n => nums.indexOf(n) === nums.lastIndexOf(n))
}


----------------------------------------------------------------------------------------------------
Java Binary Search O(lgN) : clear, easy, explained, no tricks
nums[mid]

----------------------------------------------------------------------------------------------------
Two ways to solve this
  public int singleNonDuplicate(int[] arr) {
        if(arr==null || arr.length==0) {
            return -1;
        }
        
        int i=0,j=arr.length-1;
        while(i<=j) {
            //pivot.
            int pivot = (j-i)/2 + i;
            if(i==j) {
                return arr[pivot];
            }
            if(arr[pivot]==arr[pivot-1]) {
                //left side.
                //find the odd side.
                if((pivot-1)%2!=0) {
                    j = pivot-1;
                }
                else {
                    i = pivot+1;
                }
            }
            else if(arr[pivot]==arr[pivot+1]) {
                if((arr.length-1-(pivot+1))%2!=0) {
                    i = pivot+1;
                }
                else {
                    j = pivot-1;
                }
            }
            else
            {
                //last element?
                if(pivot+1==arr.length-1) {
                    return arr[pivot+1];
                }
                else {
                    return arr[pivot];
                }
            }
            
        }
        
        return arr[i];
    }


----------------------------------------------------------------------------------------------------
6 lines simple Python Binary Search
class Solution(object):
    def singleNonDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l, r, n = 1, len(nums), len(nums)
        while l < r:
            mid = (l + r) >> 1
            if mid < n and nums[mid-2]<nums[mid-1]<nums[mid]: return nums[mid-1]
            l, r = [(mid+1,r), (l,mid-1)][(mid&1) ^ (nums[mid-1] != nums[mid-2])]
        return nums[l-1]


----------------------------------------------------------------------------------------------------
Binary Search based approach in Python
class Solution(object):
    def singleNonDuplicate(self, list):
        low, high = 0 , len(list)-1
        while (low<high):
            mid = low + (high-low)/2
            if (list[mid]!=list[mid+1] and list[mid]!=list[mid-1]):
                return list[mid]
            elif (mid%2 ==1 and list[mid]==list[mid-1]):
                low = mid+1
            elif (mid%2 ==0 and list[mid]==list[mid+1]):
                low = mid+1
            else:
                high = mid-1
        return list[low]


----------------------------------------------------------------------------------------------------
Incomplete question - needs and additional constraint
<p>The time complexity is mentioned as O(log n). To meet this, an additional constraint needs to be added in the question: &#34;All repeated numbers appear in pairs in the input.&#34; The examples in the question seem to illustrate this, but the condition is not mentioned in the question itself.</p>
<p>PS: I received this question in a real interview too, and that is how I am aware.</p>


----------------------------------------------------------------------------------------------------
Python in 3 lines.
class Solution(object):
    def singleNonDuplicate(self, nums):
        odd_set =set(nums[0::2])
        even_set =set(nums[1::2])
        return next(iter(odd_set-even_set))


----------------------------------------------------------------------------------------------------
C 3ms solution without while&#x2F;loop.
int comp( const int*l, const int*r )
{
    if( l[0]!=l[1] )
        return -1;
    if( r[0]!=r[1] )
        return 1;
    return 0;
}


int singleNonDuplicate(int* nums, int numsSize) {
    qsort( nums, (numsSize+1)/2, sizeof(nums[0])+sizeof(nums[0]), (int (*)(const void*,const void*)) comp );
    
    return nums[0];
}


----------------------------------------------------------------------------------------------------
Python binary search: easy to understand
class Solution(object):
    def single_non_duplicate(self, nums):
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if (right - left + 1) % 4 == 1:
                if nums[mid] == nums[mid - 1]:
                    right = mid
                elif nums[mid] == nums[mid + 1]:
                    left = mid
                else:
                    # A number which is not equal to its left nor right
                    # is a single number.
                    return nums[mid]
            else:
                if nums[mid] == nums[mid - 1]:
                    left = mid + 1
                elif nums[mid] == nums[mid + 1]:
                    right = mid - 1
                else:
                    return nums[mid]
        return nums[left]


----------------------------------------------------------------------------------------------------
C++ O(logn) easy to understand
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int len=nums.size();
        int start=0;
        int end=len-1;
        while(start<end)
        {
            int mid=start+(end-start)/2;
            bool dir=checkDir(mid, nums);
            if(dir == true) //go right
            {
                start=mid+1;
            }
            else //go left
            {
                end=mid;
            }
        }
        return nums[start];
    }
    
    bool checkDir(int mid,vector<int>& nums)
    {
        if(mid%2==0)
        {
            if(nums[mid]==nums[mid+1])
            {
                return true; //right
            }
            else
                return false;//left
        }
        else
        {
            if(nums[mid]==nums[mid-1])
            {
                return true;//right
            }
            else
                return false; //left
        }
    }
};


----------------------------------------------------------------------------------------------------
Java Solution O(log(n)) time
public class Solution {
    public int singleNonDuplicate(int[] nums) {
        return helper(nums, 0, nums.length-1);
    }
    
    public int helper(int[] nums, int lo, int hi) {
        while(lo <= hi) {
            int mid = (lo+hi)/2;
            if( (mid == 0 || nums[mid] != nums[mid-1]) && (mid == nums.length-1 || nums[mid] != nums[mid+1]) ) return nums[mid];
            if(mid == 0 || nums[mid] == nums[mid-1]) {
                if(mid%2==0) {
                    hi = mid-1;
                } else {
                    lo = mid+1;
                }
            }
            if(mid == nums.length-1 || nums[mid] == nums[mid+1]) {
                if(mid%2==0) {
                    lo = mid+1;
                } else {
                    hi = mid-1;
                }
            }
        }
        return -1;
    }
}

----------------------------------------------------------------------------------------------------
Python One Liner
class Solution(object):
    def singleNonDuplicate(self, nums):
        return [nums[i] for i in range(len(nums)) if nums.count(nums[i]) < 2][0]


----------------------------------------------------------------------------------------------------
