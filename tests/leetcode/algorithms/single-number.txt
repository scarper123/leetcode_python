A java solution based on Priority Queue
If someone understand how priority queue works, then it would be trivial to walk through the codes. 

My question: is that possible to solve this question under the same time complexity without implementing the priority queue?


    public class Solution {
        public ListNode mergeKLists(List<ListNode> lists) {
            if (lists==null||lists.size()==0) return null;
            
            PriorityQueue<ListNode> queue= new PriorityQueue<ListNode>(lists.size(),new Comparator<ListNode>(){
                @Override
                public int compare(ListNode o1,ListNode o2){
                    if (o1.val<o2.val)
                        return -1;
                    else if (o1.val==o2.val)
                        return 0;
                    else 
                        return 1;
                }
            });
            
            ListNode dummy = new ListNode(0);
            ListNode tail=dummy;
            
            for (ListNode node:lists)
                if (node!=null)
                    queue.add(node);
                
            while (!queue.isEmpty()){
                tail.next=queue.poll();
                tail=tail.next;
                
                if (tail.next!=null)
                    queue.add(tail.next);
            }
            return dummy.next;
        }
    }

----------------------------------------------------------------------------------------------------
Sharing my straightforward C++ solution without data structure other than vector
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        if(lists.empty()){
            return nullptr;
        }
        while(lists.size() > 1){
            lists.push_back(mergeTwoLists(lists[0], lists[1]));
            lists.erase(lists.begin());
            lists.erase(lists.begin());
        }
        return lists.front();
    }
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        if(l1 == nullptr){
            return l2;
        }
        if(l2 == nullptr){
            return l1;
        }
        if(l1->val <= l2->val){
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else{
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }

The second function is from Merge Two Sorted Lists. 

The basic idea is really simple. We can merge first two lists and then push it back. Keep doing this until there is only one list left in vector. Actually, we can regard this as an iterative divide-and-conquer solution.

----------------------------------------------------------------------------------------------------
My simple java Solution use recursion
    public static ListNode mergeKLists(ListNode[] lists){
        return partion(lists,0,lists.length-1);
    }

    public static ListNode partion(ListNode[] lists,int s,int e){
        if(s==e)  return lists[s];
        if(s<e){
            int q=(s+e)/2;
            ListNode l1=partion(lists,s,q);
            ListNode l2=partion(lists,q+1,e);
            return merge(l1,l2);
        }else
            return null;
    }

    //This function is from Merge Two Sorted Lists.
    public static ListNode merge(ListNode l1,ListNode l2){
        if(l1==null) return l2;
        if(l2==null) return l1;
        if(l1.val<l2.val){
            l1.next=merge(l1.next,l2);
            return l1;
        }else{
            l2.next=merge(l1,l2.next);
            return l2;
        }
    }

----------------------------------------------------------------------------------------------------
Difference between Priority-Queue and Heap, and C++ implementation
I have seen lots of solutions confuse `priority queue` with `heap`. I find a good [link][1] and list the talk below.

**Concept:**

1.`Heap` is a kind of `data structure`. It is a name for a particular way of storing data that makes certain operations very efficient. We can use a tree or array to describe it.

       18
      /	\
     10	 16
    / \   / \
    9  5  8  12
    
    18, 10, 16, 9, 5, 8, 12

2.`Priority queue` is an `abstract datatype`. It is a shorthand way of describing a particular interface and behavior, and says nothing about the underlying implementation.

A heap is a very good data structure to implement a priority queue. The operations which are made efficient by the heap data structure are the operations that the priority queue interface needs.


**Implementation: c++** 

1.`priority_queue`: we can only get the top element (from ChiangKaiShrek's [solution][2])

    struct compare {
        bool operator()(const ListNode* l, const ListNode* r) {
            return l->val > r->val;
        }
    };
    ListNode *mergeKLists(vector<ListNode *> &lists) { //priority_queue
        priority_queue<ListNode *, vector<ListNode *>, compare> q;
        for(auto l : lists) {
            if(l)  q.push(l);
        }
        if(q.empty())  return NULL;

        ListNode* result = q.top();
        q.pop();
        if(result->next) q.push(result->next);
        ListNode* tail = result;            
        while(!q.empty()) {
            tail->next = q.top();
            q.pop();
            tail = tail->next;
            if(tail->next) q.push(tail->next);
        }
        return result;
    }

2.`make_heap`: we can access all the elements (from my answer for that solution)

    static bool heapComp(ListNode* a, ListNode* b) {
            return a->val > b->val;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) { //make_heap
        ListNode head(0);
        ListNode *curNode = &head;
        vector<ListNode*> v;   
        for(int i =0; i<lists.size(); i++){
            if(lists[i]) v.push_back(lists[i]);
        }
        make_heap(v.begin(), v.end(), heapComp); //vector -> heap data strcture
    
        while(v.size()>0){
            curNode->next=v.front();
            pop_heap(v.begin(), v.end(), heapComp); 
            v.pop_back(); 
            curNode = curNode->next;
            if(curNode->next) {
                v.push_back(curNode->next); 
                push_heap(v.begin(), v.end(), heapComp);
            }
        }
        return head.next;
    }

If there is something wrong, please figure it out. Hoping to learn more about them.


  [1]: http://stackoverflow.com/questions/18993269/difference-between-priority-queue-and-a-heap
  [2]: https://leetcode.com/discuss/21363/brief-c-solution-with-priority_queue

----------------------------------------------------------------------------------------------------
10-line python solution with priority queue
    from Queue import PriorityQueue
    class Solution(object):
        def mergeKLists(self, lists):
            dummy = ListNode(None)
            curr = dummy
            q = PriorityQueue()
            for node in lists:
                if node: q.put((node.val,node))
            while q.qsize()>0:
                curr.next = q.get()[1]
                curr=curr.next
                if curr.next: q.put((curr.next.val, curr.next))
            return dummy.next

----------------------------------------------------------------------------------------------------
108ms python solution with heapq and avoid changing heap size
    def mergeKLists(self, lists):
        from heapq import heappush, heappop, heapreplace, heapify
        dummy = node = ListNode(0)
        h = [(n.val, n) for n in lists if n]
        heapify(h)
        while h:
            v, n = h[0]
            if n.next is None:
                heappop(h) #only change heap size when necessary
            else:
                heapreplace(h, (n.next.val, n.next))
            node.next = n
            node = node.next
    
        return dummy.next




----------------------------------------------------------------------------------------------------
Simple Java Merge Sort
For this problem, use merge sort is simple and fast, I wonder why some guys solve it use PriorityQueue.

I think the complexity is k * n * logk. Because the recursion depth is logK,  and in each level, every element will be compared.

    public ListNode mergeKLists(ListNode[] lists) {
		if (lists == null || lists.length == 0)
			return null;
        return mergeKLists(lists, 0, lists.length - 1);
    }
	private ListNode mergeKLists(ListNode[] lists, int start, int end) {
		if (start == end) {
			return lists[start];
		} else if (start < end){
			int mid = (end - start) / 2 + start;
			ListNode left = mergeKLists(lists, start, mid);
			ListNode right = mergeKLists(lists, mid + 1, end);
			return mergeTwoLists(left, right);
		} else {
			return null;
		}
	}

mergeTwoLists is base on the Merge Two Sorted Lists problem.

----------------------------------------------------------------------------------------------------
Brief C++ solution with priority_queue
We just need to define a comparison struct for ListNodes, then managing the priority\_queue is quite straightforward. After filling the priority\_queue, if it is non-empty, we set the head and tail. Then we repeatedly pop the top off the queue and append that to the tail. If the next node is not null, we push it onto the queue.



    class Solution {
        struct compare {
            bool operator()(const ListNode* l, const ListNode* r) {
                return l->val > r->val;
            }
        };
        
    public:
        ListNode *mergeKLists(vector<ListNode *> &lists) {
            priority_queue<ListNode *, vector<ListNode *>, compare> q;
            for (auto l : lists) {
                if (l) {
                    q.push(l);
                }
            }
            
            if (q.empty()) {
                return NULL;
            }
            
            ListNode* result = q.top();
            q.pop();
            if (result->next) {
                q.push(result->next);
            }

            ListNode* tail = result;            
            while (!q.empty()) {
                tail->next = q.top();
                q.pop();
                tail = tail->next;
                if (tail->next) {
                    q.push(tail->next);
                }
            }
            
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
13-lines in Java
Hi guys!

The approach is standard - PriorityQueue, but I noticed that solutions presented before are kind of a bit long. So that's the concise version. :)

Hope it helps!

----------

    public class Solution {
        public ListNode mergeKLists(List<ListNode> lists) {
            Queue<ListNode> heap = new PriorityQueue(new Comparator<ListNode>(){
                @Override public int compare(ListNode l1, ListNode l2) { 
                    return l1.val - l2.val; 
                }
            });
            ListNode head = new ListNode(0), tail = head;
            for (ListNode node : lists) if (node != null) heap.offer(node);
            while (!heap.isEmpty()) {
                tail.next = heap.poll();
                tail = tail.next;
                if (tail.next != null) heap.offer(tail.next);
            }
            return head.next;
        }
    }

----------------------------------------------------------------------------------------------------
C++ code O(NlogK) in time, O(1) in space, Divide_Conquer
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int k = (int)lists.size();
        if(k==0) return NULL;
        if(k==1) return lists[0];
        return doMerge(lists, 0, (int)lists.size()-1);
    }
    
    
    ListNode* doMerge(vector<ListNode*>& lists, int left, int right) {
        if(left==right) return lists[left];
        else if(left+1==right) return merge2Lists(lists[left], lists[right]);
        ListNode* l1 = doMerge(lists, left, (left+right)/2);
        ListNode* l2 = doMerge(lists, (left+right)/2+1, right);
        return merge2Lists(l1, l2);
    }
    
    
    ListNode* merge2Lists(ListNode* l1, ListNode* l2) {
        if(l1==l2) return l1;
        if(!l1) return l2;
        if(!l2) return l1;
        if(l1->val>l2->val) return merge2Lists(l2, l1);
        ListNode* newl2 = new ListNode(0); newl2->next = l2;
        ListNode* p1 = l1;
        while (p1->next && newl2->next) {
            if (p1->next->val<newl2->next->val) {
                p1 = p1->next;
            } else {
                ListNode* temp = p1->next;
                p1->next = newl2->next;
                newl2->next = newl2->next->next;
                p1->next->next = temp;
                p1 = p1->next;
            }
        }
        if(!p1->next) p1->next = newl2->next;
        delete newl2;
        return l1;
    }

----------------------------------------------------------------------------------------------------
Elegan solution based on a heap of lists ;-)
I convert the vector of lists into an heap and I use it to generate the merged list:

    class Solution {
        
    public:
        
        ListNode *mergeKLists(vector<ListNode *> &lists) {
            
            // Begin and end of our range of elements:
            auto it_begin = begin(lists);
            auto it_end = end(lists);
            
            // Removes empty lists:
            it_end = remove_if(it_begin, it_end, isNull);
            if (it_begin == it_end) return nullptr; // All lists where empty.
            
            // Head and tail of the merged list:
            ListNode *head = nullptr;
            ListNode *tail = nullptr;
            
            // Builds a min-heap over the list of lists:
            make_heap(it_begin, it_end, minHeapPred);
            
            // The first element in the heap is the head of our merged list:
            head = tail = *it_begin;
            
            while (distance(it_begin, it_end) > 1) {
                
                // Moves the heap's front list to its back:
                pop_heap(it_begin, it_end, minHeapPred);
                
                // And removes one node from it:
                --it_end;
                *it_end = (*it_end)->next;
                
                // If it is not empty it inserts it back into the heap:
                if (*it_end) {
                    
                    ++it_end;
                    push_heap(it_begin, it_end, minHeapPred);
                }
                
                // After  the push we have our next node in front of the heap:
                tail->next = *it_begin;
                tail = tail->next;
            }
            
            return head;
        }
        
    private:
        
        // Predicate to remove all null nodes from a vector:
        static bool isNull(const ListNode* a) {
            
            return a == nullptr;
        }
    
        // Predicate to generate a min heap of list node pointers:
        static bool minHeapPred(const ListNode* a,
                                const ListNode* b) {
    
            assert(a);
            assert(b);
            
            return a->val > b->val;
        }
        
    };

----------------------------------------------------------------------------------------------------
A solution use divide-and-conquer algorithm in java
    public ListNode mergeKLists(List<ListNode> lists) {
            int length = lists.size() ;
    
            if(length == 0)
                return null ;
            if(length == 1){
                return lists.get(0) ;
            }
    
            int mid = (length - 1)/2 ;
            ListNode l1 = mergeKLists(lists.subList(0,mid + 1)) ;
            ListNode l2 = mergeKLists(lists.subList(mid + 1,length)) ;
    
            return mergeTowLists(l1,l2) ;
    
        }
    
        public ListNode mergeTowLists(ListNode l1 , ListNode l2){
            ListNode result = new ListNode(0) ;
            ListNode list = result ;
            while(l1 != null && l2 != null){
                if(l1.val < l2.val){
                    list.next = l1 ;
                    l1 = l1.next ;
                }else{
                    list.next = l2 ;
                    l2 = l2.next ;
                }
                list = list.next ;
            }
    
            while(l1 != null){
                list.next = l1 ;
                l1 = l1.next ;
                list = list.next ;
            }
    
            while(l2 != null){
                list.next = l2 ;
                l2 = l2.next ;
                list = list.next ;
            }
    
            return result.next ;
        }

----------------------------------------------------------------------------------------------------
Python 133ms solution

    from operator import attrgetter
    
    class Solution:
        # @param a list of ListNode
        # @return a ListNode
        def mergeKLists(self, lists):
            sorted_list = []
            for head in lists:
                curr = head
                while curr is not None:
                    sorted_list.append(curr)
                    curr = curr.next
    
            sorted_list = sorted(sorted_list, key=attrgetter('val'))
            for i, node in enumerate(sorted_list):
                try:
                    node.next = sorted_list[i + 1]
                except:
                    node.next = None
    
            if sorted_list:
                return sorted_list[0]
            else:
                return None

----------------------------------------------------------------------------------------------------
C++ solution using Merge Sort
    class Solution {
    public:
        ListNode* mergeKLists(vector<ListNode*>& lists) {
            return partition(lists, 0, lists.size()-1);
        }
        
        ListNode* partition(vector<ListNode*>& lists, int start, int end){
            if(start == end){
                return lists[start];
            }
            
            if(start < end){
                int mid = (end+start)/2;
                
                ListNode* l1 = partition(lists, start, mid);
                ListNode* l2 = partition(lists, mid+1, end);
                return merge(l1, l2);
            }
            
            return NULL;
        }
        
        ListNode* merge(ListNode* l1, ListNode* l2){
            if(!l1) return l2;
            if(!l2) return l1;
            
            if(l1->val < l2->val){
                l1->next = merge(l1->next, l2);
                return l1;
            }else{
                l2->next = merge(l1, l2->next);
                return l2;
            }
        }
    };

----------------------------------------------------------------------------------------------------
My Accepted Java Solution Using PriorityQueue
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode dummy = new ListNode(0), cur = dummy;
        if (lists == null || lists.length < 1) {
            return null;
        }
        PriorityQueue<ListNode> minHeap = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>() {
            public int compare(ListNode l1, ListNode l2) {
                return l1.val - l2.val;
            }    
        });
        for (int i = 0; i < lists.length; i++) {
            if (lists[i] != null) {
                minHeap.offer(lists[i]);
            }
        }
        while (!minHeap.isEmpty()) {
            ListNode temp = minHeap.poll();
            cur.next = temp;
            if (temp.next != null) {
                minHeap.offer(temp.next);
            }
            cur = temp;
        }
        return dummy.next;
    }

----------------------------------------------------------------------------------------------------
Three ways to solve this problem in Python (build-in sort, merge and priority queue)
I figured out that OJ converts Python list into a ListNode automatically, so in my solution I return a list directly(Sorry for my laziness)

The first solution uses Python build-in sort, to my surprise it's the fastest one, although it's kind of a hack:

    def mergeKLists(lists):
        ret = []
        for lst in lists:
            while lst:
                ret.append(lst.val)
                lst = lst.next
                
        return sorted(ret)

The second solution uses merge sort:

    def mergeKLists(lists):
        
        def merge(lst1, lst2):
            dummy = pt = ListNode(-1)
            while lst1 and lst2:
                if lst1.val < lst2.val:
                    pt.next = lst1
                    lst1 = lst1.next
                else:
                    pt.next = lst2
                    lst2 = lst2.next
                pt = pt.next
                
            pt.next = lst1 if not lst2 else lst2
            return dummy.next
            
        
        if not lists:
            return None

        if len(lists) == 1:
            return lists[0]
        mid = len(lists)/2
        left = mergeKLists(lists[:mid])
        right = mergeKLists(lists[mid:])

        return merge(left, right)

The third one uses priority queue:

        
    

    import heapq
    def mergeKLists(lists):
            
        ret, heap = [], []
        for lst in lists:
            while lst:
                heapq.heappush(heap, lst.val)
                lst = lst.next
    
        while heap:
            ret.append(heapq.heappop(heap))
        return ret



----------------------------------------------------------------------------------------------------
&#91;recommend for beginners&#93;clean C++ implementation with detailed explanation
There are 2 ways to merge all the #lists linked-list:

-1- we can merge the lists[0] with the lists[i] additively and record the results with the cur-pointer

-2-  we can merge the top of the linked-lists and push the merged-linked-lists to the tail of the vector.

**I can not figure out why the method-1- have TLE problem while the method-2- is OK ?**

Solution:

     because the method-1- merge-one-list-one-time, but the method-2- merge-2-list-one-time

Here is my implementation:

       class Solution {
        public:
            ListNode* mergeKLists(vector<ListNode*>& lists) {
                //merge way -1-
                if(lists.empty())   return NULL;
                ListNode* cur=lists[0];
                cout<<lists.size()<<endl;
                for(int i=1; i<lists.size(); i++){
                    cur=mergeTwoLists(cur, lists[i]);
                }
                return cur;
                
                //merge way -2-
                if(lists.empty()){
                    return nullptr;
                }
                while(lists.size() > 1){
                    lists.push_back(mergeTwoLists(lists[0], lists[1]));
                    lists.erase(lists.begin());
                    lists.erase(lists.begin());
                }
                return lists.front();
            }
         
            
            ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
                ListNode* dummy=new ListNode(-1);
                ListNode* cur=dummy;
                while(l1 && l2){
                    if(l1->val < l2->val){
                        cur->next=l1;
                        cur=l1;
                        l1=l1->next;
                    }
                    else{
                        cur->next=l2;
                        cur=l2;
                        l2=l2->next;
                    }
                }
                if(!l1)  cur->next=l2;
                if(!l2)  cur->next=l1;
                return dummy->next;
            }
        };

----------------------------------------------------------------------------------------------------
Simple java sol using PriorityQueue
    public class Solution {
        public ListNode mergeKLists(ListNode[] lists) {

            Queue<ListNode> q = new PriorityQueue<ListNode>(new ListComparator());
            for(ListNode n: lists){
                if( n!= null) {
                    q.add(n);
                }
            }
            ListNode head = new ListNode(0), p = head, cur = null;
            while( !q.isEmpty()) {
                cur = q.poll();
                if(cur.next!=null)
                    q.offer(cur.next);
                p.next = cur;
                p = p.next;
            }
            return head.next;
        }
    }

    class ListComparator implements Comparator<ListNode>{
    
    	@Override
    	public int compare(ListNode n1, ListNode n2) {
    		return n1.val - n2.val;
    	}
    }



----------------------------------------------------------------------------------------------------
JavaScript Solution with Graph explanation
    var mergeKLists = function(lists) {
        
        var tempArry = [], listsLength;
        
        //Delete all empty entries.
        for (var i = 0; i < lists.length; ) {
            if (lists[i]) {
                i++;
            } else {
                lists.splice(i, 1);
            }
        }
        if (lists.length === 0) return [];
        
        while (lists.length > 1) {
            listsLength = lists.length;
            if (listsLength % 2 !== 0) {
                lists.push(null);
                listsLength++;
            }
            for (var i = 0; i < listsLength; i += 2) {
                tempArry.push(merge2Lists(lists[i], lists[i + 1]));
            }
            lists = tempArry;
            tempArry = [];
        }
        return lists[0];
        
        function merge2Lists(list1, list2) {
            var head = new ListNode(0), temp = head;
            while (list1 && list2) {
                if (list1.val < list2.val) {
                    temp.next = new ListNode(list1.val);
                    list1 = list1.next;
                } else {
                    temp.next = new ListNode(list2.val);
                    list2 = list2.next;
                }
                temp = temp.next;
            }
            temp.next = list1 ? list1 : list2;
            return head.next;
        }
    };



    1  |   |  |   |  |   .
    2    |      |      |     .
    3        |            |
    4              |

Line1 is an array, each element is a ListNode (as "|" in the graph). If the length of current array is odd, add an null element(as "." in the graph), compare them two by two ,put the results into a new array (line2). Keep doing until the length of the result array is 1, which means we merged all elements, and it is the result. 

----------------------------------------------------------------------------------------------------
Python solutions in divide-and-conquer and heapq
Divide and conquer:

    
    def mergeKLists(self, lists):
        if not lists:
            return None
            
        sentinel = ListNode('0')
        while len(lists) > 1:
            merged = []
            while len(lists) > 1:
                merged.append(self.merge(lists.pop(), lists.pop(), sentinel))
            lists += merged
        return lists[0]
        
        
    def merge(self, x, y, s):
        current = s
        while x and y:
            if x.val < y.val:
                current.next = x
                x = x.next
            else:
                current.next = y
                y = y.next
            current = current.next
        current.next = x if x else y
        return s.next


Heap:
 
    def mergeKLists(self, lists):
        current = sentinel = ListNode(0)
        lists = [(i.val, i) for i in lists if i]
        heapq.heapify(lists)
        while lists:
            current.next = heapq.heappop(lists)[1]
            current = current.next
            if current.next:
                heapq.heappush(lists, (current.next.val, current.next))
        return sentinel.next

----------------------------------------------------------------------------------------------------
