Accepted pretty Java solution(271ms)
    public class Solution {
        public boolean isPalindrome(String s) {
            if (s.isEmpty()) {
            	return true;
            }
            int head = 0, tail = s.length() - 1;
            char cHead, cTail;
            while(head <= tail) {
            	cHead = s.charAt(head);
            	cTail = s.charAt(tail);
            	if (!Character.isLetterOrDigit(cHead)) {
            		head++;
            	} else if(!Character.isLetterOrDigit(cTail)) {
            		tail--;
            	} else {
            		if (Character.toLowerCase(cHead) != Character.toLowerCase(cTail)) {
            			return false;
            		}
            		head++;
            		tail--;
            	}
            }
            
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
Here&#x27;s a clean C++ solution
    bool isPalindrome(string s) {
        for (int i = 0, j = s.size() - 1; i < j; i++, j--) { // Move 2 pointers from each end until they collide
            while (isalnum(s[i]) == false && i < j) i++; // Increment left pointer if not alphanumeric
            while (isalnum(s[j]) == false && i < j) j--; // Decrement right pointer if no alphanumeric
            if (toupper(s[i]) != toupper(s[j])) return false; // Exit and return error if not match
        }
        
        return true;
    }

----------------------------------------------------------------------------------------------------
My three line java solution
    public class Solution {
        public boolean isPalindrome(String s) {
            String actual = s.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
            String rev = new StringBuffer(actual).reverse().toString();
            return actual.equals(rev);
        }
    }

----------------------------------------------------------------------------------------------------
Passed clean c++ code
    bool isPalindrome(string s) {
		int start=0, end=s.length()-1;
		while(start<end) {
			if (!isalnum(s[start])) start++;
			else if (!isalnum(s[end])) end--;
			else {
				if (tolower(s[start++])!=tolower(s[end--])) return false;
			}
		}
		return true;
    }

----------------------------------------------------------------------------------------------------
Python in-place two-pointer solution.
        
    def isPalindrome(self, s):
        l, r = 0, len(s)-1
        while l < r:
            while l < r and not s[l].isalnum():
                l += 1
            while l <r and not s[r].isalnum():
                r -= 1
            if s[l].lower() != s[r].lower():
                return False
            l +=1; r -= 1
        return True

----------------------------------------------------------------------------------------------------
Any other easy solution beside using regex?
    s=s.toLowerCase();
		s=s.replaceAll("[^0-9a-zA-Z]", "");
		char c[]=s.toCharArray();
		int counthead=0,counttail=s.length()-1;
		while(counthead<=s.length()-1&&counttail>=0){
			if(c[counthead]!=c[counttail]) return false;
			counthead++;
			counttail--;
		}
		return true;

I have tried normal way but it is complex to judge if a char is not alphanumeric 

----------------------------------------------------------------------------------------------------
Neat O(n), O(1) solution with isalnum()
    class Solution {
    public:
    	bool isPalindrome(string s) {
    
    		int i = 0, j = s.size() - 1;
    		while(i < j)
    		{
    			while(i < j && !isalnum(s[i])) i++;
    			while(i < j && !isalnum(s[j])) j--;
    			if (toupper(s[i])!=toupper(s[j]))
    				return false;
    			i++;j--;
    		}
    		return true;
    	}
    };



----------------------------------------------------------------------------------------------------
Challenge me - Shortest possible answer in python for Valid Palindrome (Life is short, we need python)
    class Solution:
    def isPalindrome(self, s):
        newS= [i.lower() for i in s if i.isalnum()]
        return newS == newS[::-1]
        #return newS[:len(newS)/2] == newS[(len(newS)+1)/2:][::-1]  # This one is better, but too long

----------------------------------------------------------------------------------------------------
Two lines in Java
    s=s.toLowerCase().replaceAll("[^a-z0-9]", "");
    return new StringBuilder(s).reverse().toString().equals(s);

----------------------------------------------------------------------------------------------------
C solution, 9 lines, 4ms, using pointer
    bool isPalindrome(char* s) {
        int len = strlen(s);
        if(!len) return true;
        char *p1 = s, *p2 = s + len - 1;
        while(p1 < p2){
            if(!isalnum(*p1)){p1++;continue;}
            if(!isalnum(*p2)){p2--;continue;}
            if(tolower(*p1++) != tolower(*p2--)) return false;
        }
        return true;
    }


----------------------------------------------------------------------------------------------------
3ms java solution(beat 100% of java solution)
simply build an array that map all possible char into integer(if not alphanumeric,mark it as zero)

this will help to speed up the process a lot.

    private static final char[]charMap = new char[256];
    static{
        for(int i=0;i<10;i++){
            charMap[i+'0'] = (char)(1+i);  // numeric
        }
        for(int i=0;i<26;i++){
            charMap[i+'a'] = charMap[i+'A'] = (char)(11+i);  //alphabetic, ignore cases
        }
    }
    public boolean isPalindrome(String s) {
        char[]pChars = s.toCharArray();
        int start = 0,end=pChars.length-1;
        char cS,cE;
        while(start<end){
            cS = charMap[pChars[start]];
            cE = charMap[pChars[end]];
            if(cS!=0 && cE!=0){
                if(cS!=cE)return false;
                start++;
                end--;
            }else{
                if(cS==0)start++;
                if(cE==0)end--;
            }
        }
        return true;
    }

----------------------------------------------------------------------------------------------------
Simple 79 ms Python solution
    class Solution:
        # @param s, a string
        # @return a boolean
        def isPalindrome(self, s):
            s = "".join([c.lower() for c in s if c.isalnum()])
            return s == s[::-1]

----------------------------------------------------------------------------------------------------
Change the original string to a new simple string
step1: filter.  remove characters not alphanumeric  and change all letters to lower case.
step2; simple string check 
   

     bool checkEasyString(string s){          
        	if(s.size()<=1)return true;
        	int p=0,q=s.size()-1;
        	while(p<q)if(s[p++]!=s[q--])return false;
        	return true;
        }
    
    string filter(string str0){
    	string str;
    	char temp;
    	for(int i=0;i<str0.size();i++){
    		temp=str0[i];
    		if('0'<=temp && temp<='9' )str.push_back(temp);
    		else if('a'<=temp && temp<='z')str.push_back(temp);
    		else if('A'<=temp && temp<='Z')str.push_back(temp-('A'-'a'));
    	}
    	return str;
    }
    
    
    bool isPalindrome(string s) {
        return checkEasyString(filter(s));
    }

----------------------------------------------------------------------------------------------------
This is my accepted Java code, just for reference only
    public class Solution {
        public boolean isPalindrome(String s) {
            s = s.toLowerCase()
            s = s.replaceAll("[^A-Z^a-z^0-9]+", "");
            StringBuffer sb = new StringBuffer(s);
    	    sb.reverse();
    	    String reverseString = sb.toString();
    	    boolean result = s.equals(reverseString);
       	    return result;
        }
    }

----------------------------------------------------------------------------------------------------
7-lines 12ms Easy C++ Solution
The suggested solution to this problem has given a clear idea. The tricky part of this problem is to handle all the edge cases carefully and write a clean code.

The following code should be self-explanatory. Note that the use of `toupper` avoids some messy `if-else` statements.

    class Solution {
    public:
        bool isPalindrome(string s) {
            int l = 0, r = s.length() - 1; 
            while (l < r) {
                while (l < r && !isalnum(s[l])) l++;
                while (r > l && !isalnum(s[r])) r--; 
                if (toupper(s[l++]) != toupper(s[r--]))
                    return false;
            }
            return true; 
        }
    };

----------------------------------------------------------------------------------------------------
Java 9ms solution with some of my thoughts
My thoughts on this problem is that the interviewers are not looking at a solution using Regex, it would be too trivial, plus it would take O(n) space to save the new trimmed string.  I would just use plain two points to traverse the string and compare them ignore case.  It is O(n) time and O(1) space guaranteed and no expensive string concatenation is required.

    public class Solution {
        public boolean isPalindrome(String s) {
            int start = 0; 
            int end = s.length() - 1;
            while(start <= end) {
                while(start <= end && !Character.isLetterOrDigit(s.charAt(start))) {
                    start++;
                }
                while(start <= end && !Character.isLetterOrDigit(s.charAt(end))) {
                    end--;
                }
                if(start <= end && Character.toLowerCase(s.charAt(start)) != Character.toLowerCase(s.charAt(end))) {
                    return false;
                }
                start++;
                end--;
            }
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
A python solution in two lines
This is a pythonic solution, and indeed, it's a cheat

    class Solution:
        # @param s, a string
        # @return a boolean
        def isPalindrome(self, s):
            s = filter(str.isalnum, s.lower())
            return s == s[::-1]

----------------------------------------------------------------------------------------------------
My short c++ code, 12ms
Move two pointers (start & end) towards the middle, skip non alphanumeric characters, if they are not equal to each other, return false;

    class Solution {
    public:
        bool isPalindrome(string s) {
            int start = 0, end = s.size()-1;
            while(start<end)
            {
                if(!isalnum(s[start])) ++start; // skip non alphanumerical characters
                else if(!isalnum(s[end])) --end;
                else if(tolower(s[start++]) != tolower(s[end--])) return false; // return false when nonequal is found
            }
            return true;
        }
    };

----------------------------------------------------------------------------------------------------
C++ two-pointer solution.
        
    bool isPalindrome(string s) {
        int l=0, r=s.size()-1;
        while (l<r) {
            while (l<r && !isalnum(s[l]))
                l++;
            while (l<r && !isalnum(s[r]))
                r--;
            if (tolower(s[l])!=tolower(s[r]))
                return false;
            l++;
            r--;
        }
        return true;
    }

----------------------------------------------------------------------------------------------------
My 2-line java code
well, not counting the scaffolding ...

        public class Solution {
        public boolean isPalindrome(String s) {
            String ss = s.toLowerCase().replaceAll("[^a-z0-9]", "");
            return ss.equals(new StringBuilder(ss).reverse().toString());
        }
    }



----------------------------------------------------------------------------------------------------
