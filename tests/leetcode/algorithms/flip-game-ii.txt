My solutions in 3 languages, does any one have one line solution in Java or C++?
Java:

    int result = 0;
    for (int i = 0; i < s.length(); result = result * 26 + (s.charAt(i) - 'A' + 1), i++);
    return result;


C++:

    int result = 0;
    for (int i = 0; i < s.size(); result = result * 26 + (s.at(i) - 'A' + 1), i++);
    return result;


Python:

    return reduce(lambda x, y : x * 26 + y, [ord(c) - 64 for c in list(s)])

Python version is beautiful because reduce function and list comprehensive.

I don't know whether exist similar approach to achieve one line solution in Java or C++.
One possible way is defining another method like this:

    public int titleToNumber(int num, String s)

to store previous result and make recursive call.
But this add much more lines.

----------------------------------------------------------------------------------------------------
Asked this question on an interview
I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though.

----------------------------------------------------------------------------------------------------
Here is my java solution
Here is my Java solution. Similar to the number to title.

    public int titleToNumber(String s) {
        int result = 0;
        for(int i = 0 ; i < s.length(); i++) {
          result = result * 26 + (s.charAt(i) - 'A' + 1);
        }
        return result;
      }

----------------------------------------------------------------------------------------------------
My 2ms JAVA solution
    public class Solution {
        public int titleToNumber(String s) {
        
            int result  = 0;
            for (int i = 0; i < s.length(); i++){
                result *= 26;
                result += ((s.charAt(i) - 'A') + 1);    
            }
        
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
One line python code using Map&#x2F;Reduce
    def titleToNumber(self, s):
        return reduce(lambda x,y:x*26+y,map(lambda x:ord(x)-ord('A')+1,s))

----------------------------------------------------------------------------------------------------
A 8ms C++ Solution
    class Solution {
    public:
        int titleToNumber(string s) {
            int col = 0;
            for(int i = s.length(); i > 0; i--) {
                col += (s[i - 1] - 'A' + 1) * pow(26, (s.length() - i));
            }
            return col;
        }
    };

----------------------------------------------------------------------------------------------------
A 4ms C solution
    int titleToNumber(char* s) {
        int number = 0;
        for (int i = 0; s[i] != 0; i++) {
            number = number*26 + s[i] - 'A' + 1;
        }
        return number;
    }

The question can be rephrased as "Convert base 26 to base 10".

----------------------------------------------------------------------------------------------------
2ms java solution
    public class Solution {
        public int titleToNumber(String s) {
            char[] title = s.toCharArray();
            int number = 0;
            for(char c: title) {
                number = number * 26 + (c - 'A' + 1);
            }
            return number;
        }
    }

----------------------------------------------------------------------------------------------------
One line in Java.
    return s.length()==0?0:(s.charAt(s.length()-1)-'A'+1)+26*titleToNumber(s.substring(0, s.length()-1));

----------------------------------------------------------------------------------------------------
Explanation in Python
Observe that this is basically the same thing as converting between base 26 and base 10.

Start with this:

    def titleToNumber(s):
        s = s[::-1]
        sum = 0
        for exp, char in enumerate(s):
            sum += (ord(char) - 65 + 1) * (26 ** exp)
        return sum

This reverses the string, starts a sum at 0, creates a list of tuples of the index of each character in the reversed string (which corresponds to the exponent) and character itself. Add them up. We take ord(char) to turn the character to an integer, subtract 65 = ord('A') from it, and add one because we want A to equal 1, not 0.

You can do this in one line:

    def titleToNumber(s):
        return sum((ord(char) - 64) * (26 ** exp) for exp, char in enumerate(s[::-1]))

----------------------------------------------------------------------------------------------------
Easy java solution 3ms

    public static int titleToNumber(String s) {
	     int number=0;
	     for(int i=0;i<s.length();i++)
	     {
	    	number=26*number+(s.charAt(i)-'A')+1; 
	     }
	     return number;
    }


----------------------------------------------------------------------------------------------------
3 lines, 2ms Java solution
    public class Solution {
        public int titleToNumber(String s) {
            int answer = 0;
            for(char c: s.toCharArray()) answer = answer * 26 + (c - 'A' + 1);
            return answer;
        }
    }

----------------------------------------------------------------------------------------------------
My cpp solution
    class Solution 
    {
    public:
        int titleToNumber(string s) 
        {
            int ret=0;
            for(int i=0;i<s.size();i++)
            {
                ret*=26;
                ret+=s[i]-'A'+1;
            }
            return ret;
        }
    };

----------------------------------------------------------------------------------------------------
1 line C++ solution (8ms)
    int titleToNumber(string s) {
        return accumulate(s.begin(), s.end(), 0, [](int num, char ch) { return num * 26 + ch - 'A' + 1; });
    }

----------------------------------------------------------------------------------------------------
Sharing my simple java solution
    public class Solution {
        public int titleToNumber(String s) {
            int val = 0;
            for (int i=0; i<s.length(); i++){
                val = val * 26 + 1 + (int) s.charAt(i) - (int) 'A';
            }
            return val;
        }
    }

----------------------------------------------------------------------------------------------------
Share my Java solution
here is my Java solution
    
     public class Solution {
        public int titleToNumber(String s) {
            int colNumber = 0;
            
    		for (int i = 0; i < s.length(); i++) {
    			colNumber = colNumber*26 + ((int)s.charAt(i)-64);
    	    }
            
            return colNumber;
        }
    }

----------------------------------------------------------------------------------------------------
Share my python solution use int(i, base=36) and simple JAVA solution.
    class Solution:
    # @param s, a string
    # @return an integer
    def titleToNumber(self, s):
        res = 0
        for i in s:
            res = 26*res + int(i, 36) - 9
        return res

One line

    class Solution:
    # @param s, a string
    # @return an integer
    def titleToNumber(self, s):
        return sum(26**n*(int(i, 36)-9) for n, i in enumerate(s[::-1]))

JAVA

        public int titleToNumber(String s) {
        int res = 0;
        for (char c: s.toCharArray())
            res = 26*res + c-'A'+1;

        return res;
        }

----------------------------------------------------------------------------------------------------
Any fast Python code?
Hi, I come up with a Python code using reduce.
It costs 75ms, but from the distribution detail, I can see someone get even faster Python code.
Can anyone share a faster implementation?

    class Solution:
    # @param s, a string
    # @return an integer
    def titleToNumber(self, s):
        l = list(s)
        l.insert(0,0)
        return reduce(lambda x,y: 26*x+ord(y)-64, l)

----------------------------------------------------------------------------------------------------
My Java Solution 4ms (4 lines)
public class Solution {

    public int titleToNumber(String s) {
        int sum = 0;
        for(int i = 0; i < s.length(); i++ )
            sum = sum + (int)Math.pow(26,s.length() - i - 1) * (s.charAt(i) - 'A' + 1);
        return sum;
    }
}

----------------------------------------------------------------------------------------------------
My python solution

        lenS = len(s)
        n2 = 0
        for i in range(0,lenS):
            n1 = ord(s[i])-64
            n2 = 26*n2 +n1
        return n2

----------------------------------------------------------------------------------------------------
