Accepted very short Java solution. No additional space.
Here accepted solution based on recursion. To save memory I decuded to apply bit mask for every visited cell. Please check board[y][x] ^= 256;

    public boolean exist(char[][] board, String word) {
        char[] w = word.toCharArray();
        for (int y=0; y<board.length; y++) {
        	for (int x=0; x<board[y].length; x++) {
        		if (exist(board, y, x, w, 0)) return true;
        	}
        }
        return false;
    }
	
	private boolean exist(char[][] board, int y, int x, char[] word, int i) {
		if (i == word.length) return true;
		if (y<0 || x<0 || y == board.length || x == board[y].length) return false;
		if (board[y][x] != word[i]) return false;
		board[y][x] ^= 256;
		boolean exist = exist(board, y, x+1, word, i+1)
			|| exist(board, y, x-1, word, i+1)
			|| exist(board, y+1, x, word, i+1)
			|| exist(board, y-1, x, word, i+1);
		board[y][x] ^= 256;
		return exist;
	}

----------------------------------------------------------------------------------------------------
My Java solution
    public class Solution {
        static boolean[][] visited;
        public boolean exist(char[][] board, String word) {
            visited = new boolean[board.length][board[0].length];
            
            for(int i = 0; i < board.length; i++){
                for(int j = 0; j < board[i].length; j++){
                    if((word.charAt(0) == board[i][j]) && search(board, word, i, j, 0)){
                        return true;
                    }
                }
            }
            
            return false;
        }
        
        private boolean search(char[][]board, String word, int i, int j, int index){
            if(index == word.length()){
                return true;
            }
            
            if(i >= board.length || i < 0 || j >= board[i].length || j < 0 || board[i][j] != word.charAt(index) || visited[i][j]){
                return false;
            }
            
            visited[i][j] = true;
            if(search(board, word, i-1, j, index+1) || 
               search(board, word, i+1, j, index+1) ||
               search(board, word, i, j-1, index+1) || 
               search(board, word, i, j+1, index+1)){
                return true;
            }
            
            visited[i][j] = false;
            return false;
        }
    }

----------------------------------------------------------------------------------------------------
My 19ms accepted C++ code
       class Solution {
        public:
        	 bool exist(vector<vector<char> > &board, string word) {
        		 m=board.size();
        		 n=board[0].size();
                for(int x=0;x<m;x++)
                    for(int y=0;y<n;y++)
                    {
        				if(isFound(board,word.c_str(),x,y))
        					return true;
                    }
                return false;
            }
        private:
        	int m;
        	int n;
            bool isFound(vector<vector<char> > &board, const char* w, int x, int y)
            {
        		if(x<0||y<0||x>=m||y>=n||board[x][y]=='\0'||*w!=board[x][y])
        			return false;
                if(*(w+1)=='\0')
                    return true;
        		char t=board[x][y];
        		board[x][y]='\0';
        		if(isFound(board,w+1,x-1,y)||isFound(board,w+1,x+1,y)||isFound(board,w+1,x,y-1)||isFound(board,w+1,x,y+1))
        			return true; 
        		board[x][y]=t;
                return false;
            }
        };

----------------------------------------------------------------------------------------------------
Simple solution
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if(exist(board, i, j, word, 0)) return true;
            }
        }
        return false;
    }

    private boolean exist(char[][] board, int x, int y, String word, int start) {
        if(start >= word.length()) return true;
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length) return false;
        if (board[x][y] == word.charAt(start++)) {
            char c = board[x][y];
            board[x][y] = '#';
            boolean res = exist(board, x + 1, y, word, start) || exist(board, x - 1, y, word, start) ||
            exist(board, x, y + 1, word, start) || exist(board, x, y - 1, word, start);
            board[x][y] = c;
            return res;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Python dfs solution with comments.
        
    def exist(self, board, word):
        if not board:
            return False
        for i in xrange(len(board)):
            for j in xrange(len(board[0])):
                if self.dfs(board, i, j, word):
                    return True
        return False
    
    # check whether can find word, start at (i,j) position    
    def dfs(self, board, i, j, word):
        if len(word) == 0: # all the characters are checked
            return True
        if i<0 or i>=len(board) or j<0 or j>=len(board[0]) or word[0]!=board[i][j]:
            return False
        tmp = board[i][j]  # first character is found, check the remaining part
        board[i][j] = "#"  # avoid visit agian 
        # check whether can find "word" along one direction
        res = self.dfs(board, i+1, j, word[1:]) or self.dfs(board, i-1, j, word[1:]) \
        or self.dfs(board, i, j+1, word[1:]) or self.dfs(board, i, j-1, word[1:])
        board[i][j] = tmp
        return res

----------------------------------------------------------------------------------------------------
My DFS + Backtracking C++ solution (16ms)
Typical dfs+backtracking question. It compare board[row][col] with word[start], if they match, change board[row][col] to '*' to mark it as visited. Then move to the next one (i.e. word[start+1]) and compare it to the current neighbors ( doing it by recursion)

    class Solution {
    private:
        bool dfs(vector<vector<char>>& board, int row, int col, const string &word, int start, int M, int N, int sLen)
        {
            char curC;
            bool res = false;
            if( (curC = board[row][col]) != word[start]) return false;
            if(start==sLen-1) return true;
            board[row][col] = '*';
            if(row>0) res = dfs(board, row-1, col, word, start+1, M, N, sLen);
            if(!res && row < M-1) res = dfs(board, row+1, col, word, start+1, M, N, sLen);
            if(!res && col > 0)   res = dfs(board, row, col-1, word, start+1, M, N, sLen);
            if(!res && col < N-1) res = dfs(board,  row, col+1, word, start+1, M, N, sLen);
            board[row][col] = curC;
            return res;
        }
        
    public:
        bool exist(vector<vector<char>>& board, string word) {
            int M,N,i,j,sLen = word.size();
            if( (M=board.size()) && (N=board[0].size()) && sLen)
            {
                for(i=0; i<M; ++i)
                    for(j=0; j<N; ++j)
                        if(dfs(board, i, j, word, 0, M, N, sLen)) return true;
            }
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
AC in 84ms, by using DFS.
I used DFS,  and got AC in 84ms, any improvement?

    class Solution {
    private:
        vector<vector<char> > *board;
        string *word;
        bool **used;
    private:
        bool isInboard(int i, int j)
        {
            if(i < 0)return false;
            if(i >= board->size())return false;
            if(j < 0)return false;
            if(j >= (*board)[i].size())return false;
            return true;
        }
        
        bool DFS(int si, int sj, int n)
        {
            if(n == word->size())return true;
            if(isInboard(si, sj))
            {
                if(!used[si][sj] && (*board)[si][sj] == (*word)[n])
                {
                    used[si][sj] = true;
                    bool ret = false;
                    if(DFS(si+1, sj, n+1))
                        ret = true;
                    else if(DFS(si-1, sj, n+1))
                        ret = true;
                    else if(DFS(si, sj+1, n+1))
                        ret = true;
                    else if(DFS(si, sj-1, n+1))
                        ret = true;
                    used[si][sj] = false;
                    return ret;
                }
            }
            return false;
        }
        
    public:
        bool exist(vector<vector<char> > &board, string word) {
            if(board.size() == 0)return false;
            this->board = &board;
            this->word = &word;
            used = new bool*[board.size()];
            for(int i = 0; i < board.size(); i ++)
            {
                used[i] = new bool[board[i].size()];
                for(int j = 0; j < board[i].size(); j ++)
                    used[i][j] = false;
            }
            for(int i = 0; i < board.size(); i ++)
                for(int j = 0; j < board[i].size(); j ++)
                    if(DFS(i, j, 0))return true;
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
Python simple dfs solution
    def exist(self, board, word):
        if not word:
            return True
        if not board:
            return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.exist_helper(board, word, i, j):
                    return True
        return False
                        
    def exist_helper(self, board, word, i, j):
        if board[i][j] == word[0]:
            if not word[1:]:
                return True
            board[i][j] = " " # indicate used cell
            # check all adjacent cells
            if i > 0 and self.exist_helper(board, word[1:], i-1, j):
                return True
            if i < len(board)-1 and self.exist_helper(board, word[1:], i+1, j):
                return True
            if j > 0 and self.exist_helper(board, word[1:], i, j-1):
                return True
            if j < len(board[0])-1 and self.exist_helper(board, word[1:], i, j+1):
                return True
            board[i][j] = word[0] # update the cell to its original value
            return False
        else:
            return False

----------------------------------------------------------------------------------------------------
Java DFS solution, beats 97.64%
    public class Solution {
        public boolean exist(char[][] board, String word) {
            if (word == null || word.length() == 0) {
                return true;
            }
            char[] chs = word.toCharArray();
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    if(dfs(board, chs, 0, i, j)) {
                        return true;
                    }
                }
            }
            return false;
        }
        
        private boolean dfs(char[][] board, char[] words, int idx, int x, int y) {
            if (idx == words.length) {
                return true;
            } 
            if (x < 0 || x == board.length || y < 0 || y == board[0].length) {
                return false;
            }
            if (board[x][y] != words[idx]) {
                return false;
            }
            board[x][y] ^= 256;
            boolean exist = dfs(board, words, idx + 1, x, y + 1) ||
            dfs(board, words, idx + 1, x, y - 1) || dfs(board, words, idx + 1, x + 1, y) ||
            dfs(board, words, idx + 1, x - 1, y) ;
            board[x][y] ^= 256;
            return exist;
        }
    }

----------------------------------------------------------------------------------------------------
&#91;word search&#93; wrong instruction about the input (board) datatype
In the instructions, it is said that the board as input would be "a list of list of 1 length string".

"For example,
Given board =
<pre>
<code>
[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
</code>
</pre>
"

However, all actual test cases have a different datatype --- the board is a list of strings. 

With the same example above, the actual board =
<pre>
<code>
[
  "ABCE",
  "SFCS",
  "ADEE"
]
</code>
</pre>

----------------------------------------------------------------------------------------------------
Python DFS solution
    class Solution:
        # @param board, a list of lists of 1 length string
        # @param word, a string
        # @return a boolean
        # 3:42
        def exist(self, board, word):
            visited = {}
    
            for i in range(len(board)):
                for j in range(len(board[0])):
                    if self.getWords(board, word, i, j, visited):
                        return True
            
            return False
    
        def getWords(self, board, word, i, j, visited, pos = 0):
            if pos == len(word):
                return True
    
            if i < 0 or i == len(board) or j < 0 or j == len(board[0]) or visited.get((i, j)) or word[pos] != board[i][j]:
                return False
    
            visited[(i, j)] = True
            res = self.getWords(board, word, i, j + 1, visited, pos + 1) \
                    or self.getWords(board, word, i, j - 1, visited, pos + 1) \
                    or self.getWords(board, word, i + 1, j, visited, pos + 1) \
                    or self.getWords(board, word, i - 1, j, visited, pos + 1)
            visited[(i, j)] = False
    
            return res

----------------------------------------------------------------------------------------------------
It seems the board for Python language is not correct?
I think the board for Python language should not be `[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]`, since for Python language string is immutable, we can not assign value like `board[i][j] = "#"`. The board should be initialied as `[
  ["A", "B", "C", "E"],
  ["S", "F", "C", "S"],
  ["A", "D", "E", "E"]
]` . The function input is `type board: List[List[str]]`, which implies the inner parameter should be a list of strings . [Word Search II ][1] gives the right figure. 


  [1]: https://leetcode.com/problems/word-search-ii/

----------------------------------------------------------------------------------------------------
C++ Solution using Backtracking
    class Solution {
    public:
        bool exist(vector<vector<char>>& board, string word) {
            if(board.size()==0 || board[0].size()==0 )
                return true;
            
            for(int i=0; i<board.size(); i++){
                for(int j=0; j<board[0].size(); j++){
                    if(check(board, word, i, j))
                        return true;
                }
            }
            return false;
        }
        
        bool check(vector<vector<char>>& board, string word, int i, int j){
            if(word.length()==0)
                return true;
            if(i<0 || j<0 ||i>=board.size() ||j>=board[0].size())
                return false;
            if(word[0]==board[i][j]){
                char c = word[0];
                board[i][j]='\0';
                if(check(board,word.substr(1), i+1, j)||
                    check(board,word.substr(1), i-1, j)||
                    check(board,word.substr(1), i, j+1)||
                    check(board,word.substr(1), i, j-1))
                    return true;
                board[i][j]=c;
            }
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
C++ dfs solution.
        
    bool exist(vector<vector<char>>& board, string word) {
        for (unsigned int i = 0; i < board.size(); i++) 
            for (unsigned int j = 0; j < board[0].size(); j++) 
                if (dfs(board, i, j, word))
                    return true;
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, int i, int j, string& word) {
        if (!word.size())
            return true;
        if (i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j] != word[0])  
            return false;
        char c = board[i][j];
        board[i][j] = '*';
        string s = word.substr(1);
        bool ret = dfs(board, i-1, j, s) || dfs(board, i+1, j, s) || dfs(board, i, j-1, s) || dfs(board, i, j+1, s);
        board[i][j] = c;
        return ret;
    }

----------------------------------------------------------------------------------------------------
Accepted 16ms c++ solution use backtracking, easy understand.
    class Solution {
    public:
        bool exist(std::vector<std::vector<char> > &board, std::string word) {
            rows = static_cast<int>(board.size()), cols = static_cast<int>(board[0].size());
            for (int row = 0; row != rows; ++row)
                for (int col = 0; col != cols; ++col)
                    if (exist(board, word, row, col, 0))
                        return true;
            return false;
        }
    private:
        int rows, cols;
        bool exist(std::vector<std::vector<char> > &board, std::string &word, int row, int col, int pos) {
            if (board[row][col] != word[pos] || board[row][col] == ' ')
                return false;
            else if (pos == word.size() - 1)
                return true;
            char c = board[row][col];
            board[row][col] = ' ';
            if (row > 0 && exist(board, word, row - 1, col, pos + 1) ||
                row < rows - 1 && exist(board, word, row + 1, col, pos + 1) ||
                col > 0 && exist(board, word, row, col - 1, pos + 1) ||
                col < cols - 1 && exist(board, word, row, col + 1, pos + 1)) {
                board[row][col] = c;
                return true;
            }
            board[row][col] = c;
            return false;
        }
    };


Updated **Jun 28:**

    class Solution {
    public:
        bool exist(std::vector<std::vector<char> > &board, std::string word) {
            rows = static_cast<int>(board.size()), cols = static_cast<int>(board[0].size());
            for (int row = 0; row != rows; ++row)
                for (int col = 0; col != cols; ++col)
                    if (exist(board, word, row, col, 0))
                        return true;
            return false;
        }
    private:
        int rows, cols;
        bool exist(std::vector<std::vector<char> > &board, std::string &word, int row, int col, int pos) {
            if (board[row][col] != word[pos] || board[row][col] == ' ')
                return false;
            else if (pos == word.size() - 1)
                return true;
            char c = board[row][col];
            board[row][col] = ' ';
            bool next_exist = row > 0 && exist(board, word, row - 1, col, pos + 1) ||
                row < rows - 1 && exist(board, word, row + 1, col, pos + 1) ||
                col > 0 && exist(board, word, row, col - 1, pos + 1) ||
                col < cols - 1 && exist(board, word, row, col + 1, pos + 1);
            board[row][col] = c;
            return next_exist;
        }
    };

----------------------------------------------------------------------------------------------------
52ms simple DFS without extra space
All words are ASCII, so they only use 7 bits. Is this cheating?

    class Solution {
    public:
        bool exist(vector<vector<char> > &board, string word) {
            m = board.size() - 1;
            n = board[0].size() - 1;
            for (int i = 0; i <= m; i++)
                for (int j = 0; j <= n; j++)
                    if (board[i][j] == word[0])
                        if (dfs(board, i, j, word.c_str() + 1))
                            return true;
            return false;
        }
    private:
        int m, n;
        bool dfs(vector<vector<char> > &board, int i, int j, const char *w) {
            if (*w == 0)
                return true;
            board[i][j] ^= 0x80;
            for (int k = -(i != 0); k <= (i < m); k++)
                for (int l = -(j != 0); l <= (j < n); l++)
                    if ((k ^ l) & 1 && board[i + k][j + l] == *w)
                        if (dfs(board, i + k, j + l, w + 1))
                            return true;
            board[i][j] ^= 0x80;
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
Java solution,clean code, easy-understand
    public class Solution {
        public boolean exist(char[][] board, String word) {
            if(board.length == 0){
                return false;
            }
            if(board.length * board[0].length < word.length()){
                return false;
            }
            for(int i = 0; i < board.length; i++){
                for(int j = 0; j < board[0].length; j++){
                    boolean[][] check = new boolean[board.length][board[0].length];
                    if(search(board, check, word, 0, i, j)){
                        return true;
                    }
                }
            }
            return false;
        }
        
        static boolean search(char[][] board,boolean[][] check, String s, int target, int row, int col){
            if(target >= s.length()){
                return true;
            }
            if(row < 0 || col < 0 || row >= board.length || col >= board[0].length){
                return false;
            }
            if(check[row][col]){
                return false;
            }
            if(board[row][col] != s.charAt(target)){
                return false;
            }
            check[row][col] = true;
            boolean result = search(board, check, s, target + 1, row + 1, col) || search(board, check, s, target + 1, row, col + 1)
                    || search(board, check, s, target + 1, row - 1, col) || search(board, check, s, target + 1, row, col - 1);
            if(result == false){
                check[row][col] = false;
            }
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
C++ backtracking solution without extra data structure
Use board itself to mark whether we have visited it before.

    class Solution {
    public:
        bool exist(vector<vector<char>>& board, string word) {
            if (board.size() == 0) return false;
            for (int i=0; i<board.size(); ++i) {
                for (int j=0; j<board[i].size(); ++j) {
                    if (search(board, word, i, j, 0)) return true;
                }
            }
            return false;
        }
        
        bool search(vector<vector<char>>& board, string word, int i, int j, int pos) {
            
            if (pos == word.size()) return true;
            if ((i<0) || (i >= board.size()) || (j <0) || (j >= board[i].size())) return false;
            char c = board[i][j];
            if (c == word[pos]) {
                board[i][j] = '#';
                if (search(board, word, i - 1, j, pos + 1)) return true;
                if (search(board, word, i+1, j, pos+1)) return true;
                if (search(board, word, i, j-1, pos+1)) return true;
                if (search(board, word, i, j+1, pos+1)) return true;
                board[i][j] = c;
            }
            return false;
            
        }
    };

----------------------------------------------------------------------------------------------------
Java DFS solution
    public class Solution {
        public boolean exist(char[][] board, String word) {
            
            for(int i=0;i<board.length;i++){
                for(int j=0;j<board[i].length;j++){
                    if(helper(board,i,j,word,0)){
                        return true;
                    }
                }
            }
            return false;
        }
        
        private boolean helper(char[][] board, int i, int j, String word, int step){
            if(step==word.length()){
                return true;
            }
            if(i<0||i>=board.length||j<0||j>=board[i].length){
                return false;
            }
            if((board[i][j]-word.charAt(step))!=0){
                return false;
            }
            char record=board[i][j];
            board[i][j]='1';
            boolean res=helper(board,i-1,j,word,step+1)||helper(board,i,j-1,word,step+1)||helper(board,i,j+1,word,step+1)||helper(board,i+1,j,word,step+1);
            board[i][j]=record;
            return res;
            
        }
        
    }

----------------------------------------------------------------------------------------------------
My Java Accepted Solution using Iterative Method (no recursive call)
I saw a lot dfs recursive version. I happen to do it in a iterative way. Share my solution with you. 
**Notice:** Need to trace back and reset visited from true->false once a wrong end encountered.
      
    public class Solution {
            public boolean exist(char[][] board, String word) {
                for(int i = 0;i < board.length;i++){
                    for(int j = 0;j < board[0].length;j++){
                        if(board[i][j] == word.charAt(0)){
                            // dfs
                            Stack<Integer> x_pos = new Stack<Integer>();
                            Stack<Integer> y_pos = new Stack<Integer>();
                            Stack<Integer> word_index = new Stack<Integer>();
                            Stack<Integer> x_track = new Stack<Integer>();
                            Stack<Integer> y_track = new Stack<Integer>();
                            int[][] subpath_num = new int[board.length][board[0].length];
                            boolean[][] visited = new boolean[board.length][board[0].length];
                            for(int q = 0;q < board.length;q++)
                                for(int p = 0;p < board[0].length;p++)
                                    visited[q][p] = false;
                            x_pos.add(i);y_pos.add(j);
                            word_index.add(0);
                            while(!x_pos.isEmpty()){
                                int x = x_pos.pop();
                                int y = y_pos.pop();
                                int index = word_index.pop()+1;
                                if(index == word.length()){return true;}
                                int count_subpath = 0;
                                x_track.add(x);y_track.add(y);
                                visited[x][y] = true;
                                if(x-1 >= 0){
                                    if(board[x-1][y] == word.charAt(index) && !visited[x-1][y]){
                                        x_pos.add(x-1);y_pos.add(y);
                                        word_index.add(index);
                                        count_subpath++;
                                    }
                                }
                                if(x+1 < board.length){
                                    if(board[x+1][y] == word.charAt(index) && !visited[x+1][y]){
                                        x_pos.add(x+1);y_pos.add(y);
                                        word_index.add(index);
                                        count_subpath++;
                                    }
                                }
                                if(y-1 >= 0){
                                    if(board[x][y-1] == word.charAt(index) && !visited[x][y-1]){
                                        x_pos.add(x);y_pos.add(y-1);
                                        word_index.add(index);
                                        count_subpath++;
                                    }
                                }
                                if(y+1 < board[0].length){
                                    if(board[x][y+1] == word.charAt(index) && !visited[x][y+1]){
                                        x_pos.add(x);y_pos.add(y+1);
                                        word_index.add(index);
                                        count_subpath++;
                                    }
                                }
                                subpath_num[x][y] = count_subpath;
                                // reset the visited mark
                                if(subpath_num[x][y] == 0){
                                    int cur_x = x_track.pop();
                                    int cur_y = y_track.pop();
                                    while(subpath_num[cur_x][cur_y] <= 1){
                                        visited[cur_x][cur_y] = false;
                                        if(x_track.isEmpty()){break;}
                                        cur_x = x_track.pop();
                                        cur_y = y_track.pop();
                                    }
                                    subpath_num[cur_x][cur_y]--;
                                }
                            }
                        }
                    }
                }
                return false;
            }
        }

----------------------------------------------------------------------------------------------------
