Java O(n) time O(1) Space
public int totalHammingDistance(int[] nums) {
    int total = 0, n = nums.length;
    for (int j=0;j<32;j++) {
        int bitCount = 0;
        for (int i=0;i<n;i++) 
            bitCount += (nums[i] >> j) & 1;
        total += bitCount*(n - bitCount);
    }
    return total;
}


----------------------------------------------------------------------------------------------------
Share my O(n) C++ bitwise solution with thinking process and explanation
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int size = nums.size();
        if(size < 2) return 0;
        int ans = 0;
        int *zeroOne = new int[2];
        while(true)
        {
            int zeroCount = 0;
            zeroOne[0] = 0;
            zeroOne[1] = 0;
            for(int i = 0; i < nums.size(); i++)
            {
                if(nums[i] == 0) zeroCount++;
                zeroOne[nums[i] % 2]++;
                nums[i] = nums[i] >> 1;
            }
            ans += zeroOne[0] * zeroOne[1];
            if(zeroCount == nums.size()) return ans;
        }
    }
};


----------------------------------------------------------------------------------------------------
Python via Strings
def totalHammingDistance(self, nums):
    return sum(b.count('0') * b.count('1') for b in zip(*map('{:032b}'.format, nums)))

----------------------------------------------------------------------------------------------------
Java Solution with Explanation
public class Solution {
    public int totalHammingDistance(int[] nums) {
        int n = 31;
        int len = nums.length;
        int[] countOfOnes = new int[n];
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < n; j++) {
                countOfOnes[j] += (nums[i] >> j) & 1;
            }
        }
        int sum = 0;
        for (int count: countOfOnes) {
            sum += count * (len - count);
        }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
Python Explanation
bits = [ [0,0] for _ in xrange(32) ]
for x in A:
  for i in xrange(32):
    bits[i][x%2] += 1
    x /= 2
return sum( x*y for x,y in bits )


----------------------------------------------------------------------------------------------------
C++ O(n) runtime, O(1) space
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        if (nums.size() <= 0) return 0;
        
        int res = 0;
        
        for(int i=0;i<32;i++) {
            int setCount = 0;
            for(int j=0;j<nums.size();j++) {
                if ( (nums[j] & (1 << i)) != 0) setCount++;
            }
            
            res += setCount * (nums.size() - setCount);
        }
        
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Simple example for the &quot;Java O(n) time O(1) Space&quot; Solution
public int totalHammingDistance(int[] nums) {
        int res = 0, len = nums.length;
        for(int i = 0; i < 32; i++) { //32 digits in integers
            int ones = 0; 
            for(int j = 0; j < len; j++) {
                if((nums[j] & 1) == 1) ones++;
                nums[j] = nums[j] >>> 1;
            }
            res = res + ones * (len - ones);
        }
        return res;
}


----------------------------------------------------------------------------------------------------
8-lines DP solution by one pass with explanation
    public int totalHammingDistance(int[] nums) {
        int[][] dp = new int[31][2];
        int res = 0;
        for (int x : nums)
            for (int i=0; i<31; ++i) {
                ++dp[i][(x>>i)&1];
                res += dp[i][((x>>i)&1)^1];
            }
        return res;
    }


----------------------------------------------------------------------------------------------------
Java Easy solution with explanation
public class Solution {
    public int totalHammingDistance(int[] nums) {
        int ans= 0 ;
        int bit = 1;
        for(int i = 0;i<31;i++){
            int zero = 0, one = 0;
            for(int j =  0;j<nums.length;j++){
                if((nums[j]&bit) == 0){
                    zero++;
                } else {
                    one++;
                }
            }
            ans+=zero*one;
            bit<<=1;
        }
        return ans;
    }
}

----------------------------------------------------------------------------------------------------
Python O(nlogV) time
class Solution(object):
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ans = 0
        mask = 1
        for j in range(0, 32):
            ones = zeros = 0
            for num in nums:
                if num & mask:
                    ones += 1
                else:
                    zeros += 1
            ans += ones * zeros
            mask = mask << 1
        return ans


----------------------------------------------------------------------------------------------------
Java O(n) time,  O(1) space. Damn easy.

public class Solution {
    public int totalHammingDistance(int[] ns) {
        int sum = 0;
        
        for(int i =0; i < 32; i ++){
            int ones = 0;
            for(int v: ns){
                ones += ((v >> i) & 0x01)  ; // add 1 or 0;
            }
            int zeros = (ns.length - ones);
            sum +=  zeros * ones;
        }
            
        return sum;
    }
}



----------------------------------------------------------------------------------------------------
Share My Straightforward Java Solution
public class Solution {
    public int totalHammingDistance(int[] nums) {
        int n = nums.length;
        int sum = 0;
        int[][] pair = new int[32][2];
        for (int num : nums) {
            int k = 0;
            while (k < 32) {
                int cur = (num & 1);
                if (cur == 0) {
                    sum += pair[k][1];
                } else {
                    sum += pair[k][0];
                }
                pair[k][cur]++;
                k++;
                num >>= 1;
            }
        }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
share my easy understanding Java solution, counting amount of 1 in different position and calculate
public class Solution {
	    public int totalHammingDistance(int[] nums) {
	    	int length = nums.length;
	        int[] hammSum = new int[32];
	        for(int n : nums){//count the amount of 1s in each position
	        	for(int i = 0; i < 32 && n != 0; i++){
	        		if((n & 1) == 1) hammSum[i]++;
	        		n >>>=1;
	        	}
	        }
	        int total = 0;
	        for(int n : hammSum){//for each position, 1s and 0s combine as the hamming distance at this spot
	        	total += n * (length-n);
	        }
	        return total;
	    }
}


----------------------------------------------------------------------------------------------------
cpp solution
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int ones = 0, sum = 0;
        const int len = nums.size();
        for (int i = 0; i < 32; ++i) {
            ones = 0;
            for (int val: nums)
                ones += val >> i & 1;
            sum += (len - ones) * ones;
        }
        return sum;
    }
};


----------------------------------------------------------------------------------------------------
Javascript 3 lines
/**
 * @param {number[]} nums
 * @return {number}
 */
var totalHammingDistance = function(nums) {
    return Array.from(Array(32), (_,i)=>1<<i)
      .map(mask=>nums.filter(n=>(n&mask)!=0).length)
      .reduce((v,cnt)=>v+(nums.length-cnt)*cnt,0);
};


----------------------------------------------------------------------------------------------------
Swift solution
class Solution {
    func totalHammingDistance(_ nums: [Int]) -> Int {
        let n = nums.count
        var result = 0
        
        for i in 0..<32 {
            var bitCount = 0
            for j in 0..<n {
                bitCount += (nums[j] >> i) & 1
            }
            result += bitCount * (n - bitCount)
        }
        
        return result
    }
}


----------------------------------------------------------------------------------------------------
Python, Time Limit Exceeded
<p>It says run time limit exceeded. I&#39;m new to python and coding. Does my code have run time n~2?</p>
<p>&#39;&#39;&#39;<br/>
class Solution(object):<br/>
def totalHammingDistance(self, nums):<br/>
&#34;&#34;&#34;<br/>
:type nums: List&#91;int&#93;<br/>
:rtype: int<br/>
&#34;&#34;&#34;<br/>
total=0<br/>
for i in range (0,len(nums)-1):<br/>
for j in range (i,len(nums)-1):<br/>
total=total+bin(nums&#91;i&#93;^nums&#91;j+1&#93;).count(&#34;1&#34;)<br/>
return total<br/>
&#39;&#39;&#39;</p>


----------------------------------------------------------------------------------------------------
EASY UNDERSTAND o(n) METHOD(java)
public class Solution {
    public int totalHammingDistance(int[] nums) {
        int len=nums.length;
        int ret=0;
        for(int i=0;i<32;i++){
            int Nof1=0;
            for(int val:nums){
                Nof1+=(val>>i)&1;
            }
            ret+=Nof1*(len-Nof1);
        }
        return ret;
    }
}


----------------------------------------------------------------------------------------------------
Given OS and Answer OS are not running on the same system
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int retVal=0;
        for(int i=0; i<32; i++){
            int numZ=0, numO=0;
            for(int j=0; j<nums.size(); j++){
                if(nums[j]>>i&1) numO++;
                else numZ++;
            }
            retVal+=numO*numZ;
        }
        return retVal;
    }
};


----------------------------------------------------------------------------------------------------
Java #zeros * #ones solution
public class Solution {
    public int totalHammingDistance(int[] nums) {
        if (nums == null || nums.length <= 1) {
            return 0;
        }
        int[] zeros = new int[32];
        int[] ones = new int[32];
        for (int num : nums) {
            for (int i = 0; i < 32; i++) {
                int bit = num & (1 << i);
                zeros[i] += bit == 0 ? 1 : 0;
                ones[i] += bit == 0 ? 0 : 1;
            }
        }
        int totalDist = 0;
        for (int i = 0; i < 32; i++) {
            totalDist += zeros[i] * ones[i];
        }
        return totalDist;
    }
}


----------------------------------------------------------------------------------------------------
