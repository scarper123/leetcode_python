Simple Python+Java
public List<String> readBinaryWatch(int num) {
    List<String> times = new ArrayList<>();
    for (int h=0; h<12; h++)
        for (int m=0; m<60; m++)
            if (Integer.bitCount(h * 64 + m) == num)
                times.add(String.format("%d:%02d", h, m));
    return times;        
}

----------------------------------------------------------------------------------------------------
3ms Java Solution Using Backtracking and Idea of &quot;Permutation and Combination&quot;
public class Solution {
    public List<String> readBinaryWatch(int num) {
        List<String> res = new ArrayList<>();
        int[] nums1 = new int[]{8, 4, 2, 1}, nums2 = new int[]{32, 16, 8, 4, 2, 1};
        for(int i = 0; i <= num; i++) {
            List<Integer> list1 = generateDigit(nums1, i);
            List<Integer> list2 = generateDigit(nums2, num - i);
            for(int num1: list1) {
                if(num1 >= 12) continue;
                for(int num2: list2) {
                    if(num2 >= 60) continue;
                    res.add(num1 + ":" + (num2 < 10 ? "0" + num2 : num2));
                }
            }
        }
        return res;
    }

    private List<Integer> generateDigit(int[] nums, int count) {
        List<Integer> res = new ArrayList<>();
        generateDigitHelper(nums, count, 0, 0, res);
        return res;
    }

    private void generateDigitHelper(int[] nums, int count, int pos, int sum, List<Integer> res) {
        if(count == 0) {
            res.add(sum);
            return;
        }
        
        for(int i = pos; i < nums.length; i++) {
            generateDigitHelper(nums, count - 1, i + 1, sum + nums[i], res);    
        }
    }
}


----------------------------------------------------------------------------------------------------
Straight-forward 6-line c++ solution, no need to explain
vector<string> readBinaryWatch(int num) {
    vector<string> rs;
    for (int h = 0; h < 12; h++)
    for (int m = 0; m < 60; m++)
        if (bitset<10>(h << 6 | m).count() == num)
            rs.emplace_back(to_string(h) + (m < 10 ? ":0" : ":") + to_string(m));
    return rs;
}


----------------------------------------------------------------------------------------------------
Just for fun!!!!!!!   java 1ms, beats 100%
public class Solution {
    String[][] hour = {{"0"},
            {"1", "2", "4", "8"},
            {"3", "5", "6", "9", "10"},
            {"7", "11"}};
    String[][] minute = {{"00"},
            {"01", "02", "04", "08", "16", "32"},
            {"03", "05", "06", "09", "10", "12", "17", "18", "20", "24", "33", "34", "36", "40", "48"},
            {"07", "11", "13", "14", "19", "21", "22", "25", "26", "28", "35", "37", "38", "41", "42", "44", "49", "50", "52", "56"},
            {"15", "23", "27", "29", "30", "39", "43", "45", "46", "51", "53", "54", "57", "58"},
            {"31", "47", "55", "59"}};

    public List<String> readBinaryWatch(int num) {
        List<String> ret = new ArrayList();
        for (int i = 0; i <= 3 && i <= num; i++) {
            if (num - i <= 5) {
                for (String str1 : hour[i]) {
                    for (String str2 : minute[num - i]) {
                        ret.add(str1 + ":" + str2);
                    }
                }
            }
        }
        return ret;
    }
}


----------------------------------------------------------------------------------------------------
straightforward java answer
    public List<String> readBinaryWatch(int num) {
        ArrayList<String> result = new ArrayList<>();
        for (int i = 0; i < 12; i++) {
            for (int j = 0; j < 60; j++) {
                if (Integer.bitCount(i) + Integer.bitCount(j) == num) {
                    result.add(String.format("%d:%02d", i, j));
                }
            }
        }
        return result;
    }

----------------------------------------------------------------------------------------------------
Python DFS, and complexity analysis
class Solution(object):
    def readBinaryWatch(self, n):
        
        def dfs(n, hours, mins, idx):
            if hours >= 12 or mins > 59: return
            if not n:
                res.append(str(hours) + ":" + "0" * (mins < 10) + str(mins))
                return
            for i in range(idx, 10):
                if i < 4: 
                    dfs(n - 1, hours | (1 << i), mins, i + 1)
                else:
                    k = i - 4
                    dfs(n - 1, hours, mins | (1 << k), i + 1)
        
        res = []
        dfs(n, 0, 0, 0)
        return res


----------------------------------------------------------------------------------------------------
Simple Java AC solution with Explanation
public static List<String> readBinaryWatch(int num) {
        List<String> list = new ArrayList<>();
        dfs(new int[10], 0, 0, list, num);
        return list;
    }

    private static void dfs(int[] a, int i, int k, List<String> list, int num) {
        if(k == num) {
            String res = getTime(a);
            if(res != null)
                list.add(res);
            return;
        }
        if(i == a.length) {
            return;
        }
        a[i] = 0;
        dfs(a, i+1, k, list, num);

        a[i] = 1;
        dfs(a, i+1, k+1, list, num);

        a[i] = 0;
    }

    private static String getTime(int[] a) {
        int hours = 0;
        for(int i = 0; i < 4; i++) {
            if(a[i] == 1) {
                hours = hours + (int)Math.pow(2, i);
            }
        }

        int minutes = 0;
        for(int i = 4; i < 10; i++) {
            if(a[i] == 1) {
                minutes = minutes + (int)Math.pow(2, i-4);
            }
        }
        String min = "" + minutes;
        if(minutes  <  10)
            min = "0" + min;
        String res = hours + ":" + min;
        if(hours  >= 12  ||  minutes  >=  60)
            return null;
        return res;
    }



----------------------------------------------------------------------------------------------------
0ms C++ Back-tracking Solution with explanation
class Solution 
{
    // date: 2016-09-18     location: Vista Del Lago III
    vector<int> hour = {1, 2, 4, 8}, minute = {1, 2, 4, 8, 16, 32};
public:
    vector<string> readBinaryWatch(int num) {
        vector<string> res;
        helper(res, make_pair(0, 0), num, 0);
        return res;
    }
    
    void helper(vector<string>& res, pair<int, int> time, int num, int start_point) {
        if (num == 0) {
            res.push_back(to_string(time.first) +  (time.second < 10 ?  ":0" : ":") + to_string(time.second));
            return;
        }
        for (int i = start_point; i < hour.size() + minute.size(); i ++)
            if (i < hour.size()) {    
                time.first += hour[i];
                if (time.first < 12)     helper(res, time, num - 1, i + 1);     // "hour" should be less than 12.
                time.first -= hour[i];
            } else {     
                time.second += minute[i - hour.size()];
                if (time.second < 60)    helper(res, time, num - 1, i + 1);     // "minute" should be less than 60.
                time.second -= minute[i - hour.size()];
            }
    }
};


----------------------------------------------------------------------------------------------------
Easy, simple, and, naive Python solution
class Solution(object):
    def readBinaryWatch(self, num):
        """
        :type num: int
        :rtype: List[str]
        """
        output = []
        for h in range(12):
          for m in range(60):
            if bin(h * 64 + m).count('1') == num:
              output.append('%d:%02d' % (h, m))
        return output



----------------------------------------------------------------------------------------------------
sorry, I cheat..
def read_binary_watch(num)
    case num
    when 0
    	["0:00"]
    when 1
    	["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]
    when 2
    	["0:03","0:05","0:06","0:09","0:10","0:12","0:17","0:18","0:20","0:24","0:33","0:34","0:36","0:40","0:48","1:01","1:02","1:04","1:08","1:16","1:32","2:01","2:02","2:04","2:08","2:16","2:32","3:00","4:01","4:02","4:04","4:08","4:16","4:32","5:00","6:00","8:01","8:02","8:04","8:08","8:16","8:32","9:00","10:00"]
    when 3
    	["0:07","0:11","0:13","0:14","0:19","0:21","0:22","0:25","0:26","0:28","0:35","0:37","0:38","0:41","0:42","0:44","0:49","0:50","0:52","0:56","1:03","1:05","1:06","1:09","1:10","1:12","1:17","1:18","1:20","1:24","1:33","1:34","1:36","1:40","1:48","2:03","2:05","2:06","2:09","2:10","2:12","2:17","2:18","2:20","2:24","2:33","2:34","2:36","2:40","2:48","3:01","3:02","3:04","3:08","3:16","3:32","4:03","4:05","4:06","4:09","4:10","4:12","4:17","4:18","4:20","4:24","4:33","4:34","4:36","4:40","4:48","5:01","5:02","5:04","5:08","5:16","5:32","6:01","6:02","6:04","6:08","6:16","6:32","7:00","8:03","8:05","8:06","8:09","8:10","8:12","8:17","8:18","8:20","8:24","8:33","8:34","8:36","8:40","8:48","9:01","9:02","9:04","9:08","9:16","9:32","10:01","10:02","10:04","10:08","10:16","10:32","11:00"]
    when 4
    	["0:15","0:23","0:27","0:29","0:30","0:39","0:43","0:45","0:46","0:51","0:53","0:54","0:57","0:58","1:07","1:11","1:13","1:14","1:19","1:21","1:22","1:25","1:26","1:28","1:35","1:37","1:38","1:41","1:42","1:44","1:49","1:50","1:52","1:56","2:07","2:11","2:13","2:14","2:19","2:21","2:22","2:25","2:26","2:28","2:35","2:37","2:38","2:41","2:42","2:44","2:49","2:50","2:52","2:56","3:03","3:05","3:06","3:09","3:10","3:12","3:17","3:18","3:20","3:24","3:33","3:34","3:36","3:40","3:48","4:07","4:11","4:13","4:14","4:19","4:21","4:22","4:25","4:26","4:28","4:35","4:37","4:38","4:41","4:42","4:44","4:49","4:50","4:52","4:56","5:03","5:05","5:06","5:09","5:10","5:12","5:17","5:18","5:20","5:24","5:33","5:34","5:36","5:40","5:48","6:03","6:05","6:06","6:09","6:10","6:12","6:17","6:18","6:20","6:24","6:33","6:34","6:36","6:40","6:48","7:01","7:02","7:04","7:08","7:16","7:32","8:07","8:11","8:13","8:14","8:19","8:21","8:22","8:25","8:26","8:28","8:35","8:37","8:38","8:41","8:42","8:44","8:49","8:50","8:52","8:56","9:03","9:05","9:06","9:09","9:10","9:12","9:17","9:18","9:20","9:24","9:33","9:34","9:36","9:40","9:48","10:03","10:05","10:06","10:09","10:10","10:12","10:17","10:18","10:20","10:24","10:33","10:34","10:36","10:40","10:48","11:01","11:02","11:04","11:08","11:16","11:32"]
    when 5
    	["0:31","0:47","0:55","0:59","1:15","1:23","1:27","1:29","1:30","1:39","1:43","1:45","1:46","1:51","1:53","1:54","1:57","1:58","2:15","2:23","2:27","2:29","2:30","2:39","2:43","2:45","2:46","2:51","2:53","2:54","2:57","2:58","3:07","3:11","3:13","3:14","3:19","3:21","3:22","3:25","3:26","3:28","3:35","3:37","3:38","3:41","3:42","3:44","3:49","3:50","3:52","3:56","4:15","4:23","4:27","4:29","4:30","4:39","4:43","4:45","4:46","4:51","4:53","4:54","4:57","4:58","5:07","5:11","5:13","5:14","5:19","5:21","5:22","5:25","5:26","5:28","5:35","5:37","5:38","5:41","5:42","5:44","5:49","5:50","5:52","5:56","6:07","6:11","6:13","6:14","6:19","6:21","6:22","6:25","6:26","6:28","6:35","6:37","6:38","6:41","6:42","6:44","6:49","6:50","6:52","6:56","7:03","7:05","7:06","7:09","7:10","7:12","7:17","7:18","7:20","7:24","7:33","7:34","7:36","7:40","7:48","8:15","8:23","8:27","8:29","8:30","8:39","8:43","8:45","8:46","8:51","8:53","8:54","8:57","8:58","9:07","9:11","9:13","9:14","9:19","9:21","9:22","9:25","9:26","9:28","9:35","9:37","9:38","9:41","9:42","9:44","9:49","9:50","9:52","9:56","10:07","10:11","10:13","10:14","10:19","10:21","10:22","10:25","10:26","10:28","10:35","10:37","10:38","10:41","10:42","10:44","10:49","10:50","10:52","10:56","11:03","11:05","11:06","11:09","11:10","11:12","11:17","11:18","11:20","11:24","11:33","11:34","11:36","11:40","11:48"]
    when 6
    	["1:31","1:47","1:55","1:59","2:31","2:47","2:55","2:59","3:15","3:23","3:27","3:29","3:30","3:39","3:43","3:45","3:46","3:51","3:53","3:54","3:57","3:58","4:31","4:47","4:55","4:59","5:15","5:23","5:27","5:29","5:30","5:39","5:43","5:45","5:46","5:51","5:53","5:54","5:57","5:58","6:15","6:23","6:27","6:29","6:30","6:39","6:43","6:45","6:46","6:51","6:53","6:54","6:57","6:58","7:07","7:11","7:13","7:14","7:19","7:21","7:22","7:25","7:26","7:28","7:35","7:37","7:38","7:41","7:42","7:44","7:49","7:50","7:52","7:56","8:31","8:47","8:55","8:59","9:15","9:23","9:27","9:29","9:30","9:39","9:43","9:45","9:46","9:51","9:53","9:54","9:57","9:58","10:15","10:23","10:27","10:29","10:30","10:39","10:43","10:45","10:46","10:51","10:53","10:54","10:57","10:58","11:07","11:11","11:13","11:14","11:19","11:21","11:22","11:25","11:26","11:28","11:35","11:37","11:38","11:41","11:42","11:44","11:49","11:50","11:52","11:56"]
    when 7
    	["3:31","3:47","3:55","3:59","5:31","5:47","5:55","5:59","6:31","6:47","6:55","6:59","7:15","7:23","7:27","7:29","7:30","7:39","7:43","7:45","7:46","7:51","7:53","7:54","7:57","7:58","9:31","9:47","9:55","9:59","10:31","10:47","10:55","10:59","11:15","11:23","11:27","11:29","11:30","11:39","11:43","11:45","11:46","11:51","11:53","11:54","11:57","11:58"]
    when 8
    	["7:31","7:47","7:55","7:59","11:31","11:47","11:55","11:59"]
    else
    	[]
    end
end


----------------------------------------------------------------------------------------------------
Easy Backtracking Solution with Comments
public class Solution {
public List<String> readBinaryWatch(int num) {
    List<String> res=new ArrayList();
    if(num>8){  //impossible if num>8 because the max time is 11:59
        return res;
    }
    if(num==0){
        String ans="0:00";    //return the basic situation of num=0
        res.add(ans);
        return res;
    }
    int temp[]={8,4,2,1,32,16,8,4,2,1};//hours and minutes in an array!
    boolean index[]=new boolean[10];//boolean array to check if used!
    helper(res,temp,index,num,0);
    return res;
}
void helper(List<String> res,int[] temp,boolean[] index,int num,int start){
    if(num==0){//num=0,it is time to return answers!
        int hour=0;
       int minute=0;
        for(int k=0;k<10;k++){
            if(index[k]==true&&k<=3){
                hour+=temp[k];
            }
            if(index[k]==true&&k>3){
                minute+=temp[k];
            }
        }
        if(hour>=12||minute>=60){//impossible cases!
            return;
        }
        else{//Two situations of minutes to add to the string!!
            if(minute<10){
                String answer=""+hour+":"+"0"+minute;
                res.add(answer);
                return;
            }
            else{
                String answer=""+hour+":"+minute;
                res.add(answer);
                return;
            }
                
            }
        }
    for(int i=start;i<temp.length;i++){//Backtracking Loop from here!
        index[i]=true;
        helper(res,temp,index,num-1,i+1);
        index[i]=false;
    }
}


----------------------------------------------------------------------------------------------------
My Fancy C++ Solution
class Solution {
public:
    vector<string> readBinaryWatch(int num) {
        vector<vector<int>> hours{{0},{1,2,4,8},{3,5,9,6,10},{7,11}};
        vector<vector<int>> minutes{{0},{1,2,4,8,16,32},{3,5,9,17,33,6,10,18,34,12,20,36,24,40,48},{7,11,19,35,13,21,37,25,41,49,14,22,38,26,42,50,28,44,52,56},{15,23,39,27,43,51,29,45,53,57,30,46,54,58},{31,47,55,59}};
        vector<string> res;
        for (int k = 0; k <= num; ++k) {
            int t = num - k;
            if (k > 3 || t > 5) continue;
            for (int i = 0; i < hours[k].size(); ++i) {
                for (int j = 0; j < minutes[t].size(); ++j) {
                    string str = minutes[t][j] < 10 ? "0" + to_string(minutes[t][j]) : to_string(minutes[t][j]);
                    res.push_back(to_string(hours[k][i]) + ":" + str);
                }
            }
        }
        return res;
    }
};

----------------------------------------------------------------------------------------------------
3m Java recursion solution, easy to understand
public class Solution {
    final int[] watch = {1,2,4,8,1,2,4,8,16,32};
	
    public List<String> readBinaryWatch(int num) {
            List<String> list = new ArrayList<String>();
            if(num>=0) read_recursion(num, 0, list, 0 ,0);
            return list;
    }

    private void read_recursion(int num, int start, List<String> list, int hour, int minute){
    	if(num <= 0) {
    	    if(hour<12 && minute<60){
	    	        if(minute<10) list.add(hour+":0"+minute);
	    	        else list.add(hour+":"+minute);
    	    }
    	} else {
	            for(int i=start; i<watch.length; i++){
	    		if(i<4) read_recursion(num-1, i+1, list, hour+watch[i], minute);
	    		else read_recursion(num-1, i+1, list, hour, minute+watch[i]);
	            }
            }
    }
}


----------------------------------------------------------------------------------------------------
2 C++ solutions
class Solution {
public:
    vector<string> readBinaryWatch(int num) {
        vector<vector<int>>hour(5),min(7);
        for(int i=0;i<12;++i)
        {
            int n=bitset<4>(i).count();
            hour[n].push_back(i);
        }
        for(int i=0;i<60;++i)
        {
            int n=bitset<6>(i).count();
            min[n].push_back(i);
        }
        vector<string>res;
        for(int i=0;i<=num&&i<=4;++i)
            for(int j=0;j<hour[i].size();++j)
                for(int k=0;num-i<=6&&k<min[num-i].size();++k)
                {
                    string str=to_string(hour[i][j])+":";
                    if(min[num-i][k]<10)
                        str+="0";
                    str+=to_string(min[num-i][k]);
                    res.push_back(str);
                }
        return res;
    }
};

----------------------------------------------------------------------------------------------------
Concise Backtracking
public List<String> readBinaryWatch(int num) {
    List<String> result = new ArrayList<String>();
    run(result, 0, 0, 0, num);
    return result;
}

private void run(List<String> result, int time, int startBit, int count, int num) {
    if (startBit == 10 || count == num) {
        if (count == num && isValid(time)) {
            result.add(print(time));
        }
        return;
    }
    for (int i = startBit; i < 10; i++) {
        run(result, time | (1<<i), i+1, count+1, num);
    }
}

private boolean isValid(int time) {
    return (time & 0x3f) < 60 && ((time>>6)&0xf) < 12;
}

private String print(int time) {
    return String.format("%d:%02d", (time>>6)&0xf, (time & 0x3f));
}

----------------------------------------------------------------------------------------------------
Easy understand Python solution, generate results at the same time, beats 94%
    for i in range(0, 60):
        binary = "{0:b}".format(i)
        minute[binary.count('1')].append(i)

    for i in range(0, 12):
        binary = "{0:b}".format(i)
        hour[binary.count('1')].append(i)

    for i in range(0, num + 1):
        # print hour[i]
        # print minute[num-i]

        for j in hour[i]:
            for k in minute[num - i]:
                if len(str(k)) < 2:
                    res.append(str(j) + ':0' + str(k))
                else:
                    res.append(str(j) + ':' + str(k))

    return res

----------------------------------------------------------------------------------------------------
Java two loops, using bitCount, beat 90%
    public List<String> readBinaryWatch(int num) {
        int bitCount = 0;
    	List<String> ls = new ArrayList<String>();
    	
    	for(int i=0; i<12;i++){
    		for(int j=0; j<60;j++){
    			bitCount = Integer.bitCount(i)+Integer.bitCount(j);
    			if (bitCount==num){
    				if(j<10){
    					ls.add(i+":0"+j);
    				}else{
    					ls.add(i+":"+j);
    				}
    			}
    		}
    	}
    	return ls;
    }

----------------------------------------------------------------------------------------------------
C++ 13 ms simple solution. Precalculate results for every minute of the day and save them to cache
class Solution {
public:
    Solution()
    {
        res.resize(11);
        for(int i = 0; i <= 11; ++i)
        for(int j = 0; j <= 59; ++j)
        {
            stringstream ss;
            ss << setw(2) << setfill('0') << j;
            string min = ss.str();
            stringstream ss1;
            ss1 << i << ":" << min;
            int n = numbits(i) + numbits(j);
            res[n].push_back(ss1.str());
        }
        
    }
    int numbits(int n)
    {
        int ans = 0;
        for(int i = 0; i < 7; ++i)
        {
            ans += (n & 1);
            n = n >> 1;
        }
        return ans;
    }

    vector<string> readBinaryWatch(int num) {
        
        return res[num];
    }
    vector<vector<string>> res;
};


----------------------------------------------------------------------------------------------------
Python AC soutien using itertools
import itertools
class Solution(object):
    def convert(self,l): # print the result
        res = []
        for pair in l:
            h , m = pair[0] , pair[1]
            for i in h:
                for j in m:
                    t = i + ':'
                    t = t + '0' + j if len(j) == 1 else t + j
                    res += [t]
                    t = ''
        return res
    def readBinaryWatch(self, num):
        """
        :type num: int
        :rtype: List[str]
        """
        hour , minute , tem = [1,2,4,8] , [1,2,4,8,16,32] ,[ ]
        
        for i in range(num + 1):
            m = num - i
            if i > 0:
                combination1 = itertools.combinations(hour, i) # all possible hour
                hh = set()
                for i in combination1:
                    if sum(i) < 12: # just keep vaild hour
                        hh.add(str(sum(i))) 
            else:
                hh = set('0')
            
            if m > 0:
                combination2 = itertools.combinations(minute, m) # all possible minute
                mm = set()
                for i in combination2:
                    if sum(i) < 60: # just keep  vaild minute
                        mm.add(str(sum(i))) 
            else:
                mm = set('00')
            
            tem.append([hh,mm])
        return self.convert(tem)

----------------------------------------------------------------------------------------------------
Typical DFS with clear explanation
public List<String> readBinaryWatch(int num) {
		String[] times = new String[] {"1h","2h","4h","8h","1m","2m","4m","8m","16m","32m"};
		List<String> total = new ArrayList<String>();
		List<String> result = new ArrayList<String>();
		dfs(0, num, times, result, total);

		return total;
    }
// total is the final result placeholder
// when any result reach the size of num, covert it to the correct time format, add to final result
private void dfs(int start, int num, String[] times, List<String> result, List<String> total) {
    	if (result.size() == num) {
    		List<String> temp = new ArrayList<String>(result);
    		String timeRepresent = getTime(temp);
    		if (timeRepresent != null) {
    			total.add(timeRepresent);
    		}
    		return;
    	}
    	for (int i = start; i < times.length; i++) {
    		String time = times[i];
    		result.add(time);
    		dfs(i + 1, num, times, result, total);
    		result.remove(result.size() - 1);
    	}
    }
// helper function to get correct time representation
private String getTime(List<String> list) {
    	int hours = 0;
    	int minutes = 0;
    	for (int i = 0; i < list.size(); i++) {
    		String time = list.get(i);
    		if (time.contains("h")) {
    			String[] h = time.split("h");
    			hours += Integer.parseInt(h[0]);
    		}
    		if (time.contains("m")) {
    			String[] m = time.split("m");
    			minutes += Integer.parseInt(m[0]);
    		}
    	}
    	String connection = minutes < 10 ? ":0" : ":";
    	if (minutes < 60 && hours < 12) {
    		return hours + connection + minutes;
    	}
    	return null;
    }


----------------------------------------------------------------------------------------------------
