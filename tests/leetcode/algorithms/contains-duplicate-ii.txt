C++ solution and explanation
To solve this problem, it is helpful to first think how many subsets are there. If there is no duplicate element, the answer is simply 2^n, where n is the number of elements. This is because you have two choices for each element, either putting it into the subset or not. So all subsets for this no-duplicate set can be easily constructed:
num of subset

 -  (1        to 2^0) empty set is the first subset
 -  (2^0+1 to 2^1) add the first element into subset from (1)
 -  (2^1+1 to 2^2) add the second element into subset (1 to 2^1)
 -  (2^2+1 to 2^3) add the third element into subset (1 to 2^2)
 - ....
 -  (2^(n-1)+1 to 2^n) add the nth element into subset(1 to 2^(n-1))

Then how many subsets are there if there are duplicate elements? We can treat duplicate element as a spacial element. For example, if we have duplicate elements (5, 5), instead of treating them as two elements that are duplicate, we can treat it as one special element 5, but this element has more than two choices: you can either NOT put it into the subset, or put ONE 5 into the subset, or put TWO 5s into the subset. Therefore, we are given an array (a1, a2, a3, ..., an) with each of them appearing (k1, k2, k3, ..., kn) times, the number of subset is (k1+1)*(k2+1)*...(kn+1). We can easily see how to write down all the subsets similar to the approach above.

        class Solution {
    public:
        vector<vector<int> > subsetsWithDup(vector<int> &S) {
            vector<vector<int> > totalset = {{}};
            sort(S.begin(),S.end());
            for(int i=0; i<S.size();){
                int count = 0; // num of elements are the same
                while(count + i<S.size() && S[count+i]==S[i])  count++;
                int previousN = totalset.size();
                for(int k=0; k<previousN; k++){
                    vector<int> instance = totalset[k];
                    for(int j=0; j<count; j++){
                        instance.push_back(S[i]);
                        totalset.push_back(instance);
                    }
                }
                i += count;
            }
            return totalset;
            }
    };

----------------------------------------------------------------------------------------------------
Simple iterative solution
If we want to insert an element which is a dup, we can only insert it after the newly inserted elements from last step.

    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        sort(S.begin(), S.end());
        vector<vector<int>> ret = {{}};
        int size = 0, startIndex = 0;
        for (int i = 0; i < S.size(); i++) {
            startIndex = i >= 1 && S[i] == S[i - 1] ? size : 0;
            size = ret.size();
            for (int j = startIndex; j < size; j++) {
                vector<int> temp = ret[j];
                temp.push_back(S[i]);
                ret.push_back(temp);
            }
        }
        return ret;
    }

----------------------------------------------------------------------------------------------------
Accepted 10ms c++ solution use backtracking, only 10 lines, easy understand.
**The characteristics of C++ reference is an outstanding tool for backtracking algorithm!**

let us use [1,2,3,4] as an example to explain my solution:

    subsets([1,2,3,4]) = []
                         // push(1)
                         [1, subsets([2,3,4])] // if push N times in subsets([2,3,4]), the pop times is also N, so vec is also [1] after backtrack.
                         // pop(), push(2)
                         [2, subsets([3,4])]
                         // pop(), push(3)
                         [3, subsets([4])]
                         // pop(), push(4)
                         [4, subsets([])]
                         // pop()

Accepted 10ms c++ solution use backtracking for [Subsets ][1]

    class Solution {
    public:
        std::vector<std::vector<int> > subsets(std::vector<int> &nums) {
    		std::sort(nums.begin(), nums.end());
            std::vector<std::vector<int> > res;
    		std::vector<int> vec;
    		subsets(res, nums, vec, 0);
    		return res;
        }
    private:
    	void subsets(std::vector<std::vector<int> > &res, std::vector<int> &nums, std::vector<int> &vec, int begin) {
    		res.push_back(vec);
    		for (int i = begin; i != nums.size(); ++i) {
    			vec.push_back(nums[i]);
    			subsets(res, nums, vec, i + 1);
    			vec.pop_back();
    		}
    	}
    };


Accepted 10ms c++ solution use backtracking for [Subsets II][2]

    class Solution {
    public:
        std::vector<std::vector<int> > subsetsWithDup(std::vector<int> &nums) {
    		std::sort(nums.begin(), nums.end());
            std::vector<std::vector<int> > res;
    		std::vector<int> vec;
    		subsetsWithDup(res, nums, vec, 0);
    		return res;
        }
    private:
    	void subsetsWithDup(std::vector<std::vector<int> > &res, std::vector<int> &nums, std::vector<int> &vec, int begin) {
    		res.push_back(vec);
    		for (int i = begin; i != nums.size(); ++i)
    			if (i == begin || nums[i] != nums[i - 1]) { 
    				vec.push_back(nums[i]);
    				subsetsWithDup(res, nums, vec, i + 1);
    				vec.pop_back();
    			}
    	}
    };


  [1]: https://leetcode.com/problems/subsets/
  [2]: https://leetcode.com/problems/subsets-ii/

----------------------------------------------------------------------------------------------------
Simple python solution without extra space.
    class Solution:
        # @param num, a list of integer
        # @return a list of lists of integer
        def subsetsWithDup(self, S):
            res = [[]]
            S.sort()
            for i in range(len(S)):
                if i == 0 or S[i] != S[i - 1]:
                    l = len(res)
                for j in range(len(res) - l, len(res)):
                    res.append(res[j] + [S[i]])
            return res

if S[i] is same to S[i - 1], then it needn't to be added to all of the subset, just add it to the last l subsets which are created by adding S[i - 1]

----------------------------------------------------------------------------------------------------
Very simple and fast java solution
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> each = new ArrayList<>();
        helper(res, each, 0, nums);
        return res;
    }
    public void helper(List<List<Integer>> res, List<Integer> each, int pos, int[] n) {
        if (pos <= n.length) {
            res.add(each);
        }
        int i = pos;
        while (i < n.length) {
            each.add(n[i]);
            helper(res, new ArrayList<>(each), i + 1, n);
            each.remove(each.size() - 1);
            i++;
            while (i < n.length && n[i] == n[i - 1]) {i++;}
        }
        return;
    }


----------
The Basic idea is: use "while (i < n.length && n[i] == n[i - 1]) {i++;}" to avoid the duplicate. For example, the input is 2 2 2 3 4. Consider the helper function. The process is: 

 - each.add(n[i]); --> add first 2 (index 0)
 - helper(res, new ArrayList<>(each), i + 1, n); --> go to recursion part, list each is <2 (index 0)>
 - while (i < n.length && n[i] == n[i - 1]) {i++;} --> after this, i == 3, add the element as in subset I

----------------------------------------------------------------------------------------------------
Standard DFS Java Solution
    public class Solution {
        public List<List<Integer>> subsetsWithDup(int[] nums) {
            Arrays.sort(nums);
            List<List<Integer>> result= new ArrayList<>();
            dfs(nums,0,new ArrayList<Integer>(),result);
            return result;
        }
        
        public void dfs(int[] nums,int index,List<Integer> path,List<List<Integer>> result){
            result.add(path);
            for(int i=index;i<nums.length;i++){
                if(i>index&&nums[i]==nums[i-1]) continue;
                List<Integer> nPath= new ArrayList<>(path);
                nPath.add(nums[i]);
                dfs(nums,i+1,nPath,result);
            }
        }
    }

----------------------------------------------------------------------------------------------------
Share my 2ms java iteration solution (very simple and short)
    
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		result.add(new ArrayList<Integer>());
		int begin = 0;
		for(int i = 0; i < nums.length; i++){
			if(i == 0 || nums[i] != nums[i - 1]) begin = 0;
			int size = result.size();
			for(int j = begin; j < size; j++){
				List<Integer> cur = new ArrayList<Integer>(result.get(j));
				cur.add(nums[i]);
				result.add(cur);
			}
			begin = size;
		}
		return result;
    }

----------------------------------------------------------------------------------------------------
48ms solution with subset construction method
One possible solution is to generate all possible subset using bit-mask, and use a set to test the existence of a subset. However, this method may generate duplicate subsets during the process, and has unsatisfiable time complexity. E.g. for input <1 1 1 1 1 1 1 1 1>, the above method will generate too many duplicate subsets.

I use a subset construction method, whose mechanism is illustrated with an example:

input: <1 2 2 3 3 3> (assumed to be sorted)

initialization: empty set <>. ret = {<>}

for element 1, add it to ret, and we get: <1>. ret = {<> <1>}

for element 2, add it to ret, and we get: <2> <1 2>; however, notice that we have two elements of 2, hence we further need to add <2 2> to {<> <1>}, and get <2 2> <1 2 2>. ret = {<> <1> <2> <1 2> <2 2> <1 2 2>}

for element 3, we newly construct the following:              
<3> <1 3> <2 3> <1 2 3> < 2 2 3> < 1 2 2 3>             
<3 3> <1 3 3> <2 3 3> <1 2 3 3> <2 2 3 3> <1 2 2 3 3>             
<3 3 3> <1 3 3 3> < 2 3 3 3> <1 2 3 3 3> <2 2 3 3 3> <1 2 2 3 3 3>                 
finally, ret = {<> <1> <2> <1 2> <2 2> <1 2 2>   
<3> <1 3> <2 3> <1 2 3> < 2 2 3> < 1 2 2 3>   
<3 3> <1 3 3> <2 3 3> <1 2 3 3> <2 2 3 3> <1 2 2 3 3>   
<3 3 3> <1 3 3 3> < 2 3 3 3> <1 2 3 3 3> <2 2 3 3 3> <1 2 2 3 3 3>
}

    class Solution {
    public:
        vector<vector<int> > subsetsWithDup(vector<int> &S) {
            vector<vector<int> > ret;
            ret.push_back(vector<int>());
            sort(S.begin(), S.end());
            for (int i = 0; i < S.size(); ) {
                int j = i;
                while (j < S.size() && S[j] == S[i]) j++;
                int size = ret.size();
                for (int len = 1; i + len <= j; len++) {
                    for (int cnt = 0; cnt < size; cnt++) {
                        vector<int> subset(ret[cnt]);
                        for (int k = 0; k < len; k++) subset.push_back(S[i]);
                        ret.push_back(subset);
                    }
                }
                i = j;
            }
            return ret;
        }
    };



----------------------------------------------------------------------------------------------------
Share my 12ms C++ solution
    class Solution {
    public:
        vector<vector<int>> subsetsWithDup(vector<int>& nums) {
            sort(nums.begin(), nums.end());
            vector<vector<int>> subsets;
            vector<int> subset;
            subsetsWithDupWorker(nums, subsets, subset, 0);
            return subsets;
        }
    private:
        void subsetsWithDupWorker(const vector<int>& nums, vector<vector<int>>& subsets, vector<int>& subset, int begin) {
            subsets.push_back(subset);
            for (int i = begin; i < nums.size(); i++) {
                if (i != begin && nums[i] == nums[i-1]) continue;
                subset.push_back(nums[i]);
                subsetsWithDupWorker(nums, subsets, subset, i+1);
                subset.pop_back();
            }
        }
    };

----------------------------------------------------------------------------------------------------
C++, AC, Regular backtracking solution for both subsets I and II
    void dfs(vector<int> &S, int start, vector<int> &output, vector<vector<int>> &result) {
        result.push_back(output);
        
        for (int i = start; i < S.size(); i++) {
            output.push_back(S[i]);
            dfs(S, i + 1, output, result);
            output.pop_back();
            // disable following line for subset I
            while (i + 1 < S.size() && S[i + 1] == S[i]) i++;
        }
    }
    
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        vector<vector<int>> result;
        vector<int> output;
        
        if (0 == S.size()) {
            result.push_back(output);
            return result;
        }
        
        sort(S.begin(), S.end());
        dfs(S, 0, output, result);
        return result;
    }

----------------------------------------------------------------------------------------------------
Java solution using bit manipulation
    public class Solution {
        public List<List<Integer>> subsetsWithDup(int[] num) {
            Arrays.sort(num);
            List<List<Integer>> lists = new ArrayList<>();
            int subsetNum = 1<<num.length;
            for(int i=0;i<subsetNum;i++){
                List<Integer> list = new ArrayList<>();
                boolean illegal=false;
                for(int j=0;j<num.length;j++){
                    if((i>>j&1)==1){
                        if(j>0&&num[j]==num[j-1]&&(i>>(j-1)&1)==0){
                            illegal=true;
                            break;
                        }else{
                            list.add(num[j]);
                        }
                    }
                }
                if(!illegal){
                   lists.add(list); 
                }
                
            }
            return lists;
        }
    }

The idea is using every bit to represent one element in the set. The total number is 2 to num.length. Then we need to avoid duplicates. After we sort the array, the same number will be adjacent to each other. 

For example the set is {1,1,1}. We can get subset {} and {1} first. That's great.
Then we need to pay attention. Suppose we have a subset x, which including the second 1 but not the first 1, x is a duplicate. 
That's why I write the predicate:
if(j>0&&num[j]==num[j-1]&&(i>>(j-1)&1)==0){
                            illegal=true;
                            break;
}

Hope someone can explain it better. I will go to gym now.




----------------------------------------------------------------------------------------------------
Accepted java iterative solution
for explanation plz see comments in the code 

    public List<List<Integer>> subsetsWithDup(int[] num) {
        Arrays.sort(num);
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        int len = num.length;
        if (len == 0) return ans; 
        
        ans.add(new ArrayList<Integer>()); // first, need to add the subset of num[0]
        ans.add(new ArrayList<Integer>());
        ans.get(1).add(num[0]);
        
        int nprev = 1; // this is the number of lists that the previous number was added in.
                     // if the current number is same as the prev one, it'll be only added in the 
                    // lists that has the prev number.
                    
        for (int i = 1; i < len ; ++i){
            int size = ans.size();
            if (num[i]!=num[i-1])   // if different
                nprev = size;        // this means add num[i] to all lists in ans;
            for (int j = size-nprev; j < size; ++j){
                List<Integer> l = new ArrayList<Integer>(ans.get(j));
                l.add(num[i]);
                ans.add(l);
            }
        }
        return ans;
    }

----------------------------------------------------------------------------------------------------
Share simple recursive java solution
my method is simple, try to output all combination of the list and skip the same integer.

    public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] num) {
        Arrays.sort(num);
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        LinkedList<Integer> temp = new LinkedList<Integer>();
        Rec(num,result,temp,0);
        return result;
    }
    private static void Rec(int[] a,List<List<Integer>> result, LinkedList<Integer> temp, int current){
        result.add(new LinkedList(temp));
        for(int i=current;i<a.length;i++){
            if(i==current || a[i]!=a[i-1]){
                temp.add(a[i]);
                Rec(a,result,temp,i+1);
                temp.remove(temp.size()-1);
            }
        }
        return;
    }
}

----------------------------------------------------------------------------------------------------
Simple python solution (DFS).
      
    # DFS  
    def subsetsWithDup(self, nums):
        res = []
        nums.sort()
        self.dfs(nums, 0, [], res)
        return res
        
    def dfs(self, nums, index, path, res):
        res.append(path)
        for i in xrange(index, len(nums)):
            if i > index and nums[i] == nums[i-1]:
                continue
            self.dfs(nums, i+1, path+[nums[i]], res)

----------------------------------------------------------------------------------------------------
My solution using bit masks
Here is my solution using bit masks.

    public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] num) {
        //Sort the input
        Arrays.sort(num);
        int numberSets = 1 << num.length;
        List<List<Integer>> solution = new LinkedList<>();
        for(int i = 0; i<numberSets; i++){
            List<Integer> subset = new LinkedList<Integer>();
            for(int j = 0; j< num.length; j++){
                if((i & (1 << j)) > 0){
                    subset.add(num[j]);
                }
            }
            if(!solution.contains(subset))
                solution.add(subset);
        }
        
        return solution;
    }
}

----------------------------------------------------------------------------------------------------
Subsets vs. Subsets II: Add only 3 more lines to Subsets solution
public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<Integer>()); 
        Arrays.sort(nums); //important: sort nums 
        
        for (int num: nums) {
            List<List<Integer>> resDup = new ArrayList<>(res);
            for (List<Integer> list: resDup) {
                List<Integer> tmp = new ArrayList<>(list);
                tmp.add(num);
                if (!res.contains(tmp))  //check duplicates
                    res.add(tmp);
            }
        }
        return res; 
    }
}


----------------------------------------------------------------------------------------------------
Share my 5 lines of Python solution
From the previous question Subsets I, the iterate solution is 

    def subsets(self, nums):
        res = [[]]
        nums.sort()
        for num in nums: 
            res += [ i + [num] for i in res]
        return res

For every number in nums, we add it to every i in res. Ex. [[]], we add [] + [1] to res. The new res is [ [], [1] ]. Then add [] + [2] and [1] + [2], the new res is [[],[1],[2],[1,2]]. 

To void the duplicate, we check if i + [num] is already in res. So the iterate solution for Subsets II is: 

    def subsetsWithDup(self, nums):
        res = [[]]
        nums.sort()
        for num in nums: 
            res += [ i + [num] for i in res if i + [num] not in res]
        return res

----------------------------------------------------------------------------------------------------
12 ms code with explaination
    class Solution {
    public:
    	vector<vector<int> > subsetsWithDup(vector<int> &S) {
    		sort(S.begin(),S.end());
    		vector<vector<int>> results;
    		vector<vector<int>> append;
    		//from less to more
    		for (unsigned i = 0; i < S.size(); ++i){
    			if (i>0 && S[i] != S[i - 1]){
    				append = results;
    			}
    			for (vector<vector<int>>::iterator iter = append.begin(); iter != append.end(); ++iter){
    				iter->push_back(S[i]);
    				results.push_back(*iter);
    			}
    			if (i ==0 || i > 0 && S[i] != S[i - 1]){
    				vector<int> temp;
    				temp.push_back(S[i]);
    				append.push_back(temp);
    				results.push_back(temp);
    			}
    		}
    		vector<int> emp;
    		results.push_back(emp);
    		return results;
    	}
    };

same [idea][1] as I used in subset I   
but in this problem, we need to handle the duplicate problem  
by observing some test case, we can find when S[i] == S[i-1] ,subset of i *th*  only added those vector<int> which contains S[i] compared to subset of (i-1)*th* . Those vector<int> are appended when iteration get i-1 from i-2 , so we need to store the appended elements in case we use it.  
for example,{1,2,3,3}  
subset of {1,2} : {1,2,12}  
subset of {1,2,3} : {1,2,12} + {1 **3**,2 **3**,12 **3**}  = {1,2,12,13,23,123}  
subset of {1,2,3,3} : {1,2,12,13,23,123} + {1 **33**,2 **33**,12 **33**}


  [1]: https://oj.leetcode.com/discuss/20560/12-ms-code-with-explaination

----------------------------------------------------------------------------------------------------
Recursion and non-recursion Java solution for your reference
Two solution, recursion and non-recursion:

Recursion solution:

    public class Solution {
        Set<Integer> hash = new HashSet<>();
        List<List<Integer>> res = new ArrayList<>();
        int n;
        int[] nums;
        
        public void search(List<Integer> l, int p) {
            if (p == n) {
                int h = l.hashCode();
                if (!hash.contains(h)) {
                    hash.add(h);
                    res.add(new ArrayList<>(l));
                }
                return;
            }
            l.add(nums[p]);
            search(l, p+1);
            l.remove(l.size()-1);
            search(l, p+1);
        }
        
        public List<List<Integer>> subsetsWithDup(int[] nums) {
            this.n = nums.length; this.nums = nums;
            Arrays.sort(nums);
            search(new ArrayList<Integer>(), 0);
            return res;
        }
    }

Non-recursion solution:

    public class Solution {
        public List<List<Integer>> subsetsWithDup(int[] nums) {
            List<List<Integer>> res = new ArrayList<>();
            List<Integer> temp = new ArrayList<>();
            res.add(temp);
            Arrays.sort(nums);
            int l = 0, k;
            for (int i = 0; i < nums.length; i++) {
                if (i == 0 || nums[i] != nums[i-1])
                    l = res.size();
                k = res.size();
                for (int j = k-l; j < k; j++) {
                    temp = new ArrayList<>(res.get(j));
                    temp.add(nums[i]);
                    res.add(temp);
                }
            }
            return res;
        }
    }



----------------------------------------------------------------------------------------------------
fastest 8ms C++ iterative solution, beats 80%, with detailed explaination
vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> sol(1);
        int start = 0;
        for (int i = 0; i < nums.size(); i++){
            int n = sol.size();
            for (int j = start; j < n; j++){
                sol.push_back(sol[j]);
                sol.back().push_back(nums[i]);
            }
            // start is the beginning of new vectors add by nums[i]
            if (i < nums.size()-1 && nums[i]==nums[i+1]) start = sol.size()-(n-start);
            else start = 0;
        }
        return sol;
    }


----------------------------------------------------------------------------------------------------
