Simple Java HashMap Solution
public int findLHS(int[] nums) {
    Map<Long, Integer> map = new HashMap<>();
    for (long num : nums) {
        map.put(num, map.getOrDefault(num, 0) + 1);
    }
    int result = 0;
    for (long key : map.keySet()) {
        if (map.containsKey(key + 1)) {
            result = Math.max(result, map.get(key + 1) + map.get(key));
        }
    }
    return result;
}

----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
count = {}
for x in A:
    count[x] = count.get(x, 0) + 1


----------------------------------------------------------------------------------------------------
Java Solution, HashMap
public class Solution {
    public int findLHS(int[] nums) {
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        for (int num : map.keySet()) {
            if (map.containsKey(num + 1)) {
                max = Math.max(max, map.get(num) + map.get(num + 1));
            }
        }
        
        return max;
    }
}


----------------------------------------------------------------------------------------------------
C++ Solution
class Solution {
public:
    int findLHS(vector<int>& nums) {
        map<int, int> freqs;
        for (int n : nums) {
            freqs[n]++;
        }

        int longest = 0;
        int lastNum = 0;
        int lastFreq = 0;
        for (pair<int, int> p : freqs) {
            int freq2 = 0;
            if (lastFreq && p.first == lastNum + 1) {
                freq2 = p.second + lastFreq;
            }
            longest = max(longest, freq2);
            lastNum = p.first;
            lastFreq = p.second;
        }
        return longest;
    }
};


----------------------------------------------------------------------------------------------------
Short Python using Counter
class Solution(object):
    def findLHS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count = collections.Counter(nums)
        return max([count[x] + count[x+1] for x in count if count[x+1]] or [0])


----------------------------------------------------------------------------------------------------
Simple Java Sort Solution (beat 100%)
public int findLHS(int[] nums) {
    if (nums.length == 0) {
        return 0;
    }
    Arrays.sort(nums);
    int start = 0;
    int min = nums[0];
    int res = 0;
    int nextstart = 1;
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - min > 1) {
            start = nextstart++;
            min = nums[start];
            i--;
        } else if (nums[i] - min == 1) {
            res = Math.max(res, i - start + 1);
            if (nums[i] != nums[i - 1]) {
                nextstart = i;
            }
        }
    }
    return res;
}

----------------------------------------------------------------------------------------------------
two C++ Solution run time with explanation
       int findLHS(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int len = 0;
        for(int i = 1, start = 0, new_start = 0; i<nums.size(); i++)
        {

            if (nums[i] - nums[start] > 1)    
                start = new_start;
            if (nums[i] != nums[i-1]) 
                new_start = i;
            if(nums[i] - nums[start] == 1)
                len = max(len, i-start+1);
        }
        return len;


----------------------------------------------------------------------------------------------------
C++ 6 lines (sort)
int findLHS(vector<int>& nums) {
    sort(nums.begin(), nums.end());
    for (auto i = 0, lhs = 0, cnt1 = 0, cnt2 = 0; i <= nums.size(); ++i) {
        if (i == nums.size()) return lhs;
        if (i == 0 || nums[i] == nums[i - 1]) ++cnt1;
        else cnt2 = (nums[i - 1] + 1 == nums[i]) ? cnt1 : 0, cnt1 = 1;
        if (cnt1 > 0 && cnt2 > 0) lhs = max(lhs, cnt1 + cnt2);
    }
}


----------------------------------------------------------------------------------------------------
C++ One Pass with Hash Table
public:
    int findLHS(vector<int>& nums) {
        
        unordered_map<int, int> map;
        auto max = 0;
        
        for(auto element : nums){
            
            map[element]++;
            if (map.count(element-1) > 0) {
                max = std::max(max, map[element-1] + map[element] );
            }
            if (map.count(element+1) > 0) {
                max = std::max(max, map[element+1] + map[element] );
            }
        }
        return max;
    }
};


----------------------------------------------------------------------------------------------------
Python 119ms beats 99% submissions with explanation

class Solution(object):
    
    def findLHS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        mp={}
        for i in nums:
            if i not in mp:
                mp[i]=1
            else: mp[i]+=1
            
        ln=0;
        
        for i in mp:
            if mp.get(i+1):
                ln=max(ln,mp[i]+mp[i+1])
        return ln     
        


----------------------------------------------------------------------------------------------------
Simple Java Solution with two pointers - 48ms
public class Solution {
    public int findLHS(int[] nums) {
        int len = nums.length;
        Arrays.sort(nums);
        int left = 0;
        int result = 0;
        for (int i = 0; i < len; i++) {
            while (left < i && (long) (nums[i] - nums[left]) > 1L) {
                left++;
            }
            if (nums[i] == nums[left]) {
                continue;
            }
            result = Math.max(i - left + 1, result);
        }
        return result;
    }
}


----------------------------------------------------------------------------------------------------
concise c++ solution
int findLHS(vector<int>& nums) {
    int size = nums.size();
    if(size == 0){
        return 0;
    }
    int length = 0;
    multiset<int> order(nums.begin(), nums.end());
    int number1 = 0, number2 = 0;
    int last = *(order.begin());
    multiset<int> ::iterator it = order.begin();
    for(++it; it!=order.end();){
        if(*it - last == 1){
            number2 = order.count(*it);
            number1 = order.count(last);
            if(length < (number1+number2)){
                length = number1+number2;
            }
            
        }
        last = *it;
        ++it;
    }
    
    return length;
}

----------------------------------------------------------------------------------------------------
Simple JavaScript Solution
/**
 * @param {number[]} nums
 * @return {number}
 */
var findLHS = function(nums) {
  let numMap = {};
  nums.forEach(num => {
    if (numMap[num]) {
      ++numMap[num];
    } else {
      numMap[num] = 1;
    }
  });
  let keys = Object.keys(numMap).sort((a,b) => a-b);
  if (keys.length === 1) {
    return 0;
  }
  let max = 0;
  for(i = 0; i < keys.length - 1; ++i) {
    if ((keys[i+1] - keys[i] == 1) && (numMap[keys[i]] + numMap[keys[i+1]])> max) {
      max =numMap[keys[i]] + numMap[keys[i+1]];
    }
  }
  return max;
};

----------------------------------------------------------------------------------------------------
JavaScript Solution
/**
 * @param {number[]} nums
 * @return {number}
 */
var findLHS = function(nums) {
  nums = nums.sort((a,b) => a-b);
  let start = 0;
  let res = 0;
  let next = 0;
  console.log(nums);
  for(let i = 1; i < nums.length; ++i) {
    if (nums[i] - nums[start] > 1) {
      start = ++next;
    } else if (nums[i] - nums[start] === 1) {
      res = Math.max(i - start +1, res);
    } else {
      next++;
    }
  }
  return res;
}

----------------------------------------------------------------------------------------------------
Simple java iteration solution
public int findLHS(int[] nums) {
        if (nums.length < 2) {
            return 0;
        }
        Arrays.sort(nums);
        int i = 0;
        int j = 0;
        int k = 0;
        int longest = 0;
        while (j < nums.length) {
            if (nums[j] - nums[i] == 0) {
                j += 1;
            } else if (nums[j] - nums[i] == 1) {
                if (j == nums.length - 1) {
                    int l = j - i + 1;
                    if (l > longest) {
                        longest = l;
                    }
                }
                if (nums[j - 1] == nums[i]) {
                    k = j;
                }
                j += 1;
            } else {
                if (nums[k] == nums[i] + 1) {
                    int l = j - i;
                    if (l > longest) {
                        longest = l;
                    }
                }
                if (nums[j] == nums[k] + 1) {
                    i = k;
                    k = j;
                } else {
                    i = j;
                }
            }
        }
        return longest;
    }


----------------------------------------------------------------------------------------------------
Simple C++ 8 lines hash table solution
    int findLHS(vector<int>& nums) {
        int max_len=0;
        unordered_map<int,int>m;
        for(int i=0;i<nums.size();i++) m[nums[i]]++;
        for(auto x:m){
            int count=m.count(x.first-1) ? x.second+m[x.first-1] : 0;
            if(count>max_len) max_len=count;
        }
        return max_len;
    }


----------------------------------------------------------------------------------------------------
Python O(n) Time, O(1) Space
class Solution(object):
    def findLHS(self, nums):
        nums.sort()
        ret, cnt1, cnt2 = 0, 0, 0
        for i in range(len(nums)):
            if i == 0 or nums[i - 1] == nums[i]:
                cnt2 += 1
            else:
                if nums[i - 1] + 1 == nums[i]:
                    cnt1 = cnt2
                else:
                    cnt1 = 0
                cnt2 = 1
            if cnt1 != 0 and cnt2 != 0:
                ret = max(ret, cnt1 + cnt2)
        return ret


----------------------------------------------------------------------------------------------------
What&#x27;s wrong with my code?
int findLHS(vector<int>& nums) {
unordered_map<int,int> map;
for(auto i:nums)
map[i]++;
int cnt=0;
for(auto it:map)
cnt = max(cnt,max(map[it.first-1]?(map[it.first-1]+map[it.first]):0,map[it.first+1]?(map[it.first]+map[it.first+1]):0));
return cnt;
}


----------------------------------------------------------------------------------------------------
