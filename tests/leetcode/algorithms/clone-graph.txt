Short java solution
    public boolean isValid(String s) {
		Stack<Character> stack = new Stack<Character>();
		for (char c : s.toCharArray()) {
			if (c == '(')
				stack.push(')');
			else if (c == '{')
				stack.push('}');
			else if (c == '[')
				stack.push(']');
			else if (stack.isEmpty() || stack.pop() != c)
				return false;
		}
		return stack.isEmpty();
	}

----------------------------------------------------------------------------------------------------
My easy to understand Java Solution with one stack
    public class Solution {
        public boolean isValid(String s) {
            Stack<Character> stack = new Stack<Character>();
            // Iterate through string until empty
            for(int i = 0; i<s.length(); i++) {
                // Push any open parentheses onto stack
                if(s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{')
                    stack.push(s.charAt(i));
                // Check stack for corresponding closing parentheses, false if not valid
                else if(s.charAt(i) == ')' && !stack.empty() && stack.peek() == '(')
                    stack.pop();
                else if(s.charAt(i) == ']' && !stack.empty() && stack.peek() == '[')
                    stack.pop();
                else if(s.charAt(i) == '}' && !stack.empty() && stack.peek() == '{')
                    stack.pop();
                else
                    return false;
            }
            // return true if no open parentheses left in stack
            return stack.empty();
        }
    }

----------------------------------------------------------------------------------------------------
Simple Python solution with stack
    class Solution:
        # @return a boolean
        def isValid(self, s):
            stack = []
            dict = {"]":"[", "}":"{", ")":"("}
            for char in s:
                if char in dict.values():
                    stack.append(char)
                elif char in dict.keys():
                    if stack == [] or dict[char] != stack.pop():
                        return False
                else:
                    return False
            return stack == []

It's quite obvious.

----------------------------------------------------------------------------------------------------
2ms C++ sloution
Repetitive code but I guess this is clean, and easy to understand. This solution also accepts (and ignores) any characters other than parenthesis in the string. Hence, it can be used to check if the parenthesis matches in an equation for example.

    #include <stack>

    class Solution {
    public:
        bool isValid(string s) {
            stack<char> paren;
            for (char& c : s) {
                switch (c) {
                    case '(': 
                    case '{': 
                    case '[': paren.push(c); break;
                    case ')': if (paren.empty() || paren.top()!='(') return false; else paren.pop(); break;
                    case '}': if (paren.empty() || paren.top()!='{') return false; else paren.pop(); break;
                    case ']': if (paren.empty() || paren.top()!='[') return false; else paren.pop(); break;
                    default: ; // pass
                }
            }
            return paren.empty() ;
        }
    };

----------------------------------------------------------------------------------------------------
12 lines of Java
    public class Solution {
        public boolean isValid(String s) {
            Stack<Integer> p = new Stack<>();
            for(int i = 0; i < s.length(); i++) {
                int q = "(){}[]".indexOf(s.substring(i, i + 1));
                if(q % 2 == 1) {
                    if(p.isEmpty() || p.pop() != q - 1) return false;
                } else p.push(q);
            }
            return p.isEmpty();
        }
    }

----------------------------------------------------------------------------------------------------
Java iterative solution beating 97%
Just implement a simple stack using a char array and check that, for each closing bracket, there is its counterpart in the top of the stack.

    public class Solution {
    	public boolean isValid(String s) {
    		char[] stack = new char[s.length()];
    		int head = 0;
    		for(char c : s.toCharArray()) {
    			switch(c) {
    				case '{':
    				case '[':
    				case '(':
    					stack[head++] = c;
    					break;
    				case '}':
    					if(head == 0 || stack[--head] != '{') return false;
    					break;
    				case ')':
    					if(head == 0 || stack[--head] != '(') return false;
    					break;
    				case ']':
    					if(head == 0 || stack[--head] != '[') return false;
    					break;
    			}
    		}
    		return head == 0;
    
    	}
    }

----------------------------------------------------------------------------------------------------
&#91;Python&#93; is this a cheating method? accepted with 40ms, easy to understand, but
    class Solution(object):
        def isValid(self, s):
            """
            :type s: str
            :rtype: bool
            """
            n = len(s)
            if n == 0:
                return True
            
            if n % 2 != 0:
                return False
                
            while '()' in s or '{}' in s or '[]' in s:
                s = s.replace('{}','').replace('()','').replace('[]','')
            
            if s == '':
                return True
            else:
                return False
                
            

----------------------------------------------------------------------------------------------------
Short, Easy to Follow 8ms Java Solution
    public class Solution {
        public boolean isValid(String s) {
            int length;
        
            do {
                length = s.length();
                s = s.replace("()", "").replace("{}", "").replace("[]", "");
            } while(length != s.length());
        
            return s.length() == 0;
        }
    }

In this solution you essentially can remove parentheses that you know are valid until the string is empty. If the string is not empty, that means that the parentheses were malformed.

----------------------------------------------------------------------------------------------------
My 0ms c++ solution using stack


    bool isValid(string s) {
        stack<char> st;
        for(char c : s){
            if(c == '('|| c == '{' || c == '['){
                st.push(c);
            }else{
                if(st.empty()) return false;
                if(c == ')' && st.top() != '(') return false;
                if(c == '}' && st.top() != '{') return false;
                if(c == ']' && st.top() != '[') return false;
                st.pop();
            }
        }
        return st.empty();


----------------------------------------------------------------------------------------------------
Sharing my simple cpp code with 2ms
        class Solution {
        public:
            bool isValid(string s) {
                map<char, char> parenth_dict;
                parenth_dict['('] = ')';
                parenth_dict['{'] = '}';
                parenth_dict['['] = ']';
                
                stack<char> aux;
                for (int i = 0; i < s.size(); i++) {
                    if (s[i] == '(' || s[i] == '{' || s[i] == '[') 
                        aux.push(s[i]);
                    else if (aux.empty() || parenth_dict[aux.top()] != s[i])
                        return false;
                    else
                        aux.pop();
                }
                
                return aux.empty();
                
            }
    
    };

----------------------------------------------------------------------------------------------------
Simple Accepted Java solution.
I think the code is clear to understand.

    public boolean isValid(String s) {
        char[] chars = s.toCharArray();
        Map<Character,Character> pairs = new HashMap<Character,Character>();
        pairs.put('(', ')');
        pairs.put('{', '}');
        pairs.put('[', ']');
        
        Stack<Character> stack = new Stack<Character>();
        for (char c:chars) {
        	if (pairs.containsKey(c)) {
        		stack.push(pairs.get(c));
        	} else {
        		if (stack.isEmpty() || c != stack.pop()) return false;
        	}
        }
        return stack.isEmpty();
    }

----------------------------------------------------------------------------------------------------
Java solution with stack, very easy to read, straightforward
    public class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        if(s.equals("")) return true;
        for(char ch : s.toCharArray()){
            if(ch=='('|| ch=='[' || ch=='{'){
                stack.push(ch);
            } else if(ch==')'){
                if(stack.empty() || stack.pop()!='(')
                    return false;
            } else if(ch==']'){
                if(stack.empty() || stack.pop()!='[')
                    return false;
            } else if(ch=='}'){
                if(stack.empty() || stack.pop()!='{')
                    return false;
            }
        }
        return stack.empty();
    }
}

----------------------------------------------------------------------------------------------------
My 21 line Java solution(without ( ) &#91;&#93; {} in code)
    public class Solution {
    public boolean isValid(String s) {
        char [] arr = s.toCharArray();
		Stack stack = new Stack();
		for(char ch : arr){
			if(stack.isEmpty()){
				stack.push(ch);
			}else{
				char top = (char)stack.lastElement();
				if(ch - top == 1 || ch - top == 2){
					stack.pop();
				}else{
					stack.push(ch);
				}
			}
		}
		if(stack.isEmpty()){
		    return true;
		}
		return false;
    }
}

----------------------------------------------------------------------------------------------------
My solution, one stack, O(n), using a symbol to make it simple.
    class Solution {
    public:
        bool isValid(string s) {
            stack<char> stk;
            stk.push('#');
            char top;
            for(int i(0); i < s.size(); i++)
            {
                top = stk.top();
                     if(top == '(' && s[i] == ')') stk.pop(); 
                else if(top == '[' && s[i] == ']') stk.pop(); 
                else if(top == '{' && s[i] == '}') stk.pop();
                else stk.push(s[i]);
            }
            top = stk.top();
            if(top == '#') return true;
            else           return false;
        }
    };

Before scan the string, push a magic symbol '#' to the stack.

If the string is valid, the top element of stack must be '#' after traversal.

----------------------------------------------------------------------------------------------------
10 lines simple java solution using stack
    public class Solution {
        public boolean isValid(String s) {
            Stack<Character> stack = new Stack<>();
            for(int i = 0; i < s.length(); i++) {
                char a = s.charAt(i);
                if(a == '(' || a == '[' || a == '{') stack.push(a);
                else if(stack.empty()) return false;
                else if(a == ')' && stack.pop() != '(') return false;
                else if(a == ']' && stack.pop() != '[') return false;
                else if(a == '}' && stack.pop() != '{') return false;
            }
            return stack.empty();
        }
    }

----------------------------------------------------------------------------------------------------
Any other solution rather than using a stack?
This is a very typical question for stack. I am curious if anyone has some other solutions rather this one.

By the way, if there is any C++ or Python solution, it would terrific to share some code for comparison with different languages.

Here is mine:

    public class Solution {
    public boolean isValid(String s) {
        
        if (s==null||s.length()==0) return true;
        
        Deque<Character> stack= new LinkedList<Character>();
        
        char array[] = s.toCharArray();
        
        for (int i=0;i<array.length;i++){
            if (array[i]=='('||array[i]=='{'||array[i]=='[')
                stack.push(array[i]);
            else if (array[i]==')'||array[i]=='}'||array[i]==']'){
                 if (stack.isEmpty()) return false;
                 char temp = stack.pop();
                 switch (array[i]){
                     case ')':
                         if (temp!='(') return false;
                         break;
                     case ']': 
                         if (temp!='[') return false;
                         break;
                     case '}':
                         if (temp!='{') return false;
                         break;
                 }
            }else return false;
        }
        if (!stack.isEmpty()) return false;
        
        return true;
        
    }
}

----------------------------------------------------------------------------------------------------
Share simple python with try except method
  

      class Solution:
        # @return a boolean
        def isValid(self, s):
            d = {')':'(', ']':'[', '}':'{',}
            stack = []
            for x in s:
                if x=='(' or x=='[' or x=='{':
                    stack.append(x)
                else:
                    try:
                        if d[x] != stack.pop():
                            return False
                    except :
                        return False
            return not stack

----------------------------------------------------------------------------------------------------
My Java solution, can we make it better?
    public class Solution {
    public boolean isValid(String s) {
        Stack<Character> stk=new Stack();
		for (int i=0;i<s.length();i++){
			switch(s.charAt(i)){
			case('{'): stk.push('{'); break;
			case('('): stk.push('('); break;
			case('['): stk.push('['); break;
			case('}'): if (!stk.isEmpty() && stk.peek() == '{') {stk.pop(); break;} else return false;
			case(')'): if (!stk.isEmpty() && stk.peek() == '(') {stk.pop(); break;} else return false;
			case(']'): if (!stk.isEmpty() && stk.peek() == '[') {stk.pop(); break;} else return false;
			default: break;
			}
		}
		return stk.isEmpty();

    }
}

----------------------------------------------------------------------------------------------------
My python solution
   

     class Solution:
            # @param {string} s
            # @return {boolean}
            def isValid(self, s):
                stack=[]
                for i in s:
                    if i in ['(','[','{']:
                        stack.append(i)
                    else:
                        if not stack or {')':'(',']':'[','}':'{'}[i]!=stack[-1]:
                            return False
                        stack.pop()
                return not stack

----------------------------------------------------------------------------------------------------
Easy Python Solution, O(1) space
def isValid(self, s):
    delta = len(s)
    while(delta != 0 and delta%2 == 0):
        s = s.replace("()", "")
        s = s.replace("[]", "")
        s = s.replace("{}", "")
        # breaks while loop if string was not altered during current pass
        delta = len(s) if delta > len(s) else 0
    return len(s) == 0


----------------------------------------------------------------------------------------------------
