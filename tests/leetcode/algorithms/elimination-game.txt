15ms Concise Java Solution
To get max length of increasing sequences:

 1. Do `DFS` from every cell
 2. Compare every 4 direction and skip cells that are out of boundary or smaller
 3. Get matrix `max` from every cell's `max`
 4. Use `matrix[x][y] <= matrix[i][j]` so we don't need a `visited[m][n]` array
 4. The key is to `cache` the distance because it's highly possible to revisit a cell

Hope it helps!

    public static final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix.length == 0) return 0;
        int m = matrix.length, n = matrix[0].length;
        int[][] cache = new int[m][n];
        int max = 1;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int len = dfs(matrix, i, j, m, n, cache);
                max = Math.max(max, len);
            }
        }   
        return max;
    }
    
    public int dfs(int[][] matrix, int i, int j, int m, int n, int[][] cache) {
        if(cache[i][j] != 0) return cache[i][j];
        int max = 1;
        for(int[] dir: dirs) {
            int x = i + dir[0], y = j + dir[1];
            if(x < 0 || x >= m || y < 0 || y >= n || matrix[x][y] <= matrix[i][j]) continue;
            int len = 1 + dfs(matrix, x, y, m, n, cache);
            max = Math.max(max, len);
        }
        cache[i][j] = max;
        return max;
    }

----------------------------------------------------------------------------------------------------
Python solution, memoization dp, 288ms
We can find longest decreasing path instead, the result will be the same. Use `dp` to record previous results and choose the max `dp` value of smaller neighbors.

    def longestIncreasingPath(self, matrix):
        def dfs(i, j):
            if not dp[i][j]:
                val = matrix[i][j]
                dp[i][j] = 1 + max(
                    dfs(i - 1, j) if i and val > matrix[i - 1][j] else 0,
                    dfs(i + 1, j) if i < M - 1 and val > matrix[i + 1][j] else 0,
                    dfs(i, j - 1) if j and val > matrix[i][j - 1] else 0,
                    dfs(i, j + 1) if j < N - 1 and val > matrix[i][j + 1] else 0)
            return dp[i][j]

        if not matrix or not matrix[0]: return 0
        M, N = len(matrix), len(matrix[0])
        dp = [[0] * N for i in range(M)]
        return max(dfs(x, y) for x in range(M) for y in range(N))

----------------------------------------------------------------------------------------------------
Java 14ms relative short &amp; easy to code solution with explanation. O(mn) time O(mn) space. DFS + DP
The idea is simple and intuitive:  
    1. For each cell, try it's left, right, up and down for smaller number.  
    2. If it's smaller, means we are on the right track and we should keep going. If larger, stop and return.  
    3. Treat each cell as a start cell. Calculate and memorize the longest distance for this cell, so we don't need to calculate it again in the future.  

Questions and advices are welcome.

    public class Solution {
        public int longestIncreasingPath(int[][] matrix) {
            if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
                return 0;
            }
            int[][] cache = new int[matrix.length][matrix[0].length];
            int max = 0;
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    int length = findSmallAround(i, j, matrix, cache, Integer.MAX_VALUE);
                    max = Math.max(length, max);
                }
            }
            return max;
        }
        private int findSmallAround(int i, int j, int[][] matrix, int[][] cache, int pre) {
            // if out of bond OR current cell value larger than previous cell value.
            if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length || matrix[i][j] >= pre) {
                return 0;
            }
            // if calculated before, no need to do it again
            if (cache[i][j] > 0) {
                return cache[i][j];
            } else {
                int cur = matrix[i][j];
                int tempMax = 0;
                tempMax = Math.max(findSmallAround(i - 1, j, matrix, cache, cur), tempMax);
                tempMax = Math.max(findSmallAround(i + 1, j, matrix, cache, cur), tempMax);
                tempMax = Math.max(findSmallAround(i, j - 1, matrix, cache, cur), tempMax);
                tempMax = Math.max(findSmallAround(i, j + 1, matrix, cache, cur), tempMax);
                cache[i][j] = ++tempMax;
                return tempMax;
            }
        }
    }



----------------------------------------------------------------------------------------------------
Graph theory, Java solution, O(v^2), no DFS
Treat matrix as a graph. Then we find the longest path in graph. In this way, it can be solved in polynomial time. I drew a picture in my blog, check my [blog][1]

    public static class Point{
        int x;
        int y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public static int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0)
            return 0;
        int n = matrix.length, m = matrix[0].length, count = m * n, ans = 0;
        while (count > 0) {
            HashSet<Point> remove = new HashSet<Point>();
            // each round, remove the peak number.
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (matrix[i][j] == Integer.MIN_VALUE)
                        continue;
                    boolean up = (i == 0 || matrix[i][j] >= matrix[i - 1][j]);
                    boolean bottom = (i == n - 1 || matrix[i][j] >= matrix[i + 1][j]);
                    boolean left = (j == 0 || matrix[i][j] >= matrix[i][j - 1]);
                    boolean right = (j == m - 1 || matrix[i][j] >= matrix[i][j + 1]);
                    if (up && bottom && left && right)
                        remove.add(new Point(i, j));
                }
            }
            for (Point point : remove) {
                matrix[point.x][point.y] = Integer.MIN_VALUE;
                count--;
            }
            ans++;
        }
        return ans;
    }

  [1]: http://www.allenlipeng47.com/blog/index.php/2016/01/22/longest-increasing-path-in-a-matrix/

----------------------------------------------------------------------------------------------------
C++ DP &#x2F; DFS solution sharing
    class Solution {
    public:
        int longestIncreasingPath(vector<vector<int>>& matrix) {
            int rows = matrix.size();
            if (!rows) return 0;
            int cols = matrix[0].size();
            
            vector<vector<int>> dp(rows, vector<int>(cols, 0));
            std::function<int(int, int)> dfs = [&] (int x, int y) {
                if (dp[x][y]) return dp[x][y];
                vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
                for (auto &dir : dirs) {
                    int xx = x + dir[0], yy = y + dir[1];
                    if (xx < 0 || xx >= rows || yy < 0 || yy >= cols) continue;
                    if (matrix[xx][yy] <= matrix[x][y]) continue;
                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));
                }
                return ++dp[x][y];
            };
            
            int ret = 0;
            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < cols; ++j) {
                    ret = std::max(ret, dfs(i, j));
                }
            }
            
            return ret;
        }
    };

----------------------------------------------------------------------------------------------------
Easy Java Solution!
    public class Solution {
    
    	public int longestIncreasingPath(int[][] matrix) {
    
    		if (matrix == null || matrix.length < 1 || matrix[0].length < 1)
    			return 0;
    
    		int max = 0, n = matrix.length, m = matrix[0].length;
    
    		// create a cache matrix
    		int[][] cache = new int[n][m];
    
    		// dfs search on every element in matrix
    		for (int i = 0; i < n; i++) {
    			for (int j = 0; j < m; j++) {
    				max = Math.max(dfs(matrix, Integer.MIN_VALUE, i, j, n, m, cache), max);
    			}
    		}
    		return max;
    	}
    
    	int dfs(int[][] matrix, int min, int i, int j, int n, int m, int[][] cache) {
    
    		// check boundary limits
    		if (i < 0 || j < 0 || i >= n || j >= m)
    			return 0;
    
    		// check min condition
    		if (matrix[i][j] <= min)
    			return 0;
    
    		// check into cache
    		if (cache[i][j] != 0)
    			return cache[i][j];
    
    		// update min
    		min = matrix[i][j];
    
    		// run dfs in all four directions
    		int a = dfs(matrix, min, i - 1, j, n, m, cache) + 1;
    		int b = dfs(matrix, min, i + 1, j, n, m, cache) + 1;
    		int c = dfs(matrix, min, i, j - 1, n, m, cache) + 1;
    		int d = dfs(matrix, min, i, j + 1, n, m, cache) + 1;
    
    		// find max and update cache
    		int max = Math.max(a, Math.max(b, Math.max(c, d)));
    		cache[i][j] = max;
    
    		return max;
    	}
    }

----------------------------------------------------------------------------------------------------
Short Python...
Solution 1
-

Bottom-up DP, about 480 ms.

    def longestIncreasingPath(self, matrix):
        matrix = {i + j*1j: val
                  for i, row in enumerate(matrix)
                  for j, val in enumerate(row)}
        length = {}
        for z in sorted(matrix, key=matrix.get):
            length[z] = 1 + max([length[Z]
                                 for Z in z+1, z-1, z+1j, z-1j
                                 if Z in matrix and matrix[z] > matrix[Z]]
                                or [0])
        return max(length.values() or [0])

---

Solution 2
-

Top-down DP, about 560 ms.

    def longestIncreasingPath(self, matrix):
        def length(z):
            if z not in memo:
                memo[z] = 1 + max([length(Z)
                                   for Z in z+1, z-1, z+1j, z-1j
                                   if Z in matrix and matrix[z] > matrix[Z]]
                                  or [0])
            return memo[z]
        memo = {}
        matrix = {i + j*1j: val
                  for i, row in enumerate(matrix)
                  for j, val in enumerate(row)}
        return max(map(length, matrix) or [0])


----------------------------------------------------------------------------------------------------
Java DFS + DP Solution
    public class Solution {
    int[][] dis = {{1,0},{-1,0},{0,1},{0,-1}};
    public int longestIncreasingPath(int[][] matrix) {
      if(matrix.length == 0 ){
            return 0;
      }
      int[][] state = new int[matrix.length][matrix[0].length];
      int res = 0;
      for(int i = 0; i < matrix.length; i++){
          for(int j = 0; j < matrix[0].length; j++){
             res = Math.max(res,dfs(i,j,matrix,state));
          }
      }
      return res;
    }
      public int dfs(int i, int j, int[][] matrix,int[][] state){
          if(state[i][j] > 0) return state[i][j];
          int max = 0;
          for(int m = 0; m < dis.length; m++){
              if(i + dis[m][0] >= 0 && i + dis[m][0] < matrix.length && j + dis[m][1] >= 0 && j + dis[m][1] < matrix[0].length && matrix[i+dis[m][0]][j+dis[m][1]] > matrix[i][j]){
                  max = Math.max(max,dfs(i + dis[m][0],j + dis[m][1],matrix,state));
              }
          }
          state[i][j] = 1 + max;
          return state[i][j];
          
      }
    
 
}

----------------------------------------------------------------------------------------------------
My DP solution with Explanation, Search nearby using DFS. O(MN), Easy to read
The question is just a 2 dimensional version of LIS. We can use brute force, but it is too costful. By storing the longest number of increasing subsequence starting from the node (i,j) in a 2d array, we can effectively prune many redundant recursive computations (although it's a dfs).  

    int longestpath(vector<vector<int>>& matrix, vector<vector<int>>& states, int i, int j, int m, int n) {
        if(states[i][j] > 0)
            return states[i][j];
        
        int maxd = 0;
        
        if(j>0 && matrix[i][j-1] < matrix[i][j]) {
            int left = longestpath(matrix, states, i, j-1, m, n);
            maxd = max(maxd, left); 
        }
        if(j<n-1 && matrix[i][j+1] < matrix[i][j]) {
            
            int right = longestpath(matrix, states, i, j+1, m, n);
            maxd = max(maxd, right);
        };
        if(i>0 && matrix[i-1][j] < matrix[i][j]) {
            int up = longestpath(matrix, states, i-1, j, m, n);
            maxd = max(maxd, up);
            
        };
        if(i<m-1 && matrix[i+1][j] < matrix[i][j]) {
            int down = longestpath(matrix, states, i+1, j, m, n);
            maxd = max(maxd, down);
        };
        
        states[i][j] = maxd + 1;
        return states[i][j];
        
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        
        
        int m = matrix.size(); 
        if (m == 0) return 0;
        int n = matrix[0].size();
        int res = 0;
        
        vector<vector<int>> states(m, vector<int>(n, 0));
        
        for(int i = 0; i < m; ++ i) {
            
            for(int j = 0; j < n; ++ j) {
             //each element
             
             res = max(res, longestpath(matrix, states, i, j, m, n));

            }
            
        }
        
        return res;        
        
    }

----------------------------------------------------------------------------------------------------
Simple C++ solution
    class Solution {
    public:
        int DFS(vector<vector<int>>& matrix, int y, int x, int val, vector<vector<int>>& hash)
        {
            if(y < 0 || y >= matrix.size() || x <0 || x >= matrix[0].size())
                return 0;
            if(matrix[y][x] > val)
            {
                if(hash[y][x] != 0) return hash[y][x]; //if this path has been searched
                int a = DFS(matrix, y, x+1,matrix[y][x], hash) + 1;
                int b = DFS(matrix, y, x-1,matrix[y][x], hash) + 1;
                int c = DFS(matrix, y+1, x,matrix[y][x], hash) + 1;
                int d = DFS(matrix, y-1, x,matrix[y][x], hash) + 1;
                hash[y][x] = max(a, max(b,max(c, d)));
                return hash[y][x];
            }
            return 0;
        }
        int longestIncreasingPath(vector<vector<int>>& matrix) {
            if(matrix.size() == 0) return 0;
            int Max = 0;
            vector<int> tem(matrix[0].size(),0);
            vector<vector<int>> hash(matrix.size(), tem);
            for(int i = 0; i< matrix.size(); i++)
                for(int j = 0; j < matrix[0].size(); j++)
                    Max = max(DFS(matrix, i, j, INT_MIN, hash), Max);
            return Max;
        }
    };

----------------------------------------------------------------------------------------------------
60ms C++ beat 100%. Elegant and concise code.
    class Solution {
        vector<vector<int>> visited;
        int height = 0, width = 0;
        int floodfill(vector<vector<int>>& matrix, int cur, int i, int j)
        {
            if (i < 0 || i >= height || j < 0 || j >= width )
                return 0;
            if (matrix[i][j] <= cur)
                return 0;
            if (visited[i][j] > 0)
                return visited[i][j];
            int r = floodfill(matrix, matrix[i][j], i + 1, j);
            int l = floodfill(matrix, matrix[i][j], i - 1, j);
            int u = floodfill(matrix, matrix[i][j], i, j + 1);
            int d = floodfill(matrix, matrix[i][j], i, j - 1);
            visited[i][j] = max(r, max(l, max(u, d))) + 1;
            return visited[i][j];
        }
    public:
        int longestIncreasingPath(vector<vector<int>>& matrix) {
            if (matrix.empty())
                return 0;
            height = matrix.size(), width = matrix[0].size();
            visited.resize(height, vector<int>(width));
            int max_len = 0;
            for (int i = 0; i < height; ++i)
                for (int j = 0; j < width; ++j)
                    max_len = max(max_len, floodfill(matrix, INT_MIN, i, j));
            return max_len;
        }
    };

----------------------------------------------------------------------------------------------------
*Java* DFS + DP with explanations O(mn) 19ms
