Solution explained
This problem is well known and quite often can be found in various text books.

You can take a couple of approaches to actually solve it:

- O(N lg N) running time + O(1) memory

The simplest approach is to sort the entire input array and then access the element by it's index (which is O(1)) operation:

----------

    public int findKthLargest(int[] nums, int k) {
            final int N = nums.length;
            Arrays.sort(nums);
            return nums[N - k];
    }

----------

- O(N lg K) running time + O(K) memory

Other possibility is to use a min oriented priority queue that will store the K-th largest values. The algorithm iterates over the whole input and maintains the size of priority queue.

----------

    public int findKthLargest(int[] nums, int k) {

        final PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int val : nums) {
            pq.offer(val);

            if(pq.size() > k) {
                pq.poll();
            }
        }
        return pq.peek();
    }

----------

- O(N) best case / O(N^2) worst case running time + O(1) memory

The smart approach for this problem is to use the selection algorithm (based on the partion method - the same one as used in quicksort).


----------

    public int findKthLargest(int[] nums, int k) {
    
            k = nums.length - k;
            int lo = 0;
            int hi = nums.length - 1;
            while (lo < hi) {
                final int j = partition(nums, lo, hi);
                if(j < k) {
                    lo = j + 1;
                } else if (j > k) {
                    hi = j - 1;
                } else {
                    break;
                }
            }
            return nums[k];
        }
    
        private int partition(int[] a, int lo, int hi) {
    
            int i = lo;
            int j = hi + 1;
            while(true) {
                while(i < hi && less(a[++i], a[lo]));
                while(j > lo && less(a[lo], a[--j]));
                if(i >= j) {
                    break;
                }
                exch(a, i, j);
            }
            exch(a, lo, j);
            return j;
        }
    
        private void exch(int[] a, int i, int j) {
            final int tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
    
        private boolean less(int v, int w) {
            return v < w;
        }

----------

O(N) guaranteed running time + O(1) space

So how can we improve the above solution and make it O(N) guaranteed? The answer is quite simple, we can randomize the input, so that even when the worst case input would be provided the algorithm wouldn't be affected. So all what it is needed to be done is to shuffle the input.

----------

    public int findKthLargest(int[] nums, int k) {
    
            shuffle(nums);
            k = nums.length - k;
            int lo = 0;
            int hi = nums.length - 1;
            while (lo < hi) {
                final int j = partition(nums, lo, hi);
                if(j < k) {
                    lo = j + 1;
                } else if (j > k) {
                    hi = j - 1;
                } else {
                    break;
                }
            }
            return nums[k];
        }
    
    private void shuffle(int a[]) {
    
            final Random random = new Random();
            for(int ind = 1; ind < a.length; ind++) {
                final int r = random.nextInt(ind + 1);
                exch(a, ind, r);
            }
        }

----------

There is also worth mentioning the Blum-Floyd-Pratt-Rivest-Tarjan algorithm that has a guaranteed O(N) running time.

----------------------------------------------------------------------------------------------------
4 C++ Solutions using Partition, Max-Heap, priority_queue and multiset respectively
Well, this problem has a naive solution, which is to sort the array in descending order and return the `k-1`-th element. 

    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            sort(nums.begin(), nums.end());
            return nums[k - 1];
        }
    }; 

However, sorting algorithm gives `O(nlogn)` complexity. Suppose `n = 10000` and `k = 2`, then we are doing a lot of unnecessary operations. In fact, this problem has at least two simple and faster solutions.

Well, the faster solution has no mystery. It is also closely related to sorting. I will give two algorithms for this problem below, one using quicksort(specifically, the partition subroutine) and the other using heapsort.

----------
**Quicksort**

In quicksort, in each iteration, we need to select a pivot and then partition the array into three parts:

 1. Elements smaller than the pivot;
 2. Elements equal to the pivot;
 3. Elements larger than the pivot.

Now, let's do an example with the array `[3, 2, 1, 5, 4, 6]` in the problem statement. Let's assume in each time we select the leftmost element to be the pivot, in this case, `3`. We then use it to partition the array into the above 3 parts, which results in `[1, 2, 3, 5, 4, 6]`. Now `3` is in the third position and we know that it is the third smallest element. Now, do you recognize that this subroutine can be used to solve this problem? 

In fact, the above partition puts elements smaller than the pivot  before the pivot and thus the pivot will then be the `k`-th smallest element if it is at the `k-1`-th position. Since the problem requires us to find the `k`-th largest element, we can simply modify the partition to put elements larger than the pivot before the pivot. That is, after partition, the array becomes `[5, 6, 4, 3, 1, 2]`. Now we know that `3` is the `4`-th largest element. If we are asked to find the `2`-th largest element, then we know it is left to `3`. If we are asked to find the `5`-th largest element, then we know it is right to `3`. So, in the **average** sense, the problem is reduced to approximately half of its original size, giving the recursion `T(n) = T(n/2) + O(n)` in which `O(n)` is the time for partition. This recursion, once solved, gives `T(n) = O(n)` and thus we have a linear time solution. Note that since we only need to consider one half of the array, the time complexity is `O(n)`. If we need to consider both the two halves of the array, like quicksort, then the recursion will be `T(n) = 2T(n/2) + O(n)` and the complexity will be `O(nlogn)`. 

Of course, `O(n)` is the average time complexity. In the worst case, the recursion may become `T(n) = T(n - 1) + O(n)` and the complexity will be `O(n^2)`. 

Now let's briefly write down the algorithm before writing our codes.

 1. Initialize `left` to be 0 and `right` to be `nums.size() - 1`;
 2. Partition the array, if the pivot is at the `k-1`-th position, return it (we are done);
 3. If the pivot is right to the `k-1`-th position, update `right` to be the left neighbor of the pivot;
 4. Else update `left` to be the right neighbor of the pivot.
 5. Repeat 2.

Now let's turn it into code.

    class Solution { 
    public:
        int partition(vector<int>& nums, int left, int right) {
            int pivot = nums[left];
            int l = left + 1, r = right;
            while (l <= r) {
                if (nums[l] < pivot && nums[r] > pivot)
                    swap(nums[l++], nums[r--]);
                if (nums[l] >= pivot) l++; 
                if (nums[r] <= pivot) r--;
            }
            swap(nums[left], nums[r]);
            return r;
        }
        
        int findKthLargest(vector<int>& nums, int k) {
            int left = 0, right = nums.size() - 1;
            while (true) {
                int pos = partition(nums, left, right);
                if (pos == k - 1) return nums[pos];
                if (pos > k - 1) right = pos - 1;
                else left = pos + 1;
            }
        }
    };

----------
**Heapsort**

Well, this problem still has a tag "heap". If you are familiar with heapsort, you can solve this problem using the following idea:

 1. Build a max-heap for `nums`, set `heap_size` to be `nums.size()`;
 2. Swap `nums[0]` (after buding the max-heap, it will be the largest element) with `nums[heap_size - 1]` (currently the last element). Then decrease `heap_size` by 1 and max-heapify `nums` (recovering its max-heap property) at index `0`;
 3. Repeat 2 for `k` times and the `k`-th largest element will be stored finally at `nums[heap_size]`.

Now I paste my code below. If you find it tricky, I suggest you to read the Heapsort chapter of Introduction to Algorithms, which has a nice explanation of the algorithm. My code simply translates the pseudo code in that book :-) 
    
    class Solution {
    public:   
        inline int left(int idx) {
            return (idx << 1) + 1;
        }
        inline int right(int idx) {
            return (idx << 1) + 2;
        }
        void max_heapify(vector<int>& nums, int idx) {
            int largest = idx;
            int l = left(idx), r = right(idx);
            if (l < heap_size && nums[l] > nums[largest]) largest = l;
            if (r < heap_size && nums[r] > nums[largest]) largest = r;
            if (largest != idx) {
                swap(nums[idx], nums[largest]);
                max_heapify(nums, largest);
            }
        }
        void build_max_heap(vector<int>& nums) {
            heap_size = nums.size();
            for (int i = (heap_size >> 1) - 1; i >= 0; i--)
                max_heapify(nums, i);
        }
        int findKthLargest(vector<int>& nums, int k) {
            build_max_heap(nums);
            for (int i = 0; i < k; i++) {
                swap(nums[0], nums[heap_size - 1]);
                heap_size--;
                max_heapify(nums, 0);
            }
            return nums[heap_size];
        }
    private:
        int heap_size;
    }

If we are allowed to use the built-in `priority_queue`, the code will be much more shorter :-)

    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            priority_queue<int> pq(nums.begin(), nums.end());
            for (int i = 0; i < k - 1; i++)
                pq.pop(); 
            return pq.top();
        }
    }; 

Well, the `priority_queue` can also be replaced by `multiset` :-)

    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            multiset<int> mset;
            int n = nums.size();
            for (int i = 0; i < n; i++) { 
                mset.insert(nums[i]);
                if (mset.size() > k)
                    mset.erase(mset.begin());
            }
            return *mset.begin();
        }
    };

----------------------------------------------------------------------------------------------------
AC Clean QuickSelect Java solution avg. O(n) time
https://en.wikipedia.org/wiki/Quickselect

    public class Solution {
      
      public int findKthLargest(int[] a, int k) {
        int n = a.length;
        int p = quickSelect(a, 0, n - 1, n - k + 1);
        return a[p];
      }
      
      // return the index of the kth smallest number
      int quickSelect(int[] a, int lo, int hi, int k) {
        // use quick sort's idea
        // put nums that are <= pivot to the left
        // put nums that are  > pivot to the right
        int i = lo, j = hi, pivot = a[hi];
        while (i < j) {
          if (a[i++] > pivot) swap(a, --i, --j);
        }
        swap(a, i, hi);
        
        // count the nums that are <= pivot from lo
        int m = i - lo + 1;
        
        // pivot is the one!
        if (m == k)     return i;
        // pivot is too big, so it must be on the left
        else if (m > k) return quickSelect(a, lo, i - 1, k);
        // pivot is too small, so it must be on the right
        else            return quickSelect(a, i + 1, hi, k - m);
      }
      
      void swap(int[] a, int i, int j) {
        int tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
      }
    
    }


----------------------------------------------------------------------------------------------------
Concise JAVA solution based on Quick Select
The basic idea is to use Quick Select algorithm to  partition the array with pivot: 

    Put numbers < pivot to pivot's left
    Put numbers > pivot to pivot's right
Then 

    if indexOfPivot == k, return A[k]
    else if indexOfPivot < k, keep checking left part to pivot
    else if indexOfPivot > k, keep checking right part to pivot

**Time complexity = O(n)**

Discard half each time: n+(n/2)+(n/4)..1 = n + (n-1) = O(2n-1) = O(n), because n/2+n/4+n/8+..1=n-1.

**Quick Select Solution Code:** 

    public int findKthLargest(int[] nums, int k) {
    	if (nums == null || nums.length == 0) return Integer.MAX_VALUE;
        return findKthLargest(nums, 0, nums.length - 1, nums.length - k);
    }    
    
    public int findKthLargest(int[] nums, int start, int end, int k) {// quick select: kth smallest
    	if (start > end) return Integer.MAX_VALUE;
    	
    	int pivot = nums[end];// Take A[end] as the pivot, 
    	int left = start;
    	for (int i = start; i < end; i++) {
    		if (nums[i] <= pivot) // Put numbers < pivot to pivot's left
    			swap(nums, left++, i);			
    	}
    	swap(nums, left, end);// Finally, swap A[end] with A[left]
    	
    	if (left == k)// Found kth smallest number
    		return nums[left];
    	else if (left < k)// Check right part
    		return findKthLargest(nums, left + 1, end, k);
    	else // Check left part
    		return findKthLargest(nums, start, left - 1, k);
    } 
    
    void swap(int[] A, int i, int j) {
    	int tmp = A[i];
    	A[i] = A[j];
    	A[j] = tmp;				
    }

----------------------------------------------------------------------------------------------------
Python different solutions with comments (bubble sort, selection sort, heap sort and quick sort).
        
    # O(nlgn) time
    def findKthLargest1(self, nums, k):
        return sorted(nums, reverse=True)[k-1]
        
    # O(nk) time, bubble sort idea, TLE
    def findKthLargest2(self, nums, k):
        for i in xrange(k):
            for j in xrange(len(nums)-i-1):
                if nums[j] > nums[j+1]:
                    # exchange elements, time consuming
                    nums[j], nums[j+1] = nums[j+1], nums[j]
        return nums[len(nums)-k]
        
    # O(nk) time, selection sort idea
    def findKthLargest3(self, nums, k):
        for i in xrange(len(nums), len(nums)-k, -1):
            tmp = 0
            for j in xrange(i):
                if nums[j] > nums[tmp]:
                    tmp = j
            nums[tmp], nums[i-1] = nums[i-1], nums[tmp]
        return nums[len(nums)-k]
        
    # O(k+(n-k)lgk) time, min-heap
    def findKthLargest4(self, nums, k):
        heap = []
        for num in nums:
            heapq.heappush(heap, num)
        for _ in xrange(len(nums)-k):
            heapq.heappop(heap)
        return heapq.heappop(heap)
    
    # O(k+(n-k)lgk) time, min-heap        
    def findKthLargest5(self, nums, k):
        return heapq.nlargest(k, nums)[k-1]
        
    # O(n) time, quick selection
    def findKthLargest(self, nums, k):
        # convert the kth largest to smallest
        return self.findKthSmallest(nums, len(nums)+1-k)
        
    def findKthSmallest(self, nums, k):
        if nums:
            pos = self.partition(nums, 0, len(nums)-1)
            if k > pos+1:
                return self.findKthSmallest(nums[pos+1:], k-pos-1)
            elif k < pos+1:
                return self.findKthSmallest(nums[:pos], k)
            else:
                return nums[pos]
     
    # choose the right-most element as pivot   
    def partition(self, nums, l, r):
        low = l
        while l < r:
            if nums[l] < nums[r]:
                nums[l], nums[low] = nums[low], nums[l]
                low += 1
            l += 1
        nums[low], nums[r] = nums[r], nums[low]
        return low

----------------------------------------------------------------------------------------------------
Java Quick Select
Personally, the most straightforward way is to use quick select. There is a simple conversion: Find kith largest element is equivalent to find (n - k)th smallest element in array. It is worth mentioning that (n - k) is the real index (start from 0) of an element. 

    public class Solution {
        public int findKthLargest(int[] nums, int k) {
            int start = 0, end = nums.length - 1, index = nums.length - k;
            while (start < end) {
                int pivot = partion(nums, start, end);
                if (pivot < index) start = pivot + 1; 
                else if (pivot > index) end = pivot - 1;
                else return nums[pivot];
            }
            return nums[start];
        }
        
        private int partion(int[] nums, int start, int end) {
            int pivot = start, temp;
            while (start <= end) {
                while (start <= end && nums[start] <= nums[pivot]) start++;
                while (start <= end && nums[end] > nums[pivot]) end--;
                if (start > end) break;
                temp = nums[start];
                nums[start] = nums[end];
                nums[end] = temp;
            }
            temp = nums[end];
            nums[end] = nums[pivot];
            nums[pivot] = temp;
            return end;
        }
    }

----------------------------------------------------------------------------------------------------
Java PriorityQueue O(n * log k)
    public class Solution {
                public int findKthLargest(int[] nums, int k) {
                    PriorityQueue<Integer> largeK = new PriorityQueue<Integer>(k + 1);
        
                    for(int el : nums) {
                        largeK.add(el);
                        if (largeK.size() > k) {
                            largeK.poll();
                        }
                    }
    
                    return largeK.poll();
                }
    }

----------------------------------------------------------------------------------------------------
4ms c++ solution. straightforward to find largest k. kind like a partition version.
    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            int cur=nums[k-1];
            vector<int> bigger;
            vector<int> smaller;
            for(size_t i=0; i<nums.size(); ++i){
                if(i==k-1) continue;
                if(nums[i]>=cur) bigger.push_back(nums[i]);
                else smaller.push_back(nums[i]);
            }
            if(bigger.size()==k-1) return cur;
            if(bigger.size()>k-1) return findKthLargest(bigger,k);
            if(bigger.size()<k-1) return findKthLargest(smaller,k-bigger.size()-1);
        }
    };

----------------------------------------------------------------------------------------------------
Share my Python solution with QuickSelect idea
    class Solution:
    # @param {integer[]} nums
    # @param {integer} k
    # @return {integer}
    def findKthLargest(self, nums, k):
        # QuickSelect idea: AC in 52 ms
        # ---------------------------
        #
        pivot = nums[0]
        left  = [l for l in nums if l < pivot]
        equal = [e for e in nums if e == pivot]
        right = [r for r in nums if r > pivot]

        if k <= len(right):
            return self.findKthLargest(right, k)
        elif (k - len(right)) <= len(equal):
            return equal[0]
        else:
            return self.findKthLargest(left, k - len(right) - len(equal))


----------------------------------------------------------------------------------------------------
3 C++ solutions (O(NlogN) sort, O(klogN) heapsort, O(n) average quicksort-kind )
First version, using std::sort, and return the k-th (from the end) entry

    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            std::sort(nums.begin(), nums.end());
            return nums[nums.size()-k];
    }
    };

Second version, using a heap, and pop up k-1 entries, the left top one is what we need

    int findKthLargest(vector<int>& nums, int k) {
        make_heap(nums.begin(), nums.end());
        for(auto i=0; i<k-1;i++)
        {
            pop_heap(nums.begin(), nums.end());
            nums.pop_back();
        }
        return nums.front();

 Third one, do quicksort, use the first entry as pivot and divide the array in two parts, the first half is the one no less than pivot and the second half is the one less then pivot. Then based on the length of the first half, decide to proceed in which half.

    int findKthLargest(vector<int>& nums, int k) {
        int i, m,n, pivot, head =0, tail=nums.size()-1, maxV;
        
        while(1)
        {
            m = head, n= tail;
            pivot = nums[m++];
            while(m<=n)
            {
                if(nums[m]>=pivot) m++;
                else if(nums[n]<pivot) n--;
                else {swap(nums[m++], nums[n--]);}
            }
            if(m-head == k) return pivot;
            else if(m-head < k) {k -= (m-head); head = m;  }
            else {tail = m-1;head = head+1;}
        }

    }
};




----------------------------------------------------------------------------------------------------
C++ solutions: O(nlgk) by Min-Heap and O(n) by partition
Solution 1: O(nlgk) by using min-heap

    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) 
    	{
    		size_t len = nums.size();
    		if(len < k) return 0;
    
    		priority_queue<int, std::vector<int>, std::greater<int>> q;
    		for(auto &v : nums)
    		{
    			if(q.size() < k)
    			{
    				q.push(v);
    			}
    			else if (v > q.top())
    			{
    				q.pop();
    				q.push(v);
    			}
    		}
            return q.top();
        }
    };

Solution 2: O(n) by partitioning recursively

    class Solution {
    public:
    	int partition(vector<int>& nums, int i, int j)
    	{
    		if (i == j) return i;
    
    		int pivot = nums[i];
    		std::swap(nums[i], nums[j]);
    		
    		int i0 = i;
    		for(int k = i; k < j; k ++)
    		{
    			if(nums[k] <= pivot)
    			{
    				std::swap(nums[k], nums[i0 ++]);
    			}
    		}
    		std::swap(nums[i0], nums[j]);
    		return i0;
    	}
        int findKthLargest(vector<int>& nums, int k) 
    	{
    		size_t len = nums.size();
    		int pi = 0;
    		int tgt = len - k;
    
    		int a = 0, b = len - 1;
    		while((pi = partition(nums, a, b)) != tgt)
    		{
    			if(pi < tgt)
    			{
    				a = pi + 1;
    			}
    			else if(pi > tgt)
    			{
    				b = pi - 1;
    			}
    		}
    		return nums[pi];
        }
    };

----------------------------------------------------------------------------------------------------
97% 2ms Java quick select solution
    public class Solution {
        
        public int findKthLargest(int[] nums, int k) {
    
            return select(nums, k-1);
        }
        
        // Quick select
        private int select(int[] nums, int k) {
            int left = 0, right = nums.length-1;
            while(true) {
                if(left == right)
                    return nums[left];
                int pivotIndex = medianOf3(nums, left, right);
                pivotIndex = partition(nums, left, right, pivotIndex);
                if(pivotIndex == k)
                    return nums[k];
                else if(pivotIndex > k)
                    right = pivotIndex-1;
                else
                    left = pivotIndex+1;
            }
        }
        
        //Use median-of-three strategy to choose pivot
        private int medianOf3(int[] nums, int left, int right) {
            int mid = left + (right - left) / 2;
            if(nums[right] > nums[left])
                swap(nums, left, right);
            if(nums[right] > nums[mid])
                swap(nums, right, mid);
            if(nums[mid] > nums[left])
                swap(nums,left, mid);
            return mid;
        }
        
        private int partition(int[] nums, int left, int right, int pivotIndex) {
            int pivotValue = nums[pivotIndex];
            swap(nums, pivotIndex, right);
            int index = left;
            for(int i = left; i < right; ++i) {
                if(nums[i] > pivotValue) {
                    swap(nums, index, i);
                    ++index;
                }
            }
            swap(nums, right, index);
            return index;
        }
        
        private void swap(int[] nums, int a, int b) {
            int temp = nums[a];
            nums[a] = nums[b];
            nums[b] = temp;
        }
    
    }

----------------------------------------------------------------------------------------------------
my 1ms Java solution beats 100%...
private void quicksort(int[] nums, int start, int end, int target){
    if(start >= end){
        return;
    }
    int mid = start + (end - start)/2;
    int pivot = choosePivot(nums[mid], nums[start], nums[end]);
    //int pivot = nums[mid];
    int i = start;
    int j = end;
    while(i <= j){
        while(nums[i] < pivot){
            i++;
        }
        while(nums[j] > pivot){
            j--;
        }
        if(i <= j){
            if(nums[i] != nums[j]){
                swap(nums, i, j);
            }
            i++;
            j--;
        }
    }
    if(target <= i - 1){
        quicksort(nums, start, i - 1, target);
    }
    else{
        quicksort(nums, i, end, target);
    }
}

private int choosePivot(int a, int b, int c){
    if(a > b){
        if(c > a){
            return a;
        }
        else if(c > b){
            return c;
        }
        else{
            return b;
        }
    }
    else{
        if(c > b){
            return b;
        }
        else if(c > a){
            return c;
        }
        else{
            return a;
        }
    }
}

private void swap(int[] nums, int i, int j){
    int tmp = nums[i];
    nums[i] = nums[j];
    nums[j] = tmp;
}


----------------------------------------------------------------------------------------------------
C++ using quick selection, clean code
    int findKthLargest(vector<int>& nums, int k) {
        const int size_n = nums.size();
        int left = 0, right = size_n;
        while (left < right) {
            int i = left, j = right - 1, povit = nums[left];
            while(i <= j) {
                while (i <= j && nums[i] >= povit) i++;
                while (i <= j && nums[j] < povit) j--;
                if (i < j)
                    swap(nums[i++], nums[j--]);
            }
            swap(nums[left], nums[j]);
            if (j == k - 1) return nums[j];
            if (j < k - 1) left = j + 1;
            else right = j;
        }
    }

----------------------------------------------------------------------------------------------------
Three solutions: (1) prioprity_queue as a heap (2) implement a heap by your own (3) quick sort partition
    //first solution: using priority_queue as a min_heap
    //in C++, priority queues are a type of container adaptors, specifically designed such that its first element is always the greatest of the elements it contains, according to some strict weak ordering criterion
    //time complexity: O(n*logk)
    //space complexity: O(k)
    //run time: 28ms
    struct compare {
        bool operator()(int& l, int& r) {
            return l > r;
        }
    };
    
    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            priority_queue<int, vector<int>, compare> Q;
            for (auto num : nums) {
                Q.push(num);
                if (Q.size() > k)
                    Q.pop(); //pop out the smallest element
                //keep k largest elements in the min heap
            }
            return Q.top();
        }
    };
    
    
    //second solution: use a vector to implement min_heap by yourself
    //time complexity: O(n*logk + k)
    //space complexity: O(k)
    //run time: 13ms
    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            vector<int> min_heap(k, 0);
            for (int i = 0; i < k; i++)
                min_heap[i] = nums[i];
            intializeHeap(min_heap);
            for (int i = k; i < nums.size(); i++) {
                if (min_heap[0] < nums[i])
                    min_heap[0] = nums[i];
                rebuildHeap(min_heap, 0);
            }
            return min_heap[0];
        }
        
        void intializeHeap(vector<int>& min_heap) {
            if (min_heap.size() <= 1) return;
            int pos = ( min_heap.size() - 2 ) / 2;
            while (pos >= 0) {
                rebuildHeap(min_heap, pos); pos--;
            }
        }
        
        void rebuildHeap(vector<int>& min_heap, int i) {
            int j = 2 * i + 1;
            int k = 2 * i + 2;
            if (j >= min_heap.size()) return;
            if (k == min_heap.size()) {
                if (min_heap[j] < min_heap[i])
                    swap(min_heap[j], min_heap[i]);
                return;
            }
            int min_val = i;
            if (min_heap[j] < min_heap[i])
                min_val = j;
            if (min_heap[k] < min_heap[min_val])
                min_val = k;
            if (min_val != i) {
                swap(min_heap[min_val], min_heap[i]);
                rebuildHeap(min_heap, min_val);
            }
        }
        
        void swap(int& a, int& b) {
            int tmp = a; a = b; b = tmp;
        }
    };

    //third solution: quick sort partition method
    //run time: 72ms
    //time complexity: average O(nlogn)
    //worst: O(n*n)
    class Solution {
    public:
        int findKthLargest(vector<int>& nums, int k) {
            return findKth(nums, 0, nums.size() - 1, k);
        }
        
        int findKth(vector<int>& nums, int beg, int end, int k) {
            int p = partition(nums, beg, end);
            if (end + 1 - p == k) return nums[p];
            //else
            if (end + 1 - p > k)
                return findKth(nums, p + 1, end, k);
            else
                return findKth(nums, beg, p - 1, k - (end + 1 - p));
        }
        
        int partition(vector<int>& nums, int beg, int end) {
            if (beg == end) return beg;
            if (beg + 1 == end) {
                if (nums[beg] > nums[end])
                    swap(nums[beg], nums[end]);
                return beg;
            }
            int pivot = nums[beg];
            int i = beg + 1;
            int part = beg;
            while (i <= end) {
                if (nums[i] < pivot) {
                    part++;
                    swap(nums[part], nums[i]);
                }
                i++;
            }
            swap(nums[part], nums[beg]);
            return part;
        }
    };

----------------------------------------------------------------------------------------------------
JAVA concise QuickSelect
    public class Solution {
        public int findKthLargest(int[] nums, int k) {
            return quickSelect(nums, 0, nums.length - 1, k);
        }
        
        private int quickSelect(int[] nums, int start, int end, int k) {
            int pivot = end;
            int left = start;
            int right = end - 1;
            while (left <= right) {
                if (nums[left] > nums[pivot]) {
                    swap(nums, left, right);
                    right--;
                } else {
                    left++;
                }
            }
            swap(nums, left, pivot);
            
            int rank = nums.length - left;
            if (rank == k) return nums[left];
            if (rank > k) return quickSelect(nums, left + 1, end, k);
            return quickSelect(nums, start, left - 1, k);
        }
        
        private void swap(int[] nums, int a, int b) {
            int tmp = nums[a];
            nums[a] = nums[b];
            nums[b] = tmp;
        }
    }

----------------------------------------------------------------------------------------------------
Python min-heap and quick partition solutions (O(nlogn) and O(n) time complexities).
        
    
    # k+(n-k)*log(k) time
    def findKthLargest1(self, nums, k):
        heap = nums[:k]
        heapq.heapify(heap)  # create a min-heap whose size is k 
        for num in nums[k:]:
            if num > heap[0]:
               heapq.heapreplace(heap, num)
            # or use:
            # heapq.heappushpop(heap, num)
        return heap[0]
      
    # O(n) time, quicksort-Partition method   
    def findKthLargest(self, nums, k):
        pos = self.partition(nums, 0, len(nums)-1)
        if pos > len(nums) - k:
            return self.findKthLargest(nums[:pos], k-(len(nums)-pos))
        elif pos < len(nums) - k:
            return self.findKthLargest(nums[pos+1:], k)
        else:
            return nums[pos]
     
    # Lomuto partition scheme   
    def partition(self, nums, l, r):
        pivot = nums[r]
        lo = l 
        for i in xrange(l, r):
            if nums[i] < pivot:
                nums[i], nums[lo] = nums[lo], nums[i]
                lo += 1
        nums[lo], nums[r] = nums[r], nums[lo]
        return lo

----------------------------------------------------------------------------------------------------
A few AC solutions in Java with one having O(N) worst time complexity with explanation
After seeing this question, solutions off the top of my head is to sort it. Hence, these solutions are all based on sorting the array.

Use builtin Java sort. Since Arrays.sort has a time complexity of NLogN, its complexity is NLogN.

    private int solveByBuiltInSort(int[] nums, int k) {
            Arrays.sort(nums);
            return nums[nums.length - k];
    }

Use minimum priority queue. We can only keep k elements. The complexity of the operations by a pq is depending on how many elements it have. So we may say this method is faster than the first one.
    
    private int solveByPQ(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int num : nums) {
            pq.add(num);
            if (pq.size() > k) pq.poll();
        }
        return pq.poll();
    }
    
Lastly, the inputs are all integers. There exists a linear algorithm to sort them. So we can use LSD radix sort.

    private int solveByLinearSort(int[] nums, int k) {
        final int R = (1 << 8);
        final int bitmask = R - 1;
        int[] aux = new int[nums.length];
        for (int i = 0; i < 4; i++) {
            int[] count = new int[R + 1];
            for (int num : nums) {
                int c = (num >>> (i * 8)) & bitmask;
                count[c + 1]++;
            }
            for (int r = 0; r < R; r++) count[r + 1] += count[r];
            if (i == 3) {
                int shift1 = count[R] - count[R/2];
                int shift2 = count[R/2];
                for (int r = 0; r < R/2; r++)
                    count[r] += shift1;
                for (int r = R/2; r < R; r++)
                    count[r] -= shift2;
            }
            for (int num : nums) {
                int c = (num >>> (i * 8)) & bitmask;
                aux[count[c]++] = num;
            }
            System.arraycopy(aux, 0, nums, 0, nums.length);
        }
        return nums[nums.length - k];
    }

The integers are sorted byte by byte with the if statement to cope with negative integers. When the most significant byte is considered, 0x80-0xFF should be before 0x00-0x7F.

----------------------------------------------------------------------------------------------------
Accepted Java Solution Using Heapsort
    public class Solution 
    {
        private static int L;
        public int findKthLargest(int[] nums, int k) 
        {
            heapSort(nums);
            return nums[nums.length - k];
        }
        
        private void heapSort(int[] nums)
        {
           buildHeap(nums);
           for(int i = L;i >=1; i--)
           {
               swap(nums, 0, i);
               L = L - 1;
              heapify(nums, 0);
           }
        }
        
        private void buildHeap(int[] nums)
        {
            L = nums.length-1;
            for(int i = L/2; i >=0; i--)
                heapify(nums, i);
        }
        
        //max-heap
        private void heapify(int[] nums, int i)
        {
            int l = 2 * i;
            int r = l + 1;
            int largest = i;
            if((l <= L) && (nums[l] > nums[largest]))
                largest = l;
            if((r <= L) && (nums[r] > nums[largest]))
                largest = r;
            if(largest != i)
            {
                swap(nums, i, largest);
                heapify(nums, largest);
            }
        }
        
        private void swap(int[] arr, int a, int b)
        {
            int temp = arr[a];
            arr[a] = arr[b];
            arr[b] = temp;
        }
    }

----------------------------------------------------------------------------------------------------
&#91;recommend for beginners&#93;clean C++ implementation with detailed explanation

      4 ms solution

CODE:
 

       class Solution {
        public:
            int findKthLargest(vector<int>& nums, int k) {
                //max heap method
                //min heap method
                //order statistics
                make_heap(nums.begin(), nums.end());
                int result;
                for(int i=0; i<k; i++){
                    result=nums.front();
                    pop_heap(nums.begin(), nums.end());
                    nums.pop_back();
                }
                return result;
            }
        };


 20MS solution

code:

 

       class Solution {
        public:
            int findKthLargest(vector<int>& nums, int k) {
                /** priority_queue<int, vector<int>, less<int>> q; **/
                priority_queue<int, vector<int>> q;
                int len=nums.size();
                for(int val:nums){
                    q.push(val);
                }
                while(q.size() > len-k+1){
                    q.pop();
                }
                return q.top();
            }
        };


 200ms solution

code:

  

      class Solution {
        public:
            int findKthLargest(vector<int>& nums, int k) {
                int left=0, right=nums.size()-1;
                while(true){
                    int pos=help(nums, left, right);
                    if(pos==k-1)  return nums[pos];
                    if(pos>k-1)   right=pos-1;
                    else left=pos+1;
                }
            }
            
            /*** return-the-position-of-the-left-element-in-the-partitioned-list ***/
            int help(vector<int>& nums, int left, int right){
                int pivot=nums[left];
                int l=left+1, r=right;
                /*** swap-the-element-to-make-the-left-bigger-right-smaller ***/
                while(l<=r){
                    if(nums[l]<pivot && nums[r]>pivot)
                        swap(nums[l++], nums[r--]);
                    if(nums[l]>=pivot) l++;
                    if(nums[r]<=pivot) r--;
                }
                /*** r-is-biggest-position-smaller-than-pivot ***/
                swap(nums[left], nums[r]);
                return r;
            }
        };




----------------------------------------------------------------------------------------------------
