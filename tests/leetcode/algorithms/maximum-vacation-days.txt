Java Concise Solution
public class Solution {
    public String reverseStr(String s, int k) {
        char[] arr = s.toCharArray();
        int n = arr.length;
        int i = 0;
        while(i < n) {
            int j = Math.min(i + k - 1, n - 1);
            swap(arr, i, j);
            i += 2 * k;
        }
        return String.valueOf(arr);
    }
    private void swap(char[] arr, int l, int r) {
        while (l < r) {
            char temp = arr[l];
            arr[l++] = arr[r];
            arr[r--] = temp;
        }
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++&#93;&#91;Java&#93; Clean Code
public class Solution {
    public String reverseStr(String s, int k) {
        char[] ca = s.toCharArray();
        for (int left = 0; left < ca.length; left += 2 * k) {
            for (int i = left, j = Math.min(left + k - 1, ca.length - 1); i < j; i++, j--) {
                char tmp = ca[i];
                ca[i] = ca[j];
                ca[j] = tmp;
            }
        }
        return new String(ca);
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def reverseStr(self, s, k):
    s = list(s)
    for i in xrange(0, len(s), 2*k):
        s[i:i+k] = reversed(s[i:i+k])
    return "".join(s)


----------------------------------------------------------------------------------------------------
1 line simple recursive Python
class Solution(object):
    def reverseStr(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: str
        """
        return s[:k][::-1] + s[k:2*k] + self.reverseStr(s[2*k:], k) if s else ""


----------------------------------------------------------------------------------------------------
One line C++
class Solution {
public:
    string reverseStr(string s, int k) {
        for (int i = 0; i < s.size(); i += 2*k) reverse(s.begin()+i, min(s.begin()+i+k, s.end()));
        return s;
    }
};


----------------------------------------------------------------------------------------------------
6 lines java solution with O(n) runtime
    public String reverseStr(String s, int k) {
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (i % (2 * k) < k) res.insert(i - i % (2 * k), s.charAt(i));
            else res.append(s.charAt(i));
        }
        return res.toString();
    }


----------------------------------------------------------------------------------------------------
Verbose Java Solution, StringBuilder(s)
public class Solution {
    public String reverseStr(String s, int k) {
        StringBuilder sb = new StringBuilder();
        
        int i = 0, j = 0;
        while (i < s.length()) {
            // first k
            j = i + k <= s.length() ? i + k : s.length();
            sb.append((new StringBuilder(s.substring(i, j))).reverse().toString());
            
            if (j >= s.length()) break;
            
            // second k
            i = j;
            j = i + k <= s.length() ? i + k : s.length();
            sb.append(s.substring(i, j));
            
            i = j;
        }
        
        return sb.toString();
    }
    
}


----------------------------------------------------------------------------------------------------
Python simple solution
class Solution(object):
    def reverseStr(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: str
        """
        news = ''
        n = (len(s) // (2 * k)) * 2 * k
        for i in range(0, n, 2 * k):
            news += s[i:i + k][::-1]
            news += s[i + k:i + 2 * k]
        if len(s) - n < k:
            news += s[n:][::-1]
        else:
            news += s[n:n + k][::-1]
            news += s[n + k:]
        return news


----------------------------------------------------------------------------------------------------
4 lines C++ Solution
string reverseStr(string s, int k) {
      for(int i=0; i<s.length();i+=2*k)
          if(i+k<=s.length()) reverse(s.begin()+i,s.begin()+i+k);
          else reverse(s.begin()+i,s.end());
      return s;
  }


----------------------------------------------------------------------------------------------------
My Java Solution
public String reverseStr(String s, int k) {
    StringBuffer ret = new StringBuffer();
    int start = 0;
    int end = start+2*k;
    int mid = start+k;
    while(end<=s.length()){
        StringBuffer temp = new StringBuffer(s.substring(start,mid));
        ret.append(temp.reverse());
        ret.append(s.substring(mid,end));
        start = end;
        end = start+2*k;
        mid = start+k;
    }
    if(start==s.length()) return ret.toString();
    if(mid>=s.length()){//less than k characters left.
        StringBuffer temp = new StringBuffer(s.substring(start,s.length()));
        ret.append(temp.reverse());
        return ret.toString();
    }
    if(mid<s.length()&&end>=s.length()){
        StringBuffer temp = new StringBuffer(s.substring(start,mid));
        ret.append(temp.reverse());
        ret.append(s.substring(mid,s.length()));
        return ret.toString();
    }
    return null;
}

----------------------------------------------------------------------------------------------------
Java Solution
    public String reverseStr(String s, int k) {
        if(k <= 1 || s.length() <= 1){
            return s;
        }
        
        char[] cArr = s.toCharArray();
        
        int len = cArr.length;
        
        for(int i=0; i<len; i = i + 2*k){
            reverse(i, Math.min(i + k-1, len - 1), cArr);
        }
        
        return String.valueOf(cArr);
    }
    
    private void reverse(int beg, int end, char[] cArr){
        while(beg < end){
            char temp = cArr[beg];
            cArr[beg++] = cArr[end];
            cArr[end--] = temp;
        }
    }


----------------------------------------------------------------------------------------------------
C# solution and comments
public class Solution {
	public string ReverseStr(string s, int k)
	{
		// Initializing array of string pieces to reverse
		IList<string> reversed = new List<string>();
		int subset;

		// Assigning stepsize for number of subsets based on string length
		if (s.Length % k == 0)
		{
			subset = s.Length / k;
		}
		else
		{
			subset = (int)Math.Floor( (double)s.Length / k) + 1;
		}

		// Adding string to array of substrings e.g.
		// "abcdefgh" => [ 'abc', 'def' ]
		for (int i = 0; i < subset; i++)
		{
		    // breaking before reaching the bit of string not of size k
			if (k * (i + 1) > s.Length) break;
			string substr = s.Substring(i * k, k);
			reversed.Add(substr);
		}
		
		// Adding last bit of the string not caught in the loop
		reversed.Add(s.Substring(s.Length - (s.Length % k), s.Length % k));

		// Reversing every k substring over 2k period
		int count = 0;
		for (int i = 0; i < reversed.Count; i += 2)
		{
			count++;
			string newReversed = new string(reversed[i].ToCharArray().Reverse().ToArray());
			reversed[i] = newReversed;
		}

		return string.Join("", reversed.ToArray());
	}
}


----------------------------------------------------------------------------------------------------
Easy to understand Java solution with explanatoin
public String reverseStr(String s, int k) {
        if (s == null || s.length() ==0 || k<=0){
            return s;
        }
        char[] sa = s.toCharArray();
        int endPos = 2*k-1;
        while (endPos <= sa.length-1 ){
            reverse(endPos-2*k+1, endPos-k, sa);
            endPos += 2*k;
        }
        // doesn't fit anymore, move endPos to the previous endPos+1 and this will be the starting position of the last interval
        endPos = endPos - 2*k + 1;
        reverse(endPos, Math.min(endPos+k-1, sa.length-1), sa);
        return new String(sa);
    }
    
    private void reverse(int start, int end, char[] sa){
        while (start < end){
            char temp = sa[start];
            sa[start] = sa[end];
            sa[end] = temp;
            start++;
            end--;
        }
    }


----------------------------------------------------------------------------------------------------
My Java Solution &#91;two pointer&#93;
public class Solution {
    public String reverseStr(String s, int k) {
        // guard
        if (s == null || s.length() == 0) return s;
        
        char[] cArr = s.toCharArray();
        int ptr = 0;

        while(ptr < s.length()) {
            reverseHelper(cArr, ptr, k);
            ptr += 2*k;
        }
        
        return String.valueOf(cArr);
    }
    
    
    private void reverseHelper(char[] cArr, int start, int len) {
        int end = Math.min(start + len - 1, cArr.length-1);
    
        while (start < end) {
            char tmp = cArr[start];
            cArr[start] = cArr[end];
            cArr[end] = tmp;
            start++;
            end--;
        }
    }
}


----------------------------------------------------------------------------------------------------
O(n)  JavaScript Solution of Base On Array
/**
 * @param {string} s
 * @param {number} k
 * @return {string}
 */
var reverseStr = function(s, k) {
  let strArray = s.split('');
  function reverse(arr, start, end) {
    while(start<end) {
      let temp = arr[start];
      arr[start] = arr[end];
      arr[end] = temp;
      ++start;
      --end;
    }
  }
  let start = 0;
  let end = Math.min(k-1, s.length-1);
  while(start <= s.length) {
    reverse(strArray, start, end);
    start += 2*k;
    end = Math.min(start + k - 1, s.length - 1); 
    
  }
  return strArray.join('');
};

----------------------------------------------------------------------------------------------------
My C++ Solution, use 344.Reverse String and no min operation
class Solution {
public:
    string reverseString(string s) {
        int i = 0, j = s.size() - 1;
        while(i < j){
            swap(s[i++], s[j--]);
        }

        return s;
    }
    string reverseStr(string s, int k) {
        int length = s.length();
        string temp = "";
        for(int i=0;i<length;i+=2*k){
            temp = s.substr(i,k);//no min operation
            temp = reverseString(temp);
            s.replace(i,k,temp);
        }
        return s;
    }
};

----------------------------------------------------------------------------------------------------
python online
class Solution(object):
    
    def reverseStr(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: str
        """
        return "".join([s[i:min(i+k,len(s))][::-1] if (i/k)%2==0 else s[i:min(i+k,len(s))] for i in range(0,len(s),k) ])


----------------------------------------------------------------------------------------------------
Java Solution Using StringBuilder
   public String reverseStr(String s, int k) {
        StringBuilder result = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            
            if ((i+2*k) >= s.length()) {
                if((i+k) > s.length()) {
                    result.append(reverse(s.substring(i, s.length())));
                    i = s.length();
                }else {
                     result.append(reverse(s.substring(i, i+k)));
                     result.append(s.substring(i+k, s.length()));
                     i = s.length();
                    }
            }else{
                result.append(reverse(s.substring(i, k+i)));
                
                result.append(s.substring(i+k, i+2*k));
                i = i+2*k;
            }
        }
        return result.toString();
    }
    private String reverse(String s) {    	
    	String reverse = new StringBuffer(s).reverse().toString();  	
        return reverse;
    }
   
}


----------------------------------------------------------------------------------------------------
C++ two pointers one pass O(n) solution
    string reverseStr(string s, int k) {
        string::iterator head=s.begin();
        string::iterator tail=head;
        while(tail!=s.end()){
            while(tail-head<k&&tail!=s.end()) tail++;
            string::iterator t1=head;
            string::iterator t2=tail;
            reverse(t1,t2);
            head=tail;
            while(tail-head<k&&tail!=s.end()) tail++;
            head=tail;
        }
        return s;
    }


----------------------------------------------------------------------------------------------------
Java O(n) 6ms(2017-06-29 15:25:45) solution

public class Solution {
    public String reverseStr(String s, int k) {
        if (s.length() == 0 || k == 0) return s;
        char[] chars = s.toCharArray();
        int n = chars.length;
        int m = n % (2 * k) != 0 ? n / (2 * k) + 1 : n / (2 * k);
        for (int i = 0; i < m; i++) {
            int hd, tl;
            if (i == m - 1 && (n - 2 * k * (m - 1)) < k) {
                hd = i * 2 * k + 0;
                tl = n - 1;
            } else {
                hd = 0 + i * 2 * k;
                tl = k - 1 + i * 2 * k;
            }
            while (hd < tl) {
                char tmp = chars[tl];
                chars[tl--] = chars[hd];
                chars[hd++] = tmp;
            }
        }
        return String.valueOf(chars);
    }
}


----------------------------------------------------------------------------------------------------
