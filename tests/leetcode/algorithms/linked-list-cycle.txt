Elegant Java solution
    public int strStr(String haystack, String needle) {
      for (int i = 0; ; i++) {
        for (int j = 0; ; j++) {
          if (j == needle.length()) return i;
          if (i + j == haystack.length()) return -1;
          if (needle.charAt(j) != haystack.charAt(i + j)) break;
        }
      }
    }


----------------------------------------------------------------------------------------------------
Explained 4ms Easy C++ solution
Well, the problem does not aim for an advanced algorithm like KMP but only a clean brute-force algorithm. So we can traverse all the possible starting points of `haystack` (from `0` to `haystack.length() - needle.length()`) and see if the following characters in `haystack` match those of `needle`.

The code is as follows.

    class Solution {
    public: 
        int strStr(string haystack, string needle) {
            int m = haystack.length(), n = needle.length();
            if (!n) return 0;
            for (int i = 0; i < m - n + 1; i++) {
                int j = 0;
                for (; j < n; j++)
                    if (haystack[i + j] != needle[j])
                        break;
                if (j == n) return i;
            }
            return -1;
        }
    };

Of course, you may challenge yourself implementing the KMP algorithm for this problem. 

KMP is a classic and yet notoriously hard-to-understand algorithm. However, I think the following two links give nice explanations. You may refer to them.

 1. [KMP on jBoxer's blog][1];
 2. [KMP on geeksforgeeks][2], with a well-commented C code.

I am sorry that I am still unable to give a personal explanation of the algorithm. I only read it from the two links above and mimic the code in the second link.

My accepted C++ code using KMP is as follows. Well, it also takes 4ms -_-

    class Solution {
    public:
        int strStr(string haystack, string needle) {
            int m = haystack.length(), n = needle.length();
            if (!n) return 0;
            vector<int> lps = kmpProcess(needle);
            for (int i = 0, j = 0; i < m; ) {
                if (haystack[i] == needle[j]) { 
                    i++;
                    j++;
                }
                if (j == n) return i - j;
                if (i < m && haystack[i] != needle[j]) {
                    if (j) j = lps[j - 1];
                    else i++;
                }
            }
            return -1;
        }
    private:
        vector<int> kmpProcess(string& needle) {
            int n = needle.length();
            vector<int> lps(n, 0);
            for (int i = 1, len = 0; i < n; ) {
                if (needle[i] == needle[len])
                    lps[i++] = ++len;
                else if (len) len = lps[len - 1];
                else lps[i++] = 0;
            }
            return lps;
        }
    };

  [1]: http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
  [2]: http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/

----------------------------------------------------------------------------------------------------
Share my accepted java solution
    public class Solution {
        public int strStr(String haystack, String needle) {
            int l1 = haystack.length(), l2 = needle.length();
            if (l1 < l2) {
                return -1;
            } else if (l2 == 0) {
                return 0;
            }
            int threshold = l1 - l2;
            for (int i = 0; i <= threshold; ++i) {
                if (haystack.substring(i,i+l2).equals(needle)) {
                    return i;
                }
            }
            return -1;
        }
    }

----------------------------------------------------------------------------------------------------
A very clean solution, brute-force
    int strStr(char *haystack, char *needle) {
            if (!haystack || !needle) return -1;
            for (int i = 0; ; ++i) {
                for (int j = 0; ; ++j) {
                    if (needle[j] == 0) return i;
                    if (haystack[i + j] == 0) return -1;
                    if (haystack[i + j] != needle[j]) break;
                }
            }
        }

----------------------------------------------------------------------------------------------------
My answer by Python
    class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        for i in range(len(haystack) - len(needle)+1):
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1

----------------------------------------------------------------------------------------------------
Accepted KMP solution in java for reference

    public String strStr(String haystack, String needle) {
    	//KMP algorithms
    	if(needle.equals("")) return haystack;
    	if(haystack.equals("")) return null;
    	char[] arr = needle.toCharArray();
    	int[] next = makeNext(arr);

    	for(int i = 0, j = 0, end = haystack.length(); i < end;){
    		if(j == -1 || haystack.charAt(i) == arr[j]){
    			j++;
    			i++;
    			if(j == arr.length) return haystack.substring(i - arr.length);
    		}
    		if(i < end && haystack.charAt(i) != arr[j]) j = next[j];
    	}
        return null;
    }

    private int[] makeNext(char[] arr){
    	int len = arr.length;
    	int[] next = new int[len];

    	next[0] = -1;
    	for(int i = 0, j = -1; i + 1 < len;){
    		if(j == -1 || arr[i] == arr[j]){
    			next[i+1] = j+1;
    			if(arr[i+1] == arr[j+1]) next[i+1] = next[j+1];
    			i++;
    			j++;
    		}
    		if(arr[i] != arr[j]) j = next[j];
    	}

    	return next;
    }

----------------------------------------------------------------------------------------------------
This test case doesn&#x27;t make sense.
Input: 	"", ""
Output: 	-1
Expected: 	0

Basically there is nothing in the string, how do you get the index.

If this test case is valid, then needle ="", haystack="anything" could return any value. since empty is everywhere. 

----------------------------------------------------------------------------------------------------
Are we expected to use KMP for this problem?
 Is it the standard string matching problem? Am I wrong?

----------------------------------------------------------------------------------------------------
Java easy to understand solutions.
       
    public int strStr1(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
    
    public int strStr(String haystack, String needle) {
        if (haystack == null || needle == null)
            return -1;
        int l1 = haystack.length();
        int l2 = needle.length();
        for (int i = 0; i < l1-l2+1; i++) {
            int count = 0;
            while (count < l2 && haystack.charAt(i+count) == needle.charAt(count))
                count++;
            if (count == l2)
                return i;
        }
        return -1;
    }

----------------------------------------------------------------------------------------------------
My c++ code that implements Boyer-Moore string search got accepted in 12ms.
I implements Boyer-Moore string search algorithm and it turns out to be very efficient (accepted in 12ms). Boyer-Moore uses information gained by preprocessing the pattern string to skip as many alignments as possible. A shift is calculated by applying both rules: the bad character rule and the good suffix rule. The actual shifting offset is the maximum of the shifts calculated by these rules.

	char *strStr(char *haystack, char *needle) {
		if(NULL==haystack||NULL==needle)
			return NULL;
		int plen = strlen(needle);
		int slen = strlen(haystack);
		if(0==plen)
			return haystack;
		else if(plen>slen)
			return NULL;
		int badChar[256];
		int np = 0;
		int i,j,k;

		for(i=0;i<256;i++)
			badChar[i] = plen;
    
		while(np<plen)
		{
			badChar[*(needle+np)] = plen-np-1;
			np++;
		}

		int* goodSuffix = new int[plen];

		int prefix_index = plen;
		for(i=plen-1;i>=0;i--)
		{
			goodSuffix[i] = prefix_index;
			if(*(needle+i)==*(needle+plen-1-i)&&prefix_index==i+1)
				prefix_index = i;
		}
	
		for(i=0;i<plen-1;i++)
		{
			j = plen-1, k = 0;
			while(k<i&&*(needle+j)==*(needle+i-k))
			{j--;k++;}
			if(*(needle+plen-1)==*(needle+i))
				goodSuffix[j] = plen-1-i;
		}
		goodSuffix[plen-1] = 0;

		int sp = 0;
		while(sp<slen)
		{
			i = plen-1;
			while(i>=0&&*(haystack+sp+i)==*(needle+i))
				i--;
			if(i<0)
				return haystack+sp;
			int bj = badChar[*(haystack+sp+i)] - plen + i + 1;
			sp += (bj>goodSuffix[i]?bj:goodSuffix[i]);
		}

		delete goodSuffix;
		return NULL;
	}

----------------------------------------------------------------------------------------------------
KMP in C++, explanation included
    int strStr(string haystack, string needle) {
            int nsize = needle.size();
        	int hsize = haystack.size();
        	if (nsize == 0) return 0;
        	int *table = new int[nsize];
        	memset(table, 0, sizeof(int)*nsize);
        	//building match table
        	for (int i = 1, j = 0; i < nsize - 1;){
        		if (needle[i] != needle[j]){
        			if (j>0){
        				j = table[j - 1];
        			}
        			else{
        				i++;
        			}
        		}
        		else{
        			table[i] = j + 1;
        			i++;
        			j++;
        		}
        	}
        	//matching
        	for (int i = 0, match_pos = 0; i < hsize;){
        		if (haystack[i] == needle[match_pos]){
        			if (match_pos == nsize - 1){
        				return i - (nsize - 1);
        			}
        			else{
        				i++;
        				match_pos++;
        			}
        		}
        		else{
        			if (match_pos == 0){
        				i++;
        			}
        			else{
        				match_pos = table[match_pos - 1];
        			}
        		}
        	}
        	delete[]table;
        	return -1;
        }

I'll talk about the basic idea behind KMP algorithm.

First, some notations:

 - Denote the pattern string as ps and the match table as table, ps and
   table use 0 based index. 
 - Denote substring of ps from index i to index
   j (i and j included) as substr(ps,i,j). 
 - Denote string1 is the same as
   string2 as string1==string2

------------------------------------------------------------------------


The definition of my match table:

table[i] when i>0 means the max length of prefix of ps(0,i) which is the same as the suffix of ps(0,i).

Or `table[i]=max{k| substr(substr(ps,0,i),0,k-1) == substr(substr(ps,0,i),i-k+1,i), k<=i}.`

Also, we define table[i]=0.

So, for string "aba", table={0,0,1}.

table[1]=0 is because no prefix equals suffix of "ab".

table[2]=1 is because prefix "a" equals suffix "a" of "aba".

for string "abcabce", table={0,0,0,1,2,3,0}.

table[4]=2 is because prefix "ab" equals suffix "ab" of "abcab"

table[5]=3 is because prefix "abc" equals suffix "abc" of "abcabc"

for string "aabaabaaa", table={0,1,0,1,2,3,4,5,2}.

------------------------------------------------------------------------


How would this match table be helpful to string matching?

Suppose we have a target string "abcabcdxxxxx" and a pattern "abcabce".
In the first round of matching, we start at first character and have

    abcabcdxxxxx
    abcabce

We discover that 'd' and 'e' are different and string before that is the same, which is "abcabc".
if we move "abcabce" forward one character, we would be comparing

    abcabcdxxxxx
     abcabce

let's focus on the parts which are same in the previous round:

    abcabc
     abcabc

we are actually comparing the suffix of length 5 of "abcabc", which is "bcabc" and the prefix of length 5 of "abcabc", which is "abcab".

However, table[5]==3 tells us the max length of suffix and prefix of "abcabc" which are same is 3, so suffix and prefix 
of length 5 can't be the same. Thus, we can skip this round of comparing.
Next, we move "abcabce" forward by another one character, we would be comparing

    abcabc
      abcabc

Now, we are comparing suffix and prefix of length 4, since table[5]==3, we can skip this round.
Next, we move "abcabce" forward by another one character, we would be comparing

    abcabc
       abcabc

Now, we are comparing suffix and prefix of length 3, since table[5]==3, this is valid.
Another property we can use to simply the matching process is that we already know the prefix and suffix of length 3 are the same, so we can start by comparing from the 4th charater in pattern, which is 'a', with the target string.

To sum up, when the ps(pattern string) at index i(i>0) failed to match ts(target string) at index j, which means substr(ps,0,i-1) matches, we start by comparing ps[table[i-1]] with ts[j].


----------------------------------------------------------------------------------------------------
Python 56 ms Time O(N*M) Space O(1)
Do we need to really use KMP in the interview? I just had a few interviews but personally I really can not remember those fantastic algorithms in that short period of time in pressure. Maybe I was nervous and needed more programming practice..


    def strStr(self, haystack, needle):
        if needle == "":
            return 0
        for i in range(len(haystack)-len(needle)+1):
            for j in range(len(needle)):
                if haystack[i+j] != needle[j]:
                    break
                if j == len(needle)-1:
                    return i
        return -1

----------------------------------------------------------------------------------------------------
Does anyone feel strange about outputing index 0 when the inputs are &quot;A&quot; and &quot;&quot;?
I have solved this problem. However, I think it may be controversial to return index 0 when the inputs are "A" and "". In my opinion, one of the inputs is "A\0" and the other is "\0". Perhaps it should return index 1.

----------------------------------------------------------------------------------------------------
Shortest 4ms c++ solution
    class Solution {
    public:
        int strStr(string haystack, string needle) {
        int i = 0, j = 0, count = 0;
    	if (haystack.size() == 0 && needle.size() == 0 || needle.size() == 0) return 0;
    
    	while (i < haystack.size())
    	{
    		count++;
    		if (haystack[i++] != needle[j++]) { j = 0; i=i-count+1;count = 0; }
    		if (j == needle.size()) return i - count;
    	}
    	return -1;
        }
    };

----------------------------------------------------------------------------------------------------
Java and Python solution using KMP with O(m + n) time complexity
The time complexity for this solution should be O(m + n). First of all, we generate the "next" array to show any possible duplicates of prefix and postfix within needle. Then we go through haystack. Every time we see a bad match, move j to next[j] and keep i in current position; otherwise, move both of them to next position.
Python version:

    def strStr(self, haystack, needle):
        if haystack == None or needle == None:
            return -1
        #generate next array, need O(n) time
        i, j, m, n = -1, 0, len(haystack), len(needle)
        next = [-1] * n
        while j < n - 1:  
            #needle[k] stands for prefix, neelde[j] stands for postfix
            if i == -1 or needle[i] == needle[j]:   
                i, j = i + 1, j + 1
                next[j] = i
            else:
                i = next[i]
            print i,j,next[i],next[j]
        #check through the haystack using next, need O(m) time
        i = j = 0
        while i < m and j < n:
            if j == -1 or haystack[i] == needle[j]:
                i, j = i + 1, j + 1
            else:
                j = next[j]
        if j == n:
            return i - j
        return -1

Java version:

    public int strStr(String haystack, String needle){
        if (haystack == null || needle == null)
            return -1;
        //generate next array, need O(n) time
        int i = -1, j = 0, m = haystack.length(), n = needle.length();
        int[] next = new int[n];
        if (next.length > 0) 
            next[0] = -1;
        while (j < n - 1) {
            if (i == -1 || needle.charAt(i) == needle.charAt(j))
                next[++j] = ++i;
            else 
                i = next[i];
        }
        //check through the haystack using next, need O(m) time
        i = 0; j = 0;
        while (i < m && j < n) {
            if (j == -1 || haystack.charAt(i) == needle.charAt(j)) {
                i++;
                j++;
            }
            else 
                j = next[j];
        }
        if (j == n)
            return i - j;
        return -1;
    }

----------------------------------------------------------------------------------------------------
KMP solution in Java
Hi guys!

Here is a pretty concise implementation of a Knuth-Morris-Pratt algorithm in Java.
Instead of commenting and explaining the approach I want to give a really-really useful link to [TopCoder tutorial on the topic][1]. The code is just a slightly modified version of the code from the tutorial and an explanation there is perfect.

----

    public class Solution {
        
        private int[] failureFunction(char[] str) {
            int[] f = new int[str.length+1];
            for (int i = 2; i < f.length; i++) {
                int j = f[i-1];
                while (j > 0 && str[j] != str[i-1]) j = f[j];
                if (j > 0 || str[j] == str[i-1]) f[i] = j+1;
            }
            return f;
        }
    
        public int strStr(String haystack, String needle) {
            if (needle.length() == 0) return 0;
            if (needle.length() <= haystack.length()) {
                int[] f = failureFunction(needle.toCharArray());
                int i = 0, j = 0;
                while (i < haystack.length()) {
                    if (haystack.charAt(i) == needle.charAt(j)) {
                        i++; j++;
                        if (j == needle.length()) return i-j;
                    } else if (j > 0) j = f[j];
                    else i++;
                }
            }
            return -1;
        }
    }


  [1]: https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-string-searching-algorithms/

----------------------------------------------------------------------------------------------------
Why 0 is expected when length of needle is 0
Input:
"a"
""

Output:
-1

Expected:
0

----------------------------------------------------------------------------------------------------
C++ brute-force solution.
        
    int strStr(string haystack, string needle) {
        for (int i = 0; i < (int)(haystack.size()-needle.size()+1); i++) {
            int j = 0;
            while (j < needle.size() && haystack[i+j] == needle[j])
                j++;
            if (j == needle.size()) 
                return i;
        }
        return -1;
    }

----------------------------------------------------------------------------------------------------
O(m+n) and O(mn) solutions
 public int strStr(String haystack, String needle) {
        if(haystack == null || needle == null || needle.length() > haystack.length()) return -1;

        int len = haystack.length(), i = 0, j = 0, pos = 0;
        while(i < len && j < needle.length()) {
            if(haystack.charAt(i++) == needle.charAt(j)) {
                j++;
            } else {
                i = i - j;
                j = 0;
                pos = i;
            }
        }
        return j == needle.length()? pos : -1;
    }


----------------------------------------------------------------------------------------------------
C++ 3ms short Solution
int strStr(string haystack, string needle) {
        if(needle.size()==0) return 0;
        if(needle.size()>haystack.size()) return -1;
        for(int i=0,j=0; i<haystack.size()-needle.size()+1;i++,j=0)
        {
            while(j<needle.size() && haystack[i]==needle[j]) {++j;++i;}
            if(j==needle.size()) return i-needle.size();
            else i = i-j;
        }
        return -1;
    }


----------------------------------------------------------------------------------------------------
