Easy Java Solution, Sorting.
public class Solution {
    public String[] findRelativeRanks(int[] nums) {
        Integer[] index = new Integer[nums.length];
        
        for (int i = 0; i < nums.length; i++) {
            index[i] = i;
        }
        
        Arrays.sort(index, (a, b) -> (nums[b] - nums[a]));
        
        String[] result = new String[nums.length];

        for (int i = 0; i < nums.length; i++) {
            if (i == 0) {
                result[index[i]] = "Gold Medal";
            }
            else if (i == 1) {
                result[index[i]] = "Silver Medal";
            }
            else if (i == 2) {
                result[index[i]] = "Bronze Medal";
            }
            else {
                result[index[i]] = (i + 1) + "";
            }
        }

        return result;
    }
}


----------------------------------------------------------------------------------------------------
Python solution
def findRelativeRanks(self, nums):
    sort = sorted(nums)[::-1]
    rank = ["Gold Medal", "Silver Medal", "Bronze Medal"] + map(str, range(4, len(nums) + 1))
    return map(dict(zip(sort, rank)).get, nums)

----------------------------------------------------------------------------------------------------
Simple Sorting O(n log n) solution
class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& nums) {
        vector<int> rank;
        for(int i=0; i<nums.size(); ++i) rank.push_back(i);
        
        sort(rank.begin(), rank.end(), [&](int a, int b){return nums[a] > nums[b];});
        vector<string> ranks(nums.size());
        
        for(int i=3; i<nums.size(); ++i){
            ranks[rank[i]] = std::to_string(i+1);
        }
        
        if(nums.size() > 0) ranks[rank[0]] = "Gold Medal";
        if(nums.size() > 1) ranks[rank[1]] = "Silver Medal";
        if(nums.size() > 2) ranks[rank[2]] = "Bronze Medal";
        
        return ranks;
    }
};

----------------------------------------------------------------------------------------------------
C++ Easy to Understand
class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& nums) {
        priority_queue<pair<int,int> > pq;
        for(int i=0;i<nums.size();i++)
        {
            pq.push(make_pair(nums[i],i));
        }
        vector<string> res(nums.size(),"");
        int count = 1;
        for(int i=0; i<nums.size();i++)
        {
            if(count==1) {res[pq.top().second] = "Gold Medal"; count++;}
            else if(count==2) {res[pq.top().second] = "Silver Medal"; count++;}
            else if(count==3) {res[pq.top().second] = "Bronze Medal"; count++;}
            else {res[pq.top().second] = to_string(count); count++;}
            pq.pop();
        }
        return res;
    }
};

----------------------------------------------------------------------------------------------------
Simple C++ solution using a map
    vector<string> findRelativeRanks(vector<int>& nums) {
        map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) mp[nums[i]] = i;
        
        vector<string> ans(mp.size(), "");
        int cnt = 1; 
        for (map<int, int>::reverse_iterator it = mp.rbegin(); it != mp.rend(); it++, cnt++) {
            if (cnt == 1) ans[it->second] = "Gold Medal";
            else if (cnt == 2) ans[it->second] = "Silver Medal";
            else if (cnt == 3) ans[it->second] = "Bronze Medal";
            else ans[it->second] = to_string(cnt);
        }
        
        return ans;


----------------------------------------------------------------------------------------------------
JavaScript solution
/**
 * @param {number[]} nums
 * @return {string[]}
 */
var findRelativeRanks = function(nums) {
  var sortedNums = nums.slice(0).sort(function(a , b){
      return b - a;
  });
  // Create a map to the sorted nums
  var sortedNumsMapping = {};
  sortedNums.forEach(function(num, index){
      sortedNumsMapping[num] = index + 1 + ''; 
  });

  return nums.map(function(num, index) {
    if(sortedNumsMapping[num] === '1') return "Gold Medal";
    else if(sortedNumsMapping[num] === '2' ) return "Silver Medal";
    else if(sortedNumsMapping[num] === '3' ) return "Bronze Medal";
    else return (sortedNumsMapping[num]);
  });

};


----------------------------------------------------------------------------------------------------
Java: Easy to understand O(NLogN) solution
public class Solution {

public String[] findRelativeRanks(int[] nums) {
    if(nums == null || nums.length == 0) return new String[0];
    int n = nums.length;
    String[] result = new String[n];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    
    for(int i = 0; i < n; ++i){
        map.put(nums[i], i);
    }
    Arrays.sort(nums);
    for( int i = 0; i < n/2; ++i ) { 
        int temp = nums[i]; 
        nums[i] = nums[n - i - 1]; 
        nums[n - i - 1] = temp; 
    }
    
    result[map.get(nums[0])] = "Gold Medal";
    if(1 < n) result[map.get(nums[1])] = "Silver Medal";
    if(2 < n) result[map.get(nums[2])] = "Bronze Medal";
    for(int j = 3; j < n; ++j){
        result[map.get(nums[j])] = String.valueOf(j + 1);
    }
    return result;
}
}

----------------------------------------------------------------------------------------------------
Java 6ms solution O(n) without sorting
public class Solution {
    public String[] findRelativeRanks(int[] nums) {
        String[] result = new String[nums.length];
        int max = 0;
        for (int i : nums) {
            if (i > max) max = i;
        }
        int[] hash = new int[max + 1];
        for (int i = 0; i < nums.length; i++) {
            hash[nums[i]] = i + 1;
        }
        int place = 1;
        for (int i = hash.length - 1; i >= 0; i--) {
            if (hash[i] != 0) {
                if (place == 1) {
                    result[hash[i] - 1] = "Gold Medal";
                } else if (place == 2) {
                    result[hash[i] - 1] = "Silver Medal";
                } else if (place == 3) {
                    result[hash[i] - 1] = "Bronze Medal";
                } else {
                    result[hash[i] - 1] = String.valueOf(place);
                }
                place++;
            }
        }
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Sorting Python solution
class Solution(object):
    def findRelativeRanks(self, nums):
        """
        :type nums: List[int]
        :rtype: List[str]
        """
        s = {n: i for i, n in enumerate(sorted(nums, reverse=True))}
        medals = ['Gold', 'Silver', 'Bronze']
        return [str(s[n]+1) if s[n] >= len(medals) else (medals[s[n]] + ' Medal') for n in nums]


----------------------------------------------------------------------------------------------------
Straightforward Java solution
public String[] findRelativeRanks(int[] nums) {
        int[] tmp = new int[nums.length];
        for (int i = 0; i < nums.length; i++){
            tmp[i] = nums[i];
        }
        Arrays.sort(tmp);
        Map<Integer, String> rankMap = new HashMap();
        int len = nums.length;
        for (int i = len-1; i >= 0; i--){
            if (i == len-1) rankMap.put(tmp[i], "Gold Medal");
            else if (i == len-2) rankMap.put(tmp[i], "Silver Medal");
            else if (i == len-3) rankMap.put(tmp[i], "Bronze Medal");
            else rankMap.put(tmp[i], String.valueOf(len-i));
        }
        String[] result = new String[len];
        for (int i = 0; i < len; i++){
            result[i] = rankMap.get(nums[i]);
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
Concise easy understand solution
public String[] findRelativeRanks(int[] nums) {
	int n = nums.length;
	int[] rank = new int[n];
	for (int i = 0; i < n-1; i++) {
		for (int j = i+1; j < n; j++) {
			if (nums[i] > nums[j]) rank[i]++;
			else rank[j]++;
		}
	}
	String[] res = new String[n];
	for (int i = 0; i < rank.length; i++) {
		if (rank[i] == n-1) res[i] = "Gold Medal";
		else if (rank[i] == n-2) res[i] = "Silver Medal";
		else if (rank[i] == n-3) res[i] = "Bronze Medal";
		else res[i] = String.valueOf(n-rank[i]);
	}
	return res;
}


----------------------------------------------------------------------------------------------------
C++ Solution using Priority Queue
vector<string> findRelativeRanks(vector<int>& nums) {
    
   priority_queue<int> Q;
   for(int num : nums)
   Q.push(num);
   int count = 0; 
    vector<string> ans(nums.size());
    int temp;
    while(Q.size() > 0)
    {
        count++;
        temp = Q.top();
        Q.pop();
        for(int i=0;i<nums.size();i++)
            if(nums[i] == temp)
            {
                if(count == 1)
                    ans[i] = "Gold Medal";
                else if(count == 2)
                    ans[i] = "Silver Medal";
                else if(count == 3)
                    ans[i] = "Bronze Medal";
                else
                    ans[i] = to_string(count);
                break;
            }
    }
    return ans;
}

----------------------------------------------------------------------------------------------------
&#91;Fixed&#93; C++ lower_bound causes TLE, fixed by copying lower_bound from cplusplus.com
template <class FI, class T>  FI my_lower_bound (FI first, FI last, const T& val) 
{
  auto count = distance(first,last);
  while (count > 0)
  {
    auto it = first; auto step=count/2; advance (it,step);
    if (*it<val) {
      first=++it;
      count-=step+1;
    }
    else count=step;
  }
  return first;
} 
vector<string> findRelativeRanks(vector<int>& nums) {
    vector<string> res;
    vector<int> sorted(nums.begin(), nums.end());
    sort(sorted.begin(), sorted.end());

    for (auto n : nums) {
        // TLE if replace with standard lower_bound
        auto pos = nums.size() - distance(sorted.begin(), my_lower_bound(sorted.begin(), sorted.end(), n));
        if (pos == 1) res.push_back("Gold Medal");
        else if (pos == 2) res.push_back("Silver Medal");
        else if (pos == 3) res.push_back("Bronze Medal");
        else res.push_back(to_string(pos));
    }
    return res;
}


----------------------------------------------------------------------------------------------------
2-Line Python
rank = dict((n, i+1) for i, n in enumerate(sorted(nums, reverse=True)))
return [["Gold Medal", "Silver Medal", "Bronze Medal"][rank[x]-1] if rank[x] <= 3 else str(rank[x]) for x in nums]

----------------------------------------------------------------------------------------------------
Easy C# solution. Sorting and Linq.
 public string[] FindRelativeRanks(int[] nums)
 {
     var scores = nums.OrderByDescending(x=>x).ToList();
     return nums.Select(x =>
         {
             if (x == scores[0])
                 return "Gold Medal";
             if (x == scores[1])
                 return "Silver Medal";
             if (x == scores[2])
                 return "Bronze Medal";
              return (scores.IndexOf(x) + 1).ToString();
         }).ToArray();
 }


----------------------------------------------------------------------------------------------------
Easy Java Solution, Using HashMap.
public class Solution {

    public String[] findRelativeRanks(int[] nums) {
        HashMap<Integer, Integer> posMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            posMap.put(nums[i], i);
        }

        Arrays.sort(nums);

        String[] ans = new String[nums.length];
        int last = nums.length-1;
        
        ans[posMap.get(nums[last--])] = "Gold Medal";
        if (last < 0) return ans;
        ans[posMap.get(nums[last--])] = "Silver Medal";
        if (last < 0) return ans;
        ans[posMap.get(nums[last--])] = "Bronze Medal";
        if (last < 0) return ans;
        
        int n = 4;
        for (int i = last; i >= 0; i--) {
            ans[posMap.get(nums[i])] = String.valueOf(n++);
        }
        return ans;
    }
}


----------------------------------------------------------------------------------------------------
Simple JavaScript Solution
/**
 * @param {number[]} nums
 * @return {string[]}
 */
var findRelativeRanks = function(nums) {
  let arr = nums.slice();
  arr.sort((a,b) => b - a);
  let numsMap = {};
  arr.forEach((num, index) => {
    numsMap[num] = (index +1).toString();
    if (index === 0) {
      numsMap[num] = "Gold Medal";
    }
    if (index === 1) {
      numsMap[num] = "Silver Medal";
    }
    if (index === 2) {
       numsMap[num] = "Bronze Medal";
    }
  });
  return nums.map(num => {
    return numsMap[num];
  });
};

----------------------------------------------------------------------------------------------------
Java code using TreeMap
public class Solution {
    public String[] findRelativeRanks(int[] nums) {
        String[] result = new String[nums.length];
        TreeMap<Integer,Integer> tm = new TreeMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++) {
            tm.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++) {
            int cur = tm.lastKey();
            int index = tm.get(cur);
            nums[index] = i+1;
            if (nums[index]>3) result[index] = Integer.toString(nums[index]);
            else if (nums[index]==1) result[index] = "Gold Medal";
            else if (nums[index]==2) result[index] = "Silver Medal";
            else if (nums[index]==3) result[index] = "Bronze Medal";
            tm.remove(cur);
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
c++ sorting 9ms Solution, beats 95%
class Solution {
public:
  vector<string> findRelativeRanks(vector<int>& nums) {
        
    const int size = nums.size();
    if(size == 0) return {};
        
    std::vector<std::pair<int,int>> elements;
    elements.reserve(size);
    for(int i = 0; i<size; i++){
        elements.push_back(std::make_pair(i, nums[i]));
    }
        
    std::sort(elements.begin(), elements.end(), 
    [](const pair<int, int> &p1, const pair<int,int> &p2)
    {
        return p1.second > p2.second;
    });
        
    vector<string> res(size, "");
    
    res[elements[0].first] = "Gold Medal";        

    if(size > 1){
        res[elements[1].first] = "Silver Medal";
    }
        
    if(size > 2){
        res[elements[2].first] = "Bronze Medal";
    }
       
    for(int i = 3; i < size; i++){
      res[elements[i].first] = to_string(i + 1);
    }
        
    return res;
  }
};


----------------------------------------------------------------------------------------------------
Java O(NLogN) solution using LinkedHashMap()
 public String[] findRelativeRanks(int[] nums) {
        Map<Integer, String> map = new LinkedHashMap<>();
        String[] rank = new String[nums.length];
        int index = 4;
        for(int i: nums) map.put(i, "");
        Arrays.sort(nums);
        for(int i = nums.length - 1; i >= 0; i--){
            if(i == nums.length - 1) map.put(nums[i], "Gold Medal");
            if(i == nums.length - 2) map.put(nums[i], "Silver Medal");
            if(i == nums.length - 3) map.put(nums[i], "Bronze Medal");
            if(i < nums.length - 3) map.put(nums[i], String.valueOf(index++));
        }
        int indexOfRank = 0;
        for(String j: map.values()){
            rank[indexOfRank++] = j;
        }
        return rank;
    }


----------------------------------------------------------------------------------------------------
