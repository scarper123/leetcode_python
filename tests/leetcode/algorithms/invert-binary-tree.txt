My DP solution in C++
 

     bool isInterleave(string s1, string s2, string s3) {
        
        if(s3.length() != s1.length() + s2.length())
            return false;
        
        bool table[s1.length()+1][s2.length()+1];
        
        for(int i=0; i<s1.length()+1; i++)
            for(int j=0; j< s2.length()+1; j++){
                if(i==0 && j==0)
                    table[i][j] = true;
                else if(i == 0)
                    table[i][j] = ( table[i][j-1] && s2[j-1] == s3[i+j-1]);
                else if(j == 0)
                    table[i][j] = ( table[i-1][j] && s1[i-1] == s3[i+j-1]);
                else
                    table[i][j] = (table[i-1][j] && s1[i-1] == s3[i+j-1] ) || (table[i][j-1] && s2[j-1] == s3[i+j-1] );
            }
            
        return table[s1.length()][s2.length()];
    }
    


Here is some explanation:

DP table represents if s3 is interleaving at (i+j)th position when s1 is at ith position, and s2 is at jth position. 0th position means empty string.

So if both s1 and s2 is currently empty, s3 is empty too, and it is considered interleaving. If only s1 is empty, then if previous s2 position is interleaving and current s2 position char is equal to s3 current position char, it is considered interleaving. similar idea applies to when s2 is empty. when both s1 and s2 is not empty, then if we arrive i, j from i-1, j, then if i-1,j is already interleaving and i and current s3 position equal, it s interleaving. If we arrive i,j from i, j-1, then if i, j-1 is already interleaving and j and current s3 position equal. it is interleaving.

----------------------------------------------------------------------------------------------------
8ms C++ solution using BFS, with explanation
If we expand the two strings s1 and s2 into a chessboard, then this problem can be transferred into a path seeking problem from the top-left corner to the bottom-right corner. The key is, each cell (y, x) in the board corresponds to an interval between y-th character in s1 and x-th character in s2. And adjacent cells are connected with like a grid. A BFS can then be efficiently performed to find the path.

Better to illustrate with an example here:

Say s1 = "aab" and s2 = "abc". s3 = "aaabcb". Then the board looks like

    o--a--o--b--o--c--o
    |     |     |     |
    a     a     a     a
    |     |     |     |
    o--a--o--b--o--c--o
    |     |     |     |
    a     a     a     a
    |     |     |     |
    o--a--o--b--o--c--o
    |     |     |     |
    b     b     b     b
    |     |     |     |
    o--a--o--b--o--c--o

Each "o" is a cell in the board. We start from the top-left corner, and try to move right or down. If the next char in s3 matches the edge connecting the next cell, then we're able to move. When we hit the bottom-right corner, this means s3 can be represented by interleaving s1 and s2. One possible path for this example is indicated with "x"es below:

    x--a--x--b--o--c--o
    |     |     |     |
    a     a     a     a
    |     |     |     |
    o--a--x--b--o--c--o
    |     |     |     |
    a     a     a     a
    |     |     |     |
    o--a--x--b--x--c--x
    |     |     |     |
    b     b     b     b
    |     |     |     |
    o--a--o--b--o--c--x

Note if we concatenate the chars on the edges we went along, it's exactly s3. And we went through all the chars in s1 and s2, in order, exactly once.

Therefore if we view this board as a graph, such path finding problem is trivial with BFS. I use an `unordered_map` to store the visited nodes, which makes the code look a bit complicated. But a `vector` should be enough to do the job. 

Although the worse case timeis also O(mn), typically it doesn't require us to go through every node to find a path. Therefore it's faster than regular DP than average.

    struct MyPoint {
        int y, x; 
        bool operator==(const MyPoint &p) const {
            return p.y == y && p.x == x;
        }
    };
    namespace std {
        template <>
        struct hash<MyPoint> {
            size_t operator () (const MyPoint &f) const {
                return (std::hash<int>()(f.x) << 1) ^ std::hash<int>()(f.y);
            }
        };
    }
    
    class Solution {
    public:
        bool isInterleave(string s1, string s2, string s3) {
            if (s1.size() + s2.size() != s3.size()) return false;

            queue<MyPoint> q;
            unordered_set<MyPoint> visited;
            bool isSuccessful = false;
            int i = 0;
    
            q.push(MyPoint { 0, 0 });
            q.push(MyPoint { -1, -1 });
            while (!(1 == q.size() && -1 == q.front().x)) {
                auto p = q.front();
                q.pop();
                if (p.y == s1.size() && p.x == s2.size()) {
                    return true;
                }
                if (-1 == p.y) {
                    q.push(p);
                    i++;
                    continue;
                }
                if (visited.find(p) != visited.end()) { continue; }
                visited.insert(p);
    
                if (p.y < s1.size()) { // down
                    if (s1[p.y] == s3[i]) { q.push(MyPoint { p.y + 1, p.x }); }
                }
                if (p.x < s2.size()) { // right 
                    if (s2[p.x] == s3[i]) { q.push(MyPoint { p.y, p.x + 1 }); }
                }
            }
            return false;
        }
    };



----------------------------------------------------------------------------------------------------
DP Solution in Java
    public boolean isInterleave(String s1, String s2, String s3) {

        if ((s1.length()+s2.length())!=s3.length()) return false;

        boolean[][] matrix = new boolean[s2.length()+1][s1.length()+1];

        matrix[0][0] = true;

        for (int i = 1; i < matrix[0].length; i++){
            matrix[0][i] = matrix[0][i-1]&&(s1.charAt(i-1)==s3.charAt(i-1));
        }

        for (int i = 1; i < matrix.length; i++){
            matrix[i][0] = matrix[i-1][0]&&(s2.charAt(i-1)==s3.charAt(i-1));
        }

        for (int i = 1; i < matrix.length; i++){
            for (int j = 1; j < matrix[0].length; j++){
                matrix[i][j] = (matrix[i-1][j]&&(s2.charAt(i-1)==s3.charAt(i+j-1)))
                        || (matrix[i][j-1]&&(s1.charAt(j-1)==s3.charAt(i+j-1)));
            }
        }

        return matrix[s2.length()][s1.length()];

    }

----------------------------------------------------------------------------------------------------
1ms tiny DFS beats 94.57%
To solve this problem, let's look at if `s1[0 ~ i]`  `s2[0 ~ j]` can be interleaved to `s3[0 ~ k]`.

- Start from indices`0, 0, 0` and compare `s1[i] == s3[k]` or `s2[j] == s3[k]`
- Return valid only if either `i` or `j` match `k` and the remaining is also valid
- Caching is the key to performance. This is very similar to top down dp
- Only need to cache `invalid[i][j]` since most of the case `s1[0 ~ i]` and `s2[0 ~ j]` does not form `s3[0 ~ k]`. Also tested caching `valid[i][j]` the run time is also `1ms`
- Many guys use `substring` but it's duplicate code since `substring` itself is checking char by char. We are already doing so


Hope it helps!

    public boolean isInterleave(String s1, String s2, String s3) {
        char[] c1 = s1.toCharArray(), c2 = s2.toCharArray(), c3 = s3.toCharArray();
    	int m = s1.length(), n = s2.length();
    	if(m + n != s3.length()) return false;
    	return dfs(c1, c2, c3, 0, 0, 0, new boolean[m + 1][n + 1]);
    }
    
    public boolean dfs(char[] c1, char[] c2, char[] c3, int i, int j, int k, boolean[][] invalid) {
    	if(invalid[i][j]) return false;
    	if(k == c3.length) return true;
    	boolean valid = 
    	    i < c1.length && c1[i] == c3[k] && dfs(c1, c2, c3, i + 1, j, k + 1, invalid) || 
            j < c2.length && c2[j] == c3[k] && dfs(c1, c2, c3, i, j + 1, k + 1, invalid);
    	if(!valid) invalid[i][j] = true;
        return valid;
    }

----------------------------------------------------------------------------------------------------
Python DP solutions (O(m*n), O(n) space), BFS, DFS.
    
    # O(m*n) space
    def isInterleave1(self, s1, s2, s3):
        r, c, l= len(s1), len(s2), len(s3)
        if r+c != l:
            return False
        dp = [[True for _ in xrange(c+1)] for _ in xrange(r+1)]
        for i in xrange(1, r+1):
            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]
        for j in xrange(1, c+1):
            dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]
        for i in xrange(1, r+1):
            for j in xrange(1, c+1):
                dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i-1+j]) or \
                   (dp[i][j-1] and s2[j-1] == s3[i-1+j])
        return dp[-1][-1]

    # O(2*n) space
    def isInterleave2(self, s1, s2, s3):
        l1, l2, l3 = len(s1)+1, len(s2)+1, len(s3)+1
        if l1+l2 != l3+1:
            return False
        pre = [True for _ in xrange(l2)]
        for j in xrange(1, l2):
            pre[j] = pre[j-1] and s2[j-1] == s3[j-1]
        for i in xrange(1, l1):
            cur = [pre[0] and s1[i-1] == s3[i-1]] * l2
            for j in xrange(1, l2):
                cur[j] = (cur[j-1] and s2[j-1] == s3[i+j-1]) or \
                         (pre[j] and s1[i-1] == s3[i+j-1])
            pre = cur[:]
        return pre[-1]
    
    # O(n) space
    def isInterleave3(self, s1, s2, s3):
        r, c, l= len(s1), len(s2), len(s3)
        if r+c != l:
            return False
        dp = [True for _ in xrange(c+1)] 
        for j in xrange(1, c+1):
            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]
        for i in xrange(1, r+1):
            dp[0] = (dp[0] and s1[i-1] == s3[i-1])
            for j in xrange(1, c+1):
                dp[j] = (dp[j] and s1[i-1] == s3[i-1+j]) or (dp[j-1] and s2[j-1] == s3[i-1+j])
        return dp[-1]
        
    # DFS 
    def isInterleave4(self, s1, s2, s3):
        r, c, l= len(s1), len(s2), len(s3)
        if r+c != l:
            return False
        stack, visited = [(0, 0)], set((0, 0))
        while stack:
            x, y = stack.pop()
            if x+y == l:
                return True
            if x+1 <= r and s1[x] == s3[x+y] and (x+1, y) not in visited:
                stack.append((x+1, y)); visited.add((x+1, y))
            if y+1 <= c and s2[y] == s3[x+y] and (x, y+1) not in visited:
                stack.append((x, y+1)); visited.add((x, y+1))
        return False
                
    # BFS 
    def isInterleave(self, s1, s2, s3):
        r, c, l= len(s1), len(s2), len(s3)
        if r+c != l:
            return False
        queue, visited = [(0, 0)], set((0, 0))
        while queue:
            x, y = queue.pop(0)
            if x+y == l:
                return True
            if x+1 <= r and s1[x] == s3[x+y] and (x+1, y) not in visited:
                queue.append((x+1, y)); visited.add((x+1, y))
            if y+1 <= c and s2[y] == s3[x+y] and (x, y+1) not in visited:
                queue.append((x, y+1)); visited.add((x, y+1))
        return False

----------------------------------------------------------------------------------------------------
My Accepted Java Recursive Solution for interleaving string
    public class Solution {
      	private static Set<Integer> visited; // The combination of i1, i2 has been visited and return false
    	public static boolean isInterleave(String s1, String s2, String s3) {
    		if(s3.length() != s1.length() + s2.length())
    			return false;
    		visited = new HashSet<Integer>();
    		return isInterleave(s1, 0, s2, 0, s3, 0);
    	}
    	
    	private static boolean isInterleave(String s1, int i1, String s2, int i2, String s3, int i3)
    	{	
    		int hash = i1 * s3.length() + i2;
    		if(visited.contains(hash))
    			return false;
    		
    		if(i1 == s1.length())
    			return s2.substring(i2).equals(s3.substring(i3));
    		if(i2 == s2.length())
    			return s1.substring(i1).equals(s3.substring(i3));
    		
    		if(s3.charAt(i3) == s1.charAt(i1) && isInterleave(s1, i1+1, s2, i2, s3, i3+1) ||
    		   s3.charAt(i3) == s2.charAt(i2) && isInterleave(s1, i1, s2, i2+1, s3, i3+1))
    			return true;
    		
    		visited.add(hash);
    		return false;
    	}
    }

The private method isInterleave is the recursive method. it takes additional i1, i2, i3 as the start indexes of s1, s2, s3, so it solves the substring of s1, s2, s3 with those start indexes. 

The recursion starting condition is i1, i2, i3 are set to 0, means it solves the whole string. 

in each recursion, it will just check the first character in s3 with s2 and s1, if it equals s1, it will increase i3 and i1 to solve remain, if remain return true, this recursion will also return true. Same logic for s2.

The end condition is when remain of either s1 or s2 is empty, then just compare remain of s3 with remain of s1 or s2, if they are equal, it will return true.

A pure recursive solution will cause time limit exceed. We can optimize it by caching the false visited solutions in the visited set. That will short circuit many repeated search path. 

----------------------------------------------------------------------------------------------------
Summary of solutions, BFS, DFS, DP
## BFS solution (6ms)

Imagine a grid, which x-axis and y-axis are s1 and s2, matching s3 is the same as
finding a path from (0,0) to (len1, len2). It actually becomes a
BFS on grid. Since we don't need exact paths, a HashSet of
coordinates is used to eliminate duplicated paths.

    public class Solution {
        public boolean isInterleave(String s1, String s2, String s3) {
            int len1 = s1.length(),
                len2 = s2.length(),
                len3 = s3.length();
            if (len1 + len2 != len3) return false;
            Deque<Integer> queue = new LinkedList<>();
            int matched = 0;
            queue.offer(0);
            Set<Integer> set = new HashSet<>();
            while (queue.size() > 0 && matched < len3) {
                int size = queue.size();
                for (int i = 0; i < size; i++) {
                    int p1 = queue.peek() / len3,
                        p2 = queue.peek() % len3;
                    queue.poll();
                    if (p1 < len1 && s1.charAt(p1) == s3.charAt(matched)) {
                        int key = (p1 + 1) * len3 + p2;
                        if (!set.contains(key)) {
                            set.add(key);
                            queue.offer(key);
                        }
                    }
                    if (p2 < len2 && s2.charAt(p2) == s3.charAt(matched)) {
                        int key = p1 * len3 + (p2 + 1);
                        if (!set.contains(key)) {
                            set.add(key);
                            queue.offer(key);
                        }
                    }
                }
                matched++;
            }
            return queue.size() > 0 && matched == len3;
        }
    }

## DFS solution with memorization (2ms)

This looks slow but is actually faster than BFS! Think about it carefully, in this
particular problem, search always ends at the same depth. DFS with memorization
searches about the same amount of paths with the same length as BFS, if it is doesn't
terminate on the first path found. Without the queue operations, the overall cost
is only smaller if we don't count call stack. The most significant runtime reducer is
probably the early termination

    public class Solution {
        public boolean isInterleave(String s1, String s2, String s3) {
            if (s1.length() + s2.length() != s3.length()) return false;
            HashSet<Integer> cache = new HashSet<Integer>();
            return isInterleave0(s1, s2, s3, 0, 0, cache);
        }

        private boolean isInterleave0(String s1, String s2, String s3, int p1, int p2, HashSet<Integer> cache) {
            if (p1 + p2 == s3.length())
                return true;
            if (cache.contains(p1 * s3.length() + p2))
                return false;
            // no need to store actual result.
            // if we found the path, we have already terminated.
            cache.add(p1 * s3.length() + p2);
            boolean match1 = p1 < s1.length() && s3.charAt(p1 + p2) == s1.charAt(p1);
            boolean match2 = p2 < s2.length() && s3.charAt(p1 + p2) == s2.charAt(p2);
            if (match1 && match2)
                return isInterleave0(s1, s2, s3, p1 + 1, p2, cache) ||
                       isInterleave0(s1, s2, s3, p1, p2 + 1, cache);
            else if (match1)
                return isInterleave0(s1, s2, s3, p1 + 1, p2, cache);
            else if (match2)
                return isInterleave0(s1, s2, s3, p1, p2 + 1, cache);
            else
                return false;
        }
    }

## 2d DP solution (6ms)

It's an interesting practice. There are further optimization could be done to
reduce cache matrix to 1d. However doing DP for this problem is tedious and not
seem to worth the trouble.

    public class Solution {
        public boolean isInterleave(String s1, String s2, String s3) {
            int len1 = s1.length(),
                len2 = s2.length(),
                len3 = s3.length();
            if (len1 + len2 != len3) return false;
            // cache[i][j] == true means first i + j chars are matched by
            // first j chars from s1 and first i chars from s2
            boolean[][] cache = new boolean[len2 + 1][len1 + 1];
            cache[0][0] = true; // empty and empty matches empty
            int m3 = 1; // matched length, m1 and m2 are similar
            while (m3 <= len3) {
                // this loop fill in cache matrix from left-top to right-bottom, diagonally.
                // note that loop conditions are pretty tricky here.
                for (int m1 = Math.max(m3 - len2, 0); m1 <= len1 && m1 <= m3; m1++) {
                    int m2 = m3 - m1;
                    cache[m2][m1] =
                        m1 > 0 && cache[m2][m1 - 1] && s3.charAt(m3 - 1) == s1.charAt(m1 - 1) ||
                        m2 > 0 && cache[m2 - 1][m1] && s3.charAt(m3 - 1) == s2.charAt(m2 - 1);
                }
                m3++;
            }
            return cache[len2][len1];
        }
    }


----------------------------------------------------------------------------------------------------
My solution in java using dp, time O(n*m) and space O(m)
Using dp to tracking select i-th seq and j-th seq in s1 and s2 could match i+j+2 th seq in s3

 1. init optimal[0][*] by check no select from s1
 2. init optimal[*][0] by check no select from s2
 3. do search for every i-th and j-th, could match when meet one of the following two cases:
1. if i-th char in s2 equals to the (i+j+1)th char in s3, and previous j-th in s2 is matched without i-th char
2. if j-th char in s1 equals to the (i+j+1)th char in s3, and previous j-1th in s2 is matched with i-th char
 4. a straight-forward solution should be Time: O(n*m), and Space: O(n*m). And space could optimize since optimal[i+1][*] only depends on optimal[i][*], so could use Space O(m)


----------
Java code as following:

    public static boolean isInterleaveOptz(String s1, String s2, String s3) {
        if (s3.length() != s1.length() + s2.length()) return false;

        boolean[] optimal = new boolean[s2.length() + 1];    //dp optimal
        optimal[0] = true;
        for (int j = 0; j < s2.length(); j++) { //check no s1 char is selected, if s2 could equals to s3
            if (optimal[j] && s2.charAt(j) == s3.charAt(j)) optimal[j + 1] = true;
        }

        for (int i = 0; i < s1.length(); i++) { //check select i-th char in s1
            if (optimal[0] && s1.charAt(i) == s3.charAt(i)) optimal[0] = true;    //no char in s2 is selected
            else optimal[0] = false;
            for (int j = 0; j < s2.length(); j++) {  //select j-th char
                if ((s1.charAt(i) == s3.charAt(i + j + 1) && optimal[j + 1]) ||
                        s2.charAt(j) == s3.charAt(i + j + 1) && optimal[j]) {
                    optimal[j + 1] = true;
                } else optimal[j + 1] = false;
            }
        }
        return optimal[s2.length()];
    }

----------------------------------------------------------------------------------------------------
My dp C++ solution is only 10 lines with O(n) space!


    class Solution {
    public:
        bool isInterleave(string s1, string s2, string s3) {
            int m = s1.size(), n = s2.size();
            if(m+n != s3.size())  return false;
            bool c[n+1] = {true};
            int i, j = 0;
            while(j < n && s2[j] == s3[j]) c[++j] = true;
            for(i = 0; i < m; ++i) {
                c[0] = c[0] & (s1[i] == s3[i]);
                for(j = 1; j <= n; ++j)
                    c[j] = ((s1[i] == s3[i+j]) & c[j]) | ((s2[j-1] == s3[i+j]) & c[j-1]);
            }
            return c[n];
        }
    };



----------------------------------------------------------------------------------------------------
Share my DP solution in JAVA O(mn) in time and space
    public class Solution {
        public boolean isInterleave(String s1, String s2, String s3) {
            if(s1.length()+s2.length() != s3.length())
                return false;
            boolean[][] record = new boolean[s1.length()+1][s2.length()+1];
            for(int i = 0; i<=s1.length(); i++){
                if(s1.substring(0, i).equals(s3.substring(0, i))){
                    record[i][0] = true;
                }
            }
            for(int i = 0; i<=s2.length(); i++){
                if(s2.substring(0, i).equals(s3.substring(0, i))){
                    record[0][i] = true;
                }
            }
            for(int i = 1; i<=s1.length(); i++){
                for(int j = 1; j<=s2.length(); j++){
                    if(record[i][j-1]&&s2.charAt(j-1)==s3.charAt(i+j-1))
                        record[i][j]=true;
                    if(record[i-1][j]&&s1.charAt(i-1)==s3.charAt(i+j-1))
                        record[i][j]=true;
                }
            }
            return record[s1.length()][s2.length()];
        }
    }

----------------------------------------------------------------------------------------------------
&#91;C++&#93; Sharing my recursive (TLE) and DP solution (30ms) - easy to understand.
First, I'm a big recursion person. Here's my first attempt which is purely recursive. At an intermediate stage, we can either match one char from s1 to one char from s3 and advance one pointer at s1 and s3. Or we can do the same with s2 and s3. I'm open to suggestions to my recursive code. One improvement could come from not having to call the strcmp function?


    class Solution {
    public:
        bool isInterleave(char* s1, char* s2, char* s3) {
            
            if (*s1=='\0' && *s2=='\0')
                return *s3=='\0'? true : false;
            else if (*s1=='\0'){
                return strcmp(s2,s3)==0 ? true : false;
            } else if (*s2=='\0'){
                return strcmp(s1,s3)==0 ? true : false;
            }
            
            return (*s1==*s3 && isInterleave(s1+1,s2,s3+1)) | (*s2==*s3 && isInterleave(s1,s2+1,s3+1));
        }
    };


Here's the DP version (30ms) as well. Unsurprisingly the DP solution passed the judge and it's pretty efficient. The logic straightforward if you understood the recursive version since there's 1:1 correspondence between the two code. I think it's elegant since it doesn't have any ugly if, else if shenanigans.

    class Solution {
    public:
        bool isInterleave(string s1, string s2, string s3){
            int n1 = s1.length(), n2 = s2.length(), n3 = s3.length();
            if (n1+n2 != n3) return false;
            
            vector<vector<bool>> V(n1+1, vector<bool>(n2+1, false));
            
            V[n1][n2] = (s3[n1+n2]=='\0');
            
            // fill bottom
            for (int j=n2-1; j>=0; j--) V[n1][j]  = (s2[j]==s3[n1+j] && V[n1][j+1]);
            
            // fill right
            for (int i=n1-1; i>=0; i--) V[i][n2] = (s1[i]==s3[n2+i] && V[i+1][n2]);
            
            // fill DP table from bottom right
            for (int j=n2-1; j>=0; j--){
                for (int i=n1-1; i>=0; i--){
                    V[i][j] = (s1[i]==s3[i+j] && V[i+1][j]) | (s2[j]==s3[i+j] && V[i][j+1]);
                }
            }
            return V[0][0];
        }
    };


----------------------------------------------------------------------------------------------------
C++ dp solution with explanation
