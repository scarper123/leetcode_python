I feel this problem is just perfect for April Fools&#x27; day
<p>I know this problem may seem obviously trivial for many programming masters, but not for me; actually I was really over-thinking into it and wondering why it&#39;s only a 3-point problem.</p>
<p>To the problem contributor: you really got me this time! (if the baffling problem description is intentional)</p>
<p>Anyone has the same feeling?</p>


----------------------------------------------------------------------------------------------------
Java 1-liner
public int findLUSlength(String a, String b) {
    return a.equals(b) ? -1 : Math.max(a.length(), b.length());
}


----------------------------------------------------------------------------------------------------
Python, Simple Explanation
def findLUSlength(self, A, B):
    if A == B:
        return -1
    return max(len(A), len(B))


----------------------------------------------------------------------------------------------------
This is a boring word game
<p>This is a boring word game</p>


----------------------------------------------------------------------------------------------------
Java solution, 1 line
public class Solution {
    public int findLUSlength(String a, String b) {
        return a.equals(b) ? -1 : Math.max(a.length(), b.length());
    }
}


----------------------------------------------------------------------------------------------------
c# solution
public class Solution {
    public int FindLUSlength(string a, string b) {
        if(a.Length!=b.Length) {
            return a.Length>b.Length?a.Length:b.Length;
        }
        else if(a.Equals(b)){
            return -1;
        }
        else{
            return a.Length;
        }
    }
}


----------------------------------------------------------------------------------------------------
O(n)time, O(1)space C++ solution, interesting.......
int findLUSlength(string a, string b) {
        if(a.size()!=b.size()) return max(a.size(), b.size());
        else {
            if(a!=b) return b.size();
        }
        return -1;
    }

----------------------------------------------------------------------------------------------------
C++ one line Solution
class Solution {
public:
    int findLUSlength(string a, string b) {
        return a == b?-1:max(a.size(), b.size());
    }
};


----------------------------------------------------------------------------------------------------
Read and think before coding - Clean and clear Java solution
public class Solution {
    public int findLUSlength(String a, String b) {
        int lenA=a.length(), lenB=b.length();
        
        if(a.equals(b))  return -1;
        else    return Math.max(lenA, lenB);
    }
}


----------------------------------------------------------------------------------------------------
This is a silly question
<p>Seriously? Wtf.</p>


----------------------------------------------------------------------------------------------------
scala version(derived problem base on this one)
//a: "apple" , b : "pleqwe" . ==>  result: 3 (length of "qwe")
  
def findLUSlength(a: String, b: String): Int = {
    if (a.equals(b)) return -1

    val intersect = a.intersect(b)
    val aBefore = a.substring(0, a.indexOf(intersect)).length
    val aBehind = a.substring(a.indexOf(intersect), a.length).length - intersect.length
    val bBefore = b.substring(0, b.indexOf(intersect)).length
    val bBehind = b.substring(b.indexOf(intersect), b.length).length - intersect.length

    Math.max(Math.max(aBefore, aBehind), Math.max(bBefore, bBehind))
  }


----------------------------------------------------------------------------------------------------
python one liner
class Solution(object):
    def findLUSlength(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: int
        """
        
        return -1 if a==b else max(len(a),len(b))


----------------------------------------------------------------------------------------------------
1-line C++, don&#x27;t over-thinking :p
    int findLUSlength(string a, string b) {
        return a==b?-1:max(a.size(),b.size());
    }


----------------------------------------------------------------------------------------------------
C++ simple solution 9ms
    string longestCommonPrefix(vector<string>& strs) {
        int minSize = strs.size() == 0 ? 0 : INT_MAX;
        for(int i = 0; i < strs.size(); i++)
            minSize = min((int) strs[i].size(), minSize);
        
        string ret = "";
        for(int i = 0; i < minSize; i++) {
            char c = strs[0][i];
            for(int j = 0; j < strs.size(); j++) {
                if(strs[j][i] != c) return strs[j].substr(0, i);
            }
            ret+=c;
        }
        
        return ret;
    }


----------------------------------------------------------------------------------------------------
One line C# solution
    public int FindLUSlength(string a, string b) {
        return a==b ? -1 : Math.Max(a.Length, b.Length);
    }


----------------------------------------------------------------------------------------------------
I knew I need to read Discussion posts first ;-)  a==b? -1 : max(a.size(),b.size())
<p>Just when I was wondering if the problem is joking with me...</p>


----------------------------------------------------------------------------------------------------
I dont get the question at all, but my code works.... so easy?
<p>public class Solution {<br/>
public int findLUSlength(String a, String b) {<br/>
if(a.equals(b)) return -1;<br/>
return a.length()&gt;b.length()?a.length():b.length();<br/>
}<br/>
}</p>


----------------------------------------------------------------------------------------------------
1 line C++
return a.compare(b)==0?-1:a.length()>b.length()?a.length():b.length();


----------------------------------------------------------------------------------------------------
Java Solution &#x2F; T : O(N), S : O(1)
public class Solution {
    public int findLUSlength(String a, String b) {
        // If one is substring, longest string
        // If one is not substring, longest string
        // If both are equal, -1
        if(a.equals(b))
            return -1;
        
        return (a.length() > b.length()) ? a.length(): b.length();
    }
}


----------------------------------------------------------------------------------------------------
Python solution with detailed explanation
class Solution(object):
    def findLUSlength(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: int
        """
        if a == b:
            return -1
        elif len(a) > len(b):
            return len(a)
        else:
            return len(b)


----------------------------------------------------------------------------------------------------
