3 line Clean and easy understand solution
public int[] constructRectangle(int area) {
        int w = (int)Math.sqrt(area);
	while (area%w!=0) w--;
	return new int[]{area/w, w};
}


----------------------------------------------------------------------------------------------------
Simple Java Solution, Beats 100%
public int[] constructRectangle(int area) {
        int[] result = new int[2];
        if(area == 0){
            return result;
        }
        int a = (int)Math.sqrt(area);
        while(area%a != 0){
            a--;
        }
        int b = area/a;
        result[0] = b;
        result[1] = a;
        return result;
    }

----------------------------------------------------------------------------------------------------
Simple Python
class Solution(object):
    def constructRectangle(self, area):
        mid = int(math.sqrt(area))
        while mid > 0:
            if area % mid == 0:
                return [int(area / mid), int(mid)]
            mid -= 1


----------------------------------------------------------------------------------------------------
3 line C++ clean solution with Explanation
vector<int> constructRectangle(int area) {
        for(int mid = sqrt(area); mid>0; mid--)
            if (!(area%mid))
                return {area/mid, mid};
    }


----------------------------------------------------------------------------------------------------
Python solution (linear time, constant space) with explanation
import math
class Solution(object):
    # based on area input, linear time, and constant space complexity
    def constructRectangle(self, area):
        # to meet the requirements of point 3, getting closest to the center,
        # the square root will get as close as the center as possible
        mid = int(math.sqrt(area))

        # consider mid to be W here, and until you get to a point where there
        # are exact integers that will equate to a rectangle with area, subtract from mid/W
        # because point 2 states that L >= W
        while area % mid != 0:
            mid -= 1
    
        # compute L from W (mid), and W (mid)
        return [int(area/mid),mid]

----------------------------------------------------------------------------------------------------
Clean JavaScript Solution
var largestDividable = (area) => {
  for (let i = Math.sqrt(area) | 0; i > 0; i--) {
    if (area % i === 0) return i;
  }
}

var constructRectangle = function(area) {
  if (area === 0) return [0, 0];

  let w = largestDividable(area);
  let l = area / w;
  return [l, w];
};


----------------------------------------------------------------------------------------------------
3ms concise c++
class Solution {
public:
    vector<int> constructRectangle(int area) {
        if (area <= 0) return vector<int> {};
        vector<int> res;
        int w = area;
        for (int i = 1; i * i <= area; ++i) {
            if (area % i == 0) w = i;
        }
        return vector<int> {area / w, w};
    }
};


----------------------------------------------------------------------------------------------------
Beats 100% of the solutions - JAVA - explained
 public int[] constructRectangle(int area) {
    
    int[] output = new int[2];
	
	output[0] = 1;
	output[1] = area;
	int length = 0;
	
	for (int width = 1; width <= Math.ceil(Math.sqrt(area)); width++) {
		
		length = area/width;
		
		if ((length * width) == area && Math.abs(length - width) <= Math.abs(output[0] - output[1]) && length >= width) {
			output[0] = length;
			output[1] = width;
		}
	}
	
	return output;
}


----------------------------------------------------------------------------------------------------
Straightforward Java solution

    public int[] constructRectangle(int area) {
        int i = 0, j = area;
        int[] result = new int[2];
        while (i <= j){
            long product = i*j;
            if (product == area){
                result[0] = j--;
                result[1] = i++;
            } else if (product > area){
                j--;
            } else {
                i++;
            }
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
JS solution
var constructRectangle = function(area) {
    let w = Math.floor(Math.sqrt(area));
    while (area % w !== 0) {
        w--;
    }
    return [area / w, w];
};


----------------------------------------------------------------------------------------------------
C++ 5 lines solution
    vector<int> constructRectangle(int area) {
        int s=sqrt(area),width=s,length=s;
        while(width*length!=area) 
            if(width*length<area) length++; 
            else if(width*length>area) width--;
        return {length,width};
    }


----------------------------------------------------------------------------------------------------
Sort Java solution
public class Solution {
    public int[] constructRectangle(int area) {
        for (int i=(int)Math.sqrt(area); i>=0; i--) {
            if (area%i!=0) continue;
            int div = area/i
            int val = i*div;
            if (val==area) {
                return new int[]{Math.max(i,div), Math.min(i, div)};
            }
        }
        return new int[]{0,0};
    }
}


----------------------------------------------------------------------------------------------------
C solution: 0ms &amp; 95%
/*
** https://en.wikipedia.org/wiki/Methods_of_computing_square_roots
*/
static int  ft_sqrt(int n)
{
    int res;
    int one;
    
    for (one = 1 << 30; one > n; one >>= 2)
        continue ;
    for (res = 0; 0 != one; one >>= 2)
    {
        if (n >= res + one)
        {
            n -= res + one;
            res += one << 1;
        }
        res >>= 1;
    }
    return (res);
}

int         *constructRectangle(int n, int *ret)
{
    int *tupple;
    
    *ret = 2;
    tupple = calloc(*ret, sizeof(int));
    for (int l = ft_sqrt(n); 0 != l; --l)
    {
        if (0 == (n % l))
        {
            tupple[0] = n / l;
            tupple[1] = l;
            break ;
        }
    }
    return (tupple);
}


----------------------------------------------------------------------------------------------------
2 lines Python
class Solution(object):
    def constructRectangle(self, area):
        for val in range(int(math.sqrt(area)), 0, -1):
            if area % val == 0: return [area/val, val] 


----------------------------------------------------------------------------------------------------
C solution
int* constructRectangle(int area, int* returnSize) {
    int* ReturnArray=calloc(2,sizeof(int));
    * returnSize=2;
    int i=sqrt(area);
    while(i){
    	if(!(area%i)){
    		*ReturnArray=area/i;
    		*(ReturnArray+1)=i;
    		break;
    	}
    	i--;
    }
    return ReturnArray;
}


----------------------------------------------------------------------------------------------------
&#91;JAVA&#93; Sqrt and increment until mod 0 &#x2F; T &lt;= O(N), S : O(1)
class Solution {
    public int[] constructRectangle(int area) {
        int[] result = new int[2];
        int i = (int)Math.ceil(Math.sqrt(area));
        
        while(i < area){
            if(area % i == 0)
                break;
            i++;
        }
        
        result[0] = i;
        result[1] = area/i;
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Java: Provide a straight forward solution
public int[] constructRectangle(int area) {
        int[] result = new int[2];
        if (area == 0) {
            return result;
        }
        for (int i = 1; i <= area; i++) {
            int j = area / i;// Get an integer side length
            if (i * j == area && (result[0] == 0 || Math.abs(j - i) < Math.abs(result[0] - result[1]))) { // For the side length: 1. area should match. 2. difference should be smaller than previous solution. 
                result[0] = Math.max(i, j);// longer one should be LENGTH
                result[1] = Math.min(i, j);
            }
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
Simple C++
<p>class Solution {<br/>
public:<br/>
vector&lt;int&gt; constructRectangle(int area) {<br/>
vector&lt;int&gt; vec(2,0);<br/>
int a,b;<br/>
a=b=sqrt(area);<br/>
while(a<em>b!=area){<br/>
if(a</em>b&gt;area) a--;<br/>
if(a*b&lt;area) b++;<br/>
}<br/>
vec&#91;1&#93;=a;  vec&#91;0&#93;=b;<br/>
return vec;<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
O(n ^ 1&#x2F;2) Solution
public:
    vector<int> constructRectangle(int area) {
        int n = (int) sqrt(area);
        int j = 0;
        for(int i=1; i <= n; ++i){
            if(i*(area/i) == area) j = i;
        }
        vector<int> v{area/j,j};
        
        return v;
    }
};

----------------------------------------------------------------------------------------------------
3 ms solution in C++. Beats 100% of other solutions
class Solution {
public:
    vector<int> constructRectangle(int area) {
        
        vector<int> res (2,0);
        if(!area)
            return res;
            
        int l = area;
        int w = 1;
        int i = 2;
      
        while(l >= w) {
            
            if ((l*w) == area) {
                res[0] = l;
                res[1] = w;
                
                if (l == w)
                    break;
            }
            l = area / i;
            if (l)
                w = area / l;
            else
                return res;
                
            i++;
            
        }
        
        return res;
        
    }
};


----------------------------------------------------------------------------------------------------
