Simple Greedy Java Solution
Arrays.sort(g);
Arrays.sort(s);
int i = 0;
for(int j=0;i<g.length && j<s.length;j++) {
	if(g[i]<=s[j]) i++;
}
return i;


----------------------------------------------------------------------------------------------------
Array sort + Two pointer greedy solution O(nlogn)
public class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        
        int pointG = 0;
        int pointS = 0;
        
        while (pointG<g.length && pointS<s.length) {
            if (g[pointG]<=s[pointS]) {
                pointG++;
                pointS++;
            } else {
                pointS++;
            }
        }
        
        return pointG;
    }
}


----------------------------------------------------------------------------------------------------
Simple PYTHON O(nlogn)
class Solution(object):
    def findContentChildren(self, g, s):
        """
        :type g: List[int]
        :type s: List[int]
        :rtype: int
        """
        g.sort()
        s.sort()
        
        childi = 0
        cookiei = 0
        
        while cookiei < len(s) and childi < len(g):
            if s[cookiei] >= g[childi]:
                childi += 1
            cookiei += 1
        
        return childi
                


----------------------------------------------------------------------------------------------------
Python concise &amp; efficient solution
def findContentChildren(self, g, s):
    g.sort()
    s.sort()
    res = 0
    i = 0
    for e in s:
        if i == len(g):
            break
        if e >= g[i]:
            res += 1
            i += 1
    return res


----------------------------------------------------------------------------------------------------
Java Solution with binary search tree
public class AssignCookies {
    public static int findContentChildren(int[] g, int[] s) {
    	int count = 0;
    	TreeMap<Integer,Integer> tree = new TreeMap<>();
    	for(int temp : s){
    		Integer num = tree.get(temp);
    		num = num==null?0:num;
    		tree.put(temp,num+1);
    	}
    	for(int temp : g){
    		Integer targ = tree.ceilingKey(temp);
    		if(targ!=null){
    			Integer num = tree.get(targ);
    			if(num>0){
    				count++;
    				if(num==1){
    					tree.remove(targ);
    				}else{
                                        tree.put(targ, num - 1);
                                }
    			}
    		}
    	}
        return count;
    }
}


----------------------------------------------------------------------------------------------------
C++ Two Priority_Queue Solution
class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
        priority_queue<int, vector<int>, greater<int>> gq(g.begin(), g.end());
        priority_queue<int, vector<int>, greater<int>> sq(s.begin(), s.end());
        int res;
        while(!sq.empty() && !gq.empty())
        {
            if (sq.top()>=gq.top())
            {
                sq.pop();
                gq.pop();
                res++;
            }
            else
            {
                sq.pop();
            }
        }

        return res;
    }
};



----------------------------------------------------------------------------------------------------
C++ short solution
 int findContentChildren(vector<int>& g, vector<int>& s) {
        sort(g.begin(),g.end());
        sort(s.begin(),s.end());
        int i=g.size()-1, j=s.size()-1,count = 0;
        while(i>=0 && j>=0)
        {
            if(g[i]>s[j]) i--;
            else if(g[i--]<=s[j--]) count++;
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
Simple Python Solution
class Solution(object):
    def findContentChildren(self, g, s):
        g.sort()
        s.sort()
        i, j = 0, 0
        while i < len(g) and j < len(s):
            if s[j] >= g[i]:
                i += 1
            j += 1
        return i

----------------------------------------------------------------------------------------------------
Easy Understanding C++ solution O(nlogn)
  int findContentChildren(vector<int>& g, vector<int>& s) {
        sort(g.begin(),g.end());
        sort(s.begin(),s.end());
        int i = 0, j=0;
        while(i<g.size() && j<s.size()){
            if(s[j]>=g[i])
                i++; // when the child get the cookie, foward child by 1
            j++;
        }
        return i;
    }


----------------------------------------------------------------------------------------------------
C++ Greedy Solution with O(nlgn) Time Complexity
class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
        if(g.size() == 0 || s.size() == 0)
            return 0;
        int ans = 0, gid = 0;
        sort(g.begin(), g.end());
        sort(s.begin(), s.end());
        for(int i = 0; i < s.size() && gid < g.size(); ++ i){
            if(s[i] >= g[gid]){
                ++ ans, ++ gid;
            }
        }
        return ans;
    }
};


----------------------------------------------------------------------------------------------------
simple java greedy algorithm
public class Solution {
    public int findContentChildren(int[] g, int[] s) {
        int ret = 0;
        int i = 0;
        int j = 0;
        Arrays.sort(g);
        Arrays.sort(s);
        while (i < g.length && j < s.length) {
            if (s[j] >= g[i]) {
                ret++;
                i++;
                j++;
            }
            else {
                j++;
            }
        }
        return ret;
    }
}


----------------------------------------------------------------------------------------------------
6 Lines - Simple Python Code
class Solution(object):
    def findContentChildren(self, g, s):
        """
        :type g: List[int]
        :type s: List[int]
        :rtype: int
        """
        g, s = sorted(g), sorted(s)
        i, j= 0, 0
        while i != len(g) and j != len(s):
            if s[j] >= g[i]:
                 i = i+1
            j += 1
        
        return i


----------------------------------------------------------------------------------------------------
39ms C++ Solution
 int findContentChildren(vector<int>& g, vector<int>& s) {
        int *gf = new int[g.size()], *cs = new int[s.size()], child = 0, cookie = 0;
        for(int i = 0; i < g.size(); i ++) gf[i] = g[i];
        for(int i = 0; i < s.size(); i ++) cs[i] = s[i];
        sort(gf, gf + g.size());
        sort(cs, cs + s.size());
        while(child < g.size() && cookie < s.size()){
            if(gf[child] <= cs[cookie]){
                child ++; 
            }
            cookie ++;
        }
        return child;
    }


----------------------------------------------------------------------------------------------------
qsort(), &lt;30ms, in C
