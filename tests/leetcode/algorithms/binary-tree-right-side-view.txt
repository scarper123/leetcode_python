Basically it&#x27;s a fibonacci.
The problem seems to be a *dynamic programming* one. **Hint**: the tag also suggests that! 
Here are the steps to get the solution incrementally. 

- Base cases:  
if n <= 0, then the number of ways should be zero. 
if n == 1, then there is only way to climb the stair. 
if n == 2, then there are two ways to climb the stairs. One solution is one step by another; the other one is two steps at one time. 

- The key intuition to solve the problem is that given a number of stairs n, if we know the number ways to get to the points `[n-1]` and `[n-2]` respectively, denoted as `n1` and `n2` , then the total ways to get to the point `[n]` is `n1 + n2`. Because from the `[n-1]` point, we can take one single step to reach `[n]`. And from the `[n-2]` point, we could take two steps to get there. There is NO overlapping between these two solution sets, because we differ in the final step. 

Now given the above intuition, one can construct an array where each node stores the solution for each number n. Or if we look at it closer, it is clear that this is basically a fibonacci number, with the starting numbers as 1 and 2, instead of 1 and 1. 

The implementation in Java as follows: 

    public int climbStairs(int n) {
        // base cases
        if(n <= 0) return 0;
        if(n == 1) return 1;
        if(n == 2) return 2;
        
        int one_step_before = 2;
        int two_steps_before = 1;
        int all_ways = 0;
        
        for(int i=2; i<n; i++){
        	all_ways = one_step_before + two_steps_before;
        	two_steps_before = one_step_before;
	        one_step_before = all_ways;
        }
        return all_ways;
    }   


----------------------------------------------------------------------------------------------------
3-4 short lines in every language
Same simple algorithm written in every offered language. Variable `a` tells you the number of ways to reach the current step, and `b` tells you the number of ways to reach the next step. So for the situation one step further up, the old `b` becomes the new `a`, and the new `b` is the old `a+b`, since that new step can be reached by climbing 1 step from what `b` represented or 2 steps from what `a` represented.

Ruby wins, and *"the C languages"* all look the same.

**Ruby** (60 ms)

    def climb_stairs(n)
        a = b = 1
        n.times { a, b = b, a+b }
        a
    end

**C++** (0 ms)

    int climbStairs(int n) {
        int a = 1, b = 1;
        while (n--)
            a = (b += a) - a;
        return a;
    }

**Java** (208 ms)

    public int climbStairs(int n) {
        int a = 1, b = 1;
        while (n-- > 0)
            a = (b += a) - a;
        return a;
    }

**Python** (52 ms)

    def climbStairs(self, n):
        a = b = 1
        for _ in range(n):
            a, b = b, a + b
        return a

**C** (0 ms)

    int climbStairs(int n) {
        int a = 1, b = 1;
        while (n--)
            a = (b += a) - a;
        return a;
    }

**C#** (48 ms)

    public int ClimbStairs(int n) {
        int a = 1, b = 1;
        while (n-- > 0)
            a = (b += a) - a;
        return a;
    }

**Javascript** (116 ms)

    var climbStairs = function(n) {
        a = b = 1
        while (n--)
            a = (b += a) - a
        return a
    };


----------------------------------------------------------------------------------------------------
Easy solutions for suggestions.
Hi guys, I come up with this arithmetic way. Find the inner logic relations and get the answer.


    public class Solution {
    
    public int climbStairs(int n) {
        if(n == 0 || n == 1 || n == 2){return n;}
        int[] mem = new int[n];
        mem[0] = 1;
        mem[1] = 2;
        for(int i = 2; i < n; i++){
            mem[i] = mem[i-1] + mem[i-2];
        }
        return mem[n-1];
    }
    
}

----------------------------------------------------------------------------------------------------
Python different solutions (bottom up, top down).
    
    # Top down - TLE
    def climbStairs1(self, n):
        if n == 1:
            return 1
        if n == 2:
            return 2
        return self.climbStairs(n-1)+self.climbStairs(n-2)
     
    # Bottom up, O(n) space
    def climbStairs2(self, n):
        if n == 1:
            return 1
        res = [0 for i in xrange(n)]
        res[0], res[1] = 1, 2
        for i in xrange(2, n):
            res[i] = res[i-1] + res[i-2]
        return res[-1]
    
    # Bottom up, constant space
    def climbStairs3(self, n):
        if n == 1:
            return 1
        a, b = 1, 2
        for i in xrange(2, n):
            tmp = b
            b = a+b
            a = tmp
        return b
        
    # Top down + memorization (list)
    def climbStairs4(self, n):
        if n == 1:
            return 1
        dic = [-1 for i in xrange(n)]
        dic[0], dic[1] = 1, 2
        return self.helper(n-1, dic)
        
    def helper(self, n, dic):
        if dic[n] < 0:
            dic[n] = self.helper(n-1, dic)+self.helper(n-2, dic)
        return dic[n]
        
    # Top down + memorization (dictionary)  
    def __init__(self):
        self.dic = {1:1, 2:2}
        
    def climbStairs(self, n):
        if n not in self.dic:
            self.dic[n] = self.climbStairs(n-1) + self.climbStairs(n-2)
        return self.dic[n]

----------------------------------------------------------------------------------------------------
Using the Fibonacci formular to get the answer directly
    
This is Fibonacci number, and the world has already worked out an formula that

![enter image description here][1]

and where 

![enter image description here][2]

or you can check the wiki [Fibonacci Number][3]

and noticed the Fibonacci begins with F(0)=0, F(1)=1, F(2)=1, F(3)=2

but this problem begins with F'(1)=1, F'(2)=2

So we need a (n++) at the beginning to match the Fibonacci formula

    int climbStairs(int n) {
        n++;
        double root5 = pow(5, 0.5);
        double result = 1/root5*( pow((1+root5)/2, n) - pow((1-root5)/2, n) );
        return (int)(result);
    }


  [1]: https://upload.wikimedia.org/math/5/9/9/5992591704ae747ece79e8808dcadd63.png
  [2]: https://upload.wikimedia.org/math/4/9/e/49e8a76ceee7c67c84383ebdf06683be.png
  [3]: https://en.wikipedia.org/wiki/Fibonacci_number

----------------------------------------------------------------------------------------------------
Simple and Clear 2ms Solution in C++ Without Recursion
    class Solution {
    public:
        int climbStairs(int n) {
            int StepOne = 1;
            int StepTwo = 0;
            int ret = 0;
            for(int i=0;i<n;i++)
            {
                ret = StepOne + StepTwo;
                StepTwo = StepOne;
                StepOne = ret;
            }
            return ret;
        }
    };

This problem is a Fibonacci problem.
F(n)=F(n-1)+F(n-2);
Solving this problem by recursion ,we will do a lot of same recursion.
Example:
F(10)=F(9)+F(8);
F(9)=F(8)+F(7);
we calculate F(8) twice,when n is large,this will increase as a rate of n's exponent.

So a more efficient way to solve this problem is from Bottom to Top.
Calculate F(0) ,F(1);
then F(2).........


----------------------------------------------------------------------------------------------------
Memoization with recursion, top-down approach + Dynamic Programming, bottom-up
