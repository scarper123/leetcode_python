Don&#x27;t treat it as a 2D matrix, just treat it as a sorted list
Use binary search. 

n * m matrix convert to an array => matrix[x][y] => a[x * m + y]

an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];

    class Solution {
    public:
        bool searchMatrix(vector<vector<int> > &matrix, int target) {
            int n = matrix.size();
            int m = matrix[0].size();
            int l = 0, r = m * n - 1;
            while (l != r){
                int mid = (l + r - 1) >> 1;
                if (matrix[mid / m][mid % m] < target)
                    l = mid + 1;
                else 
                    r = mid;
            }
            return matrix[r / m][r % m] == target;
        }
    };

----------------------------------------------------------------------------------------------------
Binary search on an ordered matrix
	/**
	 *  Do binary search in this "ordered" matrix
	 */
	public boolean searchMatrix(int[][] matrix, int target) {
		
		int row_num = matrix.length;
		int col_num = matrix[0].length;
		
		int begin = 0, end = row_num * col_num - 1;
		
		while(begin <= end){
			int mid = (begin + end) / 2;
			int mid_value = matrix[mid/col_num][mid%col_num];
			
			if( mid_value == target){
				return true;
			
			}else if(mid_value < target){
				//Should move a bit further, otherwise dead loop.
				begin = mid+1;
			}else{
				end = mid-1;
			}
		}
		
		return false;
	}
	

----------------------------------------------------------------------------------------------------
A Python binary search solution - O(logn)
It is basically an advanced version of the binary search

    class Solution:
        # @param matrix, a list of lists of integers
        # @param target, an integer
        # @return a boolean
        # 8:21
        def searchMatrix(self, matrix, target):
            if not matrix or target is None:
                return False
    
            rows, cols = len(matrix), len(matrix[0])
            low, high = 0, rows * cols - 1
            
            while low <= high:
                mid = (low + high) / 2
                num = matrix[mid / cols][mid % cols]
    
                if num == target:
                    return True
                elif num < target:
                    low = mid + 1
                else:
                    high = mid - 1
            
            return False

----------------------------------------------------------------------------------------------------
Java clear solution
  The basic idea is from right corner, if the current number greater than target col - 1 in same row, else if the current number less than target, row + 1 in same column, finally if they are same, we find it, and return return.

      public boolean searchMatrix(int[][] matrix, int target) {
                int i = 0, j = matrix[0].length - 1;
                while (i < matrix.length && j >= 0) {
                        if (matrix[i][j] == target) {
                            return true;
                        } else if (matrix[i][j] > target) {
                            j--;
                        } else {
                            i++;
                        }
                    }
                
                return false;
            }

----------------------------------------------------------------------------------------------------
C++ 12ms, O(log(mn)), no library functions, treat matrix as an array
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // treat the matrix as an array, just taking care of indices
        // [0..n*m]
        // (row, col) -> row*n + col
        // i -> [i/n][i%n]
        if(matrix.empty() || matrix[0].empty())
        {
            return false;
        }
        int m = matrix.size(), n = matrix[0].size();
        int start = 0, end = m*n - 1;
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            int e = matrix[mid/n][mid%n];
            if(target < e)
            {
                end = mid - 1;
            }
            else if(target > e)
            {
                start = mid + 1;
            }
            else
            {
                return true;
            }
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Share my two O(logm + logn) solutions
 Solution1:

Treat the matrix as a sorted list, and use  binary search.

    class Solution {
    public:
        bool searchMatrix(vector<vector<int> > &matrix, int target)
        {
            if(matrix.empty())  return false;
            
        	int height = matrix.size();
        	int width = matrix[0].size();
        
        	if(matrix[0][0] > target || matrix[height-1][width-1] < target)	return false;	
        
        	int head = 0,tail = height*width-1;
        	int mid,midRow,midCol;
    
        	while(head <= tail)
        	{
        		mid = (head+tail)/2;
        		midCol = mid%width;
        	    midRow = mid/width;
        		if(matrix[midRow][midCol] < target)
        			head = mid+1;
        		else if(matrix[midRow][midCol] > target)
        			tail = mid-1;
        		else
        			return true;
        	}
        	return false;
        }
    };

Solution2:

Use binary search for matrix[i][0] to find the row where target is in, and then use  binary search for matrix[row][j] to find target. This solution is better because it avoids multiplication overflow(height*width) and / and % while it's complexity is the  same as solution1.

    class Solution {
    public:
        bool searchMatrix(vector<vector<int> > &matrix,int target)
        {
            if(matrix.empty())  return false;
            
        	int heigth = matrix.size();
        	int width = matrix[0].size();
        	
        	if(matrix[0][0] > target || matrix[heigth-1][width-1] < target)		return false;
        
        	int head = 0;
        	int tail = heigth-1;
        	int mid;
        	while(head != tail && matrix[tail][0] > target)
        	{
        		mid = (head+tail+1)/2;
        		if(matrix[mid][0] < target)		head = mid;
        		else if(matrix[mid][0] > target)	tail = mid-1;	
        		else 	return true;
        	}
        	int row = tail;
        	head = 0,tail = width-1;
        	while(head <= tail)
        	{
        		mid = (head+tail)/2;
        		if(matrix[row][mid] < target)
        			head = mid + 1;
        		else if(matrix[row][mid] > target)
        			tail = mid -1;
        		else return true;
        	}
        	return false;
        }
    };


----------------------------------------------------------------------------------------------------
C++ 12ms Solution using Binary Search &#91;O(log(m) + log(n))&#93;
    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int m = matrix.size(), n = matrix[0].size(), x, y;
            int lo = 0, hi = m*n-1, mid;
            if (hi == 0) return (matrix[0][0] == target);
            while (lo <= hi)
            {
                mid = lo + (hi-lo)/2;
                x = mid / n; y = mid % n;
                if (matrix[x][y] == target)
                    return true;
                else if (matrix[x][y] > target)
                    hi = mid-1;
                else
                    lo = mid+1;
            }
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
An Easy Solution in Java
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int row = 0;
        int col = matrix[0].length - 1;
        while (row < matrix.length && col >= 0) {
            if (matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] < target) {
                row++;
            } else {
                col--;
            }
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Share my O(n + m) solution
  

      Solution {  public:
        bool searchMatrix(vector<vector<int> > &matrix, int target) {
            int n = (int)matrix.size();
            int m = (int)matrix[0].size();
            --n; --m;
            while(n > 0 && matrix[n - 1][m] >= target) --n;
            while(m > 0 && matrix[n][m - 1] >= target) --m;
            return (matrix[n][m] == target);
        }
    };
I just used that fact, that number in the matrix increases

----------------------------------------------------------------------------------------------------
Share my O(m+n) solution
I search from right up corner:row=0,col=m-1
  

 1. if matrix[row][col] is equal target,return true.
 2. if matrix[row][col] is less than target, row++;  indicate that this row can't contain target.because this one in this line is the biggest one,counting from 'row'.
 3. if matrix[row][col] is greater than target,col--;   indicate that this column can't contain target.because this one in this column is the smallest one,counting from 'col'.


----------


    class Solution {
    public:
        bool searchMatrix(vector<vector<int> > &matrix, int target) {
            if(matrix.empty())return false;
            int n=matrix.size(),m=matrix[0].size(),row=0,col=m-1;
            while(row<n&&col>=0){
                if(matrix[row][col]==target)return true;
                else if(matrix[row][col]<target)row++;
                else col--;
            }
            return false;
        }
    };



----------------------------------------------------------------------------------------------------
6-12 lines, O(log(m) + log(n)), myself+library
I have two solutions, one without and one with using the library. Both have runtime O(log(m) + log(n)), or in other words, O(log(mn)).

---
**Solution 1: *One Binary Search*** (48 ms, 12 lines)

Here I treat the matrix like a single big list of length m*n and use a simple binary search. I only have to convert the list indexes to matrix indexes on the fly.

    def searchMatrix(self, matrix, target):
        n = len(matrix[0])
        lo, hi = 0, len(matrix) * n
        while lo < hi:
            mid = (lo + hi) / 2
            x = matrix[mid/n][mid%n]
            if x < target:
                lo = mid + 1
            elif x > target:
                hi = mid
            else:
                return True
        return False

---
**Solution 2: *Using the library*** (48 ms, 6 lines)

If there were a library function doing the 2D search, it would be boring, but there isn't. So it's still a little challenge to figure out how to use the 1D functions that *are* there. Here I use `bisect` to (approximately) find the candidate row and then `bisect_left` to find the candidate cell in that row.

    def searchMatrix(self, matrix, target):
        i = bisect.bisect(matrix, [target])
        if i < len(matrix) and matrix[i][0] == target:
            return True
        row = matrix[i-1]
        j = bisect.bisect_left(row, target)
        return j < len(row) and row[j] == target


----------------------------------------------------------------------------------------------------
16ms c++ solution
    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int size = matrix.size();
            if(size == 0) return false;
            int colsize = matrix[0].size();
            if(colsize == 0) return false;
            int elmcount = size*colsize;
            int begin = 0,end = elmcount-1;
            int mid,t;
            while(begin<=end)
            {
                mid = (begin+end)/2;
                if((t = matrix[mid/colsize][mid%colsize]) == target)
                return true;
                else if(t<target)
                {
                    begin = mid+1;
                }
                else
                end = mid-1;
            }
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
Safe binary search implementation
    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            /** first check whether it is in the range **/
            int m=matrix.size(), n=matrix[0].size();
            if(target<matrix[0][0] || target>matrix[m-1][n-1]) return false;
            
            int start=-1, end=m*n-1;
            while(end-start>1){
                int mid=(start+end)/2;
                if(matrix[mid/n][mid%n] >= target) end=mid;
                else start=mid;
            }
            
            return matrix[end/n][end%n]==target;
        }
    };

----------------------------------------------------------------------------------------------------
Solutions in O(m*n) time complexity should be accepted?
My solution has O(m*n) time complexity, and it was accepted. I think that the test suite needs some revising.


----------


    public class Solution {
        public boolean searchMatrix(int[][] matrix, int target) {
            int m = matrix.length;
            int n = matrix[0].length;
            
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (matrix[i][j] == target) {
                        return true;
                    }
                }
            }
            
            return false;
        }
    }

----------------------------------------------------------------------------------------------------
My O(log(m) + log(n)) solution - just a few lines
    class Solution {
    public:
        bool searchMatrix(vector<vector<int> > &matrix, int target) {
            if(!matrix.size() or !matrix[0].size() or target < matrix[0][0]) return false;
            int m = matrix.size(), n = matrix[0].size(), l = 0, r = m * n, k;
            while(l + 1 < r) {
                k = (l + r) / 2;
                if(matrix[k/n][k%n] <= target) l = k;
                else r = k;
            }
            return matrix[l/n][l%n] == target;
        }
    };

My idea is just treat the matrix as an flattened sorted array and do the binary search. The trick is you need to convert you 1D index to 2D index using devide&mod.

----------------------------------------------------------------------------------------------------
My accepted Java solution without Binary Search
public class Solution {

    public boolean searchMatrix(int[][] matrix, int target) {
       int m = 0;                        //starting with first row
        int n = matrix[0].length;  //starting with last column
        int col = n-1;
        int maxRow = matrix.length-1;
        
        while(m<=maxRow && col>=0){    //loop till maximum row and till first column 
        
        if(matrix[m][col]==target){
            return true;
        }

        else if(matrix[m][col]>target){
            col--; 
          }

        else if(matrix[m][col]<target){
             m++; 
          }
      }
     return false;
    }


----------------------------------------------------------------------------------------------------
Share my C++ 6 lines O(log m + log n) codes (using STL function lower_bound)
The basic idea of the program is as follows:

(Step 1) Use `lower_bound` (with predication) to find the correct row. 

Time complexity: O(log m)

(Step 2) Use `binary_search` (without predication) to check the existence of the target element. 

Time complexity: O(log n)

    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            bool ret = false;
            if ((!matrix.empty()) && (!matrix.front().empty())) {
                auto pred = [](vector<int> & vval, int ival){return vval.back() < ival;};
                auto it = lower_bound(matrix.begin(), matrix.end(), target, pred);
                if (it != matrix.end()) {
                    ret = binary_search(it->begin(), it->end(), target);
                }
            }
            return ret;
        }
    };


----------------------------------------------------------------------------------------------------
Concise C++ solution - Binary Search
I label the grid from 0 - n * m -1. The numbers are ascending. So Binary Search works in this case.

    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            if (matrix.size() == 0) return false;
            int p = 0, q = matrix.size() * matrix[0].size() - 1;
            while (p <= q){
                int mid = p + (q - p) / 2, x = mid / matrix[0].size(), y = mid % matrix[0].size();
                if (matrix[x][y] == target) return true;
                if (matrix[x][y] > target) 
                    q = mid - 1;
                else
                    p = mid + 1;
            }
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
Test case may be too weak !!!
The naive O(mn) method passed in 1 ms...

    public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m<1) return false;
        int n = matrix[0].length;
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++)
                if(matrix[i][j]==target) return true;
        }
        return false;
    }
    }

or even more simplified one following stephen's suggestion (I hate myself forgetting foreach all the time):

    public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int[] row : matrix) {
            for(int item : row)
                if(item==target) return true;
        }
        return false;
    }
    }

----------------------------------------------------------------------------------------------------
12ms C++ solution
Step 1: Binary search for the largest row index with a first row entry less than or equal to target.

Step 2: Binary search in that row for target.

    class Solution {
    public:
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int l = 0, u = matrix.size() - 1, r = -1;
            while (l <= u) {
                int m = l + (u - l) / 2;
                if (matrix[m][0] <= target) {
                    r = m, l = m + 1;
                } else {
                    u = m - 1;
                }
            }
            if (r == - 1) { return false; }
            l = 0, u = matrix.front().size() - 1;
            while (l <= u) {
                int m = l + (u - l) / 2;
                if (matrix[r][m] == target) {
                    return true;
                } else if (matrix[r][m] < target) {
                    l = m + 1;
                } else {
                    u = m - 1;
                }
            }
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
