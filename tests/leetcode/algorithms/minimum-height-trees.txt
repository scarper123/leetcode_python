My simple Java solution
    public class Solution {
        public int countPrimes(int n) {
            boolean[] notPrime = new boolean[n];
            int count = 0;
            for (int i = 2; i < n; i++) {
                if (notPrime[i] == false) {
                    count++;
                    for (int j = 2; i*j < n; j++) {
                        notPrime[i*j] = true;
                    }
                }
            }
            
            return count;
        }
    }

----------------------------------------------------------------------------------------------------
Fast Python Solution
    class Solution:
    # @param {integer} n
    # @return {integer}
    def countPrimes(self, n):
        if n < 3:
            return 0
        primes = [True] * n
        primes[0] = primes[1] = False
        for i in range(2, int(n ** 0.5) + 1):
            if primes[i]:
                primes[i * i: n: i] = [False] * len(primes[i * i: n: i])
        return sum(primes)

----------------------------------------------------------------------------------------------------
My easy one round c++ code
    int countPrimes(int n) {
        if (n<=2) return 0;
		vector<bool> passed(n, false);
		int sum = 1;
		int upper = sqrt(n);
		for (int i=3; i<n; i+=2) {
			if (!passed[i]) {
				sum++;
				//avoid overflow
				if (i>upper) continue;
				for (int j=i*i; j<n; j+=i) {
					passed[j] = true;
				}
			}
		}
		return sum;
    }

----------------------------------------------------------------------------------------------------
Short C++ Sieve of Eratosthenes solution
    class Solution {
    public:
        int countPrimes(int n) {
            vector<bool> prime(n, true);
            prime[0] = false, prime[1] = false;
            for (int i = 0; i < sqrt(n); ++i) {
                if (prime[i]) {
                    for (int j = i*i; j < n; j += i) {
                        prime[j] = false;
                    }    
                }    
            }
            return count(prime.begin(), prime.end(), true);
        }
    };

----------------------------------------------------------------------------------------------------
12 ms Java solution modified from the hint method, beats 99.95%
    publib int countPrimes(int n) {
        if (n < 3)
            return 0;
            
        boolean[] f = new boolean[n];
        //Arrays.fill(f, true); boolean[] are initialed as false by default
        int count = n / 2;
        for (int i = 3; i * i < n; i += 2) {
            if (f[i])
                continue;
            
            for (int j = i * i; j < n; j += 2 * i) {
                if (!f[j]) {
                    --count;
                    f[j] = true;
                }
            }
        }
        return count;
    }

----------------------------------------------------------------------------------------------------
My C solutions in 44ms, time nearly O(n), and space nearly O(n)
        /*1. trick1 is to use square root of n.
         2.  trick2 is not to use non-prime numbers as the step
         3. trick3 is to use i*i as the start. 
         4. trick4 is to use count-- in every loop, avoiding another traversal. */  
    int countPrimes(int n) {
    	if(n <= 2) return 0;
    	if(n == 3) return 1;
    	bool *prime= (bool*)malloc(sizeof(bool)*n);
    	int i=0,j=0;
    	int count = n-2;
    	int rt = sqrt(n);//trick1
    	for(j = 0; j < n; j++)
    	{
    		prime[j] = 1;
    	}
    	for(i = 2; i <= rt; i++)
    	{
    	     if (prime[i])//trick2
    	    {
        	    for(j=i*i ; j<n ; j+=i)//trick3
        	    {
        	        if (prime[j])
        	                {
        	                   prime[j]=0;
        	                   count--;//trick4
        	                }
        	    }
    	    }
    	}
    	free(prime);
    	return count;
    }
        
     



----------------------------------------------------------------------------------------------------
My JAVA Solution
    public class Solution {
        public int countPrimes(int n) {
             boolean[] m = new boolean[n];
            int count = 0;
            for (int i=2; i<n; i++) {
                if (m[i])
                    continue;
                 
                count++;
                for (int j=i; j<n; j=j+i)
                    m[j] = true;
            }
             
            return count;
        }
    }

----------------------------------------------------------------------------------------------------
Simple 16 ms,10 line C++ solution. 1.use new bool array 2. only traverse odd numbers 3.count and sieve at the same time
1. use new bool array. 2. only traverse odd numbers. 3. count and sieve at the same time.

trick 1, thanks to [27ms,16 lines, C++ solution][1]

trick 2, for the inspiration, thanks to [my C solutions in 13ms,use Sieve of Eratosthenes and only test 6n-1 and 6n+1][2]

trick 3, thanks to [my C solutions in 44ms, time nearly O(n), and space nearly O(n)][3] and [my easy one round c++ code][4]

    int countPrimes(int n) {
    	if (n <= 2) return 0;
    	int res=n>>1, m=sqrt(n-1); // intilize res to n/2, removes all even number(not 2) and 1
    	bool *table=new bool[n];
    	for(int i=3,j,step;i<=m;i+=2)
    		if(!table[i]) { // i is an odd prime
    			for(step=i<<1, j=i*i;j<n;j+=step) // step=i*2, ignore even numbers
    			if(!table[j]) { table[j]=1; --res; }
    		}
    	delete []table;
    	return res;
    }

  [1]: https://leetcode.com/discuss/33669/27ms-16-lines-c-solution
  [2]: https://leetcode.com/discuss/35973/solutions-13ms-use-sieve-eratosthenes-and-only-test-6n-and-6n
  [3]: https://leetcode.com/discuss/34622/my-c-solutions-in-44ms-time-nearly-o-n-and-space-nearly-o-n
  [4]: https://leetcode.com/discuss/33694/my-easy-one-round-c-code

----------------------------------------------------------------------------------------------------
Python easy to understand solution.
        
    def countPrimes(self, n):
        if n <= 2:
            return 0
        res = [True] * n
        res[0] = res[1] = False
        for i in xrange(2, n):
            if res[i] == True:
                for j in xrange(2, (n-1)//i+1):
                    res[i*j] = False
        return sum(res)

----------------------------------------------------------------------------------------------------
Java O(n) solution for Count Primes
// Count the number of prime numbers less than a non-negative number, n


    public class Solution {
        public int countPrimes(int n) {
            int res = 0;
    	    boolean[] used = new boolean[n];
    	    for (int i = 2; i <= Math.sqrt(n); i++) {
    		 if (!used[i - 1]) {
    			int temp = i * i;
    			while (temp < n) {
    			    used[temp - 1] = true;
    			    temp += i;
    			}
    		}
    	    }
    	    for (int i = 2; i < n; i++) {
    		if (!used[i - 1]) {
    		    res++;
    		}
    	    }
    	    return res;
        }
    }

----------------------------------------------------------------------------------------------------
Beats 99.45% of submissions
    public class Solution {
    public int countPrimes(int n) {
		
		if( n <=2) {
			return 0;
		}
		
		int c= 1;
		
		boolean isNotPrime[] = new boolean[n+1];
		
		
		
		for(int i=3;i*i<=n;i=i+2) {
			
			if(isNotPrime[i]) {
				
				continue;
			}
			
			for(int j= i*i ;j<=n;j=j+2*i) {
				isNotPrime[j] = true;
			} 
            			
		}
        
		for(int i =3;i<n;i=i+2){
			
			
			if(!isNotPrime[i]) {
				c++;
			}
		}
		return c;
		
	}
    }

----------------------------------------------------------------------------------------------------
12ms c++ solution
Here are my 12 ms and 16ms with less space solutions

I saw there are submission within 10ms. Can anyone share that? Thanks!


12 ms:

Here notPrime[i] refer to the number a = 2* i + 1, so the marking process starts from a^2 which is 2i(i+1) back to index

    int countPrimes(int n) {
        if(--n < 2) return 0;
        int m = (n + 1)/2, count = m, k, u = (sqrt(n) - 1)/2;
        bool notPrime[m] = {0};
        
        for(int i = 1; i <= u;i++)
            if(!notPrime[i])
              for(k = (i+ 1)*2*i; k < m;k += i*2 + 1)
                  if (!notPrime[k])
                  {
                      notPrime[k] = true;
                      count--;
                  }
        return count;
    }

16 ms with less space:

almost same as above just squeeze 8 bit into a char

    int countPrimes(int n) {
        if(--n < 2) return 0;
        char notPrime[(n + 1)/16+1] = {0};
        int count = (n+1)/2, k,  u = (sqrt(n) - 1)/2;
        
        for(int i = 1; i <= u;i++)
            if(!(notPrime[i>>3] & (1<<(i&7))))
              for(k = 2*i*(i + 1); k < (n + 1)/2;k += 2* i + 1)
                  if (!(notPrime[k>>3] & (1<<(k&7))))
                  {
                      notPrime[k>>3] |= (1<<(k&7));
                      count--;
                  }
        return count;
    }


----------------------------------------------------------------------------------------------------
Accepted Java code with BitSet
BitSet should be one of the choices in Java.

    public int countPrimes(int n) {
        BitSet bs = new BitSet(n);
        bs.set(0); bs.set(1);
        int ind = 0, count = 0;
        while(ind < n){
            ind = bs.nextClearBit(ind + 1);
            if(ind >= n)
                return count;
            count++;
            for(int i = 2 * ind; i < n; i += ind)
                bs.set(i);
        }
        return count;
    }

----------------------------------------------------------------------------------------------------
C++, skip all even numbers, 36ms
    class Solution {
    public:
        int countPrimes(int n) {
            if(n <= 2) return 0;
            // cnt = 1 for number 2, because we do not count it next
            int cnt = 1;
            bool* isprimes = new bool[n];
            for(int i = 0; i < n; i++)
                isprimes[i] = true;
            
            // skip all even number
            for(int i = 3; i*i <= n; i+=2){
                if(isprimes[i] )
                    // i is a odd number so, i*i + i, i*i + 3i... are even number, so we skip these number by doing j += 2*i
                    for(int j = i*i; j < n; j+=2*i)
                        isprimes[j] = false;
            }
            
            // skip all even number
            for(int i = 3; i < n; i+=2){
                if(isprimes[i] == true)
                    cnt++;
            }
            delete isprimes;                
            return cnt;
        }
    };

----------------------------------------------------------------------------------------------------
27ms,16 lines, C++ solution
    class Solution {
    public:
        int countPrimes(int n) {
            if (n <= 2) return 0;
            double c = sqrt(n);
            bool *bv = new bool[n];
            for(int i = 3; i <= c; i += 2)
                if (!bv[i]) 
                    for(int j = i*i, k = i << 1; j < n; j += k)
                        bv[j] = 1;
            int num = 1;
            for(int i = 3; i < n; i += 2)
                if(!bv[i]) num++;
            return num;
        }
    };

----------------------------------------------------------------------------------------------------
Why I get TLE by using &quot;vector&lt;bool&gt;&quot;??? But &quot;bool *&quot; didn&#x27;t??? And how about &quot;vector&lt;int&gt;&quot;???
1. vector<bool>
======

    int countPrimes(int n)
    {
        vector<bool> prime(n + 1, true);
        
        int sqrn = sqrt(n);
        for(int i = 2; i <= sqrn; ++ i)
            if(prime[i])
                for(int j = i * i; j < n; j += i)
                    prime[j] = false;
        
        int res = 0;
        for(int i = 2; i < n; ++ i)
            if(prime[i])
                ++ res;
        return res;
    }

And I got "Time Limit Exceeded"

2. bool *
======

I changed "vector<bool>" to "bool *" and used new to alloc memory.

I got "Accept".

    int countPrimes(int n)
    {
        bool *prime = new bool[n];
        for(int i = 0; i < n; ++ i)
            prime[i] = true;
        
        int sqrn = sqrt(n);
        for(int i = 2; i <= sqrn; ++ i)
            if(prime[i])
                for(int j = i * i; j < n; j += i)
                    prime[j] = false;
        
        int res = 0;
        for(int i = 2; i < n; ++ i)
            if(prime[i])
                ++ res;
                
        delete[] prime;
        
        return res;
    }

**And the question is: new operation is fast than alloc of vector???**

3. vector<int>
======

I used "vector<int>" and bit manipulation. Maybe It can save some time. 

    int countPrimes(int n)
    {
        int bit_num = sizeof(int) * 8;
        vector<int> prime(n / bit_num + 1, -1);
        
        int sqrn = sqrt(n);
        for(int i = 2; i <= sqrn; ++ i)
            if(prime[i / bit_num] & (1 << i % bit_num))
                for(int j = i * i; j < n; j += i)
                    prime[j / bit_num] &= ~(1 << j % bit_num);
        
        int res = 0;
        for(int i = 2; i < n; ++ i)
            if(prime[i / bit_num] & (1 << i % bit_num))
                ++ res;
        return res;
    }

Also I got "Accept".

4. vector<int> and hammingWeight
======

I also used "vector<int>" and bit manipulation. And I got the number of 1 in each number by hammingWeight. 

    int countPrimes(int n)
    {
        int bit_num = sizeof(int) * 8;
        vector<int> prime(n / bit_num + 1, -1);
        prime[0] &= ~3;
        
        int sqrn = sqrt(n);
        for(int i = 2; i <= sqrn; ++ i)
            if(prime[i / bit_num] & (1 << i % bit_num))
                for(int j = i * i; j < n; j += i)
                    prime[j / bit_num] &= ~(1 << j % bit_num);
        
        int res = 0;
        for(int i = 0; i < prime.size() - 1; ++ i)
            res += hammingWeight(prime[i]);
        for(int i = n / bit_num * bit_num; i < n; ++ i)
            if(prime[i / bit_num] & (1 << i % bit_num))
                ++ res;    
        return res;
    }
    int hammingWeight(int n)
    {
        int res = 0;
        while(n)
        {
            ++ res;
            n &= n - 1;
        }
        return res;
    }

Also I got "Accept", and it fast than the upper one.


----------------------------------------------------------------------------------------------------
Accepted Java Solution
    public class Solution {
        public int countPrimes(int n) {
            int count=0;
            boolean[] nums = new boolean[n];
            for(int i=2; i<nums.length; i++){
                if(!nums[i]){
                    count++;
                    for(int j=2*i; j<nums.length; j=j+i){
                            nums[j] = true;
                    }
                }
            }
            return count;
        }
    }

----------------------------------------------------------------------------------------------------
Python solution - Time Limit Exceeded
I'm trying to improve this so it will pass the time limit constraint, but I don't know where this can be modified.  Any suggestions?  Thanks!

    class Solution:
        # @param {integer} n
        # @return {integer}
        def countPrimes(self, n):
            if n < 2:
                return 0
            seive = [True] * n
            seive[0] = False
            seive[1] = False
            i = 2
            while i * i < n:
                if seive[i]:
                    j = i
                    while i * j < n:
                        seive[i * j] = False
                        j += 1
                i += 1
            return sum(seive)

----------------------------------------------------------------------------------------------------
My accepted c++ code, 128ms
