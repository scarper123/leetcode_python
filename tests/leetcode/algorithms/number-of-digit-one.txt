Can leetcode share top performing solution(s) of problems for each supported language ?
After a solution is accepted it would be very helpful to know how to make it run faster looking at better performing solution(s).

----------------------------------------------------------------------------------------------------
Simple solution using Java
if the node does not exist, simply return 0. Otherwise, return the 1+the longer distance of its subtree.

    public int maxDepth(TreeNode root) {
            if(root==null){
                return 0;
            }
            return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
        }

----------------------------------------------------------------------------------------------------
My code of C++, Depth-first-search and Breadth-first-search
1. Depth-first-search
======

Only one line code.

    int maxDepth(TreeNode *root)
    {
        return root == NULL ? 0 : max(maxDepth(root -> left), maxDepth(root -> right)) + 1;
    }

2. Breadth-first-search
======

Calculate the count of the last level.

    int maxDepth(TreeNode *root)
    {
        if(root == NULL)
            return 0;
        
        int res = 0;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty())
        {
            ++ res;
            for(int i = 0, n = q.size(); i < n; ++ i)
            {
                TreeNode *p = q.front();
                q.pop();
                
                if(p -> left != NULL)
                    q.push(p -> left);
                if(p -> right != NULL)
                    q.push(p -> right);
            }
        }
        
        return res;
    }


----------------------------------------------------------------------------------------------------
Two Java Iterative solution DFS and BFS
This is the iterative version of finding the depth.  The recursive version is trivial, so expect the interviewer to ask for the iterative version.  I used two stacks for the dfs one and a queue for the level-order traversal one.  Level order one is faster.

DFS

    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        
        Stack<TreeNode> stack = new Stack<>();
        Stack<Integer> value = new Stack<>();
        stack.push(root);
        value.push(1);
        int max = 0;
        while(!stack.isEmpty()) {
            TreeNode node = stack.pop();
            int temp = value.pop();
            max = Math.max(temp, max);
            if(node.left != null) {
                stack.push(node.left);
                value.push(temp+1);
            }
            if(node.right != null) {
                stack.push(node.right);
                value.push(temp+1);
            }
        }
        return max;
    }
    // 7ms
    
BFS

    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int count = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            while(size-- > 0) {
                TreeNode node = queue.poll();
                if(node.left != null) {
                    queue.offer(node.left);
                }
                if(node.right != null) {
                    queue.offer(node.right);
                }
            }
            count++;
        }
        return count;
    }
    // 3ms

----------------------------------------------------------------------------------------------------
Clean Java Iterative Solution
I do believe if you can think of an iterative solution, it's always better than using a recursive one. And technical y every recursive solution can be converted into a equivalent iterative one.

    public int maxDepth(TreeNode root) {
		if (root == null)
			return 0;
		
		Deque<TreeNode> stack = new LinkedList<TreeNode>();
		
		stack.push(root);
		int count = 0;
		
		while (!stack.isEmpty()) {
			int size = stack.size();
			while (size-- > 0) {
				TreeNode cur = stack.pop();
				if (cur.left != null)
					stack.addLast(cur.left);
				if (cur.right != null)
					stack.addLast(cur.right);
			}
			count++;

		}
		return count;

	}

----------------------------------------------------------------------------------------------------
1 line Ruby and Python
Just a bit shorter/different than previous solutions.

Ruby:

    def max_depth(root)
      root ? 1 + [max_depth(root.left), max_depth(root.right)].max : 0
    end

Python:

    def maxDepth(self, root):
        return 1 + max(map(self.maxDepth, (root.left, root.right))) if root else 0


----------------------------------------------------------------------------------------------------
A simple Python recursive solution - O(n) 60ms
    # Definition for a binary tree node.
    # class TreeNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.left = None
    #         self.right = None
    
    class Solution:
        # @param {TreeNode} root
        # @return {integer}
        def maxDepth(self, root):
            if not root:
                return 0
    
            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))

----------------------------------------------------------------------------------------------------
My C++ Solution
    int maxDepth(TreeNode* root) {
            if(root == NULL)
                return 0;
            return 1 + std::max(maxDepth(root->left), maxDepth(root->right));
        }

----------------------------------------------------------------------------------------------------
Simple 8ms C++ solution with recursion
    class Solution {
    public:
        int maxDepth(TreeNode* root) {
            return root ? 1 + max(maxDepth(root->left), maxDepth(root->right)) : 0;
        }
    };

----------------------------------------------------------------------------------------------------
Java solution, both recursion and iteration
    // iteration method
    public int maxDepth(TreeNode root) {
        int max = 0;
        if (root == null) {return 0;}
        Stack<TreeNode> path = new Stack<>();
        Stack<Integer> sub = new Stack<>();
        path.push(root);
        sub.push(1);
        while (!path.isEmpty()) {
            TreeNode temp = path.pop();
            int tempVal = sub.pop();
            if (temp.left == null && temp.right == null) {max = Math.max(max, tempVal);}
            else {
                if (temp.left != null) {
                    path.push(temp.left);
                    sub.push(tempVal + 1);
                }
                if (temp.right != null) {
                    path.push(temp.right);
                    sub.push(tempVal + 1);
                }
            }
        }
        return max;
    }


----------
    // recursion method
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }

----------------------------------------------------------------------------------------------------
Accept C solution, too simple to explain
    int maxDepth(struct TreeNode *root) {
    	if(NULL==root) return 0;
        
    	int l_d=maxDepth(root->left);
    	int r_d=maxDepth(root->right);
    
    	return l_d>r_d? l_d+1 : r_d+1;
    }

----------------------------------------------------------------------------------------------------
My solution in javascript
    var maxDepth = function(root) {
        if(root === undefined || root===null){
            return 0;
        }
        return Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;
    };


----------------------------------------------------------------------------------------------------
8ms Recursive&#x2F;BFS C++ Solutions
Well, this problem has the highest acceptance rate among all OJ problems. It has a very easy 1-line reursive solution. I am not sure whether this one can be called "DFS" so I only call it "recursive".

    class Solution { 
    public:
        int maxDepth(TreeNode* root) {
            return root ? 1 + max(maxDepth(root -> left), maxDepth(root -> right)) : 0;
        }
    };
 
Well, you may also solve it using a level-order traversal (BFS) with a queue.

    class Solution {
    public:
        int maxDepth(TreeNode* root) {
            int depth = 0;
            if (!root) return depth;
            queue<TreeNode*> level;
            level.push(root);
            while (!level.empty()) {
                depth++;
                int n = level.size();
                for (int i = 0; i < n; i++) {
                    TreeNode* node = level.front();
                    level.pop();
                    if (node -> left) level.push(node -> left);
                    if (node -> right) level.push(node -> right);
                }
            }
            return depth; 
        } 
    };

----------------------------------------------------------------------------------------------------
C++ 8ms DFS and BFS Solutions
    class Solution {
    public:
    int maxDepth(TreeNode* root) {
        //return solution1(root);   //DFS
        return solution2(root);     //BFS
    }
    private:
    int solution1(TreeNode* root) {
        if(root == NULL) return 0;
        return 1 + max(solution1(root->left), solution1(root->right));
    }
    int solution2(TreeNode *root){
        if(root == NULL) return 0;
        queue<TreeNode *> que;
        que.push(root);
        int depth = 0, count;
        TreeNode *left, *right;
        while(que.empty() == false){
            depth++;
            count = que.size();
            for(int i = 0; i < count; i++){
                left = que.front()->left;
                if(left) que.push(left);
                right = que.front()->right;
                if(right) que.push(right);
                que.pop();
            }
        }
        return depth;
    }
    };

----------------------------------------------------------------------------------------------------
One line java solution
    public class Solution {
        public int maxDepth(TreeNode root) {
            
            return (root == null)?0:Math.max(1+maxDepth(root.left),1+maxDepth(root.right));
        }
    }

----------------------------------------------------------------------------------------------------
Time limited when I change to simplified code
	if (root == NULL)
		return 0;
	int leftDept = maxDepth(root->left);
	int rightDept = maxDepth(root->right);
        if (leftDept >= rightDept)
		return leftDept+1;
	else
		return rightDept+1;


it accepted when I use above code, but it show time limited when use following code. does anybody know why?


	if (root == NULL)
		return 0;
	return maxDepth(root->left)>maxDepth(root->right) ? maxDepth(root->left)+1 : maxDepth(root->right)+1;

----------------------------------------------------------------------------------------------------
Python multiple solutions - recursion, level order using stack and level order using queue
1) recursion
        
    def maxDepth(self, root):     
            if not root:
                return 0
        
            return 1+max(self.maxDepth(root.left),self.maxDepth(root.right))
          
Always better to write a similar iterative solution:

2) stack for level order
            
        def maxDepth(self, root):     
            if not root:
                return 0
        
            tstack,h = [root],0
            
            #count number of levels
            while tstack:
                nextlevel = []
                while tstack:
                    top = tstack.pop()
                    if top.left:
                        nextlevel.append(top.left)
                    if top.right:
                        nextlevel.append(top.right)
                tstack = nextlevel
                h+=1
            return h

3) queue for level order
        
        def maxDepth(self, root):     
            if not root:
                return 0
            
            tqueue, h = collections.deque(),0
            tqueue.append(root)
            while tqueue:
                nextlevel = collections.deque()
                while tqueue:
                    front = tqueue.popleft()
                    if front.left:
                        nextlevel.append(front.left)
                    if front.right:
                        nextlevel.append(front.right)
                tqueue = nextlevel
                h += 1
            return h

----------------------------------------------------------------------------------------------------
Simple java code
    public class Solution {
        public int maxDepth(TreeNode root) {
            if(root==null) return 0;
            int left=maxDepth(root.left);
            int right=maxDepth(root.right);
            return Math.max(left,right)+1;
        }
     
    }

----------------------------------------------------------------------------------------------------
Easiest 1ms Java solution
    public class Solution {
        public int maxDepth(TreeNode root) {
            if(root==null)
                return 0;
            int left=maxDepth(root.left);
            int right=maxDepth(root.right);
            return Math.max(left,right)+1;
        }
    }

----------------------------------------------------------------------------------------------------
1ms very simple java code &#91;3 lines&#93;
Hello All, I hope you enjoy my simple answer.

    public class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null)
            return 0;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

----------------------------------------------------------------------------------------------------
