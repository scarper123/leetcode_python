Simple Java solution 9 lines, 2ms
public int numberOfArithmeticSlices(int[] A) {
    int curr = 0, sum = 0;
    for (int i=2; i<A.length; i++)
        if (A[i]-A[i-1] == A[i-1]-A[i-2]) {
            curr += 1;
            sum += curr;
        } else {
            curr = 0;
        }
    return sum;
}

----------------------------------------------------------------------------------------------------
3ms C++ Standard DP Solution with Very Detailed Explanation
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        int n = A.size();
        if (n < 3) return 0;
        vector<int> dp(n, 0); // dp[i] means the number of arithmetic slices ending with A[i]
        if (A[2]-A[1] == A[1]-A[0]) dp[2] = 1; // if the first three numbers are arithmetic or not
        int result = dp[2];
        for (int i = 3; i < n; ++i) {
            // if A[i-2], A[i-1], A[i] are arithmetic, then the number of arithmetic slices ending with A[i] (dp[i])
            // equals to:
            //      the number of arithmetic slices ending with A[i-1] (dp[i-1], all these arithmetic slices appending A[i] are also arithmetic)
            //      +
            //      A[i-2], A[i-1], A[i] (a brand new arithmetic slice)
            // it is how dp[i] = dp[i-1] + 1 comes
            if (A[i]-A[i-1] == A[i-1]-A[i-2]) 
                dp[i] = dp[i-1] + 1;
            result += dp[i]; // accumulate all valid slices
        }
        return result;
    }
};


----------------------------------------------------------------------------------------------------
2ms Java O(n) time, O(1) space solution
public int numberOfArithmeticSlices(int[] A) {
        if(A == null || A.length < 3)
            return 0;
        int sum = 0;
        int len = 2;

        for(int i=2;i<A.length;i++) {

            // keep increasing the splice
            if(A[i] - A[i-1] == A[i-1] - A[i-2]) {
                len++;
            }
            else {
                if(len > 2) {
                    sum += calculateSlices(len);
                }
                // reset the length of new slice
                len = 2;
            }
        }
        // add up the slice in the rear
        if(len>2)
            sum += calculateSlices(len);

        return sum;
    }

    private int calculateSlices(int n){
        return (n-1)*(n-2)/2;
    }


----------------------------------------------------------------------------------------------------
3ms Question Maker Solution in CPP O(n) time and in space
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        if (A.size() < 3) return 0;
        int size = (int) A.size();
        for (int i = 0; i < size - 1; i++) {
            A[i] = A[i + 1] - A[i];
        }
        A.resize(size - 1);
        size--;
        
        int res = 0;
        int len = 1;
        for (int i = 1; i < size; i++) {
            if (A[i] != A[i - 1]) {
                res += len * (len - 1) / 2;
                len = 1;
            } else {
                len++;
            }
        }
        if (len > 1) res += len * (len - 1) / 2;
        return res;
    }
};



----------------------------------------------------------------------------------------------------
java 2ms O(n) solution using DP with detail explanation
public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        if(A == null || A.length == 0) return 0;
        int[] index = new int[A.length];
        for(int i = 2; i < index.length; i++)
        {
        	if(A[i] - A[i - 1] == A[i - 1] - A[i - 2])
        	{
        		if(index[i - 1] == 0) index[i] = 3;
        		else index[i] = index[i - 1] + 1;
        	}
        	else index[i] = 0;
        }

        int sum = 0;
        for(int i = 0; i < index.length; i++)
        {
        	if(index[i] != 0)
        	{
        		sum += index[i] - 3 + 1;
        	}
        }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
Python DP solution
def numberOfArithmeticSlices(self, A):
    """
    :type A: List[int]
    :rtype: int
    """
    opt, i = [0,0], 1
    for j in xrange(2,len(A)):
        if A[j]-A[j-1] == A[j-1]-A[j-2]:
            opt.append(opt[j-1]+i)
            i += 1
        else:
            opt.append(opt[j-1])
            i = 1
    return opt[-1]

----------------------------------------------------------------------------------------------------
python solution with detailed explanation (45ms)
class Solution(object):
    def numberOfArithmeticSlices(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if A==None or len(A)<3:
            return 0
        sliceL=[]
        i=0
        while i < len(A)-2:
            j=i+1
            dif=A[j]-A[i]
            while j<len(A) and A[j]-A[j-1]==dif:
                j+=1
            if j-i>=3:
               if A[i:j] not in sliceL:
                    sliceL.append(A[i:j])
               i=j #slide the window as more as possible
            else:
                i+=1
        #count the total number of slice
        #for example [1,2,3] n=1
        #[1,2,3,4] ,n=1+2=3 [1,2,3,4],[1,2,3],[2,3,4]
        #[1,2,3,4,5],n=1+2+3=6 [1,2,3,4,5],[1,2,3,4],[2,3,4,5],[1,2,3],[2,3,4],[3,4,5]
        cnt=0
        for slice in sliceL:
            sL=len(slice)
            cnt+=(1+sL-2)*(sL-2)//2
        return cnt


----------------------------------------------------------------------------------------------------
5 lines clean Java solution
    public int numberOfArithmeticSlices(int[] A) {
        int[] lens = new int[A.length];
        for (int i = 2; i < A.length; ++i)
            if (A[i - 1] - A[i - 2] == A[i] - A[i - 1])
                lens[i] = Math.max(1, lens[i - 1] + 1);
        return Arrays.stream(lens).sum();
    }


----------------------------------------------------------------------------------------------------
Concise, and simple C++ 8 lines Solution
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        if(A.size() < 3) return 0;
        int count = 0, int ret = 0;
        for(int i = 1; i < A.size() - 1; i++)
        {
            if(A[i] - A[i-1] == A[i+1] - A[i]) ret += ++count;
            else count = 0;
        }
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
Solution with explanation. O(n) memory to O(1)
public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int sum = 0;
        int cur = 0;
        for (int i=2; i<A.length; i++) {
            if ( A[i]-A[i-1] == A[i-1]-A[i-2] ) {
                cur++;
                sum+=cur;
            } else {
                cur = 0;
            }
        }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
A clear python solution with a little math
def numberOfArithmeticSlices(self, A):
    if len(A) < 3: return 0
    ns, n = [], 0
    for i in range(2, len(A)):
        if A[i] - A[i-1] == A[i-1] - A[i-2]:
            n += 1
        else:
            if n >= 1: ns.append(n+2)
            n = 0
    else:
        if n >= 1: ns.append(n+2)
    return int(sum(list(map(lambda x: (x-1)*(x-2)/2, ns))))

----------------------------------------------------------------------------------------------------
Java solution - time complexity O(n), space complexity O(1)
public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int res = 0;
        if (A == null || A.length < 3)
            return res;
            
        int start = 0;
        
        while (start + 2 < A.length) {
            int offset = A[start + 1] - A[start];
            int i = start + 2;
            while (i < A.length && A[i] - A[i - 1] == offset)
                i++;
            if (i - start >= 3) res+= helper(i - start);
            start = i - 1;
        }
        return res;
    }
    private int helper(int n) {
        int res = 0;
        for (int i = 1; i <= n - 2; i++)
            res += i;
        return res;
    }
}


----------------------------------------------------------------------------------------------------
One pass Concise C++ Solution
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        int res = 0, start = 0, dis = INT_MAX;
        for (int i = 1; i <= A.size(); i++) {
            if (i == A.size() || A[i] - A[i - 1] != dis) {
                if (i - start > 2) 
                    res += (i - start - 1) * (i - start - 2) / 2;
                start = i - 1;
                if (i < A.size()) dis = A[i] - A[i - 1];
            }
        }
        return res;
    }
};



----------------------------------------------------------------------------------------------------
Python O(n) time O(1) space solution using DP, easy to understand
class Solution(object):
    def numberOfArithmeticSlices(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        dp = 0
        last_slice_length = 1
        for i in range(1, len(A)):
            if last_slice_length >= 2 and A[i] - A[i - 1] == A[i - 1] - A[i - 2]:
                dp = last_slice_length - 1 + dp
                last_slice_length = last_slice_length + 1
            else:
                last_slice_length = 2
        return dp


----------------------------------------------------------------------------------------------------
Java Concise Solution
public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        if (A == null || A.length < 3) return 0;
        
        int diff = A[1] - A[0];
        int start = 0;
        int result = 0;
        
        for (int i = 2; i < A.length; i++) {
            int currDiff = A[i] - A[i - 1];
            if (currDiff == diff) {
                result += i - start - 1;
            } else {
                diff = currDiff;
                start = i - 1;
            }
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Simple DP solution O(n)
If A[i], A[i-1], and A[i-2] forms an Arithmetic slice, it can form more with number of slices at A[i-1]. For example, A = [1 2 3 4], at 4, [2 3 4] forms a slice, it can form more with number of slices formed at 3, which 1 ([1 2 3]). So, the number of slices can be formed at 4 is 2 ([2 3 4], [1 2 3 4]). In the end, add up all the numbers is the result.

class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        if (A.empty()) return 0;
        vector<int> vec(A.size(), 0);
        for (int i = 2; i < A.size(); ++i)
        {
            if ((A[i] - A[i - 1]) == (A[i - 1] - A[i - 2]))
                vec[i] += vec[i - 1] + 1;
        }

        for (int i = 1; i < vec.size(); ++i)
            vec[i] += vec[i - 1];

        return vec.back();
    }
};


----------------------------------------------------------------------------------------------------
DP solution easy to understand
public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int len = A.length;
        if (len <= 2) return 0;
        int[] local = new int[len];
        for (int j = 2; j < len; j++) {
            if (A[j] - A[j - 1] == A[j - 1] - A[j - 2]) local[j] = local[j - 1] + 1;
            else local[j] = 0;
        }
        int[] dp = new int[len];
        for (int i = 2; i < len; i++) {
            dp[i] = dp[i - 1] + local[i];
        }
        return dp[len - 1];
    }
}


----------------------------------------------------------------------------------------------------
6 lines solution :Java in 2ms, C++ in 3ms, Javascript in 78ms
func numberOfArithmeticSlices(A []int) int {
    var ret,i,j int;
    for i,ret=1,0; i<len(A); i=j {
        for j=i+1;j<len(A) && A[j]-A[j-1] == A[i] - A[i-1];j++ {}
        ret += (j-i)*(j-i-1)/2;
    }
    return ret;
}


----------------------------------------------------------------------------------------------------
4-line O(N) one pass with arithmetic partition, minimize number of count updates (detailed explanation)
[1, 2, 3, 4], [4, 6, 8, 10, 12], [12, 15]

----------------------------------------------------------------------------------------------------
O(n^2) Time, but Very Easy to Understand
int numberOfArithmeticSlicesFirst(vector<int>& A)
{
    int n = A.size();
    if(n < 3) return 0;
    
    vector<int> dp(n, 0);
    for(int i = 2; i < n; ++i)
    {
        dp[i] = dp[i-1];
        for(int k = i; k >= 2; --k)
        {
            if(A[k-2] - A[k-1] != A[k-1] - A[k])
                break;
            ++dp[i];
        }
    }
    
    return dp[n-1];
}


----------------------------------------------------------------------------------------------------
