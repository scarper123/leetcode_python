Java 1-line (cheating for the purpose of not using loops)
        public boolean isPowerOfFour(int num) {
            return num > 0 && (num&(num-1)) == 0 && (num & 0x55555555) != 0;
            //0x55555555 is to get rid of those power of 2 but not power of 4
            //so that the single 1 bit always appears at the odd position 
        }

----------------------------------------------------------------------------------------------------
1 line C++ solution without confusing bit manipulations
    bool isPowerOfFour(int num) {
        return num > 0 && (num & (num - 1)) == 0 && (num - 1) % 3 == 0;
    }

----------------------------------------------------------------------------------------------------
O(1) one-line solution without loops
    public class Solution {
        public boolean isPowerOfFour(int num) {
            return (num > 0) && ((num & (num - 1)) == 0) && ((num & 0x55555555) == num);
        }
    }

The basic idea is from power of 2, We can use "n&(n-1) == 0" to determine if n is power of 2. For power of 4, the additional restriction is that in binary form, the only "1" should always located at the odd position.  For example, 4^0 = 1, 4^1 = 100, 4^2 = 10000. So we can use "num & 0x55555555==num" to check if "1" is located at the odd position.

----------------------------------------------------------------------------------------------------
Simple C++ O(1) solution without 0x55555555
    class Solution {
    public:
        bool isPowerOfFour(int num) {
            return ((num-1)&num)==0 && (num-1)%3==0;
        }
    };

----------------------------------------------------------------------------------------------------
Python one line solution with explanations
    def isPowerOfFour(self, num):
            return num != 0 and num &(num-1) == 0 and num & 1431655765== num


Consider the valid numbers within 32 bit, and turn them into binary form, they are:

    1
    100
    10000
    1000000
    100000000
    10000000000
    1000000000000
    100000000000000
    10000000000000000
    1000000000000000000
    100000000000000000000
    10000000000000000000000
    1000000000000000000000000
    100000000000000000000000000
    10000000000000000000000000000
    1000000000000000000000000000000

Any other number not it the list should be considered as invalid.
So if you XOR them altogether, you will get a mask value, which is:

 

    1010101010101010101010101010101 (1431655765)

Any number which is power of 4, it should be power of 2, I use num &(num-1) == 0 to make sure of that.
Obviously 0 is not power of 4, I have to check it.
and finally I need to check that if the number 'AND' the mask value is itself, to make sure it's in the list above.

here comes the final code:

return num != 0 and num &(num-1) == 0 and num & 1431655765== num

----------------------------------------------------------------------------------------------------
Simplest C++ solution maybe?
    class Solution {
    public:           
        bool isPowerOfFour(int num) {
            return !(num & (num - 1)) && (num & 0x55555555);
        }
    };

----------------------------------------------------------------------------------------------------
C++ simple code with comments (no loops&#x2F;recursion)
Idea is simple.  Powers of four are 1, 4, 16..  or in binary, 0x0001, 0x0100, etc.  Only one bit is ever set, and it's always an odd bit.  So simply check for that...

  This does not use any loops or recursion,  is O(1) time and O(1) space.

    class Solution {
    public:
        bool isPowerOfFour(int num) {
            // first check only one bit is set:
            if ((num & (num -1)) != 0) return false;
            // next check if it's a bit in pos 1, 3, 5 ... 31
            if (num & 0x55555555) return true;
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
My non-loop solution with no relation to the bit length of int


    class Solution {
    public:
        bool isPowerOfFour(int num) {
            if (num <= 0) return false;
            if (num & num - 1) return false;
            return num % 3 == 1;
        }
    };

I observed that `2 ** k % 3 = 1` if and only if `k` is even, that is, `2 ** k` is a power of 4.
So we can just check whether these three conditions are all true:

 1. `num` must be positive
 2. `num` must be power of 2
 3. `num` mod 3 must be 1

----------------------------------------------------------------------------------------------------
Java 1 line of code and can be extended to any radix solution
The idea is that numbers in quaternary system that is power of 4 will be like 10, 100, 1000 and such.  Similar to binary case.  And this can be extended to any radix.

    public boolean isPowerOfFour(int num) {
        return Integer.toString(num, 4).matches("10*");
    }

----------------------------------------------------------------------------------------------------
One line in JAVA without loops&#x2F;recursion which is extensible.
public class Solution {

    public boolean isPowerOfFour(int num) {
        return (num&(num-1))==0 && num>0 && (num-1)%3==0;
    }
}

The first two conditions are for power of 2.
One additional condition: (num-1) can be divided by 3.

----------------------------------------------------------------------------------------------------
One line code without loop
    /**
     * @param {number} num
     * @return {boolean}
     */
    var isPowerOfFour = function(num) {
        return num > 0 && (num & (num-1)) === 0 && (num & 0xAAAAAAAA) === 0;
    };

----------------------------------------------------------------------------------------------------
*Java* one-line solution using bitCount &amp; numberOfTrailingZeros
    public boolean isPowerOfFour(int num) {
        return num>=1 && Integer.bitCount(num) == 1 && Integer.numberOfTrailingZeros(num)%2 == 0;
    }

----------------------------------------------------------------------------------------------------
Share my C++ solution with explanation,easy to understand
    //num & (num-1):if num has a binary representation as ****10...0,
    //                               then num - 1 will be ****01...1 in binary,
    //                          and num & (num-1) will be ****00...0 in binary. 
    //i.e. find the first '1' and set it as '0' 
    //if num & (num-1) equals 0,it means that there is one and only one bit in num's binary representation.
    //0x55555555's binary representation is :1010101010101010101010101010101
    //1010101010101010101010101010101=4^15 + 4^14 + ... + 4^2 + 4^1 + 4^0,here '^' means power
    //if num & 0x55555555 not equals 0,meaning that there is at least one bit in num's binary representation 
    //if num meets the above conditions,meaning that it is  a power of 4.
    
    class Solution {
    public:
        bool isPowerOfFour(int num) {
            if (num <= 0)
                return false;
            
            if ( (num & (num-1)) == 0 && (num & 0x55555555) != 0 )
                return true;
                
            return false;
        }
    };

----------------------------------------------------------------------------------------------------
One of my favorite tricks
Convert to [double representation](https://en.wikipedia.org/wiki/Double-precision_floating-point_format), which kinda takes the logarithm. Without precision problems. Then check the bit pattern.

    bool isPowerOfFour(int num) {
        double n = num;
        return (*(long*)&n & 0x801FFFFFFFFFFFFF) == 0x10000000000000;
    }

There's probably a prettier way to use the idea, but I'll leave it at this.

----------------------------------------------------------------------------------------------------
C 1 line solution using bit-tricks with &amp;
bool isPowerOfFour(int n) {
        return n>0 && (n&(n-1))==0 && (n&0x55555555);
}


----------------------------------------------------------------------------------------------------
Python one-line clear solution without loop and ifelse
    return num>0 and num&(num-1)==0 and len(bin(num)[3:])%2==0

----------------------------------------------------------------------------------------------------
Java one-line without loops by Regular Expression
public class Solution {
	public boolean isPowerOfFour(int num) {
		return Integer.toBinaryString(num).matches("1(00)*");
	}
}


----------------------------------------------------------------------------------------------------
C++ one line solution
    bool isPowerOfFour(int num) {
        return (num > 0) && !(num & (num - 1)) && (num & 0x55555555); 
    }

it can be simplified to:

    bool isPowerOfFour(int num) {
        return (num & 0x55555555) && !(num & (num - 1)); 
    }

----------------------------------------------------------------------------------------------------
A Java regex solution
The binary string of power of 4 look like:
"100"
"10000"
"1000000"

There is always a "1" in the front, so we apply `^1` in regex.
There is always a multiple of  "00" in the rear, so we apply `(00)+$`.
As a result, the total regex would look like `^1(00)+$`. 

    import java.util.regex.*;
    
    public class Solution {
        public boolean isPowerOfFour(int num) {
            
            if (num == 0) {
                return false;
            }
            
            String bString = Integer.toBinaryString(num);
            System.out.println(bString);
            
            String pattern = "^1(00)+$";
            Pattern r = Pattern.compile(pattern);
            Matcher m = r.matcher(bString);
            return m.find();
        }
    }

----------------------------------------------------------------------------------------------------
Plain and Easy understanding with loops to count trailing zeros (Java)
 

       public boolean isPowerOfFour(int num) {
            if (num <= 0) return false;
            int count = 0;
            int temp = num;
            while (temp > 0) {
                if ((temp & 1) == 0) {
                    count++;
                } else {
                    break;
                }
                temp = temp >> 1;
            }
            return (count % 2 == 0) && ((num & (num - 1)) == 0);
        }

----------------------------------------------------------------------------------------------------
