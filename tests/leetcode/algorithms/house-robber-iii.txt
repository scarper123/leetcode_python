Using n&amp;(n-1) trick
Power of 2 means only one bit of n is '1', so use the trick n&(n-1)==0 to judge whether that is the case
 

    class Solution {
    public:
        bool isPowerOfTwo(int n) {
            if(n<=0) return false;
            return !(n&(n-1));
        }
    };

----------------------------------------------------------------------------------------------------
One line java solution using bitCount
This is kind of cheating, but the idea is that a power of two in binary form has and only has one "1".

    public class Solution {
        public boolean isPowerOfTwo(int n) {
            return n>0 && Integer.bitCount(n) == 1;
        }
    }

----------------------------------------------------------------------------------------------------
One line of C++
I used n&(n-1), but, attention the 0.


    class Solution {
    public:
        bool isPowerOfTwo(int n) {
            return n > 0 && !(n&(n-1));
        }
    };

----------------------------------------------------------------------------------------------------
4 different ways to solve -- Iterative &#x2F; Recursive &#x2F; Bit operation &#x2F; Math
This question is not an difficult one, and there are many ways to solve it. 

**Method 1: Iterative**

check if n can be divided by 2. If yes, divide n by 2 and check it repeatedly.

    if(n==0) return false;
    while(n%2==0) n/=2;
    return (n==1);

Time complexity = O(log n)

**Method 2: Recursive**

    return n>0 && (n==1 || (n%2==0 && isPowerOfTwo(n/2)));

Time complexity = O(log n)
        
**Method 3: Bit operation**

If n is the power of two:

 - n = 2 ^ 0 = 1 = 0b0000...00000001, and (n - 1) = 0 = 0b0000...0000.
 - n = 2 ^ 1 = 2 = 0b0000...00000010, and (n - 1) = 1 = 0b0000...0001.
 - n = 2 ^ 2 = 4 = 0b0000...00000100, and (n - 1) = 3 = 0b0000...0011.
 - n = 2 ^ 3 = 8 = 0b0000...00001000, and (n - 1) = 7 = 0b0000...0111.

we have n & (n-1) == 0b0000...0000 == 0

Otherwise, n & (n-1) != 0. 

For example,  n =14 = 0b0000...1110, and (n - 1) = 13 = 0b0000...1101.

    return n>0 && ((n & (n-1)) == 0);

Time complexity = O(1)
        
**Method 4: Math derivation**

Because the range of an integer = -2147483648 (-2^31) ~ 2147483647 (2^31-1), the max possible power of two = 2^30 = 1073741824.

(1) If n is the power of two, let n = 2^k, where k is an integer.

We have 2^30 = (2^k) * 2^(30-k), which means (2^30 % 2^k) == 0.

(2) If n is not the power of two, let n = j*(2^k), where k is an integer and j is an odd number.

We have (2^30 % j*(2^k)) == (2^(30-k) % j) != 0. 

    return n>0 && (1073741824 % n == 0);

Time complexity = O(1)



----------------------------------------------------------------------------------------------------
One line Java solution
     public boolean isPowerOfTwo(int n) {
        return ((n & (n-1))==0 && n>0);
    }


----------------------------------------------------------------------------------------------------
Share my one line C++
    class Solution {
    public:
        bool isPowerOfTwo(int n) {
            return n>0 && !(n&(n-1));
        }
    };

----------------------------------------------------------------------------------------------------
One line java solution
    public class Solution {
    public boolean isPowerOfTwo(int n) {//if n is power  of  2 ,n just has one bit is 1
        return n>0 && (n&(n-1))==0;
    }
}


----------------------------------------------------------------------------------------------------
My 1 line C code
bool isPowerOfTwo(int n) {
  
    return (n>0) &&!(n&(n-1));
}

----------------------------------------------------------------------------------------------------
Python one line solution
    class Solution(object):
        def isPowerOfTwo(self, n):
            """
            :type n: int
            :rtype: bool
            """
            return n > 0 and not (n & n-1)

----------------------------------------------------------------------------------------------------
5 lines O(1) space&amp;time C++ solution, no hash
    class Solution { 
    public: 
        bool isPowerOfTwo(int n) { 
            if (n <= 0) {
                return false;
            }
            n &= (n - 1);
            return n == 0;
        } 
    };

the basic idea is that if n is a power of two, its binary form contains only one "1"
welcome to visit more answers on github.com/fanfank/leetcode

----------------------------------------------------------------------------------------------------
Java Solution: one line
    public class Solution {
        public boolean isPowerOfTwo(int n) {
        /**
         * There is two accepted answers,the former is better.
         */
        return n <= 0 ? false : (n & (n - 1)) == 0;
        // return n <= 0 ? false : n == Math.pow(2, (int) (Math.log(n) / Math.log(2)));
        }
    }


----------------------------------------------------------------------------------------------------
1 line python solution
    def isPowerOfTwo(self, n):
        return (n>0) and (n & (n-1))==0

----------------------------------------------------------------------------------------------------
My one liner in C
bool isPowerOfTwo(int n){return n>0&&!(n&(n-1));}

----------------------------------------------------------------------------------------------------
1ms 99% java bitwise solution
Example n = 8, bin(8) = 1000, bin(8-1) = 0111 
1000 & 0111 is 0 and powers of 2 are always 10(2), 100(4), 1000(8), 10000(16) and so on 

     public boolean isPowerOfTwo(int n) {
            if(n < 1) return false;
            return (0 == ((n - 1) & n));
        }



----------------------------------------------------------------------------------------------------
One line C++ solution
The number has to be greater than zero, and just one of its bits is set. Given `n`, computing `n - 1` flips all the trailing 0s and the last 1. So computing `n & (n - 1)` effectively clears the last 1 bit. And in this case that should give us zero if `n` is a power of 2. 

    class Solution {
    public:
        bool isPowerOfTwo(int n) {
            return n > 0 && !(n & (n - 1));
        }
    };

----------------------------------------------------------------------------------------------------
One line JAVA solution
    public class Solution {
        public boolean isPowerOfTwo(int n) {
            return ((n & n - 1) == 0 && n > 0);
        }
    }

----------------------------------------------------------------------------------------------------
One line 4ms c++ solution
    bool isPowerOfTwo(int n) {
     return (int)log2(n)==log2(n);
    }

----------------------------------------------------------------------------------------------------
One line java solution using n &amp; (n-1)
n & (n-1) will turn off the rightmost bit of a integer.
(see http://www.catonmat.net/blog/low-level-bit-hacks-you-absolutely-must-know/)

Actually I met this one in the onsite interview of Teradyne...

    public class Solution {
        public boolean isPowerOfTwo(int n) {
            return n > 0 && (n & (n - 1)) == 0;
        }
    }

----------------------------------------------------------------------------------------------------
Possible solutions.
I had been asked this question twice during the recrutation to two different companies.

It can be solved with couple possible ways:

----------

O(lg N) solution 

Simply divide the input number as long as it's dividable by 2.

----------

    public boolean isPowerOfTwo(int n) {
    
            while(n > 1) {
                if(n % 2 != 0) {
                    return false;
                }
                n /= 2;
            }
            return n == 1;
    }

----------

O(1) solution

This uses a bit of binary math and simple observation that if you have a power of 2 in binary then when you substract 1 from it you will have all lower order bits set to 1. ex. 8 in binary 1000 - 1 = 0111 so by doing AND of both values (N & (N - 1)) you should expect the result to be 0. This is only true for values that are the power of two.

----------

    public boolean isPowerOfTwo(int n) {
               
                return n > 0 && (n & n - 1) == 0;
    }

----------

O(1) - this can be considered constant, although it will vary on the actual type size and generally offer worse performance then both above solutions - (well we have to distinguish worse and best case - the base case is when the number is not power of 2, but the worse case is the oposite and we have to check all the bits of the input to verify that)

Another possibility is shifting and counting the number of ones.

----------

    public boolean isPowerOfTwo(int n) {
    
            int count = 0;
            for(int ind = 0; ind < 32; ind++) {
                if((n & (1 << ind)) != 0) {
                    count++;
                }
            }
            return n > 0 && count == 1;
    }

----------------------------------------------------------------------------------------------------
C++ solution with bitset
    if(n < 0) return false;
    bitset<32> b(n);
    return b.count() == 1;

----------------------------------------------------------------------------------------------------
