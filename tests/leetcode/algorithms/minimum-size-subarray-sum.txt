3-6 easy lines, C++, Java, Python, Ruby
Same simple solution written in several languages. Just go through the numbers and include those in the result that haven't been included twice already.

**C++**

    int removeDuplicates(vector<int>& nums) {
        int i = 0;
        for (int n : nums)
            if (i < 2 || n > nums[i-2])
                nums[i++] = n;
        return i;
    }

**Java**

    public int removeDuplicates(int[] nums) {
        int i = 0;
        for (int n : nums)
            if (i < 2 || n > nums[i-2])
                nums[i++] = n;
        return i;
    }

**Python**

    def removeDuplicates(self, nums):
        i = 0
        for n in nums:
            if i < 2 or n > nums[i-2]:
                nums[i] = n
                i += 1
        return i

**Ruby**

    def remove_duplicates(nums)
        i = 0
        nums.each { |n| nums[(i+=1)-1] = n if i < 2 || n > nums[i-2] }
        i
    end


----------------------------------------------------------------------------------------------------
Share my O(N) time and O(1) solution when duplicates are allowed at most K times
I think both Remove Duplicates from Sorted Array I and II could be solved in a consistent and more general way by allowing the duplicates to appear k times (k = 1 for problem I and k = 2 for problem II). Here is my way: we need a count variable to keep how many times the duplicated element appears, if we encounter a different element, just set counter to 1, if we encounter a duplicated one, we need to check this count, if it is already k, then we need to skip it, otherwise, we can keep this element. The following is the implementation and can pass both OJ:

    int removeDuplicates(int A[], int n, int k) {
    
                if (n <= k) return n;
    
                int i = 1, j = 1;
                int cnt = 1;
                while (j < n) {
                    if (A[j] != A[j-1]) {
                        cnt = 1;
                        A[i++] = A[j];
                    }
                    else {
                        if (cnt < k) {
                            A[i++] = A[j];
                            cnt++;
                        }
                    }
                    ++j;
                }
                return i;
    }


For more details, you can also see this post: [LeetCode Remove Duplicates from Sorted Array I and II: O(N) Time and O(1) Space][1]


  [1]: http://tech-wonderland.net/blog/leetcode-remove-duplicates-from-sorted-array-i-and-ii.html

----------------------------------------------------------------------------------------------------
Short and Simple Java solution (easy to understand)
Question wants us to return the length of new array after removing duplicates and that we don't care about what we leave beyond new length , hence we can use `i` to keep track of the position and update the array. 

 
----------


Remove Duplicates from Sorted Array(no duplicates) :

    public int removeDuplicates(int[] nums) {
        int i = 0;
        for(int n : nums)
            if(i < 1 || n > nums[i - 1]) 
                nums[i++] = n;
        return i;
    }


Remove Duplicates from Sorted Array II (allow duplicates up to 2):

    public int removeDuplicates(int[] nums) {
       int i = 0;
       for (int n : nums)
          if (i < 2 || n > nums[i - 2])
             nums[i++] = n;
       return i;
    }



----------------------------------------------------------------------------------------------------
My C++ solution. 16ms, 5 lines
    int removeDuplicates(vector<int>& nums) {
        int n = nums.size(), count = 0;
        for (int i = 2; i < n; i++)
            if (nums[i] == nums[i - 2 - count]) count++;
            else nums[i - count] = nums[i];
        return n - count;
    }

----------------------------------------------------------------------------------------------------
C++ simple AC solution in 10 lines 21ms
    class Solution {
    public:
        int removeDuplicates(int A[], int n) {
            if (n <= 2)
                return n;
            int rear = 1;
            for(int i = 2; i < n; i++){
                if(!(A[i] == A[rear] && A[i] == A[rear -1])){
                    A[++rear] = A[i];
                }
            }
            return rear+1;
        }
    };

----------------------------------------------------------------------------------------------------
O(N) Time and O(1) Java Solution When Allowed at Most K times of Duplicates
Share my general solution for "Remove Duplicates Problem".

If anyone could think of a better solution please let me know.    

    public int removeDuplicates(int[] nums) {
        		//define at most k times of duplicate numbers
        		final int k = 2;
    
        		//check if it is an empty array
        		if(nums.length == 0) return 0;
    
        		//start pointer of new array
        		int m = 1;
    
        		// count the time of duplicate numbers occurence
        		int count = 1;
    
        		for(int i = 1; i < nums.length; ++i) {
        			if(nums[i] == nums[i - 1]) {
        				if(count < k) {
        					nums[m++] = nums[i];
        				}
        				count++;
        			} else {
        				count = 1;
        				nums[m++] = nums[i];
        			}
        		}
        		return m;
        	}

----------------------------------------------------------------------------------------------------
O(N) in place solution
    int removeDuplicates(int A[], int n) {
        if (n <= 2) return n;
        int repeat = 0, count = 1;
        for (int i = 1; i < n; ++i) {
            if (A[i] == A[i-1] && repeat < 1) {
                A[count++] = A[i];
                repeat++;
            }
            else if (A[i] > A[i-1]) {
                A[count++] = A[i];
                repeat = 0;
            }
        }
        
        return count;
    }

----------------------------------------------------------------------------------------------------
C++ code, quite standard
You only need to change K to allow K repetitions.
One common mistake one can make is " if(nums[i] != nums[i-K])" : it is wrong since nums[i-k] can be overwritten in a previous iteration.

    class Solution {
    public:
        int removeDuplicates(vector<int>& nums) {
            int len=nums.size(), i, K=2, last = K;
            if(len<=K) return len;
            for(i=K; i<len; ++i)
            {
                if(nums[i] != nums[last-K]) nums[last++] = nums[i]; // note it is last-K
            }
            return last;
        }
    };

----------------------------------------------------------------------------------------------------
Clean python solution
    class Solution(object):
        def removeDuplicates(self, nums):
            tail = 0
            for num in nums:
                if tail < 2 or num != nums[tail - 1] or num != nums[tail - 2]:
                    nums[tail] = num
                    tail += 1
            return tail

----------------------------------------------------------------------------------------------------
Share my O(N) time and O(1) space , short and simple solution when duplicates are allowed at most K times .
This is my **short and easy to understand** solution for the problem where **duplicates are allowed at most k times.**  My approach is to remain first k elements as it is . Now start from `k'th index`  and check if the element at the position `current index - k` this is the same as new arriving element then skip this element and continue with next element .
here the condition `nums[j-k]!=nums[i]`  is very important because if i will use `i` in place of `j` i.e. `nums[i-k]!=nums[i]` then it will give wrong answer because we have to look `k` steps backward in **new updated array.**

please comment if any test case fails.

     int removeDuplicates(vector<int>& nums,int k) {
            if(nums.size()<k) return nums.size(); // if array size is less than k then return the same
            int i,j;
             for(i=k,j=k ; i<nums.size();i++)
                 if(nums[j-k]!=nums[i]) nums[j++]=nums[i];
             return j;
        
        }

----------------------------------------------------------------------------------------------------
Simple java solution with explanation

    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) {return 0;}
        int pointer = 0, flag = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1] && flag == 0) {
                flag = 1;
                pointer++;
            } else if (nums[i] != nums[i - 1]) {
                flag = 0;
                pointer++;
            }
            nums[pointer] = nums[i];
        }
        return pointer + 1;
    }


----------
The variable flag is to show if this number (nums[i]) has appeared more or equals to third times. The variable pointer is the location that each number (nums[i]) should appeared in. The special case is when the array is empty.

----------------------------------------------------------------------------------------------------
In-place solution in python for reference
    class Solution:
    # @param A a list of integers
    # @return an integer
    def removeDuplicates(self, A):
        if len(A)==0:
            return 0
        cur=0
        point=0
        
        while point<len(A):
            if point<len(A)-2 and A[point]==A[point+1] and A[point]==A[point+2]:
                point=point+1
            else:
                A[cur]=A[point]
                point=point+1
                cur=cur+1
        
        
        return cur    
            
        
this is essentially the same as problem I.only difference is to check if it has more than 3 duplicates

----------------------------------------------------------------------------------------------------
Java solution generalized to maximal k time occurences
This solution is inspired by @tech-wonderland.net

In this solution, I use a **for** loop instead of a **while** since we know for sure the iteration will end after loop through the array one time.

    public class Solution {
        public int removeDuplicates(int[] nums) {
            return removeDuplicates(nums, 2);
        }
        
        public int removeDuplicates(int[] nums, int k) {
            
            int len = nums.length, count = 1;
            
            // j points the position where the next qualified number 
            // found by i pointer will be written
            for ( int i = 1, j = 1; i < nums.length; i++ ) {
    
                count = (nums[i] != nums[i-1]) ? 1 : count+1;
                
                if ( count > k ) {
                    len--;
                } else {
                    nums[j++] = nums[i];
                }
    
            }
            return len;
        }
    }

----------------------------------------------------------------------------------------------------
Java 1ms solution
    public int removeDuplicates(int[] nums) {
        if (nums.length <= 2) {
            return nums.length;
        }
        int length = nums.length;
        int start = 0, times = 1;
        for (int i = 1; i < length; i++) {
            if (nums[i] != nums[start]) {
                start++;
                nums[start] = nums[i];
                times = 1;
            } else {
                times++;
                if (times == 2) {
                    start++;
                    nums[start] = nums[start - 1];
                }
            }
        }
        return start + 1;
    }

count how many times the nums[start] comes, if it has 2 times, start++ and set the second one the same as the first one. If the next value is not the same as nums[start], set the next value to nums[start++];

----------------------------------------------------------------------------------------------------
Is there any way to avoid mistakes when dealing with array index ?
The problem is simple but easy to make mistake. It took me three submissions to pass and some time working on the bugs which mainly come from the incorrect index counting. I wonder if there is any efficient way to avoid these mistakes in coding rather than testing. Thanks !   

----------------------------------------------------------------------------------------------------
Java two pointers solution O(n)


/**
 * Time complexity: Swap->O(1), One-pass->O(n)
 * Memory complexity: Two pointers, boolean->O(1)
 **/

public class Solution {
    public int removeDuplicates(int[] nums) {
        
        //EDGE CASES
        if(nums == null) return 0;
        int length = nums.length;
        if(length <= 1) return length;
        
        //INIT TWO POINTERS
        //AND BOOLEAN TO JUDGE WHETHER THIS IS THE FISRT DUPLICATION OR NOT
        int i = 1;
        int j = 0;
        boolean first_duplication = false;
        
        //ONE-PASS SWAP
        while(i < length){
            if(nums[i] == nums[j] && first_duplication){
               while(i < length && nums[i]==nums[j]){
                  i++;
               }
               first_duplication = false;
            }else{
                first_duplication = (nums[i] == nums[j])?true:false;
                swap(nums,i,j+1);
                i++;
                j++;
            }
        }
        
        //RETURN NEW LENGTH
        return j+1;
    }
    
    //HELPER FUNCTION TO SWAP TWO ELEMENTS IN ARRAY
    public void swap(int[] nums,int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

----------------------------------------------------------------------------------------------------
My easy c++ solution
    int removeDuplicates(vector<int>& nums) {
    	if (nums.size() <= 2)
    		return nums.size();
    	for (int i = 2; i < nums.size(); i++) {
    		if (nums[i] == nums[i - 1] && nums[i] == nums[i - 2]) {
    			vector<int>::iterator it = nums.begin() + i;
    			nums.erase(it);
    			i--;
    		}
    	}
    	return nums.size();
    }

----------------------------------------------------------------------------------------------------
Share my O(n)  time and O(1) space solution with duplicates are allowed at most n times
    public class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums==null || nums.length<3){
            return nums==null?0:nums.length;
        }
        int dif = 2;
        for(int i=2;i<nums.length;i++){
            if(nums[i]!=nums[dif-2]){
                nums[dif++]=nums[i];
            }
        }
        return dif;
    }
}


if N duplicates are allowed,you just need to change the nums[dif-2] to nums[dif-N] ,welcome to discuss with me .

----------------------------------------------------------------------------------------------------
Share my C++ solution,easy to understand
    class Solution {
    public:
        int removeDuplicates(vector<int>& nums) {
            int n = nums.size();
            if (n < 3)
                return n;
                
            int i = 0, newSize = 2;
            
            for (i = 2; i < n; i++)
            {
            //if the current element is different from the penultimate element of the new nums,add the current element into the new nums 
                if (nums[i] != nums[newSize-2])
                    nums[newSize++] = nums[i];
            }
            
            return newSize;
        }
    };

----------------------------------------------------------------------------------------------------
A strange problem.
The following code can get Accepted:

    class Solution {
    public:
        int removeDuplicates(int A[], int n) {
            int m=0;
            if (n==0) return 0;
            for (int i=0;i<n;i++)
            {
                int j=i;
                while ((i+1<n)&&(A[i+1]==A[i])) i++;
                if (i!=j) m+=2; else m++;
            }
            int k=0;
            for (int i=0;i<n;i++)
            {
                int j=i;
                while ((i+1<n)&&(A[i+1]==A[i])) i++;
                if (i!=j) {A[k]=A[k+1]=A[j];k+=2;} else A[k++]=A[j];
            }
            //free(A+m);
            return m;
        }
    };`
But the following code would get RE

        class Solution {
    public:
        int removeDuplicates(int A[], int n) {
            int m=0;
            if (n==0) return 0;
            for (int i=0;i<n;i++)
            {
                int j=i;
                while ((i+1<n)&&(A[i+1]==A[i])) i++;
                if (i!=j) m+=2; else m++;
            }
            int *B=(int*)malloc(m*sizeof(int));
            int k=0;
            for (int i=0;i<n;i++)
            {
                int j=i;
                while ((i+1<n)&&(A[i+1]==A[i])) i++;
                if (i!=j) {B[k]=B[k+1]=A[j];k+=2;} else B[k++]=A[j];
            }
            free(A);
            A=B;
            return m;
        }
    };
    

The difference is whether using the extra array B. Please help.

----------------------------------------------------------------------------------------------------
