Simple O(N) Java Solution Using Insert Index
 
    // Shift non-zero values as far forward as possible
    // Fill remaining space with zeros

    public void moveZeroes(int[] nums) {
        if (nums == null || nums.length == 0) return;        

        int insertPos = 0;
        for (int num: nums) {
            if (num != 0) nums[insertPos++] = num;
        }        

        while (insertPos < nums.length) {
            nums[insertPos++] = 0;
        }
    }


----------------------------------------------------------------------------------------------------
My simple C++ solution
    class Solution {
    public:
        void moveZeroes(vector<int>& nums) {
            int j = 0;
            // move all the nonzero elements advance
            for (int i = 0; i < nums.size(); i++) {
                if (nums[i] != 0) {
                    nums[j++] = nums[i];
                }
            }
            for (;j < nums.size(); j++) {
                nums[j] = 0;
            }
        }
    };

----------------------------------------------------------------------------------------------------
1ms Java solution
public class Solution {
    
    public void moveZeroes(int[] nums) {

        int j = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] != 0) {
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
                j++;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------
C++ Accepted Code
    void moveZeroes(vector<int>& nums) {
        int last = 0, cur = 0;
        
        while(cur < nums.size()) {
            if(nums[cur] != 0) {
                swap(nums[last], nums[cur]);
                last++;
            }
            
            cur++;
        }
    }

----------------------------------------------------------------------------------------------------
One line c++ code, 20ms
The idea comes from the c++ erase/remove idiom.

    class Solution {
    public:
        void moveZeroes(vector<int>& nums) {
            fill(remove(nums.begin(), nums.end(),0), nums.end(), 0);
        }
    };

----------------------------------------------------------------------------------------------------
Python short in-place solution with comments.
    
    # in-place
    def moveZeroes(self, nums):
        zero = 0  # records the position of "0"
        for i in xrange(len(nums)):
            if nums[i] != 0:
                nums[i], nums[zero] = nums[zero], nums[i]
                zero += 1

----------------------------------------------------------------------------------------------------
Java - Short and Swappy - 1ms
	
	
	
	public class Solution {    
	    
	    public void moveZeroes(int[] nums) {
	        int z = -1;
	        for (int i=0; i< nums.length; i++) {
	            int temp = nums[i];
	            if (temp != 0) {
	                nums[i]=nums[++z];
	                nums[z]=temp;
	            }
	        }
	    }
	
	}

----------------------------------------------------------------------------------------------------
0ms Java Solution
   Insert the non-zero number first, then insert the zeroes.


     public class Solution{
        	public void moveZeroes(int[] nums){
        		int index=0;
        		for (int i=0;i<nums.length;i++){
        			if (nums[i]!=0) nums[index++]=nums[i];
        		}
        		while(index<nums.length){
        			nums[index++]=0;
        		}
        	}
        
        }

----------------------------------------------------------------------------------------------------
Share my one line python solution
nums.sort(key= lambda x: 1 if x == 0 else 0)

----------------------------------------------------------------------------------------------------
Java solution of Move Zeroes
public class Solution {

    public void moveZeroes(int[] nums) {

        if(nums == null || nums.length == 0){
            return;
        }
        
        int j = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != 0){
                nums[j] = nums[i];
                j++;
            }
        }
        
        for(int m = j; m < nums.length; m++){
            nums[m] = 0;
        }
        
        return;
    } 
}

----------------------------------------------------------------------------------------------------
JAVA O(N) SOLUTION
public void moveZeroes(int[] nums) {
    int count = 0 , size = nums.length;
        
    for (int i = 0; i< size; i++) {
        if ( nums[i] == 0) { count ++;}
         if ( nums[i] != 0) { nums[i - count] = nums[i];}
    }
    for (int i = 0; i < count; i++ ) {
        nums[size - count  + i] = 0;
    }
}


----------------------------------------------------------------------------------------------------
C++ 1 line (or 3 lines) clean code
    void moveZeroes(vector<int>& nums) {
      for (int i = 0, j = 0; i < nums.size(); i++) if(nums[i] != 0) swap(nums[i], nums[j++]);
    }

     void moveZeroes(vector<int>& nums) {
        for (int i = 0, j = 0; i < nums.size(); i++)  {
            if (nums[i] != 0) swap(nums[i], nums[j++]);
        }
    }

  

----------------------------------------------------------------------------------------------------
Very simple python solutions

Solution 1: traverse and swap last 0 and last non 0

    class Solution(object):
        def moveZeroes(self, nums):
            """
            :type nums: List[int]
            :rtype: void Do not return anything, modify nums in-place instead.
            """
            last0 = 0
            for i in range(0,len(nums)):
                if (nums[i]!=0):
                    nums[i],nums[last0] = nums[last0],nums[i]
                    last0+=1
        
Solution 2 : one-liner from @toontong:  use sort() with customized compare function
            
    class Solution(object):
        def moveZeroes(self, nums):
            """
            :type nums: List[int]
            :rtype: void Do not return anything, modify nums in-place instead.
            """
            nums.sort(cmp=lambda a,b: 0 if b else -1)

----------------------------------------------------------------------------------------------------
A O(n) Java Solution
public void moveZeroes(int[] nums) {

        int count=0;
        for (int i = 0; i < nums.length; i++) {
			if(nums[i]==0)
				count++;
			if(count!=0&&nums[i]!=0){
				nums[i-count]=nums[i];
				nums[i]=0;
			}
		}
}


----------------------------------------------------------------------------------------------------
8ms simple C solution
    void moveZeroes(int* nums, int numsSize) {
        int totalZeros = 0;
        
        for(int i = 0; i < numsSize; i++) {
            if(nums[i] == 0) {
                totalZeros++;
            }
            else {
                nums[i - totalZeros] = nums[i];
            }
        }
        
        for(int i = (numsSize - totalZeros); i < numsSize; i++) {
            nums[i] = 0;
        }
    }

----------------------------------------------------------------------------------------------------
Simple Java solution
        int zeroCount = 0;
        for(int i = 0 ; i< nums.length; i++) {
            if (nums[i] == 0) {
                zeroCount++;
            } else if (zeroCount > 0 ){
                nums[i-zeroCount] = nums[i];
                nums[i] = 0;
            }
        }

----------------------------------------------------------------------------------------------------
Move Zeros solution in Java
    public void moveZeroes(int[] nums) {
    	int i = -1, j = 0;
    	while (j < nums.length) {
    		if (nums[j] != 0) {
    			swap(++i, j, nums);
    		}
    		j++;
    	}
    }
    
    public void swap(int i, int j, int[] nums) {
    	int temp = nums[i];
    	nums[i] = nums[j];
    	nums[j] = temp;
    }

----------------------------------------------------------------------------------------------------
Java easy and simple solutions
    public class Solution {
    public void moveZeroes(int[] nums) {
        int movings=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0) {
                movings++;
                continue;
            }
            
            int temp=nums[i-movings];
            nums[i-movings]=nums[i];
            nums[i]=temp;
         }
    }
}

----------------------------------------------------------------------------------------------------
Simple in-place java solution, O(n) time complexity

    public void moveZeroes(int[] nums) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                count++;
            } else {
                nums[i - count] = nums[i];
                if (count != 0) {nums[i] = 0;}
            }
        }
        return;
    }

----------------------------------------------------------------------------------------------------
My easy java solution in 1ms with explanation
public class Solution {
    public void moveZeroes(int[] nums) {
        
        //if only 1 element is present, return
        if(nums.length==1)
            return;

        int i=0;
        
        //iterate through the array counting number of zeros
        for(int k:nums)
        {
            if(k==0)
                i++;
        }
            
        //if no 0's exists or array only contains zeros , return
        if(i==0 || i==nums.length)
            return;
        
        //index to keep track of non-zero elements
        int m=0;
        
        //for loop to move all the non zero elements in order
        for(int j=0;j<nums.length;j++)
        {
            if(nums[j]!=0)
                nums[m++]=nums[j];
        }
        
        //insert the 0's in remaining spaces up till the end
        for(int j=nums.length-i;j<nums.length;j++)
        {
            nums[j]=0;
        }
        
        
        
        
        
    }
}

----------------------------------------------------------------------------------------------------
