An Java Iterative Solution
public NestedInteger deserialize(String s) {
    if (s.isEmpty())
        return null;
    if (s.charAt(0) != '[') // ERROR: special case
        return new NestedInteger(Integer.valueOf(s));
        
    Stack<NestedInteger> stack = new Stack<>();
    NestedInteger curr = null;
    int l = 0; // l shall point to the start of a number substring; 
               // r shall point to the end+1 of a number substring
    for (int r = 0; r < s.length(); r++) {
        char ch = s.charAt(r);
        if (ch == '[') {
            if (curr != null) {
                stack.push(curr);
            }
            curr = new NestedInteger();
            l = r+1;
        } else if (ch == ']') {
            String num = s.substring(l, r);
            if (!num.isEmpty())
                curr.add(new NestedInteger(Integer.valueOf(num)));
            if (!stack.isEmpty()) {
                NestedInteger pop = stack.pop();
                pop.add(curr);
                curr = pop;
            }
            l = r+1;
        } else if (ch == ',') {
            if (s.charAt(r-1) != ']') {
                String num = s.substring(l, r);
                curr.add(new NestedInteger(Integer.valueOf(num)));
            }
            l = r+1;
        }
    }
    
    return curr;
}

----------------------------------------------------------------------------------------------------
Python &amp; C++ solutions
class Solution {
public:
    NestedInteger deserialize(string s) {
        istringstream in(s);
        return deserialize(in);
    }
private:
    NestedInteger deserialize(istringstream &in) {
        int number;
        if (in >> number)
            return NestedInteger(number);
        in.clear();
        in.get();
        NestedInteger list;
        while (in.peek() != ']') {
            list.add(deserialize(in));
            if (in.peek() == ',')
                in.get();
        }
        in.get();
        return list;
    }
};


----------------------------------------------------------------------------------------------------
C++ Non-Recursive One-Pass Solution (using Stack) || A Possible Implementation of NestedInteger
class Solution {
public:
    NestedInteger deserialize(string s) {
        function<bool(char)> isnumber = [](char c){ return (c == '-') || isdigit(c); };
        
        stack<NestedInteger> stk;
        stk.push(NestedInteger());
        
        for (auto it = s.begin(); it != s.end();) {
            const char & c = (*it);
            if (isnumber(c)) {
                auto it2 = find_if_not(it, s.end(), isnumber);
                int val = stoi(string(it, it2));
                stk.top().add(NestedInteger(val));
                it = it2;
            }
            else {
                if (c == '[') {
                    stk.push(NestedInteger());
                }
                else if (c == ']') {
                    NestedInteger ni = stk.top();
                    stk.pop();
                    stk.top().add(ni);
                }
                ++it;
            }
        }
        
        NestedInteger result = stk.top().getList().front();
        return result;
    }
};

----------------------------------------------------------------------------------------------------
Straightforward Java solution with explanation and a simple implementation of NestedInteger for your ease of testing
class NestedInteger {
    private List<NestedInteger> list;
    private Integer integer;
    
    public NestedInteger(List<NestedInteger> list){
        this.list = list;
    }
    
    public void add(NestedInteger nestedInteger) {
        if(this.list != null){
            this.list.add(nestedInteger);
        } else {
            this.list = new ArrayList();
            this.list.add(nestedInteger);
        }
    }

    public void setInteger(int num) {
        this.integer = num;
    }

    public NestedInteger(Integer integer){
        this.integer = integer;
    }

    public NestedInteger() {
        this.list = new ArrayList();
    }

    public boolean isInteger() {
        return integer != null;
    }

    public Integer getInteger() {
        return integer;
    }

    public List<NestedInteger> getList() {
        return list;
    }
    
    public String printNi(NestedInteger thisNi, StringBuilder sb){
        if(thisNi.isInteger()) {
            sb.append(thisNi.integer);
            sb.append(",");
        }
        sb.append("[");
        for(NestedInteger ni : thisNi.list){
            if(ni.isInteger()) {
                sb.append(ni.integer);
                sb.append(",");
            }
            else {
                printNi(ni, sb);
            }
        }
        sb.append("]");
        return sb.toString();
    }
}



----------------------------------------------------------------------------------------------------
A top down parser using c++
class Solution {
public:
    NestedInteger deserialize(string s) {
        int index = 0;
        char c = s[index];
        if (c == '[') {
            return parseList(s, index);
        } else {
            // starts with 0-9, '-'
            return parseNumber(s, index);
        }
    }
    
    NestedInteger parseList(string &s, int &index) {
        index++; // eat '['
        NestedInteger root;
        while (index < s.size()) {
            char c = s[index];
            if (c == '[') {
                root.add(parseList(s, index));
            } else if (isNumber(c) || c == '-') {
                root.add(parseNumber(s, index));
            } else if (c == ',') {
                // skip
                index++;
            } else if (c == ']') {
                break;
            }
        }
        index++; // eat ']'
        return root;
    }
    
    NestedInteger parseNumber(string &s, int &index) {
        int n = 0;
        int positive = 1;  // flag for positive number
        if (s[index] == '-') {
            positive = -1;
            index++;
        }
        while (index < s.size()) {
            char c = s[index];
            if (isNumber(c)) {
                n = 10 * n + c - '0';
                index++;
            } else {
                break;
            }
        }
        return NestedInteger(n * positive);
    }
    
    bool isNumber(char c) {
        return '0' <= c && c <= '9';
    }
};


----------------------------------------------------------------------------------------------------
Clarification
<p>No offense but this problem seriously needs some more explanation and grammar check. I want to add a few clarification as follows so it saves you some time:</p>
<ol>
<li>the add() method adds a NestedInteger object to the caller. e.g.:<br/>
outer = NestedInteger() # &#91;&#93;<br/>
nested = NestedInteger(5)<br/>
outer2 = nested<br/>
outer.add(nested) # outer is now &#91;5&#93;<br/>
outer2.add(outer) # outer2 is now &#91;5, &#91;5&#93;&#93;</li>
</ol>
<p>&#34;Set this NestedInteger to hold a nested list and adds a nested integer elem to it.&#34; cannot be more vague.</p>
<ol start="2">
<li>
<p>&#39;-&#39; means negative. It&#39;s not a delimiter.</p>
</li>
<li>
<p>For test cases like &#34;324&#34; you need to return something like NestedInteger(324) not &#34;&#91;324&#93;&#34;.</p>
</li>
<li>
<p>A list cannot have multiple consecutive integers. e.g. &#34;321, 231&#34; is invalid. I guess it&#39;s for difficulty purposes.</p>
</li>
</ol>


----------------------------------------------------------------------------------------------------
Short Java recursive solution
public class Solution {
    public NestedInteger deserialize(String s) {
        NestedInteger ret = new NestedInteger();
        if (s == null || s.length() == 0) return ret;
        if (s.charAt(0) != '[') {
            ret.setInteger(Integer.parseInt(s));
        }
        else if (s.length() > 2) {
            int start = 1, count = 0;
            for (int i = 1; i < s.length(); i++) {
                char c = s.charAt(i);
                if (count == 0 && (c == ',' || i == s.length() - 1)) {
                    ret.add(deserialize(s.substring(start, i)));
                    start = i + 1;
                }
                else if (c == '[') count++;
                else if (c == ']') count--;
            }
        }
        return ret;
    }
}


----------------------------------------------------------------------------------------------------
C++ Clean and Elegant Code with Clear logic
class Solution {
    NestedInteger parse(const string &s, int & pos)
    {
        if (s[pos] == '[')
            return parseList(s, pos);
        return parseNum(s, pos);
    }
    NestedInteger parseNum(const string &s, int & pos)
    {
        int num = 0;
        int sign = s[pos] == '-' ? -1 : 1;
        if (s[pos] == '-' || s[pos] == '+')
            pos ++;
        for (;pos < s.size() && isdigit(s[pos]); pos ++)
            num = num * 10 + s[pos] - '0';
        return NestedInteger(sign * num);
    }
    NestedInteger parseList(const string &s, int &pos)
    {
        NestedInteger ni;
        while (s[pos] != ']')
        {
            pos ++;                   //skip [ or ,
            if (s[pos] == ']') break; //handle [] or [1,2,]
            ni.add(parse(s, pos));
        }
        pos ++;                       // skip ]
        return ni;
    }
public:
    NestedInteger deserialize(const string &s) {
        int pos = 0;//pos ALWAYS points to 1 position past the last parsed string;
                    //This is an invariance maintained across the entire program.
        return parse(s, pos);
    }
};

----------------------------------------------------------------------------------------------------
Python iterative solution with stack and dummy NestedInteger
from collections import deque

class Solution(object):
    def deserialize(self, s):
        """
        :type s: str
        :rtype: NestedInteger
        """
        initial = NestedInteger()
        q = deque()
        q.append(initial)
        i = 0

        while(i < len(s)):
            if s[i] == '[':
                n = NestedInteger()
                q[-1].add(n)
                q.append(n)
                i += 1
            elif s[i] == ']':
                q.pop()
                i += 1
            elif s[i] == ',':
                i += 1
            else:
                j = i
                while j < len(s) and ('0' <= s[j] <= '9' or s[j] == '-'):
                    j += 1
                q[-1].add(int(s[i:j]))
                i = j

        return q[0].getList()[0]

----------------------------------------------------------------------------------------------------
Easy Python recursive solution and stack solution, please be careful about time complexity
class Solution(object):
    def deserialize(self, s):
        """
        :type s: str
        :rtype: NestedInteger
        """
        stack, start = [], -1
        for i, c in enumerate(s):
            if c == '[':
                stack.append(NestedInteger())
            elif c == ']':
                # for last ], it is possible that there is only one NestedInteger
                if len(stack) > 1:
                    t = stack.pop()
                    stack[-1].add(t)
            elif c.isdigit() or c == '-':
                if start == -1:
                    start = i
                if i == len(s) - 1 or not s[i + 1].isdigit():
                    if stack:
                        stack[-1].add(NestedInteger(int(s[start:i + 1])))
                    else:
                        stack.append(NestedInteger(int(s[start:i + 1])))
                    start = -1
        return stack.pop()


----------------------------------------------------------------------------------------------------
very short java solution
    public NestedInteger deserialize(String s) {
        if (s.contains("[")) {
            NestedInteger ans=new NestedInteger();
            if (s.length()>2) {
                int begin=1;
                char[] cs=s.toCharArray();
                int count=0;
                for (int i = 1; i < s.length()-1; i++) {
                    if (cs[i]==','&&count==0) {
                        ans.add(deserialize(s.substring(begin,i)));
                        begin=i+1;
                    }
                    if (cs[i]=='['||cs[i]==']') {  //ascii code '['->91 ']'->93
                        count+=(92-cs[i]);
                    }
                }
                ans.add(deserialize(s.substring(begin,s.length()-1)));
            }
            return ans;
        }
        return new NestedInteger(Integer.valueOf(s));
    }
}


----------------------------------------------------------------------------------------------------
Very short recursive solution
class Solution {
public:   
    NestedInteger parse(string& s, int& i) {
      if(s[i]=='[') {
          ++i;
          NestedInteger list;
          while(s[i] != ']') {
              list.add(parse(s,i));
              if(s[i] ==',') ++i;
          }
          ++i;
          return list;
      } else {                       
        int sum = 0;
        int sign=1;
        if(s[i] == '-'){ sign = -1; ++i;}
        while(isdigit(s[i])) { sum *= 10; sum+= s[i]-'0'; ++i;}
          return NestedInteger(sum*sign);
      }
    }
    NestedInteger deserialize(string s) {
        int i = 0;
        return parse(s, i);
    }
};

----------------------------------------------------------------------------------------------------
Short and Clean Java Recursive Solution with Explanation
public NestedInteger deserialize(String s) {
    if (s.length() == 0)    return new NestedInteger();
    return myDeserialize(s, 0, s.length()-1);
}

private NestedInteger myDeserialize(String s, int start, int end) {
    if (s.charAt(start) != '[') 
        return new NestedInteger(Integer.valueOf(s.substring(start, end+1)));

    NestedInteger ni = new NestedInteger();
    int lvl = 0, lIndex = start+1;

    for (int i=start+1 ; i<=end-1 ; ++i) {
        char ch = s.charAt(i);
        if (ch == '[')  ++lvl;
        else if (ch == ']') --lvl; 
        else if (ch == ',' && lvl == 0) {
            ni.add(myDeserialize(s, lIndex, i-1));
            lIndex = i + 1;
        }
    }
    if (lIndex <= end-1) {
        ni.add(myDeserialize(s, lIndex, end-1));
    }
    return ni;        
}

----------------------------------------------------------------------------------------------------
Share my simple JAVA solution with explanation
public class Solution {
    public NestedInteger deserialize(String s) {
        Stack<NestedInteger> stk = new Stack<>();
        Reader input = new Reader(s);
        NestedInteger cur = null;
        while(input.hasNext()){
            String next = input.next();
            if(next.equals("[")){
                if(cur!=null){
                    stk.push(cur);
                }
                cur = new NestedInteger();
            }
            else if(next.equals("]")){
                if(!stk.isEmpty()){
                    stk.peek().add(cur);
                    cur = stk.pop();
                }
            }
            else{
                int val = Integer.valueOf(next);
                if(cur==null){
                    cur = new NestedInteger(val);
                }
                else{
                    cur.add(new NestedInteger(val));
                }
            }
        }
        return cur;
    }
    
    class Reader{   // a helper class that passes input string into useful elements
        String str;
        int p, len;
        public Reader(String s){
            str = s;
            p = 0;
            len = str.length();
        }
        public boolean hasNext(){
            return p<len;
        }
        public String next(){
            if(str.charAt(p)==',') p++;
            int s = p;
            while(p<len && (str.charAt(p)=='-' || Character.isDigit(str.charAt(p)))) p++;
            if(s!=p) return str.substring(s,p);
            return str.substring(s,++p);
        }
    }
}


----------------------------------------------------------------------------------------------------
Java Solution using Stack. logic same same as basic calculator question
    public NestedInteger deserialize(String s) {
        if(s == null || s.isEmpty()) return new NestedInteger();
        Stack<NestedInteger> stack = new Stack<>();
        int sign = 1, len = s.length() ;
        for(int i = 0 ; i < len ; i++){
            char c = s.charAt(i);
            if(c == '['){
                stack.push(new NestedInteger()); // start of a new NestedInteger
            }else if( c == ']' && stack.size() > 1){ // End of a NesterdInteger
                NestedInteger n = stack.pop();
                stack.peek().add(n); 
            }else if(c == '-'){ // just change the sign 
                sign = -1;
            }else if(Character.isDigit(c)){ // if digit check for all the continous ones
                int num = c - '0';
                while( i + 1 < len && Character.isDigit(s.charAt(i+1))){
                    num = num * 10 + s.charAt(i+1) - '0';
                    i++;
                }
                num = num * sign;
                if(!stack.isEmpty()){
                    stack.peek().add(new NestedInteger(num)); // add to previous item if not empty
                }else{
                    stack.push(new NestedInteger(num));
                }
                sign = 1; // reset the sign
            }
        }
        return stack.isEmpty() ? new NestedInteger() : stack.pop() ; 
    }


----------------------------------------------------------------------------------------------------
Java iterative and recursive (including one-pass) solution
    int idx;
    public NestedInteger deserialize(String s) {
        idx = 0;
        return helper(s);
    }
    NestedInteger helper(String s) {
        NestedInteger ans = new NestedInteger();
        if (s.charAt(idx) != '[') {
            int start = idx;
            while (idx < s.length() && s.charAt(idx) != ',' && s.charAt(idx) != ']') ++idx;
            ans.setInteger(Integer.parseInt(s.substring(start, idx--)));
        } else {
            for (++idx; idx < s.length() && s.charAt(idx) != ']'; ++idx)
                if (s.charAt(idx) != ',') ans.add(helper(s));
        }
        return ans;
    }


----------------------------------------------------------------------------------------------------
C++ iterative solution
class Solution {
private:
    string getNext(string& s, int& pos) {                       // get next element: '[', ']', number string
        if (pos < s.length() && s[pos] == ',') { pos++; }       // skip ','
        if (pos < s.length() && (s[pos] == '[' || s[pos] == ']')) { return s.substr(pos++, 1); }
        int start = pos;
        if (pos < s.length() && s[pos] == '-') { pos++; }       // include '-' in a number substring
        while (pos < s.length() && isdigit(s[pos])) { pos++; }  // get the number substring
        return s.substr(start, pos - start);
    }
    
public:
    NestedInteger deserialize(string s) {
        stack<NestedInteger> st;
        
        for (int pos = 0; pos < s.length();) {
            string curStr = getNext(s, pos);
            
            if (curStr == "[") {
                st.push(NestedInteger());                           // start a new nested list
            } else {                                                // curStr may be either "]" or a number string
                NestedInteger item;
                if (curStr == "]") { item = st.top(); st.pop(); }   // complete the last nested list / interger
                else { item = NestedInteger(stoi(curStr)); }        // it's a number string
                
                if (st.size()) { st.top().add(item); }              // merge it into previous nested list
                else { st.push(item); }                             // itself is the top parent nested list / integer
            }
        }
        
        return st.top();
    }
};


----------------------------------------------------------------------------------------------------
Simple Java Solution (Beats 98%)
public NestedInteger deserialize(String s) {
	if(s.length()==0 || s.equals("[]")) return new NestedInteger();
	NestedInteger ni = new NestedInteger();
	char[] chars = s.toCharArray();
	if(chars[0]=='[') {
		int elementStart = 1;
		while(elementStart<chars.length) {
			int elementEnd = searchForElementEnd(chars,elementStart);
			String nextListElement = new String(chars,elementStart,elementEnd-elementStart);
			ni.add(deserialize(nextListElement));
			elementStart=elementEnd+1;
		}
	} else ni.setInteger(new Integer(new String(chars)));
	return ni;
}

private int searchForElementEnd(char[] chars, int elementStart) {
	int countBrackets = 0;
	int i=elementStart;
	if(chars[i++]=='[') countBrackets++;
	while(i<chars.length) {
		char nextChar = chars[i];
		if(nextChar==']') {
			countBrackets--;
			if(countBrackets<=0) {
				if(countBrackets==0) i++;
				break;
			}
		}
		else if(nextChar=='[') countBrackets++;
		else if(nextChar==',' && countBrackets==0) {
			break;
		}
		i++;
	}
	return i;
}


----------------------------------------------------------------------------------------------------
Java 10 ms, while loop + recursion (one scan)
public class Solution {
    public int helper(char[] cc, int idx, NestedInteger res){
        NestedInteger ret = null; // for storing the list element
        Integer num=null; // for storing the number element
        int sign = 1; // sign of the number
        while ( idx < cc.length && cc[idx] != ']') { // parsing between [ and ]
            char c = cc[idx++];
            if ( c == '[' ) { // start parsing a list by calling helper function
                ret = new NestedInteger();
                idx = helper(cc, idx, ret); // idx is the next index after ]
            } else if ( c == ',' ){  // time to add a element to the list
                if (ret != null) { // it is a List element
                    res.add(ret);
                } else { // it is a integer or null
                    if (num != null) res.add(new NestedInteger( sign*num ) );
                }
                ret = null;  // reset 
                num = null;
                sign = 1;
            } else if ( c == '-' ){ // sign of the number
                sign = -1;
            } else { // calculate the number
                num = num == null ? (int)(c-'0'): (num*10) + (int)(c-'0');
            }
        }
        if (ret != null) { // add the last element or the element before ]
            res.add(ret);
        } else {
            if (num != null) res.add(new NestedInteger(sign*num));
        }
        return idx+1; // very important!!! return the next index 
    }
    
    public NestedInteger deserialize(String s) {
        NestedInteger ret = new NestedInteger(); // a dummy root element
        helper(s.toCharArray(), 0, ret);
        return ret.getList().get(0); // return a element in the dummy root
    }
}


----------------------------------------------------------------------------------------------------
easy to understand use stack java solution
public NestedInteger deserialize(String s) {
        NestedInteger res = new NestedInteger();
        Stack<NestedInteger> stack = new Stack<NestedInteger>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '[') {
                stack.push(new NestedInteger());
                continue;
            }
            if (c == ',') {
                continue;
            }
            if (c == ']') {
                NestedInteger temp = stack.pop();
                if (!stack.isEmpty()) {
                    stack.peek().add(temp);
                } else {
                    stack.push(temp);
                }
                continue;
            }
            int j = i;
            while (j < s.length() && (Character.isDigit(s.charAt(j)) || s.charAt(j) == '-')) {
                j++;
            }
            if (j > i) {
                int num = Integer.parseInt(s.substring(i, j));
                if (!stack.isEmpty()) {
                    NestedInteger ni = new NestedInteger(num);
                    stack.peek().add(ni);
                } else {
                    NestedInteger ni = new NestedInteger(num);
                    stack.push(ni);
                }
                i = j - 1;
            }
        }
        return stack.peek();
    }

----------------------------------------------------------------------------------------------------
