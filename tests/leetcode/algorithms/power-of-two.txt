Java solution with a queue used
    public class Solution {
        public List<List<Integer>> levelOrder(TreeNode root) {
            Queue<TreeNode> queue = new LinkedList<TreeNode>();
            List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
            
            if(root == null) return wrapList;
            
            queue.offer(root);
            while(!queue.isEmpty()){
                int levelNum = queue.size();
                List<Integer> subList = new LinkedList<Integer>();
                for(int i=0; i<levelNum; i++) {
                    if(queue.peek().left != null) queue.offer(queue.peek().left);
                    if(queue.peek().right != null) queue.offer(queue.peek().right);
                    subList.add(queue.poll().val);
                }
                wrapList.add(subList);
            }
            return wrapList;
        }
    }

----------------------------------------------------------------------------------------------------
One of C++ solutions (preorder)
    vector<vector<int>> ret;
    
    void buildVector(TreeNode *root, int depth)
    {
        if(root == NULL) return;
        if(ret.size() == depth)
            ret.push_back(vector<int>());
        
        ret[depth].push_back(root->val);
        buildVector(root->left, depth + 1);
        buildVector(root->right, depth + 1);
    }

    vector<vector<int> > levelOrder(TreeNode *root) {
        buildVector(root, 0);
        return ret;
    }

----------------------------------------------------------------------------------------------------
C++ solution using only one queue &#x2F; use a marker NULL
    class Solution {
    public:
        vector<vector<int> > levelOrder(TreeNode *root) {
            vector<vector<int> >  result;
            if (!root) return result;
            queue<TreeNode*> q;
            q.push(root);
            q.push(NULL);
            vector<int> cur_vec;
            while(!q.empty()) {
                TreeNode* t = q.front();
                q.pop();
                if (t==NULL) {
                    result.push_back(cur_vec);
                    cur_vec.resize(0);
                    if (q.size() > 0) {
                        q.push(NULL);
                    }
                } else {
                    cur_vec.push_back(t->val);
                    if (t->left) q.push(t->left);
                    if (t->right) q.push(t->right);
                }
            }
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
Java Solution using DFS
Nothing special. Just wanna provide a different way from BFS.

    public List<List<Integer>> levelOrder(TreeNode root) {
            List<List<Integer>> res = new ArrayList<List<Integer>>();
            levelHelper(res, root, 0);
            return res;
        }
        
        public void levelHelper(List<List<Integer>> res, TreeNode root, int height) {
            if (root == null) return;
            if (height >= res.size()) {
                res.add(new LinkedList<Integer>());
            }
            res.get(height).add(root.val);
            levelHelper(res, root.left, height+1);
            levelHelper(res, root.right, height+1);
        }

----------------------------------------------------------------------------------------------------
5-6 lines fast python solution (48 ms)
`level` is a list of the nodes in the current level. Keep appending a list of the values of these nodes to `ans` and then updating `level` with all the nodes in the next level (kids) until it reaches an empty level. Python's list comprehension makes it easier to deal with many conditions in a concise manner. 

<br>
Solution 1, (6 lines)

    def levelOrder(self, root):
        ans, level = [], [root]
        while root and level:
            ans.append([node.val for node in level])
            LRpair = [(node.left, node.right) for node in level]
            level = [leaf for LR in LRpair for leaf in LR if leaf]
        return ans
<br>
Solution 2, (5 lines), same idea but use only one list comprehension in while loop to get the next level

    def levelOrder(self, root):
        ans, level = [], [root]
        while root and level:
            ans.append([node.val for node in level])            
            level = [kid for n in level for kid in (n.left, n.right) if kid]
        return ans

<br>
Solution 3 (10 lines), just an expansion of solution 1&2 for better understanding.

    def levelOrder(self, root):
        if not root:
            return []
        ans, level = [], [root]
        while level:
            ans.append([node.val for node in level])
            temp = []
            for node in level:
                temp.extend([node.left, node.right])
            level = [leaf for leaf in temp if leaf]
        return ans






----------------------------------------------------------------------------------------------------
Share my clean and easy java solution
        public class Solution {
        public List<List<Integer>> levelOrder(TreeNode root) {
           List<List<Integer>> result = new ArrayList<List<Integer>>();
           
           if(root == null){
              return result;
           }
           
           Queue<TreeNode> queue = new LinkedList<TreeNode>();
           queue.offer(root);
           
           int curL = 0;
           while(!queue.isEmpty()){
               List<Integer> levelRs = new ArrayList<Integer>(); 
               curL = queue.size();
               for(int i=0;i<curL;i++){
                   TreeNode peek = queue.poll();
                   levelRs.add(peek.val);
                   if(peek.left!=null){
                       queue.offer(peek.left);
                   }
                   if(peek.right!=null){
                       queue.offer(peek.right);
                   }
               }
               result.add(levelRs);
           }
           
           return result;
        }  
    }

----------------------------------------------------------------------------------------------------
Short 8ms C++ solution with queue
    class Solution {
    public:
        vector<vector<int>> levelOrder(TreeNode* root) {
            if (!root) { return {}; }
            vector<int> row;
            vector<vector<int> > result;
            queue<TreeNode*> q;
            q.push(root);
            int count = 1;
    
                while (!q.empty()) {
                if (q.front()->left) { q.push(q.front()->left); }
                if (q.front()->right) { q.push(q.front()->right); }
                row.push_back(q.front()->val), q.pop();
                if (--count == 0) {
                    result.emplace_back(row), row.clear();
                    count = q.size();
                }
            }
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
Java 1ms DFS recursive solution and 2ms BFS iterative solution
DFS recursive:

    public List<List<Integer>> levelOrder(TreeNode root) {
    		List<List<Integer>> res = new ArrayList<>();
    		if (root == null)
    			return res;
    		levelOrderHelper(res, root, 0);
    		return res;
    	}
    	
    	public void levelOrderHelper(List<List<Integer>> res, TreeNode root, int level) {
    		if (root == null)
    			return;
    		List<Integer> curr;
    		if (level >= res.size()) {
    			curr = new ArrayList<>();
    			curr.add(root.val);
    			res.add(curr);
    		} else {
    			curr = res.get(level); 
    			curr.add(root.val); 
    			//res.add(curr); // No need to add the curr into the res, because the res.get(index) method does not remove the index element
    		}
    		levelOrderHelper(res, root.left, level + 1);
    		levelOrderHelper(res, root.right, level + 1);
    	}

BFS iterative:

    public List<List<Integer>> levelOrder(TreeNode root) {
    		List<List<Integer>> res = new ArrayList<>();
    		if (root == null)
    			return res;
    		Queue<TreeNode> q = new LinkedList<>();
    		q.add(root);
    		while(!q.isEmpty()) {
    			int levelSize = q.size();
    			List<Integer> currLevel = new ArrayList<>();
    			for(int i = 0; i < levelSize; i++) {
    				TreeNode currNode = q.poll();
    				currLevel.add(currNode.val);
    				if (currNode.left != null)
    					q.add(currNode.left);
    				if (currNode.right != null)
    					q.add(currNode.right);
    			}
    			res.add(currLevel);
    		}
    		return res;
    	}

----------------------------------------------------------------------------------------------------
My 1ms Java solution
    public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ll = new ArrayList<>();
        if(root == null)
            return ll;
        traversal(ll, root, 1);
        return ll;
    }
    public void traversal(List<List<Integer>> ll, TreeNode node, int depth){
        if(node == null)
            return;
        if(ll.size() == depth - 1) {
            List<Integer> l = new ArrayList<>();
            l.add(node.val);
            ll.add(l);
        }
        else if(ll.size() >= depth) {
            List<Integer> li = ll.get(depth - 1);
            li.add(node.val);
        }
        traversal(ll, node.left, depth + 1);
        traversal(ll, node.right, depth + 1);
    }
}

----------------------------------------------------------------------------------------------------
It is my AC solution.
Here i use bfs with queue. The type of queue is pair where the first argument is tree node and second is level number. Can I or is it right to use pair here ?

    class Solution {
    public:
        vector<vector<int> > levelOrder(TreeNode *root) {
            vector< vector<int> > ans;
            if (!root) return ans;
            queue<pair<TreeNode *, int> > q;
            q.push(make_pair(root, 0));
            while (!q.empty()) {
                
                int i = q.front().second;
                TreeNode * node = q.front().first;
                if (ans.size() >= i) ans.resize(i + 1);
                ans[i].push_back(node -> val);
                if (node -> left) q.push(make_pair(node -> left, i + 1));
                if (node -> right) q.push(make_pair(node -> right, i + 1));
                q.pop();
            }
            return ans;
        }
    
    };

----------------------------------------------------------------------------------------------------
Java Clean and Concise using a Queue
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root==null) return result;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(q.size()>0){
            List<Integer> list = new ArrayList<>();
            int size = q.size();
            for(int i=0; i<size; i++){
                TreeNode node = q.poll();
                list.add(node.val);
                if(node.left!=null) q.add(node.left);
                if(node.right!=null) q.add(node.right);
            }
            result.add(list);
        }
        return result;
    }

----------------------------------------------------------------------------------------------------
My neat solution in C++
    vector<vector<int> > levelOrder(TreeNode *root) {
    	vector<vector<int> > retVal;

    	levelOrder(root, retVal, 0);

    	return retVal;
    }

    void levelOrder(TreeNode* root, vector<vector<int> > &v, int currLevel) {
    	if (root == NULL) {
    		return;
    	}

    	if (v.empty() || currLevel > (v.size() - 1)) {
    		v.push_back(vector<int>());
    	}

    	v[currLevel].push_back(root->val);

    	levelOrder(root->left, v, currLevel + 1);
    	levelOrder(root->right, v, currLevel + 1);
    }

----------------------------------------------------------------------------------------------------
Java queue solution beats 100%
 public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> nodes = new ArrayList<>();
        if(root==null){
            return nodes;
        }
        
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        
        queue.add(root);
        
        while(queue.size()!=0){
            
            int size = queue.size();
            List<Integer> layer_vals = new ArrayList<Integer>();
            
            while(size!=0){
                TreeNode temp = queue.poll();
                layer_vals.add(temp.val);
                
                if(temp.left!=null)queue.add(temp.left);
                if(temp.right!=null)queue.add(temp.right);
                
                size--;
            }
            nodes.add(layer_vals);
        }
        
        return nodes;
        
    }

----------------------------------------------------------------------------------------------------
My accepted Java solution
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null) return new ArrayList<List<Integer>>();
		 
		 List<List<Integer>> result=new ArrayList<List<Integer>>();
		 LinkedList<TreeNode> nodequeue=new LinkedList<TreeNode>();
		 nodequeue.offer(root);
		 TreeNode levellast=root;
		 ArrayList<Integer> storeeachlevel=new ArrayList<Integer>();
		 
		 while(nodequeue.size()>0){
			TreeNode current=nodequeue.poll();
			storeeachlevel.add(current.val);
			if(current.left!=null) nodequeue.offer(current.left);
			if(current.right!=null) nodequeue.offer(current.right);
			
			if(current==levellast){
				result.add(storeeachlevel);
				storeeachlevel=new ArrayList<Integer>();
				levellast=nodequeue.peekLast();
			}
			
		 }
		 
		 return result;
    }
}

----------------------------------------------------------------------------------------------------
8ms cpp solution without queue

    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if (!root) return result;
        Helper(root, result, 0);
        return result;
    }
    void Helper(TreeNode* root, vector<vector<int>> &result, int h){
        if (!root) return;

        if (result.size()<h+1){
            vector<int> tmp;
            tmp.push_back(root->val);
            result.push_back(tmp);
        }else{
            result[h].push_back(root->val);
        }
        Helper(root->left, result, h+1);
        Helper(root->right, result, h+1);
    }
};

----------------------------------------------------------------------------------------------------
C++ 4ms simple recursive solution
    class Solution {
    public:
    vector<vector<int>> levelOrder(TreeNode* root)
    {
    	vector<vector<int>> result;
    	recur_levelOrder(result, root, 0);
    	return result;
    }

    void recur_levelOrder(vector<vector<int>> &result, TreeNode *root, int level)
    {
    	if (!root)
    	{
	    	return;
	    }
	    if ((level+1) > result.size())
	    {
		    result.push_back(vector<int> {});
	    }
	    result[level].push_back(root->val);
	    recur_levelOrder(result, root->left, level+1);
	    recur_levelOrder(result, root->right, level+1);
    }
    };

----------------------------------------------------------------------------------------------------
