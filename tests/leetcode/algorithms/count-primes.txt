Share my at most two-pass constant space 10-line solution
The idea is to sweep all 0s to the left and all 2s to the right, then all 1s are left in the middle.

        class Solution {
        public:
            void sortColors(int A[], int n) {
                int second=n-1, zero=0;
                for (int i=0; i<=second; i++) {
                    while (A[i]==2 && i<second) swap(A[i], A[second--]);
                    while (A[i]==0 && i>zero) swap(A[i], A[zero++]);
                }
            }
        };

----------------------------------------------------------------------------------------------------
Four different solutions
    // two pass O(m+n) space
    void sortColors(int A[], int n) {
        int num0 = 0, num1 = 0, num2 = 0;
        
        for(int i = 0; i < n; i++) {
            if (A[i] == 0) ++num0;
            else if (A[i] == 1) ++num1;
            else if (A[i] == 2) ++num2;
        }
        
        for(int i = 0; i < num0; ++i) A[i] = 0;
        for(int i = 0; i < num1; ++i) A[num0+i] = 1;
        for(int i = 0; i < num2; ++i) A[num0+num1+i] = 2;
    }
    
    // one pass in place solution
    void sortColors(int A[], int n) {
        int n0 = -1, n1 = -1, n2 = -1;
        for (int i = 0; i < n; ++i) {
            if (A[i] == 0) 
            {
                A[++n2] = 2; A[++n1] = 1; A[++n0] = 0;
            }
            else if (A[i] == 1) 
            {
                A[++n2] = 2; A[++n1] = 1;
            }
            else if (A[i] == 2) 
            {
                A[++n2] = 2;
            }
        }
    }
    
    // one pass in place solution
    void sortColors(int A[], int n) {
        int j = 0, k = n - 1;
        for (int i = 0; i <= k; ++i){
            if (A[i] == 0 && i != j)
                swap(A[i--], A[j++]);
            else if (A[i] == 2 && i != k)
                swap(A[i--], A[k--]);
        }
    }
    
    // one pass in place solution
    void sortColors(int A[], int n) {
        int j = 0, k = n-1;
        for (int i=0; i <= k; i++) {
            if (A[i] == 0)
                swap(A[i], A[j++]);
            else if (A[i] == 2)
                swap(A[i--], A[k--]);
        }
    }

----------------------------------------------------------------------------------------------------
Sharing C++ solution with Good Explanation
The solution requires the use of tracking 3 positions, the Low, Mid and High.

We assume that the mid is the "Unknown" area that we must evaluate.

If we encounter a 0, we know that it will be on the low end of the array, and if we encounter a 2, we know it will be on the high end of the array.

To achieve this in one pass without preprocessing (counting), we simply traverse the unknown will generating the low and high ends.

Take this example:

Assume our input is: 1 0 2 2 1 0 (short for simplicity).

Running the algorithm by hand would look something like:

        1 0 2 2 1 0
        ^         ^
        L         H
        M

        Mid != 0 || 2
        Mid++

        1 0 2 2 1 0
        ^ ^       ^
        L M       H

        Mid == 0
        Swap Low and Mid
        Mid++
        Low++

        0 1 2 2 1 0
          ^ ^     ^
          L M     H

        Mid == 2
        Swap High and Mid
        High--

        0 1 0 2 1 2
          ^ ^   ^
          L M   H

        Mid == 0
        Swap Low and Mid
        Mid++
        Low++

        0 0 1 2 1 2
            ^ ^ ^
            L M H

        Mid == 2
        Swap High and Mid
        High--

        0 0 1 1 2 2
            ^ ^
            L M
              H

        Mid <= High is our exit case

Implemented in C++, it looks like:

    class Solution {
        public:
        void sortColors(vector<int>& nums) 
        {
            int tmp = 0, low = 0, mid = 0, high = nums.size() - 1;
        
            while(mid <= high)
            {
                if(nums[mid] == 0)
                {
                    tmp = nums[low];
                    nums[low] = nums[mid];
                    nums[mid] = tmp;
                    low++;
                    mid++;
                }
                else if(nums[mid] == 1)
                {
                    mid++;
                }
                else if(nums[mid] == 2)
                {
                    tmp = nums[high];
                    nums[high] = nums[mid];
                    nums[mid] = tmp;
                    high--;
                }
            }
        }
    };

----------------------------------------------------------------------------------------------------
AC Python in place one pass solution O(n) time O(1) space, no swap no count
    def sortColors(self, nums):
        i = j = 0
        for k in xrange(len(nums)):
            v = nums[k]
            nums[k] = 2
            if v < 2:
                nums[j] = 1
                j += 1
            if v == 0:
                nums[i] = 0
                i += 1

    # 86 / 86 test cases passed.
    # Status: Accepted
    # Runtime: 44 ms
    # 84.03%


Just like the Lomuto partition algorithm usually used in quick sort. We keep a loop invariant that [0,i) [i, j) [j, k) are 0s, 1s and 2s sorted in place for [0,k). Here ")" means exclusive. We don't need to swap because we know the values we want.

----------------------------------------------------------------------------------------------------
Java solution, both 2-pass and 1-pass

    public void sortColors(int[] nums) {
        // 1-pass
        int p1 = 0, p2 = nums.length - 1, index = 0;
        while (index <= p2) {
            if (nums[index] == 0) {
                nums[index] = nums[p1];
                nums[p1] = 0;
                p1++;
            }
            if (nums[index] == 2) {
                nums[index] = nums[p2];
                nums[p2] = 2;
                p2--;
                index--;
            }
            index++;
        }
    }


----------

    public void sortColors(int[] nums) {
        // 2-pass
        int count0 = 0, count1 = 0, count2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {count0++;}
            if (nums[i] == 1) {count1++;}
            if (nums[i] == 2) {count2++;}
        }
        for(int i = 0; i < nums.length; i++) {
            if (i < count0) {nums[i] = 0;}
            else if (i < count0 + count1) {nums[i] = 1;}
            else {nums[i] = 2;}
        }
    }


----------------------------------------------------------------------------------------------------
4ms and only 5 lines c++ code without delete and insert
Here I label the end of same colour, and update for every item in nums.

    void sortColors(vector<int>& nums) {
        int r=0, w=0, b=0; // label the end of different colors;
        for(int num: nums){
            if(num==0) {nums[b++]=2; nums[w++]=1; nums[r++]=0; } 
            else if(num==1) {nums[b++]=2; nums[w++]=1;}
            else if(num==2) b++;
        }
    }

----------------------------------------------------------------------------------------------------
My C++ solution with one pass and O(n) time and O(n) space
    class Solution {
    public:
    //use counting sort
    void sortColors(int A[], int n) {
    int red = -1, white = -1, blue = -1;

    for(int i = 0; i < n; i++){
        if(A[i] == 0){   
            A[++blue] = 2;
            A[++white] = 1;
            A[++red] = 0;
        }
        else if(A[i] == 1){
            A[++blue] = 2;
            A[++white] = 1;
        }
        else if(A[i] == 2)   
            A[++blue] = 2;
    }
    }
    };

the clever thing is that use three variable to store the three colors' index position.
When you face A[i] == 0, all the variables add 1 because 0 is former.
Do the same thing to other 2 situation.

Ex:
If you just face 2, just need to assign 2 to the A[++blue], and "++blue" will increase "blue" with 1.
Next if you face 0, you will increase 3 variable and assign the number to A!

It will make sure you always get the right sorted array when you run the for loop.

----------------------------------------------------------------------------------------------------
C++ solution in 8 lines: an instance of the Dutch national flag problem by Edsger Dijkstra
A more general problem is the [Dutch national flag problem][1] by Edsger Dijkstra, which can be used to solve this problem, as well as partition in quicksort.

    class Solution {
    public:
        void sortColors(int A[], int n) {
            int i = 0, lo = 0, hi = n - 1;
            // invariants: A[0..lo-1] are less than pivot 1, A[lo..i-1] equal, A[hi+1..end] greater
            while (i <= hi)
                if (A[i] < 1)
                    swap(A[i++], A[lo++]);
                else if (A[i] > 1)
                    swap(A[i], A[hi--]);
                else
                    i++;
        }
    };

  [1]: http://en.wikipedia.org/wiki/Quicksort#Repeated_elements

----------------------------------------------------------------------------------------------------
Short C++ 5 line solution (Dutch national flag problem)
It's actually [Dutch national flag problem][1].

    [, i): 0 
    [i, j]: 1
    (k, ...]: 2
    Once j meets k, the sorting is complete

Code

    class Solution { 
    public:
        void sortColors(vector<int>& nums) {
            int i = 0, j = i, k = nums.size() - 1;
            
            while(j <= k){
                if(nums[j] == 0) swap(nums[i++], nums[j++]);
                else if(nums[j] == 1) j++;
                else swap(nums[k--], nums[j]);
            }
        }
    }; 


  [1]: https://en.wikipedia.org/wiki/Dutch_national_flag_problem

----------------------------------------------------------------------------------------------------
Share one pass java solution
The concept is simple. Maintain two pointer, pointer "one" indicates the begging of all ones and pointer "two" indicates the begging of all twos. When we meet 1, we move 1 to the end of 1 sequence which is begging of two sequence then move begging of 2 forward 1. Doing the same to the 2.

    public class Solution {
    public void sortColors(int[] A) {
        int one = 0; 
        int two = 0;
        for(int i=0;i<A.length;i++){
            if(A[i]==0){
                A[i] = A[two];
                A[two] = A[one];
                A[one] = 0;
                one++;
                two++;
            }
            else if(A[i]==1){
                A[i] = A[two];
                A[two] = 1;
                two++;
            }
        }
    }}

----------------------------------------------------------------------------------------------------
Python O(n) 1 pass in-place solution with explanation
This is a [dutch partitioning problem][1]. We are classifying the array into four groups: red, white, unclassified, and blue. Initially we group all elements into unclassified. We iterate from the beginning as long as the white pointer is less than the blue pointer. 

If the white pointer is red (nums[white] == 0), we swap with the red pointer and move both white and red pointer forward. If the pointer is white (nums[white] == 1), the element is already in correct place, so we don't have to swap, just move the white pointer forward. If the white pointer is blue, we swap with the latest unclassified element.


    def sortColors(self, nums):
        red, white, blue = 0, 0, len(nums)-1
        
        while white <= blue:
            if nums[white] == 0:
                nums[red], nums[white] = nums[white], nums[red]
                white += 1
                red += 1
            elif nums[white] == 1:
                white += 1
            else:
                nums[white], nums[blue] = nums[blue], nums[white]
                blue -= 1
                
                


  [1]: https://en.wikipedia.org/wiki/Dutch_national_flag_problem

----------------------------------------------------------------------------------------------------
C++ one-pass concise solution.
        
    void sortColors(vector<int>& nums) {
        int zero =0, l = 0, r = nums.size()-1;
        while (l <= r) {
            if (nums[l] == 0) 
                swap(nums[l++], nums[zero++]);
            else if (nums[l] == 2) 
                swap(nums[l], nums[r--]);
            else
                l++;
        }
    }

----------------------------------------------------------------------------------------------------
Anyone with one pass and constant space solution ?
can someone please post the one-pass solution that uses constant space .
I have been able to do it in two pass only.

----------------------------------------------------------------------------------------------------
4ms C++ solution with one pass
Maintain the tail index for red region, and head index for the blue region. Scan the whole array, and swap the current element with either red tail or blue head respectively. 

      class Solution {
        public:
            void sortColors(vector<int>& nums) {
                int tail_red = 0;
                int head_blue = nums.size() - 1;
                int cur = 0;
                while( cur <= head_blue){
                    if(nums[cur] == 0){
                        swap(nums[tail_red], nums[cur]);
                        tail_red ++;
                        cur ++;
                    }else if (nums[cur] == 2){
                        swap(nums[head_blue], nums[cur]);
                        head_blue = head_blue - 1;
                    }else
                        cur ++;
                }
            }
        };

----------------------------------------------------------------------------------------------------
Just one pass and beats 83.15% java solution and easy to understand

    public static void sortColors(int[] nums) {
		  int m=0,n=0,p=nums.length-1;
		  while(n<=p)
		   {
			   if(0==nums[n]){
				   int temp=0;
				   temp=nums[n];
				   nums[n]=nums[m];
				   nums[m]=temp;
				   m++;
				   n++;
			   }else if(2==nums[n]){
				   int temp=0;
				   temp=nums[p];
				   nums[p]=nums[n];
				   nums[n]=temp;
				   p--;
			   }else{
				   n++;
				   
			   }
 		   
		   }
	  }
	   


----------------------------------------------------------------------------------------------------
&#91;Extentions&#93; more clear explanation than previous posts!
First, Let us to solve a simpler problem,   for input like this

       Input array   =  [0, 1, 0, 1, 0, 0, 1, 1, 1, 0] 
We want the put all the '0' to the left while the '1' to the right.
       
       Output array =  [0, 0, 0, 0, 0, 1, 1, 1, 1, 1] 

How can you do this in only one pass ?

Here is a possible implementation:

    void segregate0and1(vector<int> arr)
    {
        int size=arr.size();
        /* Initialize left and right indexes */
        int left = 0, right = size-1;
     
        while (left < right)
        {
            /* Increment left index while we see 0 at left */
            while (arr[left] == 0 && left < right)
                left++;
     
            /* Decrement right index while we see 1 at right */
            while (arr[right] == 1 && left < right)
                right--;
     
            /* If left is smaller than right then there is a 1 at left
              and a 0 at right.  Exchange arr[left] and arr[right]*/
            if (left < right)
            {
                  swap(arr[left++], arr[right--]);
            }
        }
    }

Now let us solve the 3 color problem, it is just a easy extension based on the above problem.

The most important thing is to make sure you know that  to solve the above problem, we use 2 pointers.

Now this problem need 3 pointers.

              L0      array[0...L0-1]  all are 0
              L1      array[L0...L1-1]  all are 1
              unknown    array[L1...L2] 
              L2      array[L2+1...N]  all are 2

Based on the above definition, it is much more easy to understand the algorithm like this.

           L0 := 0; L1:= 0; L2 := N-1;
           while L1 <= L2 do
           Invariant: a[0..L0-1]=0 and a[L0..L1-1]=1 and a[L2+1..N]=2; a[L1..L2] are unknown.
           case a[L1] in
               0: swap a[L0] and a[L1]; L0++; L1++
               1: L1++
               2: swap a[L1] and a[L2];  L2--

The above index explanation can be viewed in this images.

L1 means mid   and     L2 means  Hi

![enter image description here][1]


Based on the above  explanation,  we get the final AC implementation like this 


    class Solution {
    public:
        void sortColors(vector<int>& nums) {
            int len=nums.size();
            if(len<=1)  return;
            int one=0, two=len-1, zero=0;
            while(one<=two){
                if(nums[one]==0)  swap(nums[one++], nums[zero++]);
                else if (nums[one]==2)  swap(nums[one], nums[two--]);
                else  one++;
            }
        }
    };

     
Thanks the posts from G4G 

[http://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/][2]



**UPDATE @ 2016/03/04**

How to solve the problem if there are K colors ?

**Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.**

We can use the previous position to store the count of all the K value, use the position K-1  to store the 
occurrence of the number K.

To distinguish from the recorded number, we use negative number to store the occurrence.

    class Solution{
    public:
        /**
         * @param colors: A list of integer
         * @param k: An integer
         * @return: nothing
         */
        void sortColors2(vector<int> &colors, int k) {
            for (int i = 0; i < colors.size(); ++i) {
                if (colors[i] > 0) {
                    int pos = colors[i] - 1;
                    if (colors[pos] <= 0) {  // Bucket exists.
                        --colors[pos];
                        colors[i] = 0;
                    }
                    else {  // Init a new bucket.
                        colors[i] = colors[pos];
                        colors[pos] = -1;
                        --i;
                    }
                }
            }
    
            for (int i = colors.size() - 1, pos = k - 1; pos >= 0; --pos) {
                while (colors[pos] < 0) {  // Reorder the color by count of each bucket.
                    ++colors[pos];
                    colors[i--] = pos + 1;
                }
            }
        }
    };

  [1]: http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DNF1.png
  [2]: http://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/

----------------------------------------------------------------------------------------------------
My Template for this kind of problem
public class Solution {
    public void sortColors(int[] nums) {
        int[] cand = {0, 1, 2};
        int start=0;
        for(int i=0;i<3;i++){
            while(start<nums.length && nums[start]==cand[i]) start++;
            for(int j=start;j<nums.length;j++){
                if(nums[j]==cand[i]){
                    swap(nums, j, start++);
                }
            }
        }
        return;
    }
    public void swap(int[] nums, int a, int b){
        int t = nums[a];
        nums[a] = nums[b];
        nums[b] = t;
    }
}


----------------------------------------------------------------------------------------------------
0ms and one-pass solution with c
    void sortColors(int* nums, int numsSize)
    {
	 int i = 0;
	int red = 0;
	int blue = numsSize - 1;
	while (i <= blue)
	{
		if (nums[i] == 0)
		{
			nums[i] = nums[red];
			nums[red] = 0;
			if (i == red)
				i++;
			red++;
		}
		else if (nums[i] == 2)
		{
			nums[i] = nums[blue];
			nums[blue] = 2;
			blue--;
		}
		else
		{
			i++;
		}
	}
    }

----------------------------------------------------------------------------------------------------
Java Single Pass
Use two pointers. One for the place to insert 0 ***(zero)*** and another for the place to insert 2 ***(two)***. 

Iterate through this array, if 0 is found, swap its value with ***zero***. if 2 is found, swap its value with ***two***. If 1 is found, go to the next position until it exceeds ***two*** or fall behind by ***zero***. 

    public class Solution {
        public void sortColors(int[] nums) {
            if (nums == null || nums.length == 0) return;
            int zero = 0, count = 0, two = nums.length - 1;
            while (count <= two && count >= zero) {
                while (count <= two && count >= zero) {
                    if (nums[count] == 0) {
                        swap(nums, count, zero);
                        zero++;
                    }
                    if (nums[count] == 2) {
                        swap(nums, count, two);
                        two--;
                    }
                    if (nums[count] == 1) break;
                }
                count++;
            }
        }
        
        private void swap(int[] nums, int i, int j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
        }
    }

----------------------------------------------------------------------------------------------------
Simple one pass solution
    public void sortColors(int[] nums) {
		int startIndex = 0;
		int endIndex = nums.length - 1;
		int temp,i =0;
		while(i < nums.length) {
			if (nums[i] == 0 && i != startIndex) {
				temp = nums[i];
				nums[i] = nums[startIndex];
				nums[startIndex++] = temp;
			} else if (nums[i] == 2 && i < endIndex) {
				temp = nums[i];
				nums[i] = nums[endIndex];
				nums[endIndex--] = temp;
			} else {
				i++;
			}
		}
	}

----------------------------------------------------------------------------------------------------
