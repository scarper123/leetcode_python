Java O(n^2) Time O(1) Space
public static int triangleNumber(int[] A) {
    Arrays.sort(A);
    int count = 0, n = A.length;
    for (int i=n-1;i>=2;i--) {
        int l = 0, r = i-1;
        while (l < r) {
            if (A[l] + A[r] > A[i]) {
                count += r-l;
                r--;
            }
            else l++;
        }
    }
    return count;
}


----------------------------------------------------------------------------------------------------
Java Solution, 3 pointers
public class Solution {
    public int triangleNumber(int[] nums) {
        int result = 0;
        if (nums.length < 3) return result;
        
        Arrays.sort(nums);

        for (int i = 2; i < nums.length; i++) {
            int left = 0, right = i - 1;
            while (left < right) {
                if (nums[left] + nums[right] > nums[i]) {
                    result += (right - left);
                    right--;
                }
                else {
                    left++;
                }
            }
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Can this problem  possibly be solved by python?
<p>O(n^2) python solution got TLE.<br/>
I assume no faster solutions exist, right?</p>


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def triangleNumber(self, A):
    C = collections.Counter(A)
    C.pop(0, None)
    B = sorted(C.keys())
    P = [0]
    for x in B:
        P.append(P[-1] + C[x])
        
    ans = 0
    for j, v in enumerate(B):
        k = len(B) - 1
        i = j
        while 0 <= i <= j <= k:
            while k > j and B[i] + B[j] <= B[k]:
                k -= 1
            if i < j:
                ans += C[B[i]] * C[B[j]] * (P[k+1] - P[j+1])
                ans += C[B[i]] * C[B[j]] * (C[B[j]] - 1) / 2
            else:
                ans += C[B[i]] * (C[B[i]] - 1) / 2 * (P[k+1] - P[j+1])
                ans += C[B[i]] * (C[B[i]] - 1) * (C[B[i]] - 2) / 6
            i -= 1
    return ans


----------------------------------------------------------------------------------------------------
Solution Similar to Leetcode 259. 3Sum Smaller
public int triangleNumber(int[] nums) {
		if (nums == null || nums.length <= 2) {
			return 0;
		}
		Arrays.sort(nums);
		int count = 0;
		
		for (int i = 0; i < nums.length; i++) {
			int left = 0, right = i-1;
			while (left < right) {
				if (nums[left] + nums[right] > nums[i]) {
					count += right - left;
					right--;
				} else {
					left++;
				}
			}
		}
		
		return count;
    }


----------------------------------------------------------------------------------------------------
C++ Clean Code
class Solution {
public:
    int triangleNumber(vector<int>& a) {
        int res = 0;
        sort(a.begin(), a.end());
        reverse(a.begin(), a.end());    // a is decreasing
        for (int i = 0; i + 2 < a.size(); i++) {
            for (int j = i + 1, k = a.size() - 1; j < k; j++) {
                while (j < k && a[j] + a[k] <= a[i]) {
                    k--;
                }
                res += k - j;
            }
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Python O(n^2)
class Solution(object):
    def triangleNumber(self, nums):
        nums.sort()
        nums = nums[::-1]
        
        sol = 0
        
        for i in range(len(nums) - 2):
            k = len(nums) - 1
            for j in range(i + 1, k):
                if j >= k:
                    break
                diff = nums[i] - nums[j]
                while nums[k] <= diff and k > j:
                    k -= 1
                sol += (k - j)
        return sol


----------------------------------------------------------------------------------------------------
O(N^2) solution for C++ &amp; Python
class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums, count, n = sorted(nums, reverse=1), 0, len(nums)
        for i in xrange(n):
            j, k = i + 1, n - 1
            while j < k:
                # any value x between j...k will satisfy nums[j] + nums[x] > nums[i]
                # and because nums[i] > nums[j] > nums[x] >= 0, they will always satisfy
                # nums[i] + nums[x] > nums[j] and nums[i] + nums[j] > nums[x]
                if nums[j] + nums[k] > nums[i]:
                    count += k - j
                    j += 1
                else:
                    k -= 1
        return count

# 243 / 243 test cases passed.
# Status: Accepted
# Runtime: 1855 ms


----------------------------------------------------------------------------------------------------
Java O(n^2) solution, similar to 3 sum problem
    public int triangleNumber(int[] nums) {
        int n = nums.length;
        if (n < 3) return 0;
        Arrays.sort(nums);
        int ans = 0;
        for (int i = 0; i < nums.length-2; i++) {
            for (int j = i+1, k = i+2; k < nums.length; k++) {
                while (j < k && nums[i]+nums[j] <= nums[k]) j++;
                ans += k-j;
            }
        }
        return ans;
    }


----------------------------------------------------------------------------------------------------
Python O(n^2) solution, 526 ms
def triangleNumber(self, nums):
    nums = sorted(nums)
    total = 0
    for i in range(len(nums)-2):
        if nums[i] == 0:
            continue
        end = i + 2
        for j in range(i+1, len(nums)-1):
            while end < len(nums) and nums[end] < (nums[i] + nums[j]):
                end += 1
            total += end - j - 1
    return total

----------------------------------------------------------------------------------------------------
Java backtrack
