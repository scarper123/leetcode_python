Java Solution, Tree Traversal
public class Solution {
    public String tree2str(TreeNode t) {
        if (t == null) return "";
        
        String result = t.val + "";
        
        String left = tree2str(t.left);
        String right = tree2str(t.right);
        
        if (left == "" && right == "") return result;
        if (left == "") return result + "()" + "(" + right + ")";
        if (right == "") return result + "(" + left + ")";
        return result + "(" + left + ")" + "(" + right + ")";
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def tree2str(self, t):
    if not t: return ''
    left = '({})'.format(self.tree2str(t.left)) if (t.left or t.right) else ''
    right = '({})'.format(self.tree2str(t.right)) if t.right else ''
    return '{}{}{}'.format(t.val, left, right)


----------------------------------------------------------------------------------------------------
Java simple recursion
 public String tree2str(TreeNode t) {
        StringBuilder sb = new StringBuilder();
        helper(sb,t);
        return sb.toString();
    }
    public void helper(StringBuilder sb,TreeNode t){
        if(t!=null){
            sb.append(t.val);
            if(t.left!=null||t.right!=null){
                sb.append("(");
                helper(sb,t.left);
                sb.append(")");
                if(t.right!=null){
                    sb.append("(");
                helper(sb,t.right);
                sb.append(")");
                }
            }
        }
    }


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; 1 liner
class Solution {
    public String tree2str(TreeNode t) {
        if (t == null) return "";
        StringBuilder sb = new StringBuilder(t.val + "");

        if (t.left != null) {
            sb.append("(" + tree2str(t.left) + ")");
        }
        else if (t.right != null) {
            sb.append("()");
        }

        if (t.right != null) {
            sb.append("(" + tree2str(t.right) + ")");
        }

        return sb.toString();
    }
}


----------------------------------------------------------------------------------------------------
Easy C++ Solution
    string tree2str(TreeNode* t) {
        if (t == NULL) return "";
        string s = to_string(t->val);
        if (t->left) s += '(' + tree2str(t->left) + ')';
        else if (t->right) s += "()";
        if (t->right) s += '(' + tree2str(t->right) + ')';
        return s;
    }


----------------------------------------------------------------------------------------------------
Python Simple Solution
class Solution(object):
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """
        if not t:
            return ""
        res = ""
        left = self.tree2str(t.left)
        right = self.tree2str(t.right)
        if left or right:
            res += "(%s)" % left
        if right:
            res += "(%s)" % right
        return str(t.val) + res


----------------------------------------------------------------------------------------------------
Java recursion StringBuilder
public static String tree2str(TreeNode t) {
        if(t == null) return "";
        return tree2str1(t).toString();
    }

    public static StringBuilder tree2str1(TreeNode t) {
        if(t == null) return null;

        StringBuilder sb = new StringBuilder();
        sb.append(t.val);

        StringBuilder left = tree2str1(t.left);
        StringBuilder right = tree2str1(t.right);

        if(right == null && left == null) return sb;
        sb.append("(").append(left == null ? "" : left).append(")");
        if(right != null) sb.append("(").append(right).append(")");
        return sb;
    }



----------------------------------------------------------------------------------------------------
Very Straightforward Easy solution
    public string Tree2str(TreeNode t) {
        if(t == null) return "";
        if(t.left == null && t.right == null) return t.val.ToString();
        string s = t.val.ToString() + "(" + Tree2str(t.left) + ")";
        s = t.right == null ? s : s + "(" + Tree2str(t.right) + ")";
        return s;
    }

----------------------------------------------------------------------------------------------------
Simple Java Preorder traversal solution
public String tree2str(TreeNode t) {
            if (t == null) {
                return "";
            }
            StringBuilder sb = new StringBuilder();
            preorder(t, sb);
            return sb.toString();
        }

private void preorder(TreeNode root, StringBuilder sb) {
            if (root == null) {
                return;
            }
            sb.append(root.val);
            if (root.left != null) {
                sb.append("(");
                preorder(root.left, sb);
                sb.append(")");
            }
            if (root.right != null) {
                if (root.left == null) {
                    sb.append("()");
                }
                sb.append("(");
                preorder(root.right, sb);
                sb.append(")");
            }
        }


----------------------------------------------------------------------------------------------------
Python recursion
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """
        def preorder(root):
            if root is None:
                return ""
            s=str(root.val)
            l=preorder(root.left)
            r=preorder(root.right)
            if r=="" and l=="":
                return s 
            elif l=="":
                s+="()"+"("+r+")"
            elif r=="":                
                s+="("+l+")"
            else :   
                s+="("+l+")"+"("+r+")"
            return s
        return preorder(t)


----------------------------------------------------------------------------------------------------
Java easy pre-traversal solution
public String preTraverse(TreeNode t, String ret){
    
    //simply do nothing and return string
    if(t==null) return ret;
    
    //print current node first 
    ret = ret + t.val;
    
    //if left node is found, print it and surround it with '()'
    if(t.left!=null)
        ret = preTraverse(t.left, ret + "(" ) + ")";
    
    //note that left node may be null with right node filled. Then add empty '()'
    else if (t.left==null && t.right!=null)
        ret = ret+"()";
    
    //if left node is found, print it and surround it with '()'
    if(t.right!=null)
        ret = preTraverse(t.right, ret + "(") +")";
   
    //no need to add '()' for null right node
    return ret;
}

----------------------------------------------------------------------------------------------------
Meaning of one to one relationship
<p><strong>The null node needs to be represented by empty parenthesis pair &#34;()&#34;. And you need to omit all the empty parenthesis pairs that don&#39;t affect the one-to-one mapping relationship between the string and the original binary tree</strong> . Can some one explain the meaning of one to one relationship ? I couldn&#39;t understand the concepts even after reading the example given in the question.</p>


----------------------------------------------------------------------------------------------------
Confusion about the binary tree interface of this question
<p>How can we know the binary tree interface? Or what methods does TreeNode have?</p>
<p>For instance, if t is an object/instance of TreeNode, and we want to check if t is root, then which version below is correct?</p>
<p>t.isRoot()<br/>
t.is_root()<br/>
t.root()<br/>
...</p>
<p>and how to access value of t?</p>
<p>t.get_value()<br/>
t.value()<br/>
t.val<br/>
...</p>
<p>which one is correct?</p>


----------------------------------------------------------------------------------------------------
Easy to understand recursive solution
public String tree2str(TreeNode t) {
        if (t == null) 
        	return "";
        
        if (t.left == null && t.right == null) {
        	return String.valueOf(t.val);
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append(t.val);
        sb.append("(").append(tree2str(t.left)).append(")");
        if (t.right != null) {
        	sb.append("(").append(tree2str(t.right)).append(")");
        }
        
        return sb.toString();
    }


----------------------------------------------------------------------------------------------------
c# preorder traversal
public class Solution {
    public string Tree2str(TreeNode t) {
        if(t==null) return "";
        return Dfs(t);
    }
    
    public string Dfs(TreeNode t){
        var sb = new StringBuilder();
        sb.Append(t.val);
        if(t.left!=null){
            sb.Append('(');
            sb.Append(Dfs(t.left));
            sb.Append(')');
        }
        if(t.right!=null){
            if(t.left == null){
                sb.Append("()");
            }
            
            sb.Append('(');
            sb.Append(Dfs(t.right));
            sb.Append(')');
        }
        
        return sb.ToString();
    }
}


----------------------------------------------------------------------------------------------------
Swift solution - Recursive
class Solution {
    func tree2str(_ t: TreeNode?) -> String {
        guard let t = t else {
            return ""
        }
        
        let left = tree2str(t.left)
        let right = tree2str(t.right)
        var result = ""

        if left == "" && right == "" {
            result = String(t.val)
        } else if left == "" {
            result = String(t.val) + "()" + "(" + right + ")"
        } else if right == "" {
            result = String(t.val) + "(" + left + ")"
        } else {
            result = String(t.val) + "(" + left + ")" + "(" + right + ")"
        }
        
        return result
    }
}


----------------------------------------------------------------------------------------------------
Java Simple Solution
public class Solution {
    public String tree2str(TreeNode t) {
        if (t == null) 
            return "";
        
        String left = tree2str(t.left);
        String right = tree2str(t.right);
        
        if (right.length() > 0)
            return t.val + "(" + left + ")(" + right + ")"; 
        else if (left.length() > 0)
            return t.val + "(" + left + ")"; 
        else
            return t.val + "";
    }
}


----------------------------------------------------------------------------------------------------
Intuitive Javascript Solution
var tree2str = function(t) {
    if (!t) return '';

    const left = tree2str(t.left);
    const right = tree2str(t.right);
    
    // omit printing empty right node in the string
    if (right) return `${t.val}(${left})(${right})`;
    else if (left) return `${t.val}(${left})`;
    else return `${t.val}`;
};


----------------------------------------------------------------------------------------------------
Concise JavaScript solution
var tree2str = function(t) {
    if (!t) return '';
    const left = tree2str(t.left);
    const right = tree2str(t.right);
    return t.val + (left || right ? `(${left})` : '') + (right ? `(${right})` : '');
};


----------------------------------------------------------------------------------------------------
