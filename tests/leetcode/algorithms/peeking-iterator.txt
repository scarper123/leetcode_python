My pretty simple code to solve it
    class Solution {
    public:
        int findMin(vector<int> &num) {
            int lo = 0;
            int hi = num.size() - 1;
            int mid = 0;
            
            while(lo < hi) {
                mid = lo + (hi - lo) / 2;
                
                if (num[mid] > num[hi]) {
                    lo = mid + 1;
                }
                else if (num[mid] < num[hi]) {
                    hi = mid;
                }
                else { // when num[mid] and num[hi] are same
                    hi--;
                }
            }
            return num[lo];
        }
    };

When num[mid] == num[hi], we couldn't sure the position of minimum in mid's left or right, so just let upper bound reduce one. 

----------------------------------------------------------------------------------------------------
One simple and clear method with O(1) space and worst O(n) time
    class Solution {
    public:
        int findMin(vector<int> &num) {
            if(num.empty())
                return 0;
            int i=0,j=num.size()-1;
            while(i<j)
            {
                int mid=(i+j)/2;
                if(num[j]<num[mid]){
                    i=mid+1;
                }
                else if(num[mid]<num[j]){
                    j=mid;
                }
                else{//num[mid]==num[j]
                    if(num[i]==num[mid]){//linear complexity
                        i++;
                        j--;
                    }
                    else
                        j=mid;
                }
            }
            return num[j];
        }
    };

----------------------------------------------------------------------------------------------------
Super simple and clean Java, binary search.
    
    public int findMin(int[] nums) {
    	 int l = 0, r = nums.length-1;
    	 while (l < r) {
    		 int mid = (l + r) / 2;
    		 if (nums[mid] < nums[r]) {
    			 r = mid;
    		 } else if (nums[mid] > nums[r]){
    			 l = mid + 1;
    		 } else {  
    			 r--;  //nums[mid]=nums[r] no idea, but we can eliminate nums[r];
    		 }
    	 }
    	 return nums[l];
    }


----------------------------------------------------------------------------------------------------
Only two more lines code on top of the solution for Part I
    public class Solution {
        public int findMin(int[] nums) {
            if (nums == null || nums.length == 0) {
                return Integer.MIN_VALUE;
            }
            
            int start = 0, end = nums.length - 1;
            
            //only need to add the following while loop on top of the solution 
            //for Part I
            //if two line segments have overlap, remove the overlap.
            //so, the problem can be solved as Part I
            while (nums[end] == nums[start] && end > start) {
                end--;
            }
            
            while (start < end) {
                //if the linear monotonically increasing in [start, end]
                if (nums[start] < nums[end]) {
                    return nums[start];
                }
                
                int mid = start + (end - start) / 2;
                if (nums[mid] >= nums[start]) {
                    start = mid + 1;
                }
                else {
                    end = mid;
                }
            }
            
            return nums[start];
        }
    }

----------------------------------------------------------------------------------------------------
My C++ solution 24ms is there any better solution ?
    class Solution {
    public:
    int findMin(vector<int> &num) {
        int start = 0;
        int end = num.size()-1;
        int mid;
        while(start<end){
            if(num[start]<num[end])
            break;
            mid = start+(end-start)/2;
            if(num[mid]>num[end]){
                start = mid+1;
            }
            else if(num[mid]==num[end]){
                start++;
                end--;
            }
            else
            end= mid;
        }
        return num[start];
     }
    };

----------------------------------------------------------------------------------------------------
8ms 13-lines C++ Solution
This problem is more or less the same as [Find Minimum in Rotated Sorted Array][1]. And one key difference is as stated in the solution tag. That is, due to duplicates, we may not be able to throw one half sometimes. And in this case, we could just apply linear search and the time complexity will become `O(n)`.

The idea to solve this problem is still to use invariants. We set `l` to be the left pointer and `r` to be the right pointer. Since duplicates exist, the invatiant is `nums[l] >= nums[r]` (if it does not hold, then `nums[l]` will simply be the minimum). We then begin binary search by comparing `nums[l], nums[r]` with `nums[mid]`.

 1. If `nums[l] = nums[r] = nums[mid]`, simply apply linear search within `nums[l..r]`.
 2. If `nums[mid] <= nums[r]`, then the mininum cannot appear right to `mid`, so set `r = mid`;
 3. If `nums[mid] > nums[r]`, then `mid` is in the first larger half and `r` is in the second smaller half, so the minimum is to the right of `mid`: set `l = mid + 1`.

The code is as follows.

    class Solution {
    public:
        int findMin(vector<int>& nums) {
            int l = 0, r = nums.size() - 1;
            while (nums[l] >= nums[r]) {
                int mid = (l & r) + ((l ^ r) >> 1);
                if (nums[l] == nums[r] && nums[mid] == nums[l])
                    return findMinLinear(nums, l, r);
                if (nums[mid] <= nums[r]) r = mid;
                else l = mid + 1;
            }
            return nums[l];
        } 
    private:
        int findMinLinear(vector<int>& nums, int l, int r) {
            int minnum = nums[l];
            for (int p = l + 1; p <= r; p++)
                minnum = min(minnum, nums[p]);
            return minnum;
        }
    };

[1]: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

----------------------------------------------------------------------------------------------------
Rough sketch of proof why O(lg N) is impossible
Refer to this image:  ![array config][1]

Big version here: http://postimg.org/image/asbbeo2c9/

There are generally 3 types of array config, assuming sorted from smallest to biggest. x-axis is the array index, y-axis is the element value.

For non-duplicate case, you may use `num[mid] > num[end]` to distinguish (1)&(2) from (3), and thus safely eliminate half of the array, at each iteration.


For dup case, it is not as straightforward (impossible?)  to distinguish between (1), (2) and (3), and hence eliminate half of the array by doing O(1) comparison, at each iteration.


  [1]: http://s28.postimg.org/asbbeo2c9/Photo_16_11_14_2_38_34_pm.jpg

----------------------------------------------------------------------------------------------------
My accepted java code
The runtime is O(n). I don't think it can be faster

    public int findMin(int[] num) {
            if(num == null || num.length == 0) {
                return -1; // should throw an exception, not sure if leetcode supports it
            }
            int l = 0;
            int r = num.length-1;
            while(l < r) {
                if(num[l] < num[r]) {
                    return num[l];
                }
                int m = l + (r-l)/2;
                if(num[l] > num[m]) {
                    r = m;
                } else if(num[l] < num[m]) {
                    l = m+1;
                } else { // num[l] == num[m]
                    if(num[l] == num[r]) {
                        l++;
                        r--;
                    } else { // only the num[l] == num[m] >  num[r] case left
                        l = m+1;
                    }
                }
            }
            return num[l];
        }

----------------------------------------------------------------------------------------------------
Python solution. Worst case O(N)

    def findMin(self, nums):
        beg = 0
        end = len(nums)-1
        while beg <= end:
            while beg < end and nums[beg] == nums[beg + 1]:
                beg += 1
            while end > beg and nums[end] == nums[end - 1]:
                end -= 1
            if beg == end:
                return nums[beg]
            
            mid = (beg+end)/2
            if nums[mid] > nums[end]:
                beg = mid + 1
            else:
                end = mid
            
                
        return nums[beg]

----------------------------------------------------------------------------------------------------
Test data is really weak
Just `return min(num)` is accepted with 63ms, which ranks 30% percentile of all python codes.

----------------------------------------------------------------------------------------------------
Solution in C++, well-explained
practical

----------------------------------------------------------------------------------------------------
Accepted solution and time complexity
