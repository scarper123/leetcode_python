Java solution
	public int findNthDigit(int n) {
		int len = 1;
		long count = 9;
		int start = 1;

		while (n > len * count) {
			n -= len * count;
			len += 1;
			count *= 10;
			start *= 10;
		}

		start += (n - 1) / len;
		String s = Integer.toString(start);
		return Character.getNumericValue(s.charAt((n - 1) % len));
	}


----------------------------------------------------------------------------------------------------
0ms C++ Solution with Detail-Explanation
class Solution 
{
    // date: 2016-09-18     location: Vista Del Lago III Apartments
public:
    int findNthDigit(int n) 
    {
        // step 1. calculate how many digits the number has.
        long base = 9, digits = 1;
        while (n - base * digits > 0)
        {
            n -= base * digits;
            base *= 10;
            digits ++;
        }

        // step 2. calculate what the number is.
        int index = n % digits;
        if (index == 0)
            index = digits;
        long num = 1;
        for (int i = 1; i < digits; i ++)
            num *= 10;
        num += (index == digits) ? n / digits - 1 : n / digits;;

        // step 3. find out which digit in the number is we wanted.
        for (int i = index; i < digits; i ++)
            num /= 10;
        return num % 10;
    }
};


----------------------------------------------------------------------------------------------------
Short Python+Java
public int findNthDigit(int n) {
    n -= 1;
    int digits = 1, first = 1;
    while (n / 9 / first / digits >= 1) {
        n -= 9 * first * digits;
        digits++;
        first *= 10;
    }
    return (first + n/digits + "").charAt(n%digits) - '0';
}


----------------------------------------------------------------------------------------------------
Sharing my thinking process
<p>Idea:</p>
<p>The first idea is: the result will only be within 0~9, can we find a cycle?</p>
<p>For input 1 to 20, the result is:</p>
<p>1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5</p>
<p>No cycle found. While we can find that digits matter! The result sequence should be like:</p>
<p>1~9: 1*9=9 in total</p>
<p>10~99: 2*90=180 in total</p>
<p>100~999: 3*900=2700 in total</p>
<p>Then, 4<em>9000, 5</em>90000, k<em>9</em>10^k</p>
<p>For input 12345, we have 9+180+2700&lt;12345&lt;9+180+2700+36000, so the corresponding number is 1000+.</p>
<p>12345-9-180-2700=9456-1=9455</p>
<p>9455/4 = 2363+1000=3363, 9455%4=3, so the result should be 3. For 12346: 3, for 12347: 3, for 12348: 6, for 12349: 4</p>
<p>336(12345 start from the next 3)3</p>
<p>(12346)3(12347)3(12348)6(12349)4</p>


----------------------------------------------------------------------------------------------------
4-liner in Python, and complexity analysis
class Solution(object):
    def findNthDigit(self, n):
        start, size = 1, 1
        while n > size:
            n, start = n - size, start + 1
            size = len(str(start))
        return int(str(start)[n-1])


----------------------------------------------------------------------------------------------------
Intuitive solution with comments
We are tightening the range of our target gradually.
1. Is this number that has nth digit between 100~999, 1000~9999 or some other range?
2. What is this number?
3. Within thin number, which digit is the nth digit?

number of the digits at each "level"
1-9: 9 digits
10-99 : 90 * 2 = 180 digits 
100-999 : 900 * 3 = 2700 digits
1000-9999 : 9000 * 4 = 36000 digits
....
*/
public class Solution {
    public int findNthDigit(int n) {
        if(n < 1) return 0;
        if(n < 10) return n;
        int counter = 1;  //stores the level number
        int base = 0;      //stores the biggest number from previous level
        while(n > (9 * Math.pow(10,counter -1) * (counter))){
            base += 9 * Math.pow(10,counter -1);
            n -= (9 * Math.pow(10,counter -1) * (counter));
            counter++;
        }
        //target is the actual number that has nth digit
        int target = base + ((n + counter - 1) / counter);  //to get the ceiling of n / counter
        int offset = n % counter;
        offset = (offset == 0) ? 0:counter - offset;
        for(int i = 0; i < offset; i++){
            target = target / 10;
        }
        return target % 10;
    }
}

----------------------------------------------------------------------------------------------------
Share my 0ms C++ solution with explanation
class Solution {
public:
    int find(int n, int p)
    {
        if(n > 9 * p * pow(10, p - 1))
        {
            // Step 1
            return find(n - 9 * p * pow(10, p - 1), p + 1);
        }else{
            // Step 2
            int x = (n - 1) / p + pow(10, p - 1);
            int k = (n - 1) % p;
            // Step 3
            return (x / (int) pow(10, p - k - 1)) % 10;
        }
    }
    
    int findNthDigit(int n) {
        return find (n, 1);
    }
};


----------------------------------------------------------------------------------------------------
My C++ short and clean answer with explanation
    int findNthDigit(int n) {
        long long multiplier = 9,digits = 1,begin = 1;
        while(n>multiplier*digits){
            n -= multiplier*digits++;
            multiplier *= 10;}
        int after = (n-1)/digits, location = (n-1)%digits;
        begin = pow(10,(digits-1));
        string a= (to_string(begin+after));
        a = a[location];
        return stoi(a);


----------------------------------------------------------------------------------------------------
Just explain, no code
<p>sequence  1  2  3  4  5  6  7  8  9  1    0   1    1   1     2     1   3   1     4     1     5     1     6<br/>
Nth digital 1  2  3  4  5  6  7  8  9 10 11  12  13  14  15  16  17  18  19   20   21  22    23</p>
<p>I list sequence 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16<br/>
blow the sequence is the Nth digital, like the 11th digital is 0, 12 is 1, 13 is 1, 14 is 1, 15 is 2, 16 is 1, 17 is 3.........</p>
<p>Sot ehe regular is very oberviously now:<br/>
1-------9       9*1 = 9 digits<br/>
10-----99     90 *2 = 180 digits<br/>
100---999    900 * 3 = 2700 digits</p>
<p>Now, for example gave N = 1000, then 1000-9-180 = 811, it means the 811th digit local in &#91;100, 999&#93;, and we know each number like 100 has three digit, so 811 / 3 = 270,</p>
<p>Then, we know the 270th number in &#91;100, 999&#93;, is 270th + 100 (start from 100) = 370.</p>
<p>370 still has three digit, which one is the answer? 3, 7, 0</p>
<p>811 % 3 = 1, so the first one is the answer, so return 3.</p>


----------------------------------------------------------------------------------------------------
java 5ms solution beats 94.03%
