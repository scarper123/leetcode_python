Java - Greedy solution - O(flowerbed) - beats 100%
public class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        for(int i = 0; i < flowerbed.length && count < n; i++) {
            if(flowerbed[i] == 0) {
	     //get next and prev flower bed slot values. If i lies at the ends the next and prev are considered as 0. 
               int next = (i == flowerbed.length - 1) ? 0 : flowerbed[i + 1]; 
               int prev = (i == 0) ? 0 : flowerbed[i - 1];
               if(next == 0 && prev == 0) {
                   flowerbed[i] = 1;
                   count++;
               }
            }
        }
        
        return count == n;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def canPlaceFlowers(self, A, N):
    for i, x in enumerate(A):
        if (not x and (i == 0 or A[i-1] == 0) 
                and (i == len(A)-1 or A[i+1] == 0)):
            N -= 1
            A[i] = 1
    return N <= 0


----------------------------------------------------------------------------------------------------
&#91;Java&#93; Very easy solution
public boolean canPlaceFlowers(int[] flowerbed, int n) {
    int count = 1;
    int result = 0;
    for(int i=0; i<flowerbed.length; i++) {
        if(flowerbed[i] == 0) {
            count++;
        }else {
            result += (count-1)/2;
            count = 0;
        }
    }
    if(count != 0) result += count/2;
    return result>=n;
}

----------------------------------------------------------------------------------------------------
&#91;C++&#93;&#91;Java&#93; Clean Code
public class Solution {
    public boolean canPlaceFlowers(int[] bed, int n) {
        for (int i = 0; i < bed.length; i++) {
            if (bed[i] == 0 && (i == 0 || bed[i - 1] == 0) && (i == bed.length - 1 || bed[i + 1] == 0)) {
                bed[i] = 1;
                n--;
            }
        }
        return n <= 0;        
    }
}


----------------------------------------------------------------------------------------------------
simplest c++ code
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        flowerbed.insert(flowerbed.begin(),0);
        flowerbed.push_back(0);
        for(int i = 1; i < flowerbed.size()-1; ++i)
        {
            if(flowerbed[i-1] + flowerbed[i] + flowerbed[i+1] == 0)
            {
                --n;
                ++i;
            }
                
        }
        return n <=0;
    }
};


----------------------------------------------------------------------------------------------------
Short Python
class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        """
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """
        have = [-2] + [i for i, x in enumerate(flowerbed) if x] + [len(flowerbed) + 1]
        return sum(abs(have[i] - have[i-1] - 2) // 2 for i in range(1, len(have))) >= n


----------------------------------------------------------------------------------------------------
simple count zero solution, python &amp; c++
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int zero = 1;
        for ( int slot : flowerbed ) {
            if ( 0 == slot ) {
                ++zero;
            } else {
                n -= zero ? (zero - 1) / 2 : 0;  // use (zero - 1) / 2 if you know -1/2 = 0 in c++
                zero = 0;
            }
        }
        n -= zero / 2;
        return n <= 0;
    }
};


----------------------------------------------------------------------------------------------------
Java short solution, beat 100%, 12ms
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int max=0;
        for (int i = 0; i < flowerbed.length; i++) {
        	if((i==0||flowerbed[i-1]==0)&&flowerbed[i]==0&&(i+1==flowerbed.length||flowerbed[i+1]==0)){
    			flowerbed[i]=1;
    			max++;
        	}
	}
        return  n<=max;
    }


----------------------------------------------------------------------------------------------------
Java DP solution for reference
//dp
public boolean canPlaceFlowers(int[] flowerbed, int n) {
    //dp[i][j]: can put j flowers in first i place, i, j starting from 1
    //dp[i][j] = 
    //          dp[i-1][j] || dp[i-2][j-1], if flower[i] == 0 
    //          dp[i-2][j], if flower[i] == 1
    
    //nothing to plant
    if (n == 0) {
        return true; 
    } 
    
    //no place to plant
    if (flowerbed.length == 0) {
        return false;
    }
    
    boolean[][] dp = new boolean[3][n+1];
    dp[0][0] = true;
    
    //init: first j flowers put into non-space
    for (int j = 1; j <= n; j++) {
        dp[0][j] = false;
    }
    
    //init: first j flowers put into first space
    for (int j = 1; j <= n; j++) {
        dp[1][j] = j == 1 && flowerbed[j-1] == 0;
    }
    
    //init: no flowers put into first i space
    for (int i = 1; i < 3; i++) {
        dp[i][0] = true;
    }
    
    //dp
    for (int i = 2; i <= flowerbed.length; i++) {
        for (int j = 1; j <= n; j++) {
            if (flowerbed[i-1] == 0) {
                dp[i%3][j] = dp[(i-1)%3][j] || dp[(i-2)%3][j-1] && flowerbed[i-2] == 0;
            } else {
                dp[i%3][j] = dp[(i-2)%3][j];
            }
            
            //System.out.println(i + ":" + j + ": " + dp[i%3][j]);
            
        }
    }
    
    return dp[flowerbed.length % 3][n];
}

----------------------------------------------------------------------------------------------------
Java easy come up with idea
public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(n==0) return true;
        if((flowerbed.length/2)+1<n) return false;
        if(flowerbed.length==1&&flowerbed[0]==1) return false;
        if(flowerbed.length==1&&flowerbed[0]==0&&n==1) return true;
        for(int i=0;i<flowerbed.length;i++){
            if(i==0&&flowerbed[0]==0){
                if(flowerbed[1]==0){
                    flowerbed[i]=1;
                    n--;
                }
                continue;
            }
            if(flowerbed[i]==1) continue;
            if(flowerbed[i]==0&&flowerbed[i-1]==0){
                if((i+1==flowerbed.length)||(flowerbed[i+1]==0)){
                    flowerbed[i]=1;
                    n--;
                }

            }
        }
        return n<=0;
    }


----------------------------------------------------------------------------------------------------
Java Easy Understand Solution
public boolean canPlaceFlowers(int[] flowerbed, int n) {

        if (flowerbed.length == 0)
            return false;

        int maxPlant = 0;

        if (flowerbed.length == 1) {

            maxPlant = flowerbed[0] == 0 ? 1 : 0;
        } else {


            for (int i = 0; i < flowerbed.length; i++) {

                if (i == 0) {
                    if (flowerbed[i] == 0 && flowerbed[i + 1] == 0) {
                        maxPlant++;
                        flowerbed[i] = 1;
                    }
                } else if (i > 0 && i < flowerbed.length - 1) {


                    if (flowerbed[i] == 0 && flowerbed[i - 1] == 0 && flowerbed[i + 1] == 0) {
                        maxPlant++;
                        flowerbed[i] = 1;
                    }


                } else {

                    if (flowerbed[i] == 0 && flowerbed[i - 1] == 0) {
                        maxPlant++;
                        flowerbed[i] = 1;
                    }

                }
            }
        }

        return maxPlant >= n;
    }


----------------------------------------------------------------------------------------------------
Python solution, count number of Zero between one
    def canPlaceFlowers(self, A, n):
        """
        :type A: List[int]
        :type n: int
        :rtype: bool
        """                
        m=len(A)
        if n==0: return True
        cnt=0
        start=-1
        for i in xrange(m):
            if A[i]==1:
                if start<0:
                    x=i-start-1
                else:
                    x=i-start-1-1
                cnt+=x//2
                start=i
        if start<0:
            cnt+=(m-start)//2
        else:
            cnt+=(m-start-1)//2
        return cnt>=n


----------------------------------------------------------------------------------------------------
Swift solution
class Solution {
    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {
        if flowerbed.count == 0 {
            return false
        }
        
        let count = flowerbed.count
        var preZero = flowerbed[0] == 0
        var canPlant = 0
        
        for i in 0..<count {
            if flowerbed[i] == 0 {
                if preZero && (i == count - 1 || flowerbed[i + 1] == 0) {
                    canPlant += 1
                    preZero = false
                } else {
                    preZero = true
                }
            } else {
                preZero = false
            }
        }
        
        return n <= canPlant
    }
}


----------------------------------------------------------------------------------------------------
A straightforward solution with counting
    int size = flowerbed.size();
    int sum = 0;
    int start = -1;     

    for (int i = 0; i < size; ++i)
    {
        if (flowerbed[i] == 1)
        {
            if (i - start > 2)
                sum += ceil((i - start - 2) / 2.0);

            start = i + 1;
        }
    }
    
    if (start < size)
        sum += ceil((size - start - 1) / 2.0);
    
    return sum >= n;
}


----------------------------------------------------------------------------------------------------
Short JavaScript O(n) solution using join, split, and reduce
var canPlaceFlowers = function(flowerbed, n) {
    const zeroes = flowerbed.join('').split('1');
    return zeroes.reduce((sum, p, i) => {
        const l = i === 0, r = i === zeroes.length - 1, len = p.length;
        if (l | r) return sum + (len + len % 2 * Math.pow(-1, l ^ r)) / 2;
        return sum + ((len || 2) - len % 2 - !(len % 2) * 2) / 2;
    }, 0) >= n;
};


----------------------------------------------------------------------------------------------------
O(n) single pass traverse flowerbed java solution
    if(flowerbed.length==0) return false;
    int i = 0;
    
    while(n>0 && i<flowerbed.length){
        
        //try place first flower on flowerbed[0]
        if(i==0 && flowerbed[0]==0 && (flowerbed.length==1 || flowerbed[1]==0)){
            flowerbed[i] = 1;
            i+=2;
            n--;
        }
        
        //if previous plot, this plot and next plot is empty, plant flower 
        //take care of no left / right plots
        else if (i>0 && flowerbed[i-1]==0 && flowerbed[i]==0 && (i==flowerbed.length-1 || flowerbed[i+1]==0)){
            flowerbed[i] = 1;
            i+=2;
            n--;
        }
        
        else i++;
    }
    
    if(n>0) return false; //if there are flowers left
    else return true;
}

----------------------------------------------------------------------------------------------------
&#91;C#&#93; Simple count and caculation, with explain
    public bool CanPlaceFlowers(int[] flowerbed, int n) {
        int canPlaceCount = 0;
        
        // left-end sealed or not
        bool leftF = false;
        int emptyCount = 0;
        // scan the flowerbed from left to right
        foreach(var f in flowerbed)
        {
            if(f != 0) // planted slot, and implicit right sealed.
            {
                if(leftF == false) leftF = true; // seal left-end for next segment, if it is open
                else emptyCount --;
                // how many flower can placed in this fragment 
                canPlaceCount += emptyCount / 2;
                
                emptyCount = 0;
            } else { // empty slot
                emptyCount ++;            
            }
        }
        if(emptyCount > 0) { // right-end opened
            if(leftF == false) emptyCount ++;
            canPlaceCount += emptyCount / 2;
        }
        return canPlaceCount >= n;
    }


----------------------------------------------------------------------------------------------------
&#91;Java&#93; 13ms...short if&#x2F;else
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int len = flowerbed.length;
        if(len==1 && flowerbed[0]==0) n--;
        if(len>=2 && flowerbed[0]==0 && flowerbed[1]==0){
            flowerbed[0]=1;
            n--;
        }
        for(int i=1; i<len-2;i++){
            if((flowerbed[i]==0 && flowerbed[i+1]==0 && flowerbed[i+2]==0)) {
               flowerbed[i+1]=1; 
                n--;
            }
        }
        if(len>=2 && (flowerbed[len-2]==0 && flowerbed[len-1]==0)) n--;
        
        if(n<=0) return true;
        else return false;
    }

----------------------------------------------------------------------------------------------------
input array violate no-adjacent-flowers rule.?
<p>Does the input array in the test case &#34;&#91;1,1,1,1,1,1,1,1,1,1,1,1,1&#93;<br/>
0&#34;  violate no-adjacent-flowers rule ?</p>


----------------------------------------------------------------------------------------------------
