My O(n) solution using XOR
known that A XOR A = 0 and the XOR operator is commutative, the solution will be very straightforward.
`

    int singleNumber(int A[], int n) {
        int result = 0;
        for (int i = 0; i<n; i++)
        {
			result ^=A[i];
        }
		return result;
    }
`

----------------------------------------------------------------------------------------------------
Easiest way to solve by using bit manipulation.

**Logic:** XOR will return 1 only on two different bits. So if two numbers are the same, XOR will return 0. Finally only one number left.
A ^ A = 0 and A ^ B ^ A = B.





    class Solution {
        public:
            int singleNumber(int A[], int n) {
                int result=A[0];
                for(int i=1;i<n;i++)
                {
                    result= result^A[i];  /* Get the xor of all elements */
                }
                return result;
            }
        };

----------------------------------------------------------------------------------------------------
Easy Java solution (tell you why using bitwise XOR)
  
we use bitwise XOR to solve this problem : 

first , we have to know the bitwise XOR in java

 1. **0 ^ N = N**
 2. **N ^ N = 0**


So..... if N is the single number

N1 ^ N1 ^ N2 ^ N2 ^..............^ Nx ^ Nx ^ N  

  = (N1^N1) ^ (N2^N2) ^..............^ (Nx^Nx) ^ N

  = 0 ^ 0 ^ ..........^ 0 ^ N

  = N  


  
 



    public int singleNumber(int[] nums) {
        int ans =0;
        
        int len = nums.length;
        for(int i=0;i!=len;i++)
            ans ^= nums[i];
        
        return ans;
        
    }



----------------------------------------------------------------------------------------------------
My very simple solution (linear time, no extra memory)

XOR of two equal numbers is 0 : a^a=0. This is the main idea of the algorithm.

    class Solution { 
        public:
            int singleNumber(int A[], int n) {
                for (int i = 1; i < n; ++i)
                    A[0] ^= A[i];
                 return A[0];
            } 
        };

----------------------------------------------------------------------------------------------------
Python different solutions.
   
    def singleNumber1(self, nums):
        dic = {}
        for num in nums:
            dic[num] = dic.get(num, 0)+1
        for key, val in dic.items():
            if val == 1:
                return key
    
    def singleNumber2(self, nums):
        res = 0
        for num in nums:
            res ^= num
        return res
        
    def singleNumber3(self, nums):
        return 2*sum(set(nums))-sum(nums)
        
    def singleNumber4(self, nums):
        return reduce(lambda x, y: x ^ y, nums)
        
    def singleNumber(self, nums):
        return reduce(operator.xor, nums)

----------------------------------------------------------------------------------------------------
1ms JAVA solution
public class Solution {
    
    public int singleNumber(int[] nums) {
        int result = 0;
        for(int i : nums) {
            result ^= i;
        }
        return result;
    }
}

----------------------------------------------------------------------------------------------------
4 lines of c++ solution
    nt singleNumber(int a[], int n) {
         //xor all numbers, the left over number would be the non repeated one
         // since the equl numbers cancel out each others bits
         int num = 0;
         for (int i = 0; i < n; ++i) {
             num ^= a[i];
         }
         return num;
        }

----------------------------------------------------------------------------------------------------
My Java solution in O(n) time complexity and O(1) space complexity using XOR
    public class Solution {
        public int singleNumber(int[] nums) {
            int res = 0;
            for(int num : nums) {
                res ^= num;
            }
            return res;
        }
    }

----------------------------------------------------------------------------------------------------
Simple C++ Solution
The trick is: A^B^A=B

    class Solution {
    public:
        int singleNumber(vector<int>& nums) {
            if(nums.empty()) return 0;
            int first = nums[0];
            for(int i = 1; i<nums.size();i++) {
                first = first ^ nums[i];
            }
            return first;
        }
    };



----------------------------------------------------------------------------------------------------
Java solution with explanation
    public int singleNumber(int[] nums) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            res = res^nums[i];
        }
        return res;
    }


----------
idea: for every bit, use bit manipulation. 0^0^0 = 0, 1^1^1 = 1, 0^0^1 = 1, 1^1^0 = 0. Thus, after the bit manipulation of XOR, the every bit of result is the bit of single number.

----------------------------------------------------------------------------------------------------
Maybe the shortest java solution
    public class Solution {
        public int singleNumber(int[] A) {
            int a=0;
            for(int i:A)
                a^=i;
            return a;
        }
    }

----------------------------------------------------------------------------------------------------
One-line python solution with O(n) time
    return reduce(lambda x, y: x ^ y, nums)

----------------------------------------------------------------------------------------------------
1 line Simple Python Solution
    class Solution(object):
    def singleNumber(self, nums):
        return sum(list(set(nums)))*2 - sum(nums)

----------------------------------------------------------------------------------------------------
O(n) using XOR in Java for Single Number problem
    public class Solution {
        public int singleNumber(int[] nums) {
            int res = nums[0];
            for (int i = 1; i < nums.length; i++)
                res = res ^ nums[i];
    
            return res;
        }
    }

----------------------------------------------------------------------------------------------------
O(n) solution, using bit operation, only 22 characters
    def singleNumber(self, A):
        r = 0
        for i in A:
            r ^= i
        return r

----------------------------------------------------------------------------------------------------
C++ implementation using XOR
    class Solution {
    public:
        int singleNumber(vector<int>& nums) {
            // XOR (^) is both commutative and associative 
            // The numbers which appear twice will be cancelled
            // Only the number that appear twice survive 
            int value = 0;
            int i, n;
            n = nums.size();
            for(i=0; i<n; i++)
                value = value ^ nums[i];
            return value;
        }
    };

----------------------------------------------------------------------------------------------------
Simple C++ solution
class Solution 
{public:

    int singleNumber(vector<int>& nums) {
        
        for(int i = 1; i < nums.size(); ++i) nums[0] ^= nums[i];
        
        return nums[0];
        
    }
};

----------------------------------------------------------------------------------------------------
Strongly recommended support Scala language
and here is the code for solve the single number, and using scala language is just only one line of code. With now, functional programming is very popular in big data area. So, I strongly recommended the leecode support the compiler compatible with scala. 

     def singleNumber(nums:Array[Int]): Int = {
        nums.foldLeft(0)(_^_)
      }
    
      val arr = Array(1,2,2,3,3,4,5,6,6,5,4,1,9)
      println(singleNumber(arr))

And another example can directly show more message , and just needs a tuple. I show you with this is wish to tell you that scala can support more message and expressive.

    def hummingWeight(n: Int): (Int, ArrayBuffer[Int]) = {
        val arrBuffer = ArrayBuffer[Int]()
        var alt_n = n
        var count = 0
        while (alt_n > 0) {
          if ((alt_n & 1) == 1){
            count+=1
            arrBuffer += 1
          } else {
            arrBuffer += 0
          }
          alt_n >>= 1
        }
        (count, arrBuffer.reverse)
      }
      println (hummingWeight(2147483647))
    }

And the output like following

    (31,ArrayBuffer(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))

----------------------------------------------------------------------------------------------------
XOR - Java solution
    public class Solution {
        public int singleNumber(int[] nums) {
            int result = 0;
            for(int i = 0;i<nums.length;i++){
            result = result ^ nums[i];
            }
            return result;
    }
    }

----------------------------------------------------------------------------------------------------
Only One line python solution
reduce(func, A) means: func(func(A[0], A[1]), A[2])...

So the reduce function below just return all elements' XOR value, that is our single number.

    class Solution:
    # @param A, a list of integer
    # @return an integer
    def singleNumber(self, A):
        return reduce(lambda x, y: x ^ y, A)



----------------------------------------------------------------------------------------------------
