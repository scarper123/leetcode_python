&#91;Java&#x2F;C++&#93;Clean solution
    int findLengthOfLCIS(vector<int>& nums) {
        int res = 0, cnt = 0;
        for(int i = 0; i < nums.size(); i++){
            if(i == 0 || nums[i-1] < nums[i]) res = max(res, ++cnt);
            else cnt = 1;
        }
        return res;
    }


----------------------------------------------------------------------------------------------------
Python Simple Solution
class Solution(object):
    def findLengthOfLCIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # Time: O(n)
        # Space: O(1)
        max_len = i = 0
        while i < len(nums):
            curr = 1
            while i + 1 < len(nums) and nums[i] < nums[i + 1]:
                curr, i = curr + 1, i + 1
            max_len = max(max_len, curr)
            i += 1
        return max_len


----------------------------------------------------------------------------------------------------
&#91;C++&#x2F;Java&#93; Clean Code - 3 liner &#91;2 Pointers&#93;
class Solution {
    public int findLengthOfLCIS(int[] a) {
        int mx = 0, len = 0;
        for (int i = 0; i < a.length; i++) {
            if (i == 0 || a[i] <= a[i - 1]) len = 0;
            mx = Math.max(mx, ++len);
        }
        return mx;
    }
}


----------------------------------------------------------------------------------------------------
share my java solution O(N)!
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if(nums==null || nums.length<1){
            return 0;
        }
        
        int[] dp = new int[nums.length];
        dp[0]=1;
        int max = 1;
        for(int i=1;i<nums.length;i++){
            if(nums[i]>nums[i-1]){
                dp[i]=dp[i-1]+1;
            }else{
                dp[i]=1;
            }
            max=Math.max(max,dp[i]);
        }
        return max;
    }
}


----------------------------------------------------------------------------------------------------
O(1) space Java Solution
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int count = 1;
        int res = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                count++;
                res = Math.max(count, res);
            } else count = 1;
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Java solution, DP
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        int[] dp = new int[n];
        
        int max = 1;
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            }
            else {
                dp[i] = 1;
            }
            max = Math.max(max, dp[i]);
        }
        
        return max;
    }
}


----------------------------------------------------------------------------------------------------
Java, O(N), without unnecessary Math.max()
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if (nums == null || nums.length == 0)
            return 0;
        int maxLen = 0;
        int start = 0;
        for (int i = 1; i<=nums.length; i++){
            if(i==nums.length || nums[i]<=nums[i-1]){
                maxLen = Math.max(maxLen, i-start);
                start=i;
            }
        }
        return maxLen;
    }
}


----------------------------------------------------------------------------------------------------
C++ O(n) solution, use fast and slow pointer
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        if(nums.size()<=1) return nums.size();
        int max = 1;
        
        unsigned int fast = 1, slow = 0;
        while (fast != nums.size())
        {
            if(nums[fast]>nums[fast-1])
            {
                if(fast == nums.size()-1)
                {
                    max = max>(fast-slow+1)?max:(fast-slow+1);
                    break;
                }
                else fast++;
                
            }
            else
            {
                max = max>(fast-slow)?max:(fast-slow);
                slow = fast;
                fast++;
            }
        }
        return max;
    }
};


----------------------------------------------------------------------------------------------------
C solution,O(n)
int findLengthOfLCIS(int* nums, int numsSize) {
    if(numsSize==0) return 0;
    int maxnum=1,tmp=1;
    for(int i=1;i<numsSize;i++){
    	if(nums[i]>nums[i-1]) tmp++;
    	else tmp=1;
    	maxnum=maxnum>tmp?maxnum:tmp;
    }
    return maxnum;
}


----------------------------------------------------------------------------------------------------
O(n) Python solution
class Solution(object):
    def findLengthOfLCIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left, right, max_length = 0, 0, 1
        
        if not nums: return 0
        
        for i in range(1, len(nums)):
            # we've found a continuous increasing subsequence, move right
            if nums[i - 1] < nums[i]:
                right += 1
                
                # find max_length
                max_length = max(max_length, right - left + 1)
            else:
                # move left and right
                left = right = i
                
                    
        return max_length


----------------------------------------------------------------------------------------------------
Python, Optimal + Easy To Understand &quot;Sliding Window&quot;, Time: O(n), Space: O(1)
class Solution(object):
    def findLengthOfLCIS(self, nums):
        n = len(nums)
        if n < 2:
            return n
        maximum = 1
        i, j = 0, 1
        while j < n:
            if nums[j] > nums[j-1]:
                maximum = max(maximum, j - i + 1)
            else:
                i = j
            j += 1
        return maximum


----------------------------------------------------------------------------------------------------
Easy to understand C++ DP Solution O(n)
int findLengthOfLCIS(vector<int>& nums) {
        
        if(nums.size() == 0)
            return 0;
        
        int n = (int)nums.size();
        
        vector<int> length(n, 1);
        
        int ans = 1;
        
        for(int i = 1; i<nums.size(); i++) {
            if(nums[i]>nums[i-1]) 
                length[i] += length[i-1];
            ans = max(ans, length[i]);
        }
        
        return ans;
    }


----------------------------------------------------------------------------------------------------
Straightforward c# solution
public class Solution {
    public int FindLengthOfLCIS(int[] nums) {
        if (nums == null || nums.Length ==0) return 0;
        var max = 1;
        var m = 1;
        var p = nums[0];
        for (int i = 1; i < nums.Length; i++)
        {
            if (nums[i] > p) {
                m++;
            }
            else
            {
                if (m > max) max = m;
                m = 1;
            }
            
            p = nums[i];
        }
        
        if (m > max) max = m;
        return max;
    }
}


----------------------------------------------------------------------------------------------------
Swift solution - O(n) time, O(1) space
class Solution {
    func findLengthOfLCIS(_ nums: [Int]) -> Int {
        if nums.count < 2 {
            return nums.count
        }
        
        var count = 1
        var maxCount = 1
        
        for i in 0..<(nums.count - 1) {
            if nums[i] < nums[i + 1] {
                count += 1
            } else {
                maxCount = max(maxCount, count)
                count = 1
            }
        }
        
        return max(maxCount, count)
    }
}


----------------------------------------------------------------------------------------------------
Python solution with detailed explanation
class Solution:
    def findLengthOfLCIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0:
            return 0
        max_len = 1
        prev = nums[0]
        curr_len = 1
        for i in range(1, len(nums)):
            if nums[i] > prev:
                curr_len += 1
            else:
                max_len = max(max_len, curr_len)
                curr_len = 1
            prev = nums[i]
        return max(curr_len, max_len)


----------------------------------------------------------------------------------------------------
Java, easy DP, O(1) space, O(n) time
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if(nums==null || nums.length==0)
            return 0;
        int max = 1;
        int cur=1;
        for(int i=1; i<nums.length; i++){
            if(nums[i]>nums[i-1])
                cur = cur+1;
            else cur = 1;
            max = Math.max(cur, max);
        }
        return max;
    }
}



----------------------------------------------------------------------------------------------------
C++ very easy solution
    int findLengthOfLCIS(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int res=1, temp=0;
        for(int i=0;i<nums.size();i++) {
            temp++;
            if(i<nums.size()-1&&nums[i]>=nums[i+1]) {
                res=max(res, temp);
                temp=0;
            }
        }
        return max(res, temp);
    }

----------------------------------------------------------------------------------------------------
c++ solution o(n) runtime
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {      
        if(nums.size() <= 1)
            return nums.size();
        int m = 1, c = 1;
        for(int i = 0; i < nums.size()-1; ++i){
            if(nums[i] < nums[i+1])
                m = max(m,++c);
            else
                c = 1;    
        }
        return m;
    }
  
};



----------------------------------------------------------------------------------------------------
