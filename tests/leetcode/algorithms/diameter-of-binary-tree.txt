Simple Java Solution
public class Solution {
    public boolean checkPerfectNumber(int num) {
        if (num == 1) return false;
        
        int sum = 0;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                sum += i + num / i;
            }
        }
        sum++;
        
        return sum == num;
    }
}


----------------------------------------------------------------------------------------------------
Missing test cases
True

----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def prime_factorization(N):
  d = 2
  while d * d <= n:
    expo = 0
    while N % d == 0:
      expo += 1
      N /= d
    if expo:
      yield (d, expo)
    d += 1
  if N > 1:
    yield (N, 1)

ans = 1
for prime, expo in prime_factorization(abs(N)):
  ans *= sum(prime ** k for k in xrange(expo + 1))
return ans == 2*N


----------------------------------------------------------------------------------------------------
2 line solution C++
class Solution {
public:
    bool checkPerfectNumber(int num) {
        static unordered_set<int> n = {6, 28, 496, 8128, 33550336};
        return n.count(num);
    }
};

----------------------------------------------------------------------------------------------------
Simple Python
class Solution(object):
    def checkPerfectNumber(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num <= 0: return False
        ans, SQRT = 0, int(num ** 0.5)
        ans = sum(i + num//i for i in range(1, SQRT+1) if not num % i)
        if num == SQRT ** 2: ans -= SQRT
        return ans - num == num


----------------------------------------------------------------------------------------------------
Java 4-Liner O(sqrt(n)) Solution
public boolean checkPerfectNumber(int num) {
    int sum = 1;
    for (int i=2;i<Math.sqrt(num);i++) 
        if (num % i == 0) sum += i + (num/i == i ? 0 : num/i);
    return num != 1 && sum == num;
}


----------------------------------------------------------------------------------------------------
C++ 6 lines &#x27;normal&#x27; solution ( 3 lines actually...)
    bool checkPerfectNumber(int num) {
        int sum=1;
        for(int i=2;i<=sqrt(num);i++) if(num%i==0) sum += i + (i==num/i ? 0 : num/i);
        return sum==num && num!=1;
    }


----------------------------------------------------------------------------------------------------
Perfect number Java solution but facing time out for long number like &quot;999,999,991&quot; .....
public class Solution {
    public boolean checkPerfectNumber(int num) {
        //ArrayList<Integer> divisor = new ArrayList<Integer>();
        int sum=0;
        boolean flag = true;
        for(int i=1;i<num;i++){
            if(num%i == 0){
                sum = sum + i;
                if(sum > num){
                 flag = false;
                 break;
                }
            }
        }
        if(sum<num)
            flag = false;
            return flag;
    }
}


----------------------------------------------------------------------------------------------------
2 simple Java solutions - via Stream and a contant time
boolean checkPerfectNumber(int num) {
  switch(num) {
    case 6: case 28: case 496: case 8_128: case 33_550_336: return true;
    default: return false;
  }
}


----------------------------------------------------------------------------------------------------
One Line Java
<p>public class Solution {<br/>
public boolean checkPerfectNumber(int num) {<br/>
return (num^6) * (num^28) * (num^496) * (num^8128) * (num^33550336)==0;<br/>
}<br/>
}</p>


----------------------------------------------------------------------------------------------------
Hard coded Java Solution :)
public class Solution {    
    public boolean checkPerfectNumber(int num) {
        HashSet<Integer> set = new HashSet<Integer>();
        set.add(6);
        set.add(28);
        set.add(496);
        set.add(8128);
        set.add(33550336);
        return set.contains(num);
    }
}

----------------------------------------------------------------------------------------------------
Simple Swift Solution
func checkPerfectNumber(_ num: Int) -> Bool {
        if num <= 1 { return false }
        var factor = 1
        var i = 2
        while i <= num/i{
            if num % i == 0{ factor = factor + i + num/i } 
            i += 1
        }
        return factor == num ? true : false
  }

----------------------------------------------------------------------------------------------------
Simple 4 line Java AC solution
public class Solution {
    public boolean checkPerfectNumber(int num) {
        int sum=1;
        for(int i=2;i<(int)(Math.sqrt(num)+1);++i)
            if(num%i==0)   sum+=i+(num/i);
        return sum==num &&num!=1;
    }
}

----------------------------------------------------------------------------------------------------
My Clean Java Solutions
public boolean checkPerfectNumber(int num) {
        
        if (num < 6) {
            return false;
        }
        
        int x = 2;
        int perfectNum = 0;
        
        while ( (perfectNum = x * ((2 * x) - 1)) < num ) {
            x = 2*x;
        }
        
        return perfectNum == num;
    }


----------------------------------------------------------------------------------------------------
Hint for straightforward solution
((1<<n)-1)

----------------------------------------------------------------------------------------------------
Python 1-liner (when the &lt;input, output&gt; pairs of a mapping can be exhausted)
(x, y, z)

----------------------------------------------------------------------------------------------------
My C++ Solution
class Solution {
public:
    bool checkPerfectNumber(int num) {
        if(num == 1) return false;
        
        int sum = 1;
        int tmpnum = num;
        for(int i = 2; i < tmpnum; i++){
            if(num % i == 0){
                sum += i;
                sum += num / i;
                tmpnum = num / i;
            }
        }
        if( sum == num) return true;
        return false;
    }
};


----------------------------------------------------------------------------------------------------
Easy C++ Sol : There is no odd perfect number
bool checkPerfectNumber(int num) {
	if (num % 2 != 0) return false;
	int sum = 1;
	for (int i = 2; i <= num / 2; i++)
	{
		if (num%i == 0)
		{
			sum = sum + i;
			if (sum>num) return false;
		}
	}
	if (sum == num)
		return true;

	return false;
}

----------------------------------------------------------------------------------------------------
python simple solution
class Solution(object):
    def checkPerfectNumber(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num < 2:
            return False
        total = -num
        for i in xrange(1, num):
            if i * i > num:
                break
            if num % i == 0:
                total += i + num / i
                if num / i == i:
                    total -= i
        return total == num


----------------------------------------------------------------------------------------------------
