C++ 0ms O(n) 35 lines solution with detailed explanation
class Solution {
public:
    int strongPasswordChecker(string s) {
        int deleteTarget = max(0, (int)s.length() - 20), addTarget = max(0, 6 - (int)s.length());
        int toDelete = 0, toAdd = 0, toReplace = 0, needUpper = 1, needLower = 1, needDigit = 1;
        
        ///////////////////////////////////
        // For cases of s.length() <= 20 //
        ///////////////////////////////////
        for (int l = 0, r = 0; r < s.length(); r++) {
            if (isupper(s[r])) { needUpper = 0; }               
            if (islower(s[r])) { needLower = 0; }
            if (isdigit(s[r])) { needDigit = 0; }
            
            if (r - l == 2) {                                   // if it's a three-letter window
                if (s[l] == s[l + 1] && s[l + 1] == s[r]) {     // found a three-repeating substr
                    if (toAdd < addTarget) { toAdd++, l = r; }  // insert letter to break repetition if possible
                    else { toReplace++, l = r + 1; }            // replace current word to avoid three repeating chars
                } else { l++; }                                 // keep the window with no more than 3 letters
            }
        }
        if (s.length() <= 20) { return max(addTarget + toReplace, needUpper + needLower + needDigit); }
        
        //////////////////////////////////
        // For cases of s.length() > 20 //
        //////////////////////////////////
        toReplace = 0;                                          // reset toReplace
        vector<unordered_map<int, int>> lenCnts(3);             // to record repetitions with (length % 3) == 0, 1 or 2
        for (int l = 0, r = 0, len; r <= s.length(); r++) {     // record all repetion frequencies
            if (r == s.length() || s[l] != s[r]) {
                if ((len = r - l) > 2) { lenCnts[len % 3][len]++; } // we only care about repetions with length >= 3
                l = r;
            }
        }
        
        /*
            Use deletions to minimize replacements, following below orders:
            (1) Try to delete one letter from repetitions with (length % 3) == 0. Each deletion decreases replacement by 1
            (2) Try to delete two letters from repetitions with (length % 3) == 1. Each deletion decreases repalcement by 1
            (3) Try to delete multiple of three letters from repetions with (length % 3) == 2. Each deletion (of three 
            letters) decreases repalcements by 1
        */
        for (int i = 0, numLetters, dec; i < 3; i++) {                
            for (auto it = lenCnts[i].begin(); it != lenCnts[i].end(); it++) {
                if (i < 2) {
                    numLetters = i + 1, dec = min(it->second, (deleteTarget - toDelete) / numLetters);
                    toDelete += dec * numLetters;               // dec is the number of repetitions we'll delete from
                    it->second -= dec;                          // update number of repetitions left
                    
                    // after letters deleted, it fits in the group where (length % 3) == 2
                    if (it->first - numLetters > 2) { lenCnts[2][it->first - numLetters] += dec; }   
                }
                
                // record number of replacements needed
                // note if len is the length of repetition, we need (len / 3) number of replacements
                toReplace += (it->second) * ((it->first) / 3);  
            }    
        }

        int dec = (deleteTarget - toDelete) / 3;                // try to delete multiple of three letters as many as possible
        toReplace -= dec, toDelete -= dec * 3;
        return deleteTarget + max(toReplace, needUpper + needLower + needDigit);
    }
};


----------------------------------------------------------------------------------------------------
O(n) java solution by analyzing changes allowed to fix each problem
left_over

----------------------------------------------------------------------------------------------------
JAVA Easy Solution with explanation
public class Solution {
    public int strongPasswordChecker(String s) {
        
        if(s.length()<2) return 6-s.length();
        
        //Initialize the states, including current ending character(end), existence of lowercase letter(lower), uppercase letter(upper), digit(digit) and number of replicates for ending character(end_rep)
        char end = s.charAt(0);
        boolean upper = end>='A'&&end<='Z', lower = end>='a'&&end<='z', digit = end>='0'&&end<='9';
        
        //Also initialize the number of modification for repeated characters, total number needed for eliminate all consequnce 3 same character by replacement(change), and potential maximun operation of deleting characters(delete). Note delete[0] means maximum number of reduce 1 replacement operation by 1 deletion operation, delete[1] means maximun number of reduce 1 replacement by 2 deletion operation, delete[2] is no use here. 
        int end_rep = 1, change = 0;
        int[] delete = new int[3];
        
        for(int i = 1;i<s.length();++i){
            if(s.charAt(i)==end) ++end_rep;
            else{
                change+=end_rep/3;
                if(end_rep/3>0) ++delete[end_rep%3];
                //updating the states
                end = s.charAt(i);
                upper = upper||end>='A'&&end<='Z';
                lower = lower||end>='a'&&end<='z';
                digit = digit||end>='0'&&end<='9';
                end_rep = 1;
            }
        }
        change+=end_rep/3;
        if(end_rep/3>0) ++delete[end_rep%3];
        
        //The number of replcement needed for missing of specific character(lower/upper/digit)
        int check_req = (upper?0:1)+(lower?0:1)+(digit?0:1);
        
        if(s.length()>20){
            int del = s.length()-20;
            
            //Reduce the number of replacement operation by deletion
            if(del<=delete[0]) change-=del;
            else if(del-delete[0]<=2*delete[1]) change-=delete[0]+(del-delete[0])/2;
            else change-=delete[0]+delete[1]+(del-delete[0]-2*delete[1])/3;
            
            return del+Math.max(check_req,change);
        }
        else return Math.max(6-s.length(), Math.max(check_req, change));
    }
}


----------------------------------------------------------------------------------------------------
Simple Python solution
class Solution(object):
    def strongPasswordChecker(self, s):
        """
        :type s: str
        :rtype: int
        """
        missing_type = 3
        if any('a' <= c <= 'z' for c in s): missing_type -= 1
        if any('A' <= c <= 'Z' for c in s): missing_type -= 1
        if any(c.isdigit() for c in s): missing_type -= 1

        change = 0
        one = two = 0
        p = 2
        while p < len(s):
            if s[p] == s[p-1] == s[p-2]:
                length = 2
                while p < len(s) and s[p] == s[p-1]:
                    length += 1
                    p += 1
                    
                change += length / 3
                if length % 3 == 0: one += 1
                elif length % 3 == 1: two += 1
            else:
                p += 1
        
        if len(s) < 6:
            return max(missing_type, 6 - len(s))
        elif len(s) <= 20:
            return max(missing_type, change)
        else:
            delete = len(s) - 20
            
            change -= min(delete, one)
            change -= min(max(delete - one, 0), two * 2) / 2
            change -= max(delete - one - 2 * two, 0) / 3
                
            return delete + max(missing_type, change)


----------------------------------------------------------------------------------------------------
java with detailed explanation
public class Solution {
    public int strongPasswordChecker(String s) {
        int minReplace = getMinReplace(s);

        if (s.length() < 6){
            int insersion = 6 - s.length();
            return Math.max(insersion, minReplace);
        } else if (s.length() <= 20){
            List<Integer> groups = generateGroups(s);
            int replace = 0;
            for (int group : groups){
                replace += group / 3;
            }
            return Math.max(replace, minReplace);
        } else {

            List<Integer> groups = generateGroups(s);

            Collections.sort(groups);

            int charCount = 0;
            int n = 0;
            while (charCount < 20 && n < groups.size()) {
                charCount += groups.get(n);
                n++;
            }

            while (groups.size() > n) {
                groups.remove(groups.size() - 1);
            }

            charCount = 0;

            int badGroup = 0;
            for (int i = 0; i < groups.size(); i++) {
                if (groups.get(i) > 20) {
                    groups.set(i, 20);
                }
                charCount += groups.get(i);
                if (groups.get(i) > 2){
                    badGroup++;
                }
            }

            int deletion = s.length() - 20;

            int toDelete = charCount - 20;

            int remainder = 0;
            while (toDelete > 0 && badGroup > 0) {

                for (int i = 0; i < n; i++) {
                    if (groups.get(i) > 2 && groups.get(i) % 3 == remainder) {
                        int del = Math.min(toDelete, remainder + 1);
                        groups.set(i, groups.get(i) - del);
                        toDelete -= del;
                        if (groups.get(i) <= 2){
                            badGroup--;
                        }
                        if (toDelete == 0 || badGroup == 0) {
                            break;
                        }
                    }
                }
                remainder = (remainder + 1) % 3;
            }

            int replace = 0;
            for (int i = 0; i < groups.size(); i++) {
                replace += groups.get(i) / 3;
            }

            return deletion + Math.max(replace, minReplace);
        }
    }

    /**
     * generate sorted groups
     * groups: # of continuous characters in S
     */
    private List<Integer> generateGroups(String s){
        List<Integer> groups = new ArrayList<>();
        for (int i = 0 ; i < s.length();){
            int j = i;
            while (j < s.length() && s.charAt(j) == s.charAt(i)){
                j++;
            }
            groups.add(j - i);
            i = j;
        }
        return groups;
    }

    /**
     * return # of replacements needed to satisfy 2
     */
    private int getMinReplace(String s){
        boolean[] dls = new boolean[3];
        for(char c : s.toCharArray()){
            dls[getClass(c)] = true;
        }
        int replace = 0;
        for (int i = 0; i < dls.length; i++){
            if (!dls[i]) replace++;
        }
        return replace;
    }

    private int getClass(char c){
        if (c >= '0' && c <= '9'){
            return 0;
        } else if (c >= 'a' && c <= 'z'){
            return 1;
        } else{
            return 2;
        }
    }
}


----------------------------------------------------------------------------------------------------
The correct answer of &quot;AAAAA&quot; should be 2, not 3
<p>The correct answer of &#34;AAAAA&#34; should be 2, not 3</p>
<p>AAAAA -&gt; AAbAA0, modify 1 char + add 1 char = 2</p>


----------------------------------------------------------------------------------------------------
Java - O(n) simple solution
public class Solution {
    public int strongPasswordChecker(String s) {
        
        char [] str = s.toCharArray();
        boolean isUpper = false, isLower = false, isDigit = false;
        int missinType = 3;
        for(char c: str)
        {
            if(!isUpper && Character.isUpperCase(c)) { isUpper = true; missinType-=1; } //uppercase
            if(!isLower && Character.isLowerCase(c)) { isLower = true; missinType-=1; } //lowercase
            if(!isDigit && Character.isDigit(c)) { isDigit = true; missinType-=1; } //atleast one number
            
        }
       
        int totalChangeCnt = 0, OneChangeCnt =0, TwoChangeCnt =0, pos=2;
        while(pos < s.length())
        {
            if(str[pos]==str[pos-1] && str[pos-1]==str[pos-2] && str[pos-2]==str[pos])
            {
                int length = 2;
                while(pos < s.length() && str[pos]==str[pos-1])
                {
                    length += 1; pos +=1;
                }
                totalChangeCnt += length/3;
                if(length%3==0) OneChangeCnt += 1;
                else if(length%3==1) TwoChangeCnt += 1;
                
            }
            else
            {
                pos=pos+1;
            }
        }
        
        if(s.length()<6)
            return Math.max(missinType, 6-s.length());
        else if(s.length() <=20)
            return Math.max(missinType,totalChangeCnt );
        else
        {
            int deleteCount = s.length()-20;
            totalChangeCnt -= Math.min(deleteCount,OneChangeCnt*1)/1;
            totalChangeCnt -= Math.min(Math.max(deleteCount - OneChangeCnt, 0), TwoChangeCnt * 2) / 2;
            totalChangeCnt -= Math.max(deleteCount - OneChangeCnt - 2 * TwoChangeCnt, 0) / 3;
            
                
            return deleteCount + Math.max(missinType, totalChangeCnt);
        }       
    }
}



----------------------------------------------------------------------------------------------------
Another Java solution 2ms - Two pass to make repeating character handling more clear
public int strongPasswordChecker(String s) {
        if(s==null || s.length()==0) {
            return 6;
        }
        boolean lower = false, upper = false, digit = false;
        int distance = 0, len = s.length();
        
        ArrayList<Integer> repeating  = new ArrayList<>();
        char prev = '\0';
        int count = 0;
        for(char c:s.toCharArray()) {
            lower |= c>='a' && c<='z';
            upper |= c>='A' && c<='Z';
            digit |= c>='0' && c<='9';
            if(c==prev) {
                count++;
            } else {
                if(count>=3) {
                    repeating.add(count);
                }
                count = 1;
                prev =c;
            }
        }
        if(count>=3) {
            repeating.add(count);
        }
        int required = (lower?0:1)+(upper?0:1)+(digit?0:1);
        int patch = 0;
        Collections.sort(repeating);
        int i = 0;
        while(i<repeating.size()) {
            int c = repeating.get(i);
            if(len>20) {
                int delta = Math.min(len-20,c-2);
                c -= delta;
                len -= delta;
                distance += delta;
            }
            if(len<=20 && len>=6) {
                distance += c/3;
                patch += c/3;
            } else if(len<6) {
                patch += 1 + len-6;
                distance += patch;
                len = 6;
            }
            i++;
        }
        if(len<6) {
            distance += 6-len;
            patch += 6-len;
        } else if(len>20) {
            distance += len-20;
        }
        required -= patch;
        return distance+Math.max(required,0);
    }


----------------------------------------------------------------------------------------------------
Short and clear JavaScript solution, works for different password requirements
s.length

----------------------------------------------------------------------------------------------------
May be the longest code but easy understand Java solution.
public class Solution {
    public int strongPasswordChecker(String s) {
        int len = s.length(),count = 1;
        boolean hasLower = false,hasUpper = false,hasNumber = false;
        List<Integer> repeatNum = new ArrayList<Integer>();
        for(int i=0;i<len;i++){
            if(i>0){
                if(s.charAt(i) == s.charAt(i-1)){
                    count += 1;
                }
                else{
                    if(count >= 3) repeatNum.add(count);
                    count = 1;
                }
            }
            char ch = s.charAt(i);
            if('a'<= ch && ch<='z') hasLower = true;
            if('A'<= ch && ch<='Z') hasUpper = true;
            if('0'<= ch && ch<='9') hasNumber = true;
        }
        if(count >= 3) repeatNum.add(count);
        int needAdd = 0,res = 0;
        if(!hasLower) needAdd += 1;
        if(!hasUpper) needAdd += 1;
        if(!hasNumber) needAdd += 1;
        Collections.sort(repeatNum,new Comparator(){
            @Override
            public int compare(Object o1,Object o2){
                int val1 = (Integer)(o1),val2 = (Integer)(o2);
                return (val1%3)-(val2%3);
            }
        });
        if(6<=len && len<=20){
            int needChange = 0;
            for(int i=0;i<repeatNum.size();i++){
                needChange += repeatNum.get(i)/3;
            }
            res = Math.max(needChange,needAdd);
        }else{
            if(len>20) 
            {
                int needChange = 0,needDel = len-20,index = 0;
                while(needDel>0 && repeatNum.size()>0){
                    int val = repeatNum.get(index);
                    if(val/3 == (val-1)/3+1){
                        needDel -= 1;
                        if((val-1)/3==0) repeatNum.remove(index);
                        else repeatNum.set(index,val-1);
                    }
                    index += 1;
                    if(index >= repeatNum.size()) break;
                }
                index = 0;
                while(needDel>1 && repeatNum.size()>0){
                    int val = repeatNum.get(index);
                    if(val/3 == (val-2)/3+1){
                        needDel -= 2;
                        if((val-2)/3 == 0) repeatNum.remove(index);
                        else repeatNum.set(index,val-2);
                    }
                    index += 1;
                    if(index >= repeatNum.size()) break;
                }
                index = 0;
                while(needDel>2 && repeatNum.size()>0){
                    int val = repeatNum.get(index);
                    if(val/3 == (val-3)/3+1){
                        needDel -= 3;
                        if((val-3)/3 == 0) repeatNum.remove(index);
                        else repeatNum.set(index,val-3);
                    }
                    index += 1;
                    if(index >= repeatNum.size()) index = 0;
                }
                for(int i=repeatNum.size()-1;i>-1 && needDel>0;i--){
                    if(repeatNum.get(i)-2<=needDel){
                        needDel -= repeatNum.get(i)-2;
                        repeatNum.remove(i);
                    }else{
                        repeatNum.set(i,repeatNum.get(i)-1);
                        needDel = 1;
                    }
                }
                
                for(int i=0;i<repeatNum.size();i++){
                    needChange += repeatNum.get(i)/3;
                }
                res = len-20 + Math.max(needChange,needAdd);
            }
            else {
                res = Math.max(needAdd,6-len);
            }
        }
        
        return res;
    }
}


----------------------------------------------------------------------------------------------------
C++ simple solution
class Solution {
public:
    int strongPasswordChecker(string s) {
        int n, k = 3, d = 0, l = 0, u = 0, r = 0, f = 0, e = s.size();
        for (uint p = 2, i = 0; i < e; i++) {
            if (s[i] >= '0' && s[i] <= '9') d = 1;
            else if (s[i] >= 'A' && s[i] <= 'Z') u = 1;
            else if (s[i] >= 'a' && s[i] <= 'z') l = 1;
            if (i >= p && s[i] == s[i-1] && s[i] == s[i-2]) {
                p = i+3, r++;
                if (i+1 < e && s[i] == s[i+1]) f++;
            }
        }
        if (d) k--;
        if (u) k--;
        if (l) k--;
        if (e > 20) {
            n = e - 20;
            r -= n - f;
            if (r > 0) n += r, k -= r;
            if (k > 0) n += k;
        } else if (e < 6) {
            n = 6 - e;
            k -= n;
            if (k > 0) n += k;
        } else {
            n = max(k, r);
        }
        return n;
    }
};


----------------------------------------------------------------------------------------------------
My C++ solution
}


----------------------------------------------------------------------------------------------------
Why the expected answer for &quot;abababababababababaaa&quot; is 2?
<p>I think in this case, in order to make it become a strong password, we should at least do two replace operations and one deletion operation( the replacement wont change the length of the password and the deletion wont do any help for the password to satisfy the condition 2), which takes three operations in total.</p>


----------------------------------------------------------------------------------------------------
How the expected answer of &quot;abababababababababaaa&quot; is 2 instead of 3?
<p>For &#34;abababababababababaaa&#34; we atleast need two replace(one digit and one capital letter) and one deletion(as the size is 21). So, total operation is 3. How its 2?</p>


----------------------------------------------------------------------------------------------------
The expected answer of &quot;aaaaaa&quot; should be 2, not 4
<p>aaaaaa -&gt; aa1Baa requires only 2 changes.</p>


----------------------------------------------------------------------------------------------------
Are there any symbolic characters in the test case?
<p>Can I assume the test case only contains digits or lowercase/uppercase alphabets?</p>
<p>Are there any other characters contained in the string s? Such as dot, comma, semicolon, etc.</p>


----------------------------------------------------------------------------------------------------
Shouldn&#x27;t &quot;!!!&quot; and &quot;aaa&quot; get the same answer 3?
<p>We can simply insert 3 characters to make these two weak passwords to be strong.<br/>
For the former one, change it to &#34;!1!a!A&#34;<br/>
For the later one, change it to &#34;a1aBab&#34;<br/>
But the &#34;Run&#34; command give answer 4 to &#34;!!!&#34; but 3 to &#34;aaa&#34;</p>


----------------------------------------------------------------------------------------------------
cpp sln
int getCountForCharType(const string& s)
{
    // check lowercase, uppercase and digit
    bool lc = false, uc = false, digit = false;
    for (int i = 0; i < s.length(); i++)
    {
        if ( '0' <= s[i] && s[i] <= '9')
        {
            digit = true;
        }
        if ( 'A' <= s[i] && s[i] <= 'Z')
        {
            uc = true;
        }
        if ( 'a' <= s[i] && s[i] <= 'z')
        {
            lc = true;
        }
    }
    return lc + uc + digit;        
}

int checkRowLetter(const string& s, priority_queue<int, vector<int>, Compare>& dupLetterQ)
{
    // check three letter
    char curChar = s[0];
    int charCount = 1;        
    int changeFordup = 0;
    for (int i = 1; i < s.length(); i++)
    {
        if (curChar == s[i])
        {
            charCount++;
        }
        else
        {
            if (charCount >= 3)
            {
                changeFordup += charCount / 3;
                dupLetterQ.push(charCount);
            }
            curChar = s[i];
            charCount = 1;
        }
    }
    if (charCount >= 3)
    {
        changeFordup += charCount / 3;
        dupLetterQ.push(charCount);
    }
    return changeFordup;
}

int strongPasswordChecker(string s) {
    if (s.empty())
    {
        return 6;
    }
    
    int caseCount = getCountForCharType(s);

    priority_queue<int, vector<int>, Compare> dupLetterQ;
    int changeFordup = checkRowLetter(s, dupLetterQ);
    
    // if we do not delete char for longger string.
    if (s.length() <= 20)
    {
        return max(max(3 - caseCount, 6 - (int)s.length()), changeFordup);
    }
    
    
    // since string longer than 20, we need delete chars, and we first try to delete those char in dup, that minmize changing.
    int countToDel = s.length() - 20;
    int i = 0;
    while (!dupLetterQ.empty() && i < countToDel)
    {
        int top = dupLetterQ.top();
        dupLetterQ.pop();
        top -= 1;
        if (top >= 3)
        {
            dupLetterQ.push(top);
        }
        i++;
    }
        
    // if no dup letter after delete, we just need change more letter to satisify the digit rule.
    if (dupLetterQ.empty())
    {
        return countToDel + 3 - caseCount;
    }
        
    // otherwise, we need consider remove rest dup and also need sitisify the digit rule
    changeFordup = 0;
    while (!dupLetterQ.empty())
    {
        changeFordup += dupLetterQ.top() / 3;
        dupLetterQ.pop();
    }
    return max(changeFordup, 3 - caseCount)  + countToDel;

}


----------------------------------------------------------------------------------------------------
Need more test cases
class Solution(object):
    def strongPasswordChecker(self, s):
        """
        :type s: str
        :rtype: int
        """
        missing_type = 3
        if any('a' <= c <= 'z' for c in s): missing_type -= 1
        if any('A' <= c <= 'Z' for c in s): missing_type -= 1
        if any(c.isdigit() for c in s): missing_type -= 1

        change = 0
        one = two = 0
        p = 2
        while p < len(s):
            if s[p] == s[p-1] == s[p-2]:
                length = 2
                while p < len(s) and s[p] == s[p-1]:
                    length += 1
                    p += 1
                    
                change += length / 3
                if length % 3 == 0: one += 1
                elif length % 3 == 2: two += 1
            else:
                p += 1
        
        if len(s) < 6:
            return max(missing_type, 6 - len(s))
        elif len(s) <= 20:
            return max(missing_type, change)
        else:
            delete = len(s) - 20
            
            change -= min(delete, one)
            change -= min(max(delete - one, 0), two * 2) / 2
            change -= max(delete - one - 2 * two, 0) / 3
            
            return delete + max(missing_type, change)


----------------------------------------------------------------------------------------------------
My Accepted solution in Java

public class Solution {

    public int strongPasswordChecker(String s) {
        int sLen = s.length();
        if (sLen < 4) {
            return 6 - sLen;
        }

        int lnum = 1; // need lower
        int unum = 1; // need upper
        int dnum = 1; // need digit

        int rcount = 0;  // count need to replace repeated seq
        int ricount = 0; // count need to add in repeated seq
        int rdcount = 0; // count need to remove from repeated seq
        int sameseq = 0; // count of chars in repeated seq

        for (int i=0; i<sLen; i++) {
            char ch = s.charAt(i);
            if (ch>='a' && ch<='z') {
                lnum = 0;
            }
            if (ch>='A' && ch<='Z') {
                unum = 0;
            }
            if (ch>='0' && ch<='9') {
                dnum = 0;
            }

            // check repeated seq
            if (i == 0) {
                sameseq = 1;
            }
            else if (ch != s.charAt(i-1)) {
                if (sameseq >= 3) {
                    // if shorter length, add char into repeated seq
                    while (sLen + ricount < 6 && sameseq >= 3) {
                        ricount++;
                        sameseq -= 2;
                    }
                    // if longer length, remove char from repeated seq
                    while (sLen - rdcount > 20 && sameseq >= 3) {
                        rdcount++;
                        sameseq --;
                    }
                    // if length matches, replace char in repeated seq
                    rcount += sameseq / 3;
                }
                sameseq = 1;
            }
            else {
                sameseq++;
            }
        }

        // need check repeated seq after loop
        if (sameseq >= 3) {
            // as previous process
            while (sLen + ricount < 6 && sameseq >= 3) {
                ricount++;
                sameseq -= 2;
            }
            while (sLen - rdcount > 20 && sameseq >= 3) {
                rdcount++;
                sameseq --;
            }
            rcount += sameseq / 3;
        }

        int update = lnum + unum + dnum;
        int must = ricount + rcount;
        if (sLen + ricount < 6) {
            must += 6 - sLen - ricount;
        }
        if (sLen < 20) {
            return must > update ? must : update;
        }

        // if longer length, use below process
        if (sLen - rdcount > 20) {
            rdcount += sLen - rdcount - 20;
        }
        return rcount >= update ? rcount + rdcount : update + rdcount;

    }
    
}


----------------------------------------------------------------------------------------------------
