In-place iterative and recursive Java solution
    public ListNode reverseList(ListNode head) {
        /* iterative solution */
        ListNode newHead = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = newHead;
            newHead = head;
            head = next;
        }
        return newHead;
    }
    
    public ListNode reverseList(ListNode head) {
        /* recursive solution */
        return reverseListInt(head, null);
    }
    
    private ListNode reverseListInt(ListNode head, ListNode newHead) {
        if (head == null)
            return newHead;
        ListNode next = head.next;
        head.next = newHead;
        return reverseListInt(next, head);
    }

----------------------------------------------------------------------------------------------------
8ms C++ Iterative and Recursive Solutions with Explanations
xWell, since the `head` pointer may also be modified, we create a `new_head` that points to it to facilitate the reverse process.

For the example list `1 -> 2 -> 3 -> 4 -> 5` in the problem statement, it will become `0 -> 1 -> 2 -> 3 -> 4 -> 5` (we init `new_head -> val` to be `0`). Then we set a pointer `pre` to `new_head` and another `cur` to `head`. Then we keep inserting `cur -> next` after `pre` until `cur` becomes the last node. The code is follows.

    class Solution {
    public:
        ListNode* reverseList(ListNode* head) {
            ListNode* new_head = new ListNode(0);
            new_head -> next = head;
            ListNode* pre = new_head;
            ListNode* cur = head; 
            while (cur && cur -> next) {
                ListNode* temp = pre -> next;
                pre -> next = cur -> next;
                cur -> next = cur -> next -> next; 
                pre -> next -> next = temp;
            }
            return new_head -> next;
        }
    };

[This link][1] provides a more concise solution without using the `new_head`. The idea is to reverse one node at a time for the beginning of the list. The rewritten code is as follows.

    class Solution {
    public:
        ListNode* reverseList(ListNode* head) {
            ListNode* pre = NULL;
            while (head) {
                ListNode* next = head -> next;
                head -> next = pre;
                pre = head;
                head = next;
            } 
            return pre;
        }
    };

Well, both of the above solutions are iterative. The hint has also suggested us to use recursion. In fact, the above link has a nice recursive solution, whose rewritten code is as follows.

    class Solution {
    public:   
        ListNode* reverseList(ListNode* head) {
            if (!head || !(head -> next)) return head;
            ListNode* node = reverseList(head -> next);
            head -> next -> next = head;
            head -> next = NULL;
            return node; 
        }
    }; 

The basic idea of this recursive solution is to reverse all the following nodes after `head`. Then we need to set `head` to be the final node in the reversed list. We simply set its next node in the original list (`head -> next`) to point to it and sets its `next` to be `NULL`. 

  [1]: https://leetcode.com/discuss/34557/accepted-c-solutions-both-iteratively-and-recursively

----------------------------------------------------------------------------------------------------
My Java recursive solution
    public class Solution {
        public ListNode reverseList(ListNode head) {
            if(head==null || head.next==null)
                return head;
            ListNode nextNode=head.next;
            ListNode newHead=reverseList(nextNode);
            nextNode.next=head;
            head.next=null;
            return newHead;
        }
    }

----------------------------------------------------------------------------------------------------
Accepted C Solutions both iteratively and recursively
    struct ListNode* reverseList(struct ListNode* head) {
    	if(NULL==head) return head;
    
    	struct ListNode *p=head;
    	p=head->next;
    	head->next=NULL;
    	while(NULL!=p){
    		struct ListNode *ptmp=p->next;
    		p->next=head;
    		head=p;
    		p=ptmp;
    	}
    	return head;
    }


above is the iterative one. simple, nothing to explain.
----------


    struct ListNode* reverseListRe(struct ListNode* head) {
    	if(NULL==head||NULL==head->next) return head;
    
    	struct ListNode *p=head->next;
    	head->next=NULL;
    	struct ListNode *newhead=reverseListRe(p);
    	p->next=head;
    
    	return newhead;
    }

above is the recursively one.Both are accepted.
----------


----------------------------------------------------------------------------------------------------
Python Iterative and Recursive Solution
    class Solution:
    # @param {ListNode} head
    # @return {ListNode}
    def reverseList(self, head):
        prev = None
        while head:
            curr = head
            head = head.next
            curr.next = prev
            prev = curr
        return prev


Recursion

    class Solution:
    # @param {ListNode} head
    # @return {ListNode}
    def reverseList(self, head):
        return self._reverse(head)

    def _reverse(self, node, prev=None):
        if not node:
            return prev
        n = node.next
        node.next = prev
        return self._reverse(n, node)

----------------------------------------------------------------------------------------------------
Fast Recursive Java solution
    public class Solution {
        public ListNode reverseList(ListNode head) {
            if(head == null ||head.next == null){
                return head;
            }
            
            ListNode root = reverseList(head.next);
            
            head.next.next = head;
            head.next = null;
            return root;
        }
    }

----------------------------------------------------------------------------------------------------
Iteratively and recursively Java Solution
	public class Solution {
	    public ListNode reverseList(ListNode head) {
	    	if(head == null) return head;
	    	
	    	ListNode next = head.next;
	    	head.next = null;
	        
	    	while(next != null){
	        	ListNode temp = next.next;
	        	next.next = head;
	        	head = next;
	        	next = temp;
	        }
	    	return head;
	    }
	}


	public class Solution {
	    public ListNode reverseList(ListNode head) {
	    	if(head == null) return head;
	    	ListNode next = head.next;
	    	head.next = null;
	    	
	    	return recursive(head,next);
	    }
	    
	    private ListNode recursive(ListNode head, ListNode next){
	    	if(next == null)	return head;
	    	ListNode temp = next.next;
	    	next.next = head;
	    	return recursive(next,temp);
	    	
	    }
	}

----------------------------------------------------------------------------------------------------
Java iterative 0ms solution with explanation
This seems to be a classic question that I have received multiple times in real interviews.  Typically, it is asked as a phone screen or initial screening questions.  Regardless, it can seem a bit tricky but it really doesn't take a whole lot of code to accomplish this.  

My solution is as follows:

    public ListNode reverseList(ListNode head) {
        // is there something to reverse?
        if (head != null && head.next != null)
        {
            ListNode pivot = head;
            ListNode frontier = null;
            while (pivot != null && pivot.next != null)
            {
                frontier = pivot.next;
                pivot.next = pivot.next.next;
                frontier.next = head;
                head = frontier;
            }
        }
        
        return head;
    } 

This is a very quick, O(n) reversal that times at 0ms in Leetcode OJ.  The trick is to think of the first element  as the new last item in the list.  After reversing, this must be true.  Then, we just move the element that pivot .next points to (the initial head of the list) and we move it to become the new head.  This essentially grows the list backwards until the initial pivot no longer has anything to move.  

For example; if we have a list [1, 2, 3, 4], the algorithm will do the following:
- Set pivot to 1, set frontier to 2, keep head at 1
- We see that pivot still has items after it, so set pivots .next to .next.next, and move the pivot to be set to the current head
- Now move the head back to point to the new head, which is the frontier node we just set
- Now reset frontier to pivots .next and repeat. 

So with each iteration of the loop the list becomes:
- [1, 2, 3, 4]
- [2, 1, 3, 4]
- [3, 2, 1, 4]
- [4, 3, 2, 1]

Then we return the new final head which points to 4.

----------------------------------------------------------------------------------------------------
Java solution -- recursion and iteration methods
// Recursion: 

    public ListNode reverseList(ListNode head) {
        return helper(null, head);
    }
    
    ListNode helper(ListNode reversed, ListNode remaining) {
        if(remaining==null) return reversed;
        ListNode tmp = remaining.next;
        remaining.next = reversed;
        
        return helper(remaining, tmp);
    }

// Iteration:

    public ListNode reverseList(ListNode head) {
        if(head==null) return head;
        
        ListNode newhead = new ListNode(0);
        newhead.next = head;
        
        while(head.next!=null) {
            ListNode tmp = head.next;
            head.next = head.next.next;
            
            tmp.next = newhead.next;
            newhead.next = tmp;
        }
        return newhead.next;
    }

----------------------------------------------------------------------------------------------------
C++ solution .. very easy..
    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
    class Solution {
    public:
        ListNode* reverseList(ListNode* head) {
            ListNode *temp = NULL , *nextNode = NULL;
            while(head){
                nextNode = head->next;
                head->next = temp;
                temp = head;
                head = nextNode;
            }
            return temp;
        }
    };

----------------------------------------------------------------------------------------------------
My 0ms 10 line java solution
    public ListNode reverseList(ListNode head) {
        ListNode curr = null;
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null){
            prev = curr;
            curr = temp;
            temp = curr.next;
            curr.next = prev;
        }
        return curr; 
    }

----------------------------------------------------------------------------------------------------
66ms Python recursive 5 lines

    def reverseList(self, head, last = None):
        if not head:
            return last
        next = head.next
        head.next = last
        return self.reverseList(next, head)

----------------------------------------------------------------------------------------------------
Python solution - Simple Iterative
I'm not sure if it's already posted here, but this is simple iterative approach. The idea is to change next with prev, prev with current, and current with next.

    def reverseList(self, head):
        prev = None
        curr = head

        while curr:
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        
        return prev

----------------------------------------------------------------------------------------------------
Ac solution code
**Solution1. Iterative Solution**

    public ListNode reverseList(ListNode head) {
    	ListNode prev = null, curr = head;
    	while (curr != null) { 
    	    ListNode next = curr.next;// Save current's next 
    		curr.next = prev;// Point current.next to prev
    		prev = curr;// Set the current node as prev
    		curr = next;// Forward current node to next 
    	}
    	return prev;
    }

**Solution2. Recursive Solution**
 
    public ListNode reverseList(ListNode head) {
    	return reverseList(head, null);
    }	  
    public ListNode reverseList(ListNode curr, ListNode prev) {
    	if (curr == null) return prev;
    	ListNode next = curr.next;// Save current's next 
    	curr.next = prev;// Point current.next to prev
    	return reverseList(next, curr);// // Forward current node to next; Set the current node as prev
    }



----------------------------------------------------------------------------------------------------
Clear iterative Python solution
    class Solution(object):
        def reverseList(self, head):
            
            if not head: return head
            
            p, q = head, head.next
            p.next = None
            
            while q:
                tmp, q.next = q.next, p
                p, q = q, tmp
            
            return p

----------------------------------------------------------------------------------------------------
Share my Accepted Java solution - iteratively and recursively:
**Iteratively:**

    public ListNode reverseList(ListNode head) {
            if(head == null || head.next == null)
                return head;
            ListNode pre = null;
            ListNode curr = head;
            while(curr != null){
                ListNode next = curr.next;
                curr.next = pre;
                pre = curr;
                curr = next;
            }
            return pre;
        }

**Recursively:**

    public class Solution {     
         public ListNode reverseList(ListNode head) {         
                 if(head == null || head.next == null)             
                         return head;         
                 ListNode second = head.next;        
                 head.next = null;         
                ListNode newHead = reverseList(second);         
                second.next = head;         
                return newHead;     
            } 
         }

Any suggestions for improvements are welcome.

----------------------------------------------------------------------------------------------------
My iterative solution in Java: AC
My solution is below:

    public ListNode reverseList(ListNode head) {
        ListNode first = null;
        ListNode tail = head;
        while (tail != null) {
            ListNode tmp = tail;
            tail = tail.next;
            tmp.next = first;
            first = tmp;
        }
        return first;
    }

    
Btw, I thought there is no need to judge the NULL Pointer in my solution.

----------------------------------------------------------------------------------------------------
Three concise python solution.
Method 1: uses self as a dummy node for swapping

    def reverseList(self, head):
        pre, pre.next, tail = self, head, head
        while tail and tail.next:
            pre.next, pre.next.next, tail.next = \
                      tail.next, pre.next, tail.next.next
        return self.next

Method 2: swapping using two variable, pre and cur

    def reverseList(self, head):
        pre, cur = None, head
        while cur:
            cur.next, pre, cur = pre, cur, cur.next
        return pre

Method 3: Recursive method by storing previous node in the function argument.

    def reverseList(self, head, pre = None):
        if not head: return pre
        cur, head.next = head.next, pre
        return self.reverseList(cur, head)

----------------------------------------------------------------------------------------------------
My Java solution
    public class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
		while (head != null) {
			ListNode temp = head.next;
			head.next = prev;
			prev = head;
			head = temp;
		}
		return prev;
    }
}

----------------------------------------------------------------------------------------------------
0ms Simple Java Solution
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        while(head != null){
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }

----------------------------------------------------------------------------------------------------
