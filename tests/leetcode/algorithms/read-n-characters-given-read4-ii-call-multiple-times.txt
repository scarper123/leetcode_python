O(n), BFS solution
I try to change this problem to a BFS problem, where nodes in level i are all the nodes that can be reached in i-1th jump. for example.   2 3 1 1 4 , is 
                   2||
               3   1||
               1   4  || 

clearly,  the minimum jump of 4 is 2 since 4 is in level 3.  my ac code.



     int jump(int A[], int n) {
    	 if(n<2)return 0;
    	 int level=0,currentMax=0,i=0,nextMax=0;
    
    	 while(currentMax-i+1>0){		//nodes count of current level>0
    		 level++;
    		 for(;i<=currentMax;i++){	//traverse current level , and update the max reach of next level
    			nextMax=max(nextMax,A[i]+i);
    			if(nextMax>=n-1)return level;   // if last element is in level+1,  then the min jump=level 
    		 }
    		 currentMax=nextMax;
    	 }
    	 return 0;
     }











----------------------------------------------------------------------------------------------------
Single loop simple java solution
    public int jump(int[] A) {
        int sc = 0;
        int e = 0;
        int max = 0;
        for(int i=0; i<A.length-1; i++) {
            max = Math.max(max, i+A[i]);
            if( i == e ) {
                sc++;
                e = max;
            } 
        }
        return sc;
    }

----------------------------------------------------------------------------------------------------
Concise O(n) one loop JAVA solution based on Greedy
**Explanation**

The main idea is based on greedy. Let's say the range of the current jump is [curBegin, curEnd], curFarthest is the farthest point that all points in [curBegin, curEnd] can reach.  Once the current point reaches curEnd, then trigger another jump, and set the new curEnd with curFarthest, then keep the above steps, as the following:

    public int jump(int[] A) {
    	int jumps = 0, curEnd = 0, curFarthest = 0;
    	for (int i = 0; i < A.length - 1; i++) {
    		curFarthest = Math.max(curFarthest, i + A[i]);
    		if (i == curEnd) {
    			jumps++;
    			curEnd = curFarthest;
    		}
    	}
    	return jumps;
    }

----------------------------------------------------------------------------------------------------
Sharing My AC Java Solution
Hi All, below is my AC solution:
 
>     public int jump(int[] A) {
>         int maxReach = A[0];
>         int edge = 0;
>         int minstep = 0;
>         
>         for(int i = 1; i < A.length; i++) {
>             if (i > edge) {
>                 minstep += 1;
>                 edge = maxReach;
>                 if(edge > A.length - 1)
>                     return minstep;
>             }
>             maxReach = Math.max(maxReach, A[i] + i);
>             if (maxReach == i):
>                 return -1;
>         }
>         
>         return minstep;
>     } 

When iterate the array, I set an edge for the Search phase, which means that if I exceeds the edge, the minstep must add one and the maxReach will be update. And when the last index is within the range of the edge, output the minstep.

[2, 3, 1, 1, 4]

First, the edge is 0;
Second, after start iterate the array, it exceeds the edge 0 when reaching the A[0] and update the edge to 2;
Third, after it reach the A[2], it exceeds the edge 2 and update the new edge to the maxReach 4.
Finally, end of the array is inside the edge, output the minstep.

----------------------------------------------------------------------------------------------------
10-lines C++ (16ms) &#x2F; Python BFS Solutions with Explanations
This problem has a nice BFS structure. Let's illustrate it using the example `nums = [2, 3, 1, 1, 4]` in the problem statement. We are initially at position `0`. Then we can move at most `nums[0]` steps from it. So, after one move, we may reach `nums[1] = 3` or `nums[2] = 1`. So these nodes are reachable in `1` move. From these nodes, we can further move to `nums[3] = 1` and `nums[4] = 4`. Now you can see that the target `nums[4] = 4` is reachable in `2` moves. 

Putting these into codes, we keep two pointers `start` and `end` that record the current range of the starting nodes. Each time after we make a move, update `start` to be `end  + 1` and `end` to be the farthest index that can be reached in `1` move from the current `[start, end]`. 
 
To get an accepted solution, it is important to handle all the edge cases. And the following codes handle all of them in a unified way without using the unclean `if` statements :-)
 
----------
**C++**

    class Solution {
    public:
        int jump(vector<int>& nums) {
            int n = nums.size(), step = 0, start = 0, end = 0;
            while (end < n - 1) {
                step++; 
    			int maxend = end + 1;
    			for (int i = start; i <= end; i++) {
                    if (i + nums[i] >= n - 1) return step;
    				maxend = max(maxend, i + nums[i]);
    			}
                start = end + 1;
                end = maxend;
            }
    		return step;
        }
    };

----------
**Python** 

    class Solution:
        # @param {integer[]} nums
        # @return {integer}
        def jump(self, nums):
            n, start, end, step = len(nums), 0, 0, 0
            while end < n - 1:
                step += 1
                maxend = end + 1
                for i in range(start, end + 1):
                    if i + nums[i] >= n - 1:
                        return step
                    maxend = max(maxend, i + nums[i])
                start, end = end + 1, maxend
            return step

----------------------------------------------------------------------------------------------------
Sharing my straightforward C++ solution
    int jump(int A[], int n) {
        if(n == 0){
            return 0;
        }
        int maxReachPos = A[0];
        int curMaxReachPos = A[0];
        int curStep = 1;
        for(int i = 1; i <= min(n, maxReachPos); i++){
            curMaxReachPos = max(curMaxReachPos, i + A[i]);
            if(i == n - 1){
                return curStep;
            }
            if(i == maxReachPos){
                maxReachPos = curMaxReachPos;
                curStep++;
            }
        }
        return 0;
    }

The variable maxReachPos indicates the farthest reachable position and the variable curMaxReachPos indicates the current farthest reachable position.

At the very beginning, both maxReachPos and curMaxReachPos are equal to A[0].

In the For loop, we keep updating curMaxReachPos while i <= maxReachPos. However, if( i == n - 1), we return curStep, which is the minimum step. If i reaches the maxReachPos, we update maxReachPos with curMaxReachPos and increment curStep by one. 

Finally, if we can't reach the end point, just return 0.

----------------------------------------------------------------------------------------------------
Java Solution with explanation
    public class Solution {
    public int jump(int[] nums) {
        // If nums.length < 2, means that we do not
        // need to move at all.
        if (nums == null || nums.length < 2) {
            return 0;
        }

        // First set up current region, which is
        // from 0 to nums[0].
        int l = 0;
        int r = nums[0];
        // Since the length of nums is greater than
        // 1, we need at least 1 step.
        int step = 1;

        // We go through all elements in the region.
        while (l <= r) {

            // If the right of current region is greater
            // than nums.length - 1, that means we are done.
            if (r >= nums.length - 1) {
                return step;
            }

            // We should know how far can we reach in current
            // region.
            int max = Integer.MIN_VALUE;
            for (; l <= r; l++) {
                max = Math.max(max, l + nums[l]);
            }

            // If we can reach far more in this round, we update
            // the boundary of current region, and also add a step.
            if (max > r) {
                l = r;
                r = max;
                step++;
            }
        }

        // We can not finish the job.
        return -1;
    }
}


----------------------------------------------------------------------------------------------------
Easy Python Greedy solution with explanation
    class Solution:
    # @param A, a list of integers
    # @return an integer
    def jump(self, A):
        last_max_reach, current_max_reach = 0 , 0
        njump , i = 0 , 0
        while current_max_reach < len(A)-1:
            while i <= last_max_reach:
                current_max_reach = max(i+A[i],current_max_reach)
                i+=1
            if last_max_reach == current_max_reach:
                return -1
            last_max_reach = current_max_reach
            njump+=1
        return njump


The basic thoughts underline is a greedy style. Every one more jump, you want to jump as far as possible.
In Jump Game I, when you at position i, you care about what is the furthest position could be reached from i th position. but here in Jump Game II, instead you care about what would be the next furthest jump could be made when you could reach as far as ith position from last jump.  So you iterate all positions could be reached from last jump till i th position to find it out.




----------------------------------------------------------------------------------------------------
17ms AC C++ code, very easy to understand
    int jump(int A[], int n) {
    		int i = 0, j = 1, cnt = 0, mx;
    
    		if (n == 1) return 0;
    
    		while (i < n - 1 && i + A[i] < n - 1) {
    			for (mx = j; j <= i + A[i]; j++) { mx = (mx + A[mx] <= j + A[j]) ? j : mx; }
    			i = mx; cnt++;
    		}
    		return ++cnt; /* One more step to last index. */
    	}

All we have to do is to iterate though all positions we can jump from where we standing, find the largest i + A[i] (greedy) and jump to that index. O(n) in time and constant space.

----------------------------------------------------------------------------------------------------
Concise O(n) Java Solution with Explanation
For each step of jump, there is a range you can reach. 
Then try jumping from each position in current range, you will get a new range where the next step can reach.
Repeat this process util the range covers the last index.

    public class Solution {
        public int jump(int[] nums){
            int step = 0;
            for(int l = 0, r = 0; r < nums.length - 1; step++){
            	int rNew = 0;
            	for(int i = l; i <= r; i++) rNew = Math.max(rNew, i + nums[i]);
            	l = r + 1;
            	r = rNew;
            }
            return step;
        }
    }


----------------------------------------------------------------------------------------------------
Easy understand O(n) time, O(1) space code
The main idea is using 2 integer to record the longest distance of current jump can arrive.
If n jump cannot arrive at index i, it must jump one more time. Which means, the least jump time to get index i is (n+1).    


     int jump(vector<int>& nums) {
        if (n <= 1)
            return 0;
        int i, n = nums.size(), lc, ln, step = 1;
        // lc means the longest distance can achieve by current jump
        // ln means the longest distance can achieve by next jump

        lc = nums[0], ln = nums[0]; //Initialize to index 0, the start point.
        for (i = 1; i < n; ++i)
        {
            if (i > lc) //current jump cannot get index i -->>> must jump one more time.
            {
                lc = ln;
                step++;
            }
            if (i + nums[i] > ln) //maintain the furthest distance of next jump can get
                ln = i + nums[i];
            if (lc >= n - 1) //current jump can achieve the last index
                return step;
        }
    }

----------------------------------------------------------------------------------------------------
Is there better solution for Jump Game II?
my solution exceeds time limit.
I use an array to track the min step at i . It seems my solution is not efficient enough. You guys have better solution?

    class Solution {
    public:
        int jump(int A[], int n) {
            vector<int> track(n, 0);
            
            for(int i=1; i<n; i++){
                int min = INT_MAX;
                for(int j=0; j<i; j++){
                    if(track[j] < min && A[j]+j >= i)
                        min = track[j];
                }
                track[i] = min+1;
            }
            return track[n-1];
        }
    };

----------------------------------------------------------------------------------------------------
My C++ BFS solution (O(N) time, O(1) space)
This minimum path problem is a typical BFS problem. Each step, expand all the nodes at the same level (i.e. i in (curEnd, newEnd])


    class Solution {
    public:
        int jump(vector<int>& nums) {
            int steps =1, i, curEnd = 0, newEnd=0, len = nums.size();
            if(len<=1) return 0;
            for(i=0; i<=curEnd; ++i)
            {
                newEnd = max(newEnd, i+nums[i]);
                if(newEnd>=(len-1)) return steps;
                if(i==curEnd)  // end of the current level, move to the next level
                {
                    curEnd = newEnd;
                    ++steps;
                }
            }
            return INT_MAX; // curEnd = newEnd, can not reach the end
        }
    };

----------------------------------------------------------------------------------------------------
Python O(n) solution
    class Solution:
        # @param {integer[]} nums
        # @return {integer}
        def jump(self, nums):
            n, cur_max, next_max, steps = len(nums), 0, 0, 0
            for i in xrange(n):
                if i > cur_max:
                    steps += 1
                    cur_max = next_max
                    if cur_max >= n: break
                next_max = max(next_max, nums[i] + i)
            return steps

----------------------------------------------------------------------------------------------------
Demonstrate the detailed flow|process of my thinking
    one example:
    index      0  1  2  3  4  5  6  7  8  9  10  11
    value      5  9  3  2  1  0  2  3  3  1  0   0
    farthest   5  10 10 10 10 10 10 10 11 11 11  11
        
        my thought -- scan from right to left.
        
            -- to reach index 11, we have to first reach (try best to jump forward)
                -- index 0, 0+5=5, no
                -- index 1, 1+9=10, no
                -- index 2, 2+3=5, no
                -- index 3, 3+2=5, no
                -- index 4, 4+1=5, no
                -- index 5, 5+0=5, no
                -- index 6, 6+2=8, no
                -- index 7, 7+3=10, no
                -- index 8, 8+3=11, yes!
                thus we have to first reach index 8.
            -- to reach index 8, we have to first reach (try best to jump forward)
                -- index 0, 0+5=5, no
                -- index 1, 1+9=10, yes
                thus we have to first reach index 1.
            -- to reach index 1, we have to first reach (try best to jump forward)
                -- index 0, 0+5=5, yes
                thus we have to first reach index 0.
            
            therefore, 3 steps in total.
            
        one issue i thought about.
            -- when scanning from left to right to search for the "viable" index, we take the first "viable" index.
               what if this first "viable" index is not reachable?
               
               for example:
               index  0  1  2  3  4  5  6  7  8  9  10  11
               value  1  6  5  4  3  2  1  3  3  1  1   0
               
               scanned from left to right, the first "viable" index is 8, the second "viable" index is 10.
               what if we cannot reach index 8 but we can reach index 10?
                    -- silly question, lol
               will it take more steps to choose index 8 than 10?
                    -- 8-->11 and 10-->11 both take 1 step
                    -- will it take more steps to reach index 8 than 10?
                        -- the answer is **NO**.
                           if reaching index 10 takes **n** steps, we can definitely reach index 8 in **<=n** steps.
               
               therefore we have no problem to choose the first "viable" index.
               such is the correctness of the algorithm.

----------------------------------------------------------------------------------------------------
5 lines O(N) Python with explanation
Check comments in the code. 

    def jump2(self, A):
        """
        Basically it's a shortest-path problem. 
        As an unweighted graph, BFS should be able to solve it in O(|E|).
        But as it's an array with non-negative numbers, we can't jump backward. 
        So we can do better here.
        Suppose we devided the arrays into segments depending on the elment 
        in the array. So for each segment, we find the farthest index we can 
        jump. For example, the first segment is always A[0]. The second will be
        from A[1] to A[A[0]]. The third will be from A[A[0]] to the farthest 
        index we can find in the second segment. We start looking between 
        the end of the last segment and the begin of the next segment.
        """
        ans = lastIdx = nextIdx = 0
        while nextIdx < len(A) - 1:
            ans += 1
            lastIdx, nextIdx = nextIdx, max(i + A[i] for i in xrange(lastIdx, nextIdx + 1))
        return ans

----------------------------------------------------------------------------------------------------
O(n) runtime, O(1) Space Java Solution
Use two pointer to keep track of lower bound and upper bound each time I move forward.

    public int jump(int[] A) {
            int step = 0;
            int low = 0;
            int high = 0;
            while(high < A.length-1){
                int preLow = low;
                int preHigh = high;
                for(int t = preLow;t <= preHigh;t++)
                    high = Math.max(t+A[t], high);
                low = preHigh+1;
                step++;
            }
            return step;
        }

----------------------------------------------------------------------------------------------------
Bug? what is the output of &#91;0,1&#93;?
if the first jump step is 0, it means you can never reach the end.
then what is the result?


----------------------------------------------------------------------------------------------------
My very simple c++ solution
    class Solution {
    public:
        int jump(vector<int>& nums) {
            int steps = 0, s1 = 0, s2 = 0;// take steps can reach s1, take steps+1 can reach s2
            for (int i = 0; i < nums.size(); ++i) {
                if (s1 >= nums.size()-1) return steps;
                s2 = max(nums[i]+i,s2);
                if (i >= s1) {//steps is not enough, update s1 to s2 and increase steps
                    s1 = s2;
                    steps++;
                }
            }
        }
    };

----------------------------------------------------------------------------------------------------
Sharing my accepted Python code.
I think the runtime should be O(N) and space complexity is O(1).

    def jump(self, A):
        if len(A) <= 1:
            return 0
        end = 0 + A[0]
        start = 0
        step = 1
        maxDis = 0 + A[0]
        while end < len(A)-1:
            for i in range(start+1, end+1):
                maxDis = max(maxDis, A[i]+i)
            start = end
            end = maxDis
            step += 1
            
        return step

----------------------------------------------------------------------------------------------------
