Java accepted simple solution
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> ret = new ArrayList<Integer>();
        
        for(int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]) - 1;
            if(nums[val] > 0) {
                nums[val] = -nums[val];
            }
        }
        
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] > 0) {
                ret.add(i+1);
            }
        }
        return ret;
    }


----------------------------------------------------------------------------------------------------
5-line Java Easy-understanding
public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        for (int i = 0; i < nums.length; i ++) nums[(nums[i]-1) % n] += n;
        for (int i = 0; i < nums.length; i ++) if (nums[i] <= n) res.add(i+1);
        return res;
    }


----------------------------------------------------------------------------------------------------
c++ solution O(1) space
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        int len = nums.size();
        for(int i=0; i<len; i++) {
            int m = abs(nums[i])-1; // index start from 0
            nums[m] = nums[m]>0 ? -nums[m] : nums[m];
        }
        vector<int> res;
        for(int i = 0; i<len; i++) {
            if(nums[i] > 0) res.push_back(i+1);
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Python 4 lines with short explanation
class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        # For each number i in nums,
        # we mark the number that i points as negative.
        # Then we filter the list, get all the indexes
        # who points to a positive number
        for i in xrange(len(nums)):
            index = abs(nums[i]) - 1
            nums[index] = - abs(nums[index])

        return [i + 1 for i in range(len(nums)) if nums[i] > 0]



----------------------------------------------------------------------------------------------------
2ms O(n) In-Space Java
        List<Integer> result = new ArrayList<Integer>();
        for( int i=0;i< nums.length; i++){
            int index = nums[i];
            if(nums[Math.abs(index)-1] > 0){
                nums[Math.abs(index)-1]= -nums[Math.abs(index)-1];
            }
        }
        
        for(int j =1 ;j <= nums.length ; j++){
            if(nums[j-1] > 0){
                result.add(j);
            }
        }
        return result;
        
    }

----------------------------------------------------------------------------------------------------
Python One-liner
def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        return list(set(range(1, len(nums)+1)) - set(nums))


----------------------------------------------------------------------------------------------------
Simple Java In-place sort solution
public class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            while (nums[i] != i + 1 && nums[i] != nums[nums[i] - 1]) {
                int tmp = nums[i];
                nums[i] = nums[tmp - 1];
                nums[tmp - 1] = tmp;
            }
        }
        List<Integer> res = new ArrayList<Integer>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != i + 1) {
                res.add(i + 1);
            }
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Why only once or twice?
<p>Does anyone have an idea why elements appear only once or twice? At least the common <em>&#34;mark by negating&#34;</em> solution also works when elements appear more often. Is there a better solution that takes advantage of the fact that elements don&#39;t appear more than twice?</p>
<p><a class="plugin-mentions-a" href="https://discuss.leetcode.com/uid/47565">&#64;yuhaowang001</a> ?</p>


----------------------------------------------------------------------------------------------------
Python solution without using abs()
class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        for v in nums:
            index = int(v) - 1
            nums[index] += 0.4
        return [i+1 for i in xrange(len(nums)) if nums[i] == int(nums[i])]


----------------------------------------------------------------------------------------------------
C Solution (O(n) and no additional space)
int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {
    int* histogram = (int*) malloc(sizeof(int) * (numsSize + 1)); 
    memset(histogram, 0, sizeof(int) * numsSize);

    for (int index = 0; index < numsSize; index++) {
        histogram[nums[index]]++;
    }

    histogram[0] = 1;
    for (int index = 1; index <= numsSize; index++) {
        if (histogram[index] == 0) {
            histogram[histogram[0]] = index;
            histogram[0]++;
        }
    }
    *returnSize = histogram[0] - 1;
    return &histogram[1];
}


----------------------------------------------------------------------------------------------------
C++_Time: O(n)  Space: O(1)
class Solution {
public:
vector<int> findDisappearedNumbers(vector<int>& nums) {
    vector<int> res;
    if(nums.empty()) return res;
    int n = nums.size();
    for(int i = 0; i < n; ++i){
        while(nums[nums[i]-1] != nums[i]){
            swap(nums[nums[i]-1], nums[i]);
        }
    }
    for(int i = 0; i < n; ++i){
        if(nums[i] != i+1){
            res.push_back(i+1);
        }
    }
    return res;
}
};

----------------------------------------------------------------------------------------------------
Step by step detailed explanation (Python Solution)
class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        N = len(nums)
        for i in range(len(nums)):
            nums[(nums[i]%N)-1] += N
        return [i+1 for i in range(len(nums)) if nums[i]<=N]


----------------------------------------------------------------------------------------------------
Java Using Counter to solve
 List<Integer> result = new ArrayList<Integer>();
        int n = nums.length;
        int a[] = new int [n + 1];
        for(int i =0 ; i <= n; i++)
           a[i] = 0;
        for( int i =0; i < n;i++)
           a[nums[i]]++;
        
        for( int i=1; i <= n;i++){
            if(a[i]==0)
               result.add(i);
        }
        
        return result;

----------------------------------------------------------------------------------------------------
Java two solutions with O(n) time and O(1) space
public class Solution {
    /* marking all numbers present with negative indices*/
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        for(int i=0; i<nums.length; i++){
            if(nums[Math.abs(nums[i])-1]>0){
                nums[Math.abs(nums[i])-1] = - nums[Math.abs(nums[i])-1];
            }
        }
        for(int i=0; i<nums.length; i++){
            if(nums[i]>0){
                list.add(i+1);
            }
        }
    return list;
}
/* repeatedly swapping till all nums are in correct position*/
public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        for(int i=0; i<nums.length; i++){
            int num = nums[i];
           while(num!=nums[num-1]){
               int temp = nums[num-1];
               nums[num-1] = nums[i];
               nums[i] = temp;
              num = nums[i];
           }
        }
        System.out.println(Arrays.toString(nums));
    for(int i=0; i<nums.length; i++){
        if(nums[i]!=i+1) list.add(i+1);
    }
    return list;
}
}


----------------------------------------------------------------------------------------------------
O(N) runtime C++ AC Solution
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        for (int i : nums) {
            int idx = abs(i) - 1;
            nums[idx] = -1 * abs(nums[idx]);
        }
        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0) res.emplace_back(i + 1);
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Time O(N) and space (1)
    for(int i = 0; i < nums.length; i++) {
        int val = Math.abs(nums[i]) - 1;
        if (nums[val] < 0) {
            continue;
        }
        
        nums[val] = nums[val] * -1;
    }
    
    for(int i = 0; i < nums.length; i++) {
        if (nums[i] > 0) {
            result.add(i + 1);
        }
    }
    return result;
}


----------------------------------------------------------------------------------------------------
my java solution, O(n) time and  not use  extra space.
public List<Integer> findDisappearedNumbers(int[] nums) {
    List<Integer> list = new ArrayList<Integer>();
    int val = 0,index = 0;
    for(int i = 0; i < nums.length; i++){
        index = Math.abs(nums[i]) - 1;
        val = Math.abs(nums[index]);
        nums[index] = -val;
        
    }
    for(int i = 0; i < nums.length; i++){
        if(nums[i] > 0){
            list.add(i+1);
        }
    }
    return list;
}

----------------------------------------------------------------------------------------------------
My JS solution! 92ms
var findDisappearedNumbers = function(nums) {
    var res = [];
    for(var i=1;i<nums.length+1;i++){
        if(nums.indexOf(i)===-1)res.push(i)
    }
    return res
};


----------------------------------------------------------------------------------------------------
Python solution without using extra space but O(nlgn)
class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res = []
        nums.sort()
        nums.insert(0, 0)
        nums.append(len(nums))
        i, diff = 1, 0
        while i < len(nums):
            if nums[i] - nums[i - 1] > 1:
                diff = nums[i] - nums[i - 1]
                cur = nums[i - 1] + 1
                while cur != nums[i]:
                    res.append(cur)
                    cur += 1
            i += 1
        return res


----------------------------------------------------------------------------------------------------
Python 1 line with set
def findDisappearedNumbers(self, nums):
    return list(set([i for i in range(1,len(nums)+1)]) - set(nums))


----------------------------------------------------------------------------------------------------
