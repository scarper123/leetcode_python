Share my  java solution
    public class Solution {
    public int calculate(String s) {
        int len;
        if(s==null || (len = s.length())==0) return 0;
        Stack<Integer> stack = new Stack<Integer>();
        int num = 0;
        char sign = '+';
        for(int i=0;i<len;i++){
            if(Character.isDigit(s.charAt(i))){
                num = num*10+s.charAt(i)-'0';
            }
            if((!Character.isDigit(s.charAt(i)) &&' '!=s.charAt(i)) || i==len-1){
                if(sign=='-'){
                    stack.push(-num);
                }
                if(sign=='+'){
                    stack.push(num);
                }
                if(sign=='*'){
                    stack.push(stack.pop()*num);
                }
                if(sign=='/'){
                    stack.push(stack.pop()/num);
                }
                sign = s.charAt(i);
                num = 0;
            }
        }

        int re = 0;
        for(int i:stack){
            re += i;
        }
        return re;
    }
}

----------------------------------------------------------------------------------------------------
17 lines C++, easy, 20 ms
If you don't like the `44 - op` ASCII trick, you can use `op == '+' ? 1 : -1` instead. And wow, I didn't know C++ has `or`. I'm a Python guy and wrote that out of habit and only realized it after getting this accepted :-)

    int calculate(string s) {
        istringstream in('+' + s + '+');
        long long total = 0, term = 0, n;
        char op;
        while (in >> op) {
            if (op == '+' or op == '-') {
                total += term;
                in >> term;
                term *= 44 - op;
            } else {
                in >> n;
                if (op == '*')
                    term *= n;
                else
                    term /= n;
            }
        }
        return total;
    }


----------------------------------------------------------------------------------------------------
Java straight forward iteration Solution with comments, No Stack, O(N) &amp; O(1)
    public int calculate(String s) {
        if (s == null) return 0;
        s = s.trim().replaceAll(" +", "");
        int length = s.length();
        
        int res = 0;
        long preVal = 0; // initial preVal is 0
        char sign = '+'; // initial sign is +
        int i = 0;
        while (i < length) {
            long curVal = 0;
            while (i < length && (int)s.charAt(i) <= 57 && (int)s.charAt(i) >= 48) { // int
                curVal = curVal*10 + (s.charAt(i) - '0');
                i++;
            }
            if (sign == '+') {
                res += preVal;  // update res
                preVal = curVal;
            } else if (sign == '-') {
                res += preVal;  // update res
                preVal = -curVal;
            } else if (sign == '*') {
                preVal = preVal * curVal; // not update res, combine preVal & curVal and keep loop
            } else if (sign == '/') {
                preVal = preVal / curVal; // not update res, combine preVal & curVal and keep loop
            }
            if (i < length) { // getting new sign
                sign = s.charAt(i);
                i++;
            }
        }
        res += preVal;
        return res;
    }

----------------------------------------------------------------------------------------------------
My 16 ms No stack One pass short C++ solution


    class Solution {
    public:
        int calculate(string s) {
            int result = 0, cur_res = 0;
            char op = '+';
            for(int pos = s.find_first_not_of(' '); pos < s.size(); pos = s.find_first_not_of(' ', pos)) {
                if(isdigit(s[pos])) {
                    int tmp = s[pos] - '0';
                    while(++pos < s.size() && isdigit(s[pos]))
                        tmp = tmp*10 + (s[pos] - '0');
                    switch(op) {
                        case '+' : cur_res += tmp; break;
                        case '-' : cur_res -= tmp; break;
                        case '*' : cur_res *= tmp; break;
                        case '/' : cur_res /= tmp; break;
                    }
                }
                else {
                    if(s[pos] == '+' || s[pos] == '-') {
                        result += cur_res;
                        cur_res = 0;
                    }
                    op = s[pos++];
                }
            }
            return result + cur_res;
        }
    };

----------------------------------------------------------------------------------------------------
C++ stack solution.
        
    int calculate(string s) {
        stack<int> myStack;
        char sign = '+';
        int res = 0, tmp = 0;
        for (unsigned int i = 0; i < s.size(); i++) {
            if (isdigit(s[i]))
                tmp = 10*tmp + s[i]-'0';
            if (!isdigit(s[i]) && !isspace(s[i]) || i == s.size()-1) {
                if (sign == '-')
                    myStack.push(-tmp);
                else if (sign == '+')
                    myStack.push(tmp);
                else {
                    int num;
                    if (sign == '*' )
                        num = myStack.top()*tmp;
                    else
                        num = myStack.top()/tmp;
                    myStack.pop();
                    myStack.push(num);
                } 
                sign = s[i];
                tmp = 0;
            }
        }
        while (!myStack.empty()) {
            res += myStack.top();
            myStack.pop();
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
My 28ms C++ code with two stacks (one for op, one for oprand), extension to cover &#x27;(&#x27; &amp; &#x27;)&#x27; also given
Use two stacks : one to save operators, one to save oprands. Every time, if we get a digit, then update curNum, if we get an operator, then it means we get a complete oprand, which is saved in curNum; if the last operator is * or /, then calculate it, otherwise, just save curNum and s[i] (new operator) in the stacks. At last, the opS stack has only "+" & "-", which are the sign of the corresponding operands saved in numS. Then we do sum to get the result.

    class Solution {
    public:
        int calculate(string s) {
           stack<char> opS;
           stack<int>  numS;
           s.push_back(')'); // to make sure the last operand will be saved in the stack e.g. 1+2*3), 2*3 will be calculated and push in the stack
           opS.push('+'); // sign for the first operand
           
           int i, curNum, len = s.size(), res =0;
           for(i=0,curNum=0; i<len; ++i)
           {
               if(isdigit(s[i])) curNum = curNum*10 + s[i] -'0'; // digit, recover the oprand
               else if(isspace(s[i])) continue; // skip the space
               else
               {
                   switch(opS.top())
                   { 
                       case '*': // if the last operator is * / , do calculation
                       case '/':
                            curNum = opS.top()=='/'?numS.top()/curNum : numS.top()*curNum;
                            opS.pop();
                            numS.pop();
                   }
                    numS.push(curNum); /
                    curNum = 0;
                    opS.push(s[i]);
               }
           }
           opS.pop(); // skip the ")"
           while(!opS.empty()) {res += (opS.top()=='-')? -numS.top(): numS.top(); opS.pop(); numS.pop();}
           return res;
        }
    };

The below version covers both +-*/ and ()

    class Solution {
    public:
        int calculate(string s) {
           stack<char> opS;
           stack<int>  numS;
           s = '(' + s + ')';
    
           int i, curNum = 0, len = s.size();
           for(i=0; i<len; ++i)
           {
               if(isdigit(s[i])) curNum = curNum*10 + s[i] -'0';
               else if(isspace(s[i])) continue;
               else if(s[i] == '(')
               {
                    opS.push('(');
                    opS.push('+');
               }
               else
               {
                    switch(opS.top())
                    {
                        case '*':
                        case '/':
                            curNum = opS.top()=='/'?numS.top()/curNum : numS.top()*curNum;
                            opS.pop();
                            numS.pop();
                    }
                    switch(s[i])
                    {
                        case ')':
                            if('-'== opS.top()) curNum = -curNum;
                           opS.pop();
    
                           while(opS.top()!='(') 
                           {
                               curNum += (opS.top()=='-')? -numS.top(): numS.top(); 
                               opS.pop(); 
                               numS.pop();
                           }
                           opS.pop(); // skip '('
                           break;
                        default: //+,-,*,/
                            opS.push(s[i]);
                            numS.push(curNum);
                            curNum = 0;
                    }
               }
           }
           return curNum;
        }
    };

----------------------------------------------------------------------------------------------------
20ms, O(n) time, O(1) space, one scan C++ solution
O(n) time, O(1) space, one scan C++ solution, code maybe optimized though. Every time I got a number, I will aggregate it into the temp result. when I met '+' or '-", temp result will be aggregated into the final result sum. 

     int calculate(string s) {
        int sum = 0; 
        if(s.size() < 1) return sum; 
        int i = 0; 
        int last = 0, last_result = 1;  
        char last_operator = '+'; //remember the last operator
        int sign = 1; 
        while(i < s.size()){
            if(s[i] == ' '){++i; continue;}
            if(s[i] == '+' || s[i] == '-'){
                sum += last_result * sign;
                sign = s[i++] == '+' ? 1 : -1; 
                last_result = 1;
                last_operator = '+'; 
            }
            else if(s[i] == '/' || s[i] == '*'){
                last_operator = s[i];
                ++i; 
            }
            if(isdigit(s[i])){
                last = 0; 
                while(i < s.size() && isdigit(s[i])){
                    last =  last * 10 + s[i++] - '0'; 
                }
                
                if(last_operator == '*') last_result *= last;
                else if(last_operator == '/') last_result /= last;
                else  last_result = last; 
            }
        }
        sum += last_result * sign;
        return sum; 
    }



----------------------------------------------------------------------------------------------------
Python short solution with stack.
        
    def calculate(self, s):
        if not s:
            return "0"
        stack, num, sign = [], 0, "+"
        for i in xrange(len(s)):
            if s[i].isdigit():
                num = num*10+ord(s[i])-ord("0")
            if (not s[i].isdigit() and not s[i].isspace()) or i == len(s)-1:
                if sign == "-":
                    stack.append(-num)
                elif sign == "+":
                    stack.append(num)
                elif sign == "*":
                    stack.append(stack.pop()*num)
                else:
                    tmp = stack.pop()
                    if tmp//num < 0 and tmp%num != 0:
                        stack.append(tmp//num+1)
                    else:
                        stack.append(tmp//num)
                sign = s[i]
                num = 0
        return sum(stack)

----------------------------------------------------------------------------------------------------
Simple C++ solution beats 85% submissions with detailed explanations
**THOUGHT** 

I used a variable 'interim' to calculate interim result. interim result are separated by either '-' or '+'. For example, "1 +2 * 4-5/3", there will be three interims: (+)1, (+)2 * 4, (-)5/3. 

Here is the process, each time, we read a character:

1) If it's a digit, we continue reading until a non-digit appears, we record the number as "num". Then we check the operator before this num as to update the current interim result. Note that, there is no operator before the first number in expressions, so op is initialized to be '+'. Also note that, when a '+' or '-' appears, it means the end of current interim calculation, which should be added to the final answer, and then we reset interim for the next 'interim calculation'.

2) If it's ' ', we skip; 


**PROCESS** 

To walk you though using an example, in "1 + 2*4 - 5/3":

BEG

* op is set to be '+'
* when we read '1', we check the operator before 1, it's '+', so first interim is 1, and "ans = 1";  
* when we read '+', op is set to be '+'
* when we read 2, because the operator before 2 is '+', so 2 is the beginning number of the new interim, so we set interim = (+) 2;
* when we read *, op is set to be *
* when we read 4, interim = (+) 2*4
* when we read '-', op is set to be '-'
* when we read 5, we check the operator before 5 is '-' which indicates the end of current interim, so we update final answer, ans = 1 + 2*4, and interim is reset to be (-) 5;
* when we read '/', op is set to be '/'
* when we read '3', because the operator before 3 is '/', update interim = (-5) / 3.
* When we finished reading everything, add the last interim to final answer: ans = 1 + 2*4 + (-5)/3

END


    class Solution {
    public:
        int calculate(string s) {
            int i = 0, ans = 0, num = 0;
            int interim = 0;
            char op = '+';
            while(i < s.size()){
                if(isdigit(s[i])){
                    num = 0;
                    while(i < s.size() && isdigit(s[i])){
                        num = num * 10 + s[i] - '0';
                        i++;
                    }
                    if(op == '+' || op == '-'){
                        ans += interim;
                        interim = num * (op == '-' ? -1 : 1);
                    }else if(op == '*'){
                        interim *= num;
                    }else if(op == '/'){
                        interim /= num;
                    }
                    continue;
                }
                else if(s[i] != ' ') op = s[i];
               
                i++;
            }    
    
            ans += interim;            
            return ans;
        }
    };

----------------------------------------------------------------------------------------------------
Accepted 16ms O(n) c++ solution, very easy understand.
    class Solution {
    public:
        int calculate(std::string s) {
            len = s.size();
            int i = 0, sign = 1, num = getNext(s, i), res = 0;
            // s[i] is '+', '-', '*' or '/'
            while (i < len)
                if (s[i] == '+') {
                    res += num * sign;
                    sign = 1;
                    num = getNext(s, ++i);
                }
                else if (s[i] == '-') {
                    res += num * sign;
                    sign = -1;
                    num = getNext(s, ++i);
                }
                else if (s[i] == '*')
                    num *= getNext(s, ++i);
                else
                    num /= getNext(s, ++i);
            res += num * sign;
            return res;
        }
    private:
        int len;
        int getNext(std::string &s, int &i) {
            int next = 0;
            while (i < len) {
                if (s[i] >= '0' && s[i] <= '9')
                    next = next * 10 + s[i] - '0';
                else if (s[i] != ' ')
                    return next;
                ++i;
            }
            return next;
        }
    };

----------------------------------------------------------------------------------------------------
Java 344ms O(N) time, O(1) space with comments
    public int calculate(String s) {
        if (s == null) return 0;
        
        int left = 0, num = 0, opt = 0, res = 0;
        int sign = 1;
        char c;
        for (int i = 0; i < s.length(); i++) {
            c = s.charAt(i);
            if (c == ' ') continue;
            if (Character.isDigit(c)) {         // if c is digit, add up the number
                num = 10 * num + (int)(c - '0');
            } else {                            // c is +-*/
                if (opt == 1) num = left * num;     // if operator was */, do the calculation
                if (opt == -1) num = left / num;
                opt = 0;    // clear the operator
            
                if (c == '+' || c == '-') {         // c is +-, so result can be updated
                    res += sign * num;
                    sign = c == '+' ? 1 : -1;       // update the last sign
                } else if (c == '*' || c == '/') {
                    left = num;                     // update the number to the left of * or /
                    opt = c == '*' ? 1 : -1;        // 1 -> *, -1 -> /
                }
                
                num = 0;    // just see an operator, have to clear the number
            }
        }
        
        // for the last number
        if (opt == 1)           // * n at the end
            res += sign * left * num;
        else if (opt == -1)     // / n at the end
            res += sign * left / num;
        else                    // +- n at the end
            res += sign * num;
        
        return res;
    }

----------------------------------------------------------------------------------------------------
Explanation for Java O(n) time &amp; O(1) space solution
To have O(1) space solution, we have to drop the stack. To see why we can drop it, we need to reexamine the main purpose of the stack: it is used to hold temporary results for partial expressions with lower precedence levels.

For problem [224. Basic Calculator][1], the depth of precedence levels is unknown, since we can have arbitrary levels of parentheses in the expression. Therefore we do need the stack in the solution.

However for the current problem, we only have two precedence levels, lower level with '+' & '-' operations and higher level with '\*' & '/' operations. So the stack can be replaced by two variables, one for the lower level and the other for the higher level. Note that when we are done with a partial expression involving '/' & '*' operations only, the result will fall back to the lower level.

Now let's look at each level separately.

First of course we will have a variable "num" to represent the current number involved in the operations.

For the lower level, we use a variable "pre" to denote the partial result. And as usual we will have a variable "sign" to indicate the sign of the incoming result.

For the higher level, we use a variable "curr" to represent the partial result, and another variable "op" to indicate what operation should be performed:

 1. If op = 0, no '*' or '/' operation is needed and we simply assign num to curr; 
 2. if op = 1, we perform multiplication:  curr = curr * num;
 3. if op = -1, we perform division: curr = curr / num.

The key now is to figure out what to do depending on the scanned character from string s. There are three cases:

 1. **A digit is hit**: As usual we will update the variable "num". One more step here is that we need to determine if this is the last digit of the current number. If so, we need to perform the corresponding operation depending on the value of "op" and update the value of "curr" (It is assumed that we are at the higher precedence level by default);
 2. **A '*' or '/' is hit**: We need to update the value of "op" and reset "num" to 0;
 3. **A '+' or '-' is hit**: Current higher precedence level is over, so the partial result (which is denoted by "curr") will fall back to the lower level and can be incorporated into the lower level partial result "pre". And of course we need to update the "sign" as well as reset "op" and "num" to 0. 

One last point is that the string will end with digit or space, so we need to add the result for the last partial higher level expression to "pre". Here is the Java program.

    public int calculate(String s) {
        int pre = 0, curr = 0, sign = 1, op = 0, num = 0;
        
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + (s.charAt(i) - '0');
                if (i == s.length() - 1 || !Character.isDigit(s.charAt(i + 1))) {
                	curr = (op == 0 ? num : (op == 1 ? curr * num : curr / num));
                }
                
            } else if (s.charAt(i) == '*' || s.charAt(i) == '/') {
                op = (s.charAt(i) == '*' ? 1 : -1);
                num = 0;
                
            } else if (s.charAt(i) == '+' || s.charAt(i) == '-') {
                pre += sign * curr;
                sign = (s.charAt(i) == '+' ? 1 : -1);
                op = 0;
                num = 0;
            }
        }
        
        return pre + sign * curr;
    }

  [1]: https://leetcode.com/problems/basic-calculator/

----------------------------------------------------------------------------------------------------
Easy 7-12 lines, Three solutions
Three quite different Python solutions.

---

**Solution 1: *Split the splits*** (10 lines, 520 ms)

Split the expression into terms on `+` and `-`. Split each term into numbers on `*` and `/`.

    def calculate(self, s):
        total = 0
        outer = iter(['+'] + re.split('([+-])', s))
        for addsub in outer:
            inner = iter(['*'] + re.split('([*/])', next(outer)))
            term = 1
            for muldiv in inner:
                n = int(next(inner))
                term = term*n if muldiv == '*' else term/n
            total += term if addsub == '+' else -term
        return total

---

**Solution 2: *Process tokens from left to right*** (12 lines, 224 ms):

Iterate over the tokens (numbers and operators), keeping track of the current total, the current term sign (+1 or -1), and the current term value.

    def calculate(self, s):
        tokens = iter(re.findall('\d+|\S', s))
        total, sign = 0, 1
        for token in tokens:
            if token in '+-':
                total += sign * term
                sign = ' +'.find(token)
            elif token in '*/':
                n = int(next(tokens))
                term = term*n if token == '*' else term/n
            else:
                term = int(token)
        return total + sign * term

I could make that one more space-efficient with

        tokens = (m.group() for m in re.finditer('\d+|\S', s))

but that's less pretty and it actually increased the runtime by about 100 ms.

Also, I could add `+` to the input (i.e., `findall(..., s + '+')`), then I could just `return total` and wouldn't have to add the final term there. Pretty much doesn't change the runtime.

---

**Solution 3: *First or second operation, repeat...*** (7 lines, 244 ms)

As long as there is any operation left to do, do either the first or the second operation, depending on what they are. Implemented by putting the tokens in a list in reverse order, because making a change at the end of the list is O(1) and making a change at the start would be O(n).

    def calculate(self, s):
        t = re.findall('\d+|\S', s + '+0')[::-1]
        t[::2] = map(int, t[::2])
        while len(t) > 3:
            i = len(t) - 5 + 2 * (t[-2] in '*/' or t[-4] not in '*/')
            b, op, a = t[i:i+3]
            t[i:i+3] = a+b if op=='+' else a-b if op=='-' else a*b if op=='*' else a/b,
        return t[2]


----------------------------------------------------------------------------------------------------
One of the test cases is contradicting the question
The question states: "the expression string contains only non-negative integers", yet there is a test case "0-2147483648". 

I suppose the "non-negative integers" here should only refer to those i in which (i >= 0 && i <= Integer.MAX_VALUE)?


----------------------------------------------------------------------------------------------------
O(n) time, o(1) space, python, 260ms
basic idea:

only need 2 variable (a,b) to save the data. 

if operator is '*' or '/', use b to calculate , then save it to b.

if operator is  '+' or '-', then a = a +/- b b = new_number



    def calculate(self, s):
        s += '#'
        num = 0
        a = b = None
        preop = op = None
        for c in s:
            if c in ('+','-','*','/','#'):
                if op is None:
                    a = num
                elif op in ('+','-'):
                    if preop is None:
                        b = num
                    else:
                        a = a + b if preop == '+' else a - b
                        b = num
                    preop = op
                else:
                    if preop is None:
                        a = a * num if op == '*' else a / num
                    else:
                        b = b * num if op == '*' else b / num
                op = c
                num = 0
            elif c != ' ':
                num = num * 10 + int(c)
        if preop is None:
            return a
        return a + b if preop == '+' else a - b


----------------------------------------------------------------------------------------------------
Easy clean C++ solution in one pass 20ms w&#x2F;o stack
  

 - pre_num - stores the previous operated num, i.e "1" below
 - op - the previous operation, "+" below. When "op" is +/-, we can safely "res += pre_num"
 - num -  stores the current operand.

1 + 2 * 3

Using res and pre_num is to remove the usage of stack.


 

     class Solution {
        public:
        
            int calculate(string s) {
                if (s.empty()) return 0;
                
                int res = 0;
                int pre_num  = 0;
                
                int num = 0;
                int i = 0;
                char ch = '#';
                while (i <= s.size()) {
                    if (i < s.size() && s[i] >= '0' && s[i] <='9') {
                        num = num*10+s[i] - '0';
                    } else if (i == s.size() || s[i] != ' ') {
                        if (ch == '-' || ch == '+' || ch == '#') {
                            num  = ch == '-'? -num : num;
                            res += pre_num;
                            pre_num = num;
                        } else if (ch == '*') {
                            pre_num = pre_num * num;
                        } else {
                            pre_num = pre_num / num;
                        }
                        num = 0;
                        
                        if (i < s.size()) ch = s[i];
                    }
                    i++;
                }
                
                res += pre_num;
                
                return res;
            }
        };

----------------------------------------------------------------------------------------------------
Share my clean java solution, O(1) space, no stack, beats 99.72%
    public class Solution {
        public int calculate(String s) {
            if(s == null || s.length() == 0)
                return 0;
            boolean divide = false;
            int result = 0, sign = 1, num = 0, preNum = 0;
            for(char c: s.toCharArray()) {
                if(c >= '0' && c <= '9')
                    num = num * 10 + c -'0';
                else if(c == '+' || c == '-' || c == '*' || c == '/') {
                    if(divide) {
                        num = preNum/num;
                        divide = false;
                    }
                    //record the temp result, think about case 2 * 5 / 2
                    if(c == '/') {
                        divide = true;
                        preNum = num * sign;
                        sign = 1;
                    } else if(c == '*'){
                        sign *= num;
                    } else {
                        result += sign * num;
                        sign = c == '+' ? 1 : -1;
                    }
                    num = 0;
                }
            }
            if(num > 0) {
                if(divide)
                    num = preNum/num;
                result += sign * num;
            }
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
Clean Java solution using two queue
The idea is to scan from begin to end of the string, handle each case.
For case * or /, use two queues to store the number and operater.
For case + or -, if the queue is not empty, then we must have previous part with * or / need to be calculated.

    public class Solution {
        public int calculate(String s) {
        Queue<Integer> queue = new LinkedList<Integer>();
        Queue<Character> cQueue = new LinkedList<Character>();
        int temp = 0;
        int sign = 1;
        int result = 0;
        for(int i=0;i<s.length();i++) {
            char c = s.charAt(i);
            if(Character.isDigit(c)) {
                temp = 10 * temp + (int)(c - '0');
            }
            else if(c == '+') {
                if(!queue.isEmpty()) {
                    temp = calculateQueue(queue, cQueue, temp);
                }
                result += sign * temp;
                temp = 0;
                sign = 1;
            } else if(c == '-') {
                if(!queue.isEmpty()) {
                    temp = calculateQueue(queue, cQueue, temp);
                }
                result += sign * temp;
                temp = 0;
                sign = -1;
            } else if(c == '*' || c == '/'){
                queue.add(temp);
                cQueue.add(c);
                temp = 0;
            }
        }
        //handle the remaining part
        if(temp != 0) {
            if(!queue.isEmpty()) {
                temp = calculateQueue(queue, cQueue, temp);
            }
            result += sign * temp;
        }
        return result;
    }
    
    //calculate previous temp with * or /
    public int calculateQueue(Queue<Integer> queue, Queue<Character> cQueue, int temp) {
        int num = 0;
        char sign2 = ' ';
        if(!queue.isEmpty()) {
            num = queue.poll();
            sign2 = cQueue.poll();
        }
        while(!queue.isEmpty()) {
            int num2 = queue.poll();
            if(sign2 == '*') {
                num = num * num2;
            } else if(sign2 == '/') {
                num = num/num2;
            }
            sign2 = cQueue.poll();
        }
        if(sign2 == '*') {
                temp = num * temp;
        } 
        else if(sign2 == '/') {
                temp = num/temp;
        }
        return temp;
        }
    }

----------------------------------------------------------------------------------------------------
Clear Pyhon solution with stack
    class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        #function to change string to int, and move i
        def nextint(s,i):
            res=0
            while i<len(s) and s[i] not in '+-*/':
                res=res*10+ord(s[i])-ord('0')
                i+=1
            return (res,i)
        #init
        s=s.replace(' ','')
        stack=[]
        i=0
        tmp,i=nextint(s,0)
        stack.append(tmp)
        #push in stack
        while i < len(s):
            op=s[i]
            tmp,i=nextint(s,i+1)
            
            if op == '+': stack.append(tmp)
            elif op == '-': stack.append(-tmp)
            elif op == '*': stack[-1]*=tmp
            elif op == '/': stack[-1]=stack[-1]//tmp if stack[-1]>=0 else -((-stack[-1])//tmp)
        #pop the stack
        res=0
        for num in stack:
            res+=num
        return res

----------------------------------------------------------------------------------------------------
Share my solution. it is very simple
I use two phases commit. First commit the number to variable mul. Then commit to final result ans. 

After got one operator and a number, the commit process is started.

if +,-, first commit mul to final result, then commit number (num) into variable mul

if *,/, commit number (num) into variable mul

two ++ are appended, to clean up commit process.

    class Solution {
    public:
        int calculate(string s) {
            int ans = 0;
            int mul = 0, num = 0;
            char op = '+';
            s.append(2, '+');
            for (auto ch: s) {
                if (isdigit(ch))
                    num = num * 10 + ch - '0';
                else if (ch != ' ') {
                    if (op == '+' || op == '-') {
                        ans += mul;
                        mul = (44 - op) * num; // + is 43, - is 45, in ascii
                    }
                    else if (op == '*')
                        mul *= num;
                    else
                        mul /= num;
                    
                    num = 0;
                    op = ch;
                }
            }
            return ans;
        }
    };

----------------------------------------------------------------------------------------------------
