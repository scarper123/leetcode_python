This is my AC code, may help you
    class Solution {
    public:
        void merge(int A[], int m, int B[], int n) {
            int i=m-1;
    		int j=n-1;
    		int k = m+n-1;
    		while(i >=0 && j>=0)
    		{
    			if(A[i] > B[j])
    				A[k--] = A[i--];
    			else
    				A[k--] = B[j--];
    		}
    		while(j>=0)
    			A[k--] = B[j--];
        }
    };

----------------------------------------------------------------------------------------------------
4ms C++ solution with single loop
This code relies on the simple observation that once all of the numbers from `nums2` have been merged into `nums1`, the rest of the numbers in `nums1` that were not moved are already in the correct place.

    class Solution {
    public:
        void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
            int i = m - 1, j = n - 1, tar = m + n - 1;
            while (j >= 0) {
                nums1[tar--] = i >= 0 && nums1[i] > nums2[j] ? nums1[i--] : nums2[j--];
            }
        }
    };

----------------------------------------------------------------------------------------------------
3 line Java Solution
    public void merge(int A[], int m, int B[], int n) {
        int i=m-1, j=n-1, k=m+n-1;
        while (i>-1 && j>-1) A[k--]= (A[i]>B[j]) ? A[i--] : B[j--];
        while (j>-1)         A[k--]=B[j--];
    }

----------------------------------------------------------------------------------------------------
Beautiful Python Solution
    def merge(self, nums1, m, nums2, n):
            while m > 0 and n > 0:
                if nums1[m-1] >= nums2[n-1]:
                    nums1[m+n-1] = nums1[m-1]
                    m -= 1
                else:
                    nums1[m+n-1] = nums2[n-1]
                    n -= 1
            if n > 0:
                nums1[:n] = nums2[:n]

----------------------------------------------------------------------------------------------------
1 Line Solution
    while(n>0) A[m+n-1] = (m==0||B[n-1] > A[m-1]) ? B[--n] : A[--m];

----------------------------------------------------------------------------------------------------
Share my accepted Java solution!
    public class Solution {
        public void merge(int A[], int m, int B[], int n) {
            int i = m - 1, j = n - 1, k = m + n - 1;
            while(i >= 0 && j >= 0) {
                A[k--] = A[i] > B[j] ? A[i--] : B[j--];
            }
            while(j >= 0) {
                A[k--] = B[j--];
            }
        }
    }

----------------------------------------------------------------------------------------------------
Cleanest Solution
    class Solution {
    public:
        void merge(int A[], int m, int B[], int n) {
            int i = m-1;
            int j = n-1;
            for (int k = m+n-1; k >= 0; k--) {
                if (i < 0)              A[k] = B[j--];
                else if (j < 0)         A[k] = A[i--];
                else if (A[i] < B[j])   A[k] = B[j--];
                else                    A[k] = A[i--];
            }
        }
    };

----------------------------------------------------------------------------------------------------
2 lines very simple C++ solution
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       for(int i=m-1, j=n-1, k=m+n-1; j>=0; )
           nums1[k--] = i>=0 && nums1[i]>nums2[j]? nums1[i--]: nums2[j--];
    }

----------------------------------------------------------------------------------------------------
C++ solution, runtime O(n), in-place, easy to understand
The idea is to go from the last indexes of both arrays, compare and put elements from either A or B to the final position, which can easily get since we know that A have enough space to store them all and we know size of A and B. Please refer to the comments for details.

    class Solution {
    public:
        void merge(int A[], int m, int B[], int n) {
            
            int a=m-1;
            int b=n-1;
            int i=m+n-1;    // calculate the index of the last element of the merged array
            
            // go from the back by A and B and compare and put to the A element which is larger
            while(a>=0 && b>=0){
                if(A[a]>B[b])   A[i--]=A[a--];
                else            A[i--]=B[b--];
            }
            
            // if B is longer than A just copy the rest of B to A location, otherwise no need to do anything
            while(b>=0)         A[i--]=B[b--];
        }
    };

----------------------------------------------------------------------------------------------------
Accepted Java solution O(m+n) no extra space
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int curr1 = m -1, curr2 = n -1, start = m + n-1;
        while (curr1 >= 0 && curr2 >=0){
            if(nums1[curr1] > nums2[curr2]) nums1[start--] = nums1[curr1--];
            else nums1[start--] = nums2[curr2--];
        }
        if(curr1 <= 0) {
            while(curr2>= 0) nums1[start--] = nums2[curr2--];
        }
    }

----------------------------------------------------------------------------------------------------
A bug in testing case?
I found that for corner case
nums1 = [1], m = 1;
nums2 = [0], n = 1.
The result should be [0,1], but Leetcode gives [1].
Does Leetcode go wrong here?


----------------------------------------------------------------------------------------------------
Concise solution without any new variable (3 lines)
Like other solution, we put the largest element to the end. Use m, n for assistance.

    void merge(int A[], int m, int B[], int n) {
        while (m >= 1 || n >= 1)
        {
            A[m + n - 1] = n < 1 || (m >= 1 && A[m - 1] >= B[n - 1]) ? A[--m] : B[--n];
        }
    }



----------------------------------------------------------------------------------------------------
My clean java solution
Thanks @der for the idea of solving from the end, which avoid extra moving manipulation.

    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int tail1 = m - 1, tail2 = n - 1, finished = m + n - 1;
        while (tail1 >= 0 && tail2 >= 0) {
            nums1[finished--] = (nums1[tail1] > nums2[tail2]) ? 
                                 nums1[tail1--] : nums2[tail2--];
        }

        while (tail2 >= 0) { //only need to combine with remaining nums2
            nums1[finished--] = nums2[tail2--];
        }
    }

----------------------------------------------------------------------------------------------------
My simple solution
    class Solution {
    public:
        void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
            int i = m - 1;
            int j = n - 1;
            int k = m + n - 1;
        
            while( i >= 0 && j >= 0 )
            {
                if( nums1[ i ] > nums2[ j ] )
                    nums1[ k-- ] = nums1[ i-- ];
                else
                    nums1[ k-- ] = nums2[ j-- ];
            }
        
            while( j >= 0 )
                nums1[ k-- ] = nums2[ j-- ];
        }
    };

----------------------------------------------------------------------------------------------------
0ms Java intuitive solution, insert from the back, keep 3 pointers
it is ok to use two pointers, just tracking the end of nums1 and nums2; But i feel that the three pointer solution is easier to visualize.


    public class Solution {
        public void merge(int[] nums1, int m, int[] nums2, int n) {
            // insert from the m+n-1 position at the bigger array
            // keep 3 pointers: one at the insertion point
            // one at the end of nums1; one at the end of nums2
            int insertP = m + n - 1;
            int nums1P = m - 1;
            int nums2P = n - 1;
            
            while (nums1P >= 0 && nums2P >= 0) {
                if (nums1[nums1P] > nums2[nums2P]) {
                    nums1[insertP--] = nums1[nums1P--];
                } else {
                    nums1[insertP--] = nums2[nums2P--];
                }
            }
            while (nums2P >= 0) {
                nums1[insertP--] = nums2[nums2P--];
            }
        }
    }

----------------------------------------------------------------------------------------------------
One loop solution, simple
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        while(n>0){
            if(m>0&&nums1[m-1]>nums2[n-1]){
                nums1[m+n-1] = nums1[m-1];
                m--;
            }
            else{
                nums1[m+n-1] = nums2[n-1];
                n--;
            }
        }
    }

----------------------------------------------------------------------------------------------------
Python easy to follow solution.
        
    def merge(self, nums1, m, nums2, n):
        l1, l2, end = m-1, n-1, m+n-1
        while l1 >= 0 and l2 >= 0:
            if nums2[l2] > nums1[l1]:
                nums1[end] = nums2[l2]
                l2 -= 1
            else:
                nums1[end] = nums1[l1]
                l1 -= 1
            end -= 1
        if l1 < 0: # if nums2 left
            nums1[:l2+1] = nums2[:l2+1]

     def merge1(self, nums1, m, nums2, n):
        m, n = m-1, n-1
        while m >= 0 and n >= 0:
            if nums1[m] > nums2[n]:
                nums1[m+n+1] = nums1[m]
                m -= 1
            else:
                nums1[m+n+1] = nums2[n]
                n -= 1
        if n != -1: # nums2 is still left
            nums1[:n+1] = nums2[:n+1]

----------------------------------------------------------------------------------------------------
*Java* one-pass, 4 lines, 0ms
    public void merge(int[] nums1, int m, int[] nums2, int n) {
		int p = m+n, p1 = m-1, p2 = n-1;
		while(--p>=0) {
			if(p1<0 || (p2>=0 && nums1[p1]<nums2[p2])) nums1[p] = nums2[p2--];
			else nums1[p] = nums1[p1--];
		}
    }

----------------------------------------------------------------------------------------------------
My 5 lines AC solution, 9ms
    class Solution {
         public:
              void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
                  int index = m + n - 1, i = m - 1, j = n - 1;
                  while(j >=0)
                      if(i < 0 || nums1[i] < nums2[j])
                          nums1[index--] = nums2[j--];
                      else nums1[index--] = nums1[i--];
               }
    };


----------------------------------------------------------------------------------------------------
Java easy to understand solution.
        
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m-1, j = n-1, k = m+n-1;
        while (i>=0 && j>=0) {
             nums1[k--] = nums1[i]>nums2[j]?nums1[i--]:nums2[j--];
        }
        while (i==-1 && j>=0) 
            nums1[j] = nums2[j--];
    }

----------------------------------------------------------------------------------------------------
