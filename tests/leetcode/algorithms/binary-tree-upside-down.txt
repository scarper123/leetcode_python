Easiest JAVA Solution with Graph Explanation
Remember how we do multiplication? 

Start from right to left, perform multiplication on every pair of digits, and add them together.  Let's draw the process! From the following draft, we can immediately conclude:

     `num1[i] * num2[j]` will be placed at indices `[i + j`, `i + j + 1]` 
 
<hr>

<a href='https://drscdn.500px.org/photo/130178585/m%3D2048/300d71f784f679d5e70fadda8ad7d68f' target='_blank'><img src='https://drscdn.500px.org/photo/130178585/m%3D2048/300d71f784f679d5e70fadda8ad7d68f' border='0' alt="Multiplication" width="100%"/></a>

<hr>

Here is my solution. Hope it helps!

    public String multiply(String num1, String num2) {
        int m = num1.length(), n = num2.length();
        int[] pos = new int[m + n];
       
        for(int i = m - 1; i >= 0; i--) {
            for(int j = n - 1; j >= 0; j--) {
                int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0'); 
                int p1 = i + j, p2 = i + j + 1;
                int sum = mul + pos[p2];

                pos[p1] += sum / 10;
                pos[p2] = (sum) % 10;
            }
        }  
        
        StringBuilder sb = new StringBuilder();
        for(int p : pos) if(!(sb.length() == 0 && p == 0)) sb.append(p);
        return sb.length() == 0 ? "0" : sb.toString();
    }


  [1]: http://postimg.org/image/tltx29dcx/

----------------------------------------------------------------------------------------------------
Brief C++ solution using only strings and without reversal
This is the standard manual multiplication algorithm. We use two nested for loops, working backward from the end of each input number. We pre-allocate our result and accumulate our partial result in there. One special case to note is when our carry requires us to write to our sum string outside of our for loop.

At the end, we trim any leading zeros, or return 0 if we computed nothing but zeros.

    string multiply(string num1, string num2) {
        string sum(num1.size() + num2.size(), '0');
        
        for (int i = num1.size() - 1; 0 <= i; --i) {
            int carry = 0;
            for (int j = num2.size() - 1; 0 <= j; --j) {
                int tmp = (sum[i + j + 1] - '0') + (num1[i] - '0') * (num2[j] - '0') + carry;
                sum[i + j + 1] = tmp % 10 + '0';
                carry = tmp / 10;
            }
            sum[i] += carry;
        }
        
        size_t startpos = sum.find_first_not_of("0");
        if (string::npos != startpos) {
            return sum.substr(startpos);
        }
        return "0";
    }

----------------------------------------------------------------------------------------------------
AC solution in Java with explanation
    public class Solution {
        public String multiply(String num1, String num2) {
            int n1 = num1.length(), n2 = num2.length();
            int[] products = new int[n1 + n2];
            for (int i = n1 - 1; i >= 0; i--) {
                for (int j = n2 - 1; j >= 0; j--) {
                    int d1 = num1.charAt(i) - '0';
                    int d2 = num2.charAt(j) - '0';
                    products[i + j + 1] += d1 * d2;
                }
            }
            int carry = 0;
            for (int i = products.length - 1; i >= 0; i--) {
                int tmp = (products[i] + carry) % 10;
                carry = (products[i] + carry) / 10;
                products[i] = tmp;
            }
            StringBuilder sb = new StringBuilder();
            for (int num : products) sb.append(num);
            while (sb.length() != 0 && sb.charAt(0) == '0') sb.deleteCharAt(0);
            return sb.length() == 0 ? "0" : sb.toString();
        }
    }

If we break it into steps, it will have the following steps. 1. compute products from each pair of digits from num1 and num2. 2. carry each element over. 3. output the solution.

Things to note:

1. The product of two numbers cannot exceed the sum of the two lengths. (e.g. 99 * 99 cannot be five digit)

2.

    int d1 = num1.charAt(i) - '0';
    int d2 = num2.charAt(j) - '0';
    products[i + j + 1] += d1 * d2;


----------------------------------------------------------------------------------------------------
One Easy solution with C++
The key part is to use a vector to store all digits REVERSELY. after the calculation, find the rightmost NON-Zero digits and convert it to a string.


    class Solution {
    public:
        string multiply(string num1, string num2) {
            
            unsigned int l1=num1.size(),l2=num2.size();
            if (l1==0||l2==0) return "0";
            
            vector<int> v(l1+l2,0);
     
            for (unsigned int i=0;i<l1;i++){
                int carry=0;
                int n1=(int)(num1[l1-i-1]-'0');//Calculate from rightmost to left
                for (unsigned int j=0;j<l2;j++){
                    int n2=(num2[l2-j-1]-'0');//Calculate from rightmost to left
                    
                    int sum=n1*n2+v[i+j]+carry;
                    carry=sum/10;
                    v[i+j]=sum%10;
                }
                if (carry>0)
                    v[i+l2]+=carry;
 
            }
            int start=l1+l2-1;
            while(v[start]==0) start--;
            if (start==-1) return "0";
            
            string s="";
            for (int i=start;i>=0;i--)
                s+=(char)(v[i]+'0');
            return s;
        }
    };

----------------------------------------------------------------------------------------------------
Clear JAVA solution without reversal
 

    public String multiply(String num1, String num2) {
        int len1 = num1.length();
        int len2 = num2.length();
        int[] product = new int[len1 + len2];
        for (int i = len1 - 1; i >= 0; i--) {
            for (int j = len2 - 1; j >= 0; j--) {
                int index = len1 + len2 - i - j - 2;
                product[index] += (num1.charAt(i) - '0') * (num2.charAt(j) - '0');
                product[index + 1] += product[index] / 10;
                product[index] %= 10;
            }
        }
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = product.length - 1; i > 0; i--) {
            if (stringBuilder.length() == 0 && product[i] == 0)
                continue;
            stringBuilder.append(product[i]);
        }
        stringBuilder.append(product[0]);
        return stringBuilder.toString();
    }

----------------------------------------------------------------------------------------------------
Very concise 16 ms c++ solution
See comments inline for explanation.

    class Solution {
    public:
        string multiply(string num1, string num2) {
            int i, j;
            int m = num1.size(), n = num2.size();
            // max (m + n) digits
            vector<int> product(m + n, 0);
            string result;
    
            // reverse for ease of calc
            reverse(num1.begin(), num1.end());
            reverse(num2.begin(), num2.end());
    
            // digit i * digit j contributes to digit i + j
            for (i = 0; i < m; i++) {
                for (j = 0; j < n; j++) {
                    product[i + j] += (num1[i] - '0') * (num2[j] - '0');
                    product[i + j + 1] += product[i + j] / 10;
                    product[i + j] %= 10;
                }
            }
    
            // remove leading 0; keep last 0 if all 0
            for (i = m + n - 1; i > 0 && 0 == product[i]; i--)
                ;
            
            for (; i >= 0; i--)
                result += to_string(product[i]);
    
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
Simple Python solution, 18 lines

    def multiply(num1, num2):
        product = [0] * (len(num1) + len(num2))
        pos = len(product)-1
        
        for n1 in reversed(num1):
            tempPos = pos
            for n2 in reversed(num2):
                product[tempPos] += int(n1) * int(n2)
                product[tempPos-1] += product[tempPos]/10
                product[tempPos] %= 10
                tempPos -= 1
            pos -= 1
            
        pt = 0
        while pt < len(product)-1 and product[pt] == 0:
            pt += 1
    
        return ''.join(map(str, product[pt:]))

----------------------------------------------------------------------------------------------------
Short java AC solution
        public String multiply(String num1, String num2) {
            int[] num = new int[num1.length()+num2.length()];
            int len1 = num1.length(), len2 = num2.length();
            for(int i=len1-1;i>=0;i--){
                for(int j=len2-1;j>=0;j--){
                    int temp = (num1.charAt(i)-'0')*(num2.charAt(j)-'0');
                    num[i+j] += (temp+num[i+j+1])/10;
                    num[i+j+1] = (num[i+j+1]+temp)%10;
                }
            }
            StringBuilder sb = new StringBuilder();
            for(int i: num) if(sb.length()>0||i>0)  sb.append(i);
            return (sb.length()==0)?"0":sb.toString();
        }
multiply according to number's position.

----------------------------------------------------------------------------------------------------
Simple &amp;&amp; clear java solution
    public class Solution {
        public String multiply(String num1, String num2) {
            int len1 = num1.length();
            int len2 = num2.length();
            int len = len1 + len2;
            int[] mul = new int[len];
            for (int i = len1 - 1; i >= 0; i--) {
                int a = num1.charAt(i) - '0';
                int k = len2 + i;
                for (int j = len2 - 1; j >= 0; j--) {
                    int b = num2.charAt(j) - '0';
                    int c = mul[k] + a * b;
                    mul[k] = c % 10;
                    mul[k - 1] = mul[k - 1] + c /10;
                    k--;
                }
            }
            int i = 0;
            while(mul[i] == 0 && i < len - 1)  i++;
            StringBuilder sb = new StringBuilder();
            for (; i < len; i++)
                sb.append(mul[i]);
            return sb.length() == 0 ? "0" : sb.toString();
        }
    }

----------------------------------------------------------------------------------------------------
Why everyone consider those two numbers as integers?
Do I need to consider the number that is between 0 and 1?

----------------------------------------------------------------------------------------------------
A clean and efficient solution accepted as best submission in C, well-explained
In fact before we truly hack this problem, we might remember other calculations for [linked list][1] and [binary strings][2] and trying to reuse that kind of pattern; but soon we will find out that will cost much energy and time to solve this one: multiply for each digits, move one step for the next digit and then add them, so annoying and tedious.

So we will try another naive one to easily hack this, imitating the multiplication process we human do but convert it a little bit for easier latter work.  The following steps will use 34 * 56 to present the whole process:

 - first, we multiply the lowest digit 6 with all the first number 34 without any carry just store the numbers: 18, 24 - from left to right respectively (all the carry operations will be handled in the following steps); then the second lowest digit 5 and the result numbers will be 15, 20 from left to right respectively;
 - second, actually when we human calculate, (15, 20) as a whole will be moved to the left by one digit, right? Why? Because digit 5 is left-er than the digit 6 by one digit; okay, things are now getting clearer now; here we are going to use an array to store the result of each *position* , still ignoring carry here; one thing should be clear now is that the position is determined by the position of the digit in both first and second number; if you know how the multiplication process, then this will be easy to understand, right?
 - third, we are almost there now; strings are indexed from left to right, so the smaller the index of the digit the higher its unit will be; so we will store the results following this fact, from left to right, the unit will be decreasing; as we have discussed in second part, the position will be determined by that of digits in both first and second number so arr[i+j] = (num1[i]-'0')\*(num2[j]-'0') will be a good equation; but the same position might be used to store several results from different pairs of digits multiplication, right? so arr[i+j] **+=** (num1[i]-'0')*(num2[j]-'0') and before we collect the results, we have to initialise all elements of arr to zero; at last we are almost there arr[i+j+1] should be used instead of arr[i+j], why? we might have a carry at the heading position, right? You will understand it sooner or later after all the specification;
 - fourth, finally we are close to it now; collecting the result and constructing the string to return the result: from the last to the first we *get carried* a[i-1] = a[i]/10; a[i] %= 10; just like we human do but we get the carry in two different dimensions: one possible case is the one digit multiplied by a whole number - 34*6 will use carry to get the final result, right? two is summing all the one-digit-to-all-multiplication result; but the zero position here might be zero for no carry comes around so we should remove it, if it is that case otherwise we just collect it as usual.

Bang! End of story!

 - Space cost O(n)
 - Time cost O(n)


----------

    //AC - 4ms;
    char* multiply(char* num1, char* num2)
    {
        if(*num1=='0' || *num2=='0') return "0";
        int len1 = strlen(num1);
        int len2 = strlen(num2);
        int len = len1+len2;
        int *arr = (int*)malloc(sizeof(int)*len); //the number of digits of the result - len is the top;
        memset(arr, 0, sizeof(int)*len); //this is critical;
        for(int i=len1-1; i > -1; i--)
            for(int j=len2-1; j > -1; j--)
                arr[i+j+1] += (num1[i]-'0')*(num2[j]-'0'); //collect result of each position;
        for(int i=len-1; i > 0; i--) //restore the carry for each position and get the final result;
        {
            arr[i-1] += arr[i]/10;
            arr[i] %= 10;
        }
        char *s = (char*)malloc(sizeof(char)*(len+1)); //converting the digits result to string;
        int index = 0;
        int i = 0;
        if(arr[i]==0) i++; //in case the zero position has no carry, if it does, ignore it;
        while(i < len)
            s[index++] = arr[i++]+'0';
        s[index] = '\0';
        return s;
    }

  [1]: https://leetcode.com/problems/add-two-numbers/
  [2]: https://leetcode.com/problems/add-binary/



----------------------------------------------------------------------------------------------------
Simple logic + short code, c++
    class Solution {
    public:
        string multiply(string num1, string num2) {
            int len1=num1.length(), len2=num2.length();
            if ( (len1==1 && num1=="0") || (len2==1 && num2=="0"))
                return "0";
            int *ans = new int[len1+len2], k=0;
            memset(ans, 0, (len1+len2)*sizeof(int));
            
            for (int i=len1-1; i>=0; i--)
                for (int j=len2-1; j>=0; j--)
                    ans[len1-1-i + len2-1-j] += (num1[i]-'0')*(num2[j]-'0');
    
            for (int i=0; i<len1+len2-1; i++)
                ans[i+1] += ans[i]/10, ans[i] %= 10;
                
            string ret;
            for (int i=len1+len2-1; i>=0; i--)
                ret += to_string(ans[i]);
            
            while (k<ret.length() && ret[k]=='0') k++;
            return ret.substr(k, ret.length()-k);
                
        }
    };

----------------------------------------------------------------------------------------------------
My c++ accepted solution with O(m*n) time
    class Solution {
    public:
        string multiply(string num1, string num2) {
            string res;
            int m = num1.length();
            int n = num2.length();
            int dp[m+n];
            memset(dp,0,sizeof(dp));
            for ( int i = m-1; i >= 0; i-- ) {
                for ( int j = n-1; j >= 0; j-- ) {

                    dp[m+n-i-j-2] += (num1[i]-'0')*(num2[j]-'0');
                    dp[m+n-i-j-1] += dp[m+n-i-j-2]/10;
                    dp[m+n-i-j-2] %= 10;
                    
                }
            }
            for ( int i = m+n-1; i >= 0; i-- ) {
                if ( dp[i] != 0 ) {
                    for ( int j = i; j >= 0; j-- )
                        res += (dp[j]+'0');
                    return res;
                }
            }
            return "0";
        }
    };

----------------------------------------------------------------------------------------------------
Accepted best in C
    //AC - 4ms;
    char* multiply(char* num1, char* num2)
    {
        if(*num1=='0' || *num2=='0') return "0";
        int len1 = strlen(num1);
        int len2 = strlen(num2);
        int len = len1+len2;
        int *arr = (int*)malloc(sizeof(int)*len); //the number of digits of the result - len is the top;
        memset(arr, 0, sizeof(int)*len); //this is critical;
        for(int i=len1-1; i > -1; i--)
            for(int j=len2-1; j > -1; j--)
                arr[i+j+1] += (num1[i]-'0')*(num2[j]-'0'); //collect result of each position;
        for(int i=len-1; i > 0; i--) //restore the carry for each position and get the final result;
        {
            arr[i-1] += arr[i]/10;
            arr[i] %= 10;
        }
        char *s = (char*)malloc(sizeof(char)*(len+1)); //converting the digits result to string;
        int index = 0;
        int i = 0;
        if(arr[i]==0) i++; //in case the zero position has no carry, if it does, ignore it;
        while(i < len)
            s[index++] = arr[i++]+'0';
        s[index] = '\0';
        return s;
    }

----------------------------------------------------------------------------------------------------
Python easy to understand solution without overflow (with comments).
        
    # may overflow 
    def multiply1(self, num1, num2):
        return str(int(num1)*int(num2))
    
    # may overflow    
    def multiply2(self, num1, num2):
        res = 0
        for i, d1 in enumerate(num1[::-1]):
            tmp = int(d1)*(10**i)
            for j, d2 in enumerate(num2[::-1]):
                res += tmp * (int(d2)*(10**j))
        return str(res)
        
    # No overflow
    def multiply(self, num1, num2):
        res = [0] * (len(num1) + len(num2))
        for i in xrange(len(num1)-1, -1, -1):
            carry = 0
            for j in xrange(len(num2)-1, -1, -1):
                tmp = int(num1[i])*int(num2[j])+carry 
                # take care of the order of the next two lines
                carry = (res[i+j+1] + tmp) // 10  
                res[i+j+1] = (res[i+j+1] + tmp) % 10
                # or simply: carry, res[i+j+1] = divmod((res[i+j+1] + tmp), 10)
            res[i] += carry
        res = "".join(map(str, res))
        return '0' if not res.lstrip("0") else res.lstrip("0")

----------------------------------------------------------------------------------------------------
Share a code with FFT
It's not the fastest. Perhaps the scale of test cases is too small. Whatever, its time complexity is O(nlogn).

 
    string multiply(string num1, string num2) {
        
        int l1 = num1.size(), l2 = num2.size(); 
        int d = max(l1, l2) / 5 + 1; 
        int m = 1; 
        while (m < d) m <<= 1; 
        m <<= 1;
        
        complex *a=new complex[m+1];
        complex *b=new complex[m+1];
        
        memset(a, 0, (m + 1)*sizeof(complex)); 
        memset(b, 0, (m + 1)*sizeof(complex)); 
        int la = 0; 
        for (int i = l1 - 1; i >= 0; i -= 5) { 
            int tmp = 0; 
            for (int j = i - 4; j <= i; ++j) { 
                if (j < 0) continue; 
                tmp = tmp * 10 + num1[j] - '0'; 
            } 
            a[la++] = complex(tmp, 0); 
        } 
 
        int lb = 0; 
        for (int i = l2 - 1; i >= 0; i -= 5) { 
            int tmp = 0; 
            for (int j = i - 4; j <= i; ++j) {
                if (j < 0) continue; 
                tmp = tmp * 10 + num2[j] - '0'; 
            } 
            b[lb++] = complex(tmp, 0);
        } 
 
        int l = max(la, lb);
        int n = 1; 
        while (n < l) n <<= 1; 
        n <<= 1;
        
        long long *ans=new long long[n+10];
        
        fft(a, n, 0); 
        fft(b, n, 0); 
        for(int i = 0; i < n; i++) a[i] = a[i] * b[i]; 
        fft(a, n, 1); 
 
        ans[0] = 0; 
        for (int i = 0; i < n; ++i) { 
            ans[i+1] = 0; 
            ans[i] += (long long)(a[i].x + 0.5); 
            ans[i+1] += ans[i] / 100000; 
            ans[i] %= 100000; 
        } 
        while (ans[n]) {
            ans[n+1] = ans[n] / 100000; 
            ans[n] %= 100000; 
            ++n; 
        } 
        while (n > 1 && ans[n-1] == 0) --n; 
 
 
        stringstream s;
        for(int i = n - 1; i >= 0; --i){
            s << (int)ans[i];
            s << setw(5) << setfill('0');
        }
        
        delete[] a;
        delete[] b;
        delete[] ans;
        return s.str();
    }

    const double pi = acos(-1.0);
    
    struct complex { 
        double x, y; 
        complex(): x(0), y(0) {} 
        complex(double _x, double _y): x(_x), y(_y) {} 
    
        friend complex operator +(const complex &a, const complex &b) { 
            return complex(a.x + b.x, a.y + b.y); 
        } 
        friend complex operator -(const complex &a, const complex &b) { 
            return complex(a.x - b.x, a.y - b.y); 
        } 
        friend complex operator *(const complex &a, const complex &b) { 
            return complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x); 
        } 
        friend complex operator /(const complex &a, const double &b) { 
            return complex(a.x / b, a.y / b); 
        }
    };
    inline complex conj(const complex &a) { 
        return complex(a.x, -a.y); 
    }
     
    void fft(complex *a, int n, bool inv) {
        complex *w=new complex[n+1];
        int *rv=new int[n+1];
        int bits=-1;
        int _bit = 0; 
        for(int i = 0; i < 30; ++i) if (n & 1 << i) _bit = i; 
        if (_bit != bits) { 
            bits = _bit; 
            rv[0] = 0; 
            rv[1] = 1; 
            for(int st = 1; st < bits; ++st) { 
                int k = 1 << st; 
                for(int i = 0; i < k; ++i) { 
                    rv[i+(1<<st)] = rv[i] << 1 | 1; 
                    rv[i] <<= 1; 
                } 
            } 
            for(int i = 0; i < 1 << bits; ++i) 
                w[i] = complex(cos(2.0 * pi * i / n), sin(2.0 * pi * i / n)); 
        } 
        for(int i = 0; i < n; i++) 
            if (rv[i] <= i) swap(a[i], a[rv[i]]); 
        for(int d = n >> 1, st = 2; d > 0; d >>= 1, st <<= 1) { 
            int o = st >> 1; 
            for (int j = 0; j < o; ++j) { 
                complex wi = (inv ? conj(w[j*d]) : w[j*d]); 
                for (int i = j; i < n; i += st) { 
                    int k = i + o; 
                    complex u = a[i], v = a[k] * wi; 
                    a[i] = u + v; 
                    a[k] = u - v; 
                } 
            } 
        } 
        if (inv) for(int i = 0; i < n; ++i) a[i] = a[i] / n;
        
        delete[] w;
        delete[] rv;
    }

----------------------------------------------------------------------------------------------------
Simplified c++ solution, O(n*(n+m)), 13 lines
    class Solution {
    public:
        string multiply(string num1, string num2) {
            int l1 = num1.length(), l2=num2.length(),carry = 0;;
            if(num1=="0" || num2=="0") return "0";
            reverse(num1.begin(), num1.end());
            reverse(num2.begin(), num2.end());
            string res(l1+l2,0);
            for(int len=1; len<=l1+l2; ++len){
                for(int i=0; i<len&&i<l1; ++i){
                    if(len-i-1 <l2) carry += (num1[i]-'0')*(num2[len-i-1]-'0');
                }
                res[len-1]=(carry%10)+'0';
                carry /= 10;
            }
            if(res[res.length()-1]=='0') res.pop_back();
            reverse(res.begin(), res.end());
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
O(1) memory Java 9ms solution
    public String multiply(String num1, String num2) {
        StringBuilder sb = new StringBuilder();
        int m = num1.length(), n = num2.length(), carry = 0;
        
        if (num1.charAt(0) == '0' || num2.charAt(0) == '0') return "0";
        
        for (int k = 0; k < m+n-1; k++) {
            for (int i = Math.max(0,k-n+1); i < Math.min(m,k+1); i++) {
                int j = k-i;
                carry += (num1.charAt(m-i-1)-'0')*(num2.charAt(n-j-1)-'0');
            }
            sb.append(carry%10);
            carry = carry/10;
        }
        if (carry > 0) sb.append(carry);
        return sb.reverse().toString();
    }

----------------------------------------------------------------------------------------------------
8ms simple C++ solution
    int m = num1.length();
            int n = num2.length();
            vector<int> results;
            for(int i=0; i < m+n; i++){
                results.push_back(0);
            }
            
            for(int i=0; i<m;i++){
                int v1=num1[m-1-i] -'0';
                for(int j=0; j <n; j++){
                    int v2 = num2[n-1-j] -'0';
                    results[i+j] += v1 * v2;
                }
            }
    
    		int carry =0;
    		for(int i=0; i < m+n; i++){
    			int value = results[i] + carry;
    			results[i] = value % 10;
    			carry = value/10;
    		}
    		
    		string re="";
    		bool findNoZero = false;
    		for(int i= m+n-1; i >=0; i--){
    			if(findNoZero){
    				re += (results[i] + '0');
    			}else{
    				if(results[i] != 0){
    					findNoZero = true;
    					re += (results[i] + '0');
    				}
    			}
    		}
    
    		if(re == "")
    			re = "0";
    		return re;

----------------------------------------------------------------------------------------------------
3ms Java solution beats 100%
    public class Solution {
        public String multiply(String num1, String num2) {
            int m=num1.length(), n=num2.length(), zero=0;
            int[] a = new int[m], c = new int[m+n];
            for(int i=0,k=m; i<m; i++) a[--k]=num1.charAt(i)-'0';  // reverse the first number
            for(int i=n-1; i>=0; i--)
                add(c,a,num2.charAt(i)-'0',zero++);    // multiply each digits of num2 to num1
            carry(c);            // handle all carry operation together
            int i=m+n;
            while(i>0 && c[--i]==0);  // find the highest digit
            i++;
            StringBuilder ret = new StringBuilder(i);
            while(i>0) ret.append((char)(c[--i]+'0'));
            return ret.toString();
        }
        void carry(int[] a){
            int i;
            for(int k=0,d=0; k<a.length; k++){
                i=a[k]+d;
                a[k]=i%10;
                d=i/10;
            }
        }
        void add(int[] c, int[] a, int b, int zero){
            for(int i=zero,j=0; j<a.length; j++,i++)
                c[i]+=a[j]*b;
        }
    }

----------------------------------------------------------------------------------------------------
