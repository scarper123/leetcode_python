Easy 76ms C++ Solution using BFS
Well, this problem has a nice BFS structure.

Let's see the example in the problem statement.

`start = "hit"`

`end = "cog"`

`dict = ["hot", "dot", "dog", "lot", "log"]`

Since only one letter can be changed at a time, if we start from `"hit"`, we can only change to those words which have only one different letter from it, like `"hot"`. Putting in graph-theoretic terms, we can say that `"hot"` is a neighbor of `"hit"`.

The idea is simpy to begin from `start`, then visit its neighbors, then the non-visited neighbors of its neighbors... Well, this is just the typical BFS structure.

To simplify the problem, we insert `end` into `dict`. Once we meet `end` during the BFS, we know we have found the answer. We maintain a variable `dist` for the current distance of the transformation and update it by `dist++` after we finish a round of BFS search (note that it should fit the definition of the distance in the problem statement). Also, to avoid visiting a word for more than once, we erase it from `dict` once it is visited.

The code is as follows.

    class Solution {
    public:
        int ladderLength(string beginWord, string endWord, unordered_set<string>& wordDict) {
            wordDict.insert(endWord);
            queue<string> toVisit;
            addNextWords(beginWord, wordDict, toVisit);
            int dist = 2;
            while (!toVisit.empty()) {
                int num = toVisit.size();
                for (int i = 0; i < num; i++) {
                    string word = toVisit.front();
                    toVisit.pop();
                    if (word == endWord) return dist;
                    addNextWords(word, wordDict, toVisit);
                }
                dist++;
            }
        }
    private:
        void addNextWords(string word, unordered_set<string>& wordDict, queue<string>& toVisit) {
            wordDict.erase(word);
            for (int p = 0; p < (int)word.length(); p++) {
                char letter = word[p];
                for (int k = 0; k < 26; k++) { 
                    word[p] = 'a' + k;
                    if (wordDict.find(word) != wordDict.end()) {
                        toVisit.push(word);
                        wordDict.erase(word);
                    }
                }
                word[p] = letter;
            } 
        } 
    };

The above code can still be speeded up if we also begin from `end`. Once we meet the same word from `start` and `end`, we know we are done. [This link][1] provides a nice two-end search solution. I rewrite the code below for better readability. Note that the use of two pointers `phead` and `ptail` save a lot of time. At each round of BFS, depending on the relative size of `head` and `tail`, we point `phead` to the smaller set to reduce the running time.

    class Solution {
    public:
        int ladderLength(string beginWord, string endWord, unordered_set<string>& wordDict) {
            unordered_set<string> head, tail, *phead, *ptail;
            head.insert(beginWord);
            tail.insert(endWord);
            int dist = 2;
            while (!head.empty() && !tail.empty()) {
                if (head.size() < tail.size()) {
                    phead = &head;
                    ptail = &tail;
                }
                else {
                    phead = &tail; 
                    ptail = &head;
                }
                unordered_set<string> temp; 
                for (auto itr = phead -> begin(); itr != phead -> end(); itr++) {
                    string word = *itr;
                    wordDict.erase(word);
                    for (int p = 0; p < (int)word.length(); p++) {
                        char letter = word[p];
                        for (int k = 0; k < 26; k++) {
                            word[p] = 'a' + k;
                            if (ptail -> find(word) != ptail -> end())
                                return dist;
                            if (wordDict.find(word) != wordDict.end()) {
                                temp.insert(word);
                                wordDict.erase(word);
                            }
                        }
                        word[p] = letter;
                    }
                }
                dist++;
                swap(*phead, temp);
            }
            return 0; 
        }
    };

  [1]: https://leetcode.com/discuss/28573/share-my-two-end-bfs-in-c-80ms

----------------------------------------------------------------------------------------------------
Two-end BFS in Java 31ms.
Modified from **[Share my two-end BFS in C++ 80ms.][1]** 

    public class Solution {

    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
		Set<String> beginSet = new HashSet<String>(), endSet = new HashSet<String>();

		int len = 1;
		int strLen = beginWord.length();
		HashSet<String> visited = new HashSet<String>();
		
		beginSet.add(beginWord);
		endSet.add(endWord);
		while (!beginSet.isEmpty() && !endSet.isEmpty()) {
			if (beginSet.size() > endSet.size()) {
				Set<String> set = beginSet;
				beginSet = endSet;
				endSet = set;
			}

			Set<String> temp = new HashSet<String>();
			for (String word : beginSet) {
				char[] chs = word.toCharArray();

				for (int i = 0; i < chs.length; i++) {
					for (char c = 'a'; c <= 'z'; c++) {
						char old = chs[i];
						chs[i] = c;
						String target = String.valueOf(chs);

						if (endSet.contains(target)) {
							return len + 1;
						}

						if (!visited.contains(target) && wordList.contains(target)) {
							temp.add(target);
							visited.add(target);
						}
						chs[i] = old;
					}
				}
			}

			beginSet = temp;
			len++;
		}
		
		return 0;
	}
    }


  [1]: https://leetcode.com/discuss/28573/share-my-two-end-bfs-in-c-80ms

----------------------------------------------------------------------------------------------------
Share my two-end BFS in C++ 80ms.
