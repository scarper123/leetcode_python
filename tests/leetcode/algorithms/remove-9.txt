&#91;C++&#93; &#91;Java&#93; Clean Code
public class Solution {
    public boolean judgeCircle(String moves) {
        int x = 0;
        int y = 0;
        for (char ch : moves.toCharArray()) {
            if (ch == 'U') y++;
            else if (ch == 'D') y--;
            else if (ch == 'R') x++;
            else if (ch == 'L') x--;
        }
        return x == 0 && y == 0;
    }
}


----------------------------------------------------------------------------------------------------
Python one liner
def judgeCircle(self, moves):
    return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')


----------------------------------------------------------------------------------------------------
2 Lines Python
def judgeCircle(self, moves):
    c = collections.Counter(moves)
    return c['L'] == c['R'] and c['U'] == c['D']

----------------------------------------------------------------------------------------------------
Easy 2 lines Java
 public boolean judgeCircle(String moves) {
        moves=" " + moves + " ";
        return moves.split("L").length==moves.split("R").length && moves.split("U").length == moves.split("D").length;
    }


----------------------------------------------------------------------------------------------------
If you can&#x27;t describe the problem in a right way, please don&#x27;t make it a problem.
<p>There are a few problems has vague descriptions which is quite confusing that make the contestants to submit multiple of time to &#34;guess&#34; or &#34;try out&#34; what is the real meaning of the problem.</p>
<p>It&#39;s remotely what we want in Leetcode. So please STOP making this kind of problem again. It&#39;s no more than a waste of our time.</p>
<p>THANK YOU!</p>


----------------------------------------------------------------------------------------------------
Solution by vinnyoodles
public class Solution {
    public boolean judgeCircle(String moves) {
        int x = 0;
        int y = 0;
        for (char c : moves.toCharArray()) {
            if (c == 'U') {
                y ++;
            } else if (c == 'D') { 
                y --;
            } else if (c == 'L') {
                x --; 
            } else if (c == 'R') {
                x ++;  
            }
        }
        
        return x == 0 && y == 0;
    }
}


----------------------------------------------------------------------------------------------------
c++ counter 4 lines solution
class Solution {
public:
    bool judgeCircle(string moves) {
        unordered_map<char, int> c;
        for ( char m : moves )
            ++c[m];
        return c['L'] == c['R'] && c['U'] == c['D'];
    }
};


----------------------------------------------------------------------------------------------------
&#91;Java&#x2F;C++&#93; 4 lines solution
    public boolean judgeCircle(String moves) {
        int x = 0, y = 0;
        for(char c: moves.toCharArray()){
            x += (c=='R'?1:0) + (c=='L'?-1:0); y += (c=='U'?1:0) + (c=='D'?-1:0);
        }
        return x == 0 && y == 0;
    }


----------------------------------------------------------------------------------------------------
Very short Python and Ruby
def judge_circle(moves)
  moves.chars.map { |m| 1i**"RULD".index(m) }.sum == 0
end


----------------------------------------------------------------------------------------------------
Java solution, if else...
public class Solution {
    public boolean judgeCircle(String moves) {
        int x = 0, y = 0;
        for (char c : moves.toCharArray()) {
            if (c == 'R') x++;
            else if (c == 'L') x--;
            else if (c == 'U') y--;
            else if (c == 'D') y++;
        }
        return x == 0 && y == 0;
    }
}


----------------------------------------------------------------------------------------------------
C# Solution
    public bool JudgeCircle(string moves)
    {
        if (moves == null || moves.Length == 0) return false;

        int dirs = 0;

        for (int i = 0; i < moves.Length; i++)
        {
            switch (moves[i])
            {
                case 'U':
                    dirs += 2;
                    break;
                case 'D':
                    dirs -= 2;
                    break;
                case 'R':
                    dirs += 1;
                    break;
                case 'L':
                    dirs -= 1;
                    break;
                default:
                    break;
            }
        }
        return (dirs == 0);
    }


----------------------------------------------------------------------------------------------------
What about LLLL?
<p>LLLL should also be considered as a circle, right?</p>


----------------------------------------------------------------------------------------------------
Python solution with detailed explanation
from collections import Counter    
class Solution(object):
    def judgeCircle(self, moves):
        """
        :type moves: str
        :rtype: bool
        """
        ctr = Counter(moves)
        ctr += Counter("UDRL")
        return (ctr["U"] == ctr["D"]) and (ctr["R"] == ctr["L"])


----------------------------------------------------------------------------------------------------
Java solution with explanation - O(n)
public class Solution {
    public boolean judgeCircle(String moves) {
        int ls = 0, rs = 0, ups = 0, downs = 0;
        for(int i = 0; i < moves.length(); i++) {
            switch(moves.charAt(i)) {
                case 'U':
                    ups++;
                    break;
                case 'D':
                    downs++;
                    break;
                case 'L':
                    ls++;
                    break;
                case 'R':
                    rs++;
            }
        }
        
        return ls == rs && ups == downs;
    }
}


----------------------------------------------------------------------------------------------------
share my java solution!
public class Solution {
    public boolean judgeCircle(String moves) {
        int[] current = new int[2];
        for(int i=0;i<moves.length();i++){
            if(moves.charAt(i)=='R'){
                current[0]++;
            }else if(moves.charAt(i)=='L'){
                  current[0]--;
            }else if(moves.charAt(i)=='U'){
                  current[1]++;
            }else{
                  current[1]--;
            }

        }
        return current[0]==0&&current[1]==0;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def judgeCircle(self, moves):
    count = collections.Counter(moves)
    return count['L'] == count['R'] and count['U'] == count['D']


----------------------------------------------------------------------------------------------------
Swift solution
class Solution {
    func judgeCircle(_ moves: String) -> Bool {
        let moveChars = Array(moves.characters)
        var posX = 0
        var posY = 0
        
        for char in moveChars {
            switch char {
            case "R":
                posX += 1
            case "L":
                posX -= 1
            case "U":
                posY -= 1
            case "D":
                posY += 1
            default:
                break
            }
        }
        
        if posX == 0 && posY == 0 {
            return true
        }
        
        return false
    }
}


----------------------------------------------------------------------------------------------------
Python one-liner with explanation
class Solution(object)
    def judgeCircle(self, moves):
        """
        :type moves: str
        :rtype: bool
        """
        # Time: O(n)
        # Space: O(1)
        return moves.count('U') == moves.count('D') and moves.count('L') == moves.count('R')


----------------------------------------------------------------------------------------------------
C++ easy and short solution
    bool judgeCircle(string moves) {
        int x=0, y=0;
        for(int i=0;i<moves.size();i++) {
            switch(moves[i]) {
                case 'U': x--; break;
                case 'D': x++; break;
                case 'L': y--; break;
                case 'R': y++; break;
            }
        }
        return x==0&&y==0;
    }

----------------------------------------------------------------------------------------------------
Simple Java Solution : Time Complexity O(n) where n is the size of the given string
    public boolean judgeCircle(String moves) {
        int sum = 0;
        int len = moves.length();
        while(len > 0) {
            char c = moves.charAt(len - 1);
            if (c == 'R') {
                sum += 1;
            } 
            if (c == 'L') {
                sum += -1;
            }
            if (c == 'U') {
                sum += 2;
            }
            if (c == 'D') {
                sum += -2;
            }
            len--;
        }
        return sum == 0;
    }
}


----------------------------------------------------------------------------------------------------
