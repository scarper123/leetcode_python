Boyer-Moore Majority Vote algorithm and my elaboration
For those who aren't familiar with Boyer-Moore Majority Vote algorithm, 
I found a great article (http://goo.gl/64Nams) that helps me to understand this fantastic algorithm!!
Please check it out!

The essential concepts is you keep a counter for the majority number **X**. If you find a number **Y** that is not **X**, the current counter should deduce 1. The reason is that if there is 5 **X** and 4 **Y**, there would be one (5-4) more **X** than **Y**. This could be explained as "4 **X** being paired out by 4 **Y**".

And since the requirement is finding the majority for more than ceiling of [n/3], the answer would be less than or equal to two numbers. 
So we can modify the algorithm to maintain two counters for two majorities.

Followings are my sample Python code:

    class Solution:
    # @param {integer[]} nums
    # @return {integer[]}
    def majorityElement(self, nums):
        if not nums:
            return []
        count1, count2, candidate1, candidate2 = 0, 0, 0, 1
        for n in nums:
            if n == candidate1:
                count1 += 1
            elif n == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1 = n, 1
            elif count2 == 0:
                candidate2, count2 = n, 1
            else:
                count1, count2 = count1 - 1, count2 - 1
        return [n for n in (candidate1, candidate2)
                        if nums.count(n) > len(nums) // 3]


----------------------------------------------------------------------------------------------------
JAVA-------------------Easy Version To Understand!!!!!!!!!!!!
    	public List<Integer> majorityElement(int[] nums) {
		if (nums == null || nums.length == 0)
			return new ArrayList<Integer>();
		List<Integer> result = new ArrayList<Integer>();
		int number1 = nums[0], number2 = nums[0], count1 = 0, count2 = 0, len = nums.length;
		for (int i = 0; i < len; i++) {
			if (nums[i] == number1)
				count1++;
			else if (nums[i] == number2)
				count2++;
			else if (count1 == 0) {
				number1 = nums[i];
				count1 = 1;
			} else if (count2 == 0) {
				number2 = nums[i];
				count2 = 1;
			} else {
				count1--;
				count2--;
			}
		}
		count1 = 0;
		count2 = 0;
		for (int i = 0; i < len; i++) {
			if (nums[i] == number1)
				count1++;
			else if (nums[i] == number2)
				count2++;
		}
		if (count1 > len / 3)
			result.add(number1);
		if (count2 > len / 3)
			result.add(number2);
		return result;
	}

----------------------------------------------------------------------------------------------------
Boyer-Moore Majority Vote algorithm generalization
Boyer-Moore Majority Vote algorithm generalization to elements appear more than floor(n/k) times

    class Solution {
    public:
      vector<int> majorityElement(vector<int> &a) {
        int y = 0, z = 1, cy = 0, cz = 0;
        for (auto x: a) {
          if (x == y) cy++;
          else if (x == z) cz++;
          else if (! cy) y = x, cy = 1;
          else if (! cz) z = x, cz = 1;
          else cy--, cz--;
        }
        cy = cz = 0;
        for (auto x: a)
          if (x == y) cy++;
          else if (x == z) cz++;
        vector<int> r;
        if (cy > a.size()/3) r.push_back(y);
        if (cz > a.size()/3) r.push_back(z);
        return r;
      }
    };



----------------------------------------------------------------------------------------------------
My C++ Solution
   
    vector<int> majorityElement(vector<int>& nums) {
        int cnt1 = 0, cnt2 = 0, a=0, b=1;
        
        for(auto n: nums){
            if (a==n){
                cnt1++;
            }
            else if (b==n){
                cnt2++;
            }
            else if (cnt1==0){
                a = n;
                cnt1 = 1;
            }
            else if (cnt2 == 0){
                b = n;
                cnt2 = 1;
            }
            else{
                cnt1--;
                cnt2--;
            }
        }
        
        cnt1 = cnt2 = 0;
        for(auto n: nums){
            if (n==a)   cnt1++;
            else if (n==b)  cnt2++;
        }
        
        vector<int> res;
        if (cnt1 > nums.size()/3)   res.push_back(a);
        if (cnt2 > nums.size()/3)   res.push_back(b);
        return res;
    }

----------------------------------------------------------------------------------------------------
My O(n) time solution ,20ms
My idea comes from Majority Vote algroithm,[http://www.cs.utexas.edu/~moore/best-ideas/mjrty/index.html][1].Now we vote two numbers simultaneously. if the next number is differents from them both.then the two numbers' votes minus one. If some number's vote comes zero,then vote the next number.Every time vote minus,it is the same that we remove the three numbers from the array.And the majority elemnts of original still are the majority elements  in the end. So check t1 and t2 are the majority elements of original array at last.

    vector<int> majorityElement(vector<int>& nums) {
            int t1,t2,n1=0,n2=0;  //numbers t1 and t2,votes' numbers n1,and n2.
            for(int i=0;i<nums.size();++i)
            {
                if(n1!=0&&t1==nums[i]){++n1;continue;} 
                if(n2!=0&&t2==nums[i]){++n2;continue;}
                if(n1==0){ t1=nums[i];++n1;continue;}
                if(n2==0){ t2=nums[i];++n2;continue;}
                --n1;--n2;
            }
            int z1=0,z2=0;
            for(int i=0;i<nums.size();++i)
            {
                if(n1>0){ if(nums[i]==t1) ++z1;}
                if(n2>0) {if(nums[i]==t2) ++z2;}
            }
            vector<int> ret;
             //check t1 and t2.
            if(z1>nums.size()/3) ret.push_back(t1);
            if(z2>nums.size()/3) ret.push_back(t2);
            return ret;
        }


  [1]: http://www.cs.utexas.edu/~moore/best-ideas/mjrty/index.html

----------------------------------------------------------------------------------------------------
Concise JAVA solution based on Moore&#x27;s Voting Algorithm
**Explanation**

The basic idea is based on Moore's Voting Algorithm, we need two candidates with top 2 frequency. If meeting different number from the candidate, then decrease 1 from its count, or increase 1 on the opposite condition. Once count equals 0, then switch the candidate to the current number. The trick is that we need to count again for the two candidates after the first loop.  Finally, output the numbers appearing more than n/3 times.

Thanks for [yanggao][1]'s smart advice!


    public List<Integer> majorityElement(int[] nums) {
    	  	ArrayList<Integer> res = new ArrayList<Integer>();
            if (nums.length==0) return res;
            
            int count[] = new int[2];        
            int x[] = new int[2];       
       
            x[0] = 0; x[1] = 1;        
            for (int i = 0; i < nums.length; i++) {
            	if (x[0] == nums[i])
            		count[0]++;
            	else if (x[1] == nums[i])
            		count[1]++;
            	else if (count[0] == 0) {
            		x[0] = nums[i];
            		count[0] = 1;
            	} else if (count[1] == 0) {
            		x[1] = nums[i];
            		count[1] = 1;
            	} else {
            		count[0]--;
            		count[1]--;        		
            	}
            }
            
            Arrays.fill(count, 0);
            for (int i : nums) {// Count again for x1, x2
        	if (i == x[0]) count[0]++;
        	else if (i == x[1]) count[1]++;
        }
        for (int j = 0; j < 2; j++) {
        	if (count[j] > nums.length/3 && !res.contains(x[j])) res.add(x[j]);
        }        
        return res;
    }


  [1]: https://leetcode.com/discuss/user/yanggao

----------------------------------------------------------------------------------------------------
6 lines, general case O(N) time and O(k) space
