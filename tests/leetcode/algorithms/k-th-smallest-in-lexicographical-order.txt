JAVA: Easiest solution O(logN) with explanation
    public int lastRemaining(int n) {
        boolean left = true;
        int remaining = n;
        int step = 1;
        int head = 1;
        while (remaining > 1) {
            if (left || remaining % 2 ==1) {
                head = head + step;
            }
            remaining = remaining / 2;
            step = step * 2;
            left = !left;
        }
        return head;
    }


----------------------------------------------------------------------------------------------------
C 1 line solution with explanation
int lastRemaining(int n) {
    return n == 1 ? 1 : 2 * (1 + n / 2 - lastRemaining(n / 2));
}


----------------------------------------------------------------------------------------------------
O(logN) solution. clear break down
    public int lastRemaining(int n) {
      return leftToRight(n);
    }

    private static int leftToRight(int n) {
      if(n <= 2) return n;
      return 2 * rightToLeft(n / 2);
    }

    private static int rightToLeft(int n) {
      if(n <= 2) return 1;
      if(n % 2 == 1) return 2 * leftToRight(n / 2);
      return 2 * leftToRight(n / 2) - 1;
    }


----------------------------------------------------------------------------------------------------
one line java solution based on Josephus Problem
    public int lastRemaining(int n) {
        Stack<Integer> stack = new Stack<>();
        while (n > 1) {
            n /= 2;
            stack.push(n);
        }
        int result = 1;
        while (!stack.isEmpty()) {
            result = 2 * (1 + stack.pop() - result);
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
C++ 29ms with Complexity of Log4(N) and Explanation
class Solution {
public:
    int lastRemaining(int n) {
        if (n == 1) return 1;
        if (n <= 4) return 2;
        if (n % 2 != 0) n -= 1;
        if (n % 4 != 0) return 4 * lastRemaining(n/4);
        return 4 * lastRemaining(n/4) - 2;
    }
};


----------------------------------------------------------------------------------------------------
Easy to understand c++ recursion with comments.
class Solution {
public:
    int lastRemaining(int n) {
        return recursion(n, true);
    }
    // return the left number of 1 - n starting from eliminting left to right
    int recursion(int n, bool isLeft) {
        if(n == 1) return n;
        if(!isLeft && (n % 2) == 0) {
            // eliminate all the even numbers
            // [1, 2, 3, 4, 5, 6] -> [1, 3, 5]
            // It is equivalent to consider the number left in [1, 2, 3] * 2 - 1
            return recursion(n / 2, !isLeft) * 2 - 1;
        } else {
            // eliminate all the odd numbers
            // [1, 2, 3, 4, 5, 6] -> [2, 4, 6]
            // It is equivalent to consider the number left in [1, 2, 3] * 2
            return recursion(n / 2, !isLeft) * 2;
        }
    }
};


----------------------------------------------------------------------------------------------------
Only 3 lines, C++, O(logN)
class Solution {
public:
    int lastRemaining(int n) {
        int tmp = 0x7FFFFFFF;
        while(tmp >= n) tmp >>= 1;
        return  ((n|0x55555555)&tmp) + 1;
    }
};


----------------------------------------------------------------------------------------------------
Clean Easy Java logN solution
public class Solution {
    public int lastRemaining(int n) {
        return help(n, true);
    }
    
    private int help(int n, boolean left) {
        if (n == 1) return 1;
        int res = help(n / 2, !left) * 2;
        if ((n & 1) == 1 || left) {
            return res;
        }
        return res - 1;
    }
}


----------------------------------------------------------------------------------------------------
Python mod 4 rather than mod 2. Clean and short.
class Solution(object):
    def lastRemaining(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n == 3 or n == 2:
            return 2
        elif n == 1:
            return 1
        else:
            base = 4 * self.lastRemaining(n/4)   
            if n%4 == 0 or n%4 == 1:
                return base - 2
            else:
                return base

----------------------------------------------------------------------------------------------------
Simple O(Log n) C++ Solution
int lastRemaining(int n) {
    if (1 == n)
    {
        return 1;
    }

    int p = lastRemaining(n/2);
    return (n/2 - p + 1) * 2;
}


----------------------------------------------------------------------------------------------------
3 lines Iterative code in Python, O(log N), O(1) space
class Solution(object):
    def lastRemaining(self, n):
        def game(nums):
            if len(nums) <= 1: return nums[0]
            return game([nums[i] for i in range(1, len(nums), 2)][::-1])
        return game([i for i in range(1, n + 1)])


----------------------------------------------------------------------------------------------------
Very easy to understand C++ recursion solution
    int helper(bool left_to_right, int n) {
        if (n == 1) return 1;
        if (left_to_right) {
            return helper(false, n / 2) * 2;
        } else {
            if (n % 2) {
                return helper(true, n / 2) * 2;
            } else {
                return helper(true, n / 2) * 2 - 1;
            }
        }
    }
    
    
public:
    int lastRemaining(int n) {
        return helper(true, n);
    }
};


----------------------------------------------------------------------------------------------------
easier to read ONE LINE C++ recursive solution
class Solution {
public:
    int lastRemaining(int n, int x=1, int isRight=0, int shift=0) {
        return n > 1 ? lastRemaining(n/2, x*2, isRight^1, shift + x*(isRight && n%2 == 0)) : x - shift;
    }
};


----------------------------------------------------------------------------------------------------
Java recursive way
<p>public int lastRemaining(int n) {<br/>
if (n == 1) {<br/>
return 1;<br/>
}<br/>
return (n / 2 + 1 - lastRemaining(n / 2)) * 2;<br/>
}</p>
<ol>
<li>After every step, we actually boil down the n problem to n / 2 problem, but in opposite direction;</li>
<li>Last remain of n from left to right + last remaining of n from right to left = n + 1.</li>
</ol>


----------------------------------------------------------------------------------------------------
Most Self-Explain C++ Solution
class Solution {
  public:
    int lastRemaining(int n) { return reduce(1, n, 1, FORWARD); }

  private:
    enum TURN { FORWARD, BACKWARD };
    int reduce(int from, int to_hasEnd, int num_gap, TURN turn) {
        int amount = (to_hasEnd - from) / num_gap + 1;
        if (amount == 1) {
            return from;
        }

        switch (turn) {
        case FORWARD:
            if (amount % 2 == 1) {
                return reduce(from, to_hasEnd - num_gap, num_gap, FORWARD);
            } else {
                return reduce(from + num_gap, to_hasEnd, num_gap * 2, BACKWARD);
            }

        case BACKWARD:
            if (amount % 2 == 1) {
                return reduce(from + num_gap, to_hasEnd, num_gap, BACKWARD);
            } else {
                return reduce(from, to_hasEnd - num_gap, num_gap * 2, FORWARD);
            }
        }
    }
};


----------------------------------------------------------------------------------------------------
Swift Solution Easy to Understand
func lastRemaining(_ n: Int) -> Int {
    var amount = n
    var right = n
    var left = 1
    var fromLeft = true
    var i = 1
    while right != left{
        if amount % 2 == 1{
            right -= i
            left += i
        }else{
            if fromLeft == false{
                right -= i
            }else{
                left += i
            }
        }
        amount /= 2
        fromLeft = !fromLeft
        i *= 2
    }
    return left
}

----------------------------------------------------------------------------------------------------
Easy to understand verbose python code (Divide and Conquer)
class Solution(object):
    def helper_odd(self, n , dir):
        if n == 3 or n == 1:
            return (n+1)/2
        val = (n-1)/2
        if val%2 == 0:
            ans = self.helper_even(val, self.direcs[dir])
        else:
            ans = self.helper_odd(val, self.direcs[dir])
        return 2 * ans
    
    def helper_even(self, n ,dir):
        if n == 2:
            return 2 if dir == 'left-to-right' else 1
        val = n / 2
        if val % 2 == 0:
            ans = self.helper_even(val, self.direcs[dir])
        else:
            ans = self.helper_odd(val, self.direcs[dir])
        return 2 * ans if dir == 'left-to-right' else (2 * ans) - 1
        
    def lastRemaining(self, n):
        """
        :type n: int
        :rtype: int
        """
        self.direcs = {'left-to-right':'right-to-left', 'right-to-left':'left-to-right'}
        dir = 'left-to-right'
        return self.helper_odd(n, dir) if n%2 else self.helper_even(n, dir)
        


----------------------------------------------------------------------------------------------------
Python easy to understand with comments
class Solution(object):
    def lastRemaining(self, n):
        """
        :type n: int
        :rtype: int
        """
        def helper(n, isLeft):
            if(n==1): return 1
            if(isLeft):
                return 2*helper(n//2, 0)
    # if started from left side the odd elements will be removed, the only remaining ones will the the even i.e.
    #       [1 2 3 4 5 6 7 8 9]==   [2 4 6 8]==     2*[1 2 3 4]
            elif(n%2==1):
                return 2*helper(n//2, 1)
    # same as left side the odd elements will be removed
            else:
                return 2*helper(n//2, 1) - 1
    # even elements will be removed and the only left ones will be [1 2 3 4 5 6 ]== [1 3 5]== 2*[1 2 3] - 1
            
        return helper(n, 1)
        ```

----------------------------------------------------------------------------------------------------
JAVA:Easy to understand! O(logN) solution beats 97.98% submissions
    public int lastRemaining(int n) {
        if (n == 1) {
            return 1;
        } else if (n % 2 == 1) {
            return lastRemaining(n - 1);
        } else {
            return (n + 2 - 2 * lastRemaining(n / 2));
        }
    }


----------------------------------------------------------------------------------------------------
Simple-minded python solution (illustrative only)
def helper(self, x):
    # uncomment this to see the input
    # print(x)

    # trivial return
    if len(x)==1: return x

    # take every other element and then reverse the list
    y = x[1:len(x):2]
    y.reverse()

    # recurse
    return self.helper(y)

def lastRemaining(self, n):
    # for illustrative purpose only,
    # manipulate the list until only one element remains
    nums = range(1,n+1)
    return (self.helper(nums)[0])


----------------------------------------------------------------------------------------------------
