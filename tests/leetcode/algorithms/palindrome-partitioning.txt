7ms java code win over 100%
The first time win over 100%. Basic idea is using subfunctions for 3sum and 2sum, and keeping throwing all impossible cases. O(n^3) time complexity, O(1) extra space complexity.

    public List<List<Integer>> fourSum(int[] nums, int target) {
			ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
			int len = nums.length;
			if (nums == null || len < 4)
				return res;

			Arrays.sort(nums);

			int max = nums[len - 1];
			if (4 * nums[0] > target || 4 * max < target)
				return res;

			int i, z;
			for (i = 0; i < len; i++) {
				z = nums[i];
				if (i > 0 && z == nums[i - 1])// avoid duplicate
					continue;
				if (z + 3 * max < target) // z is too small
					continue;
				if (4 * z > target) // z is too large
					break;
				if (4 * z == target) { // z is the boundary
					if (i + 3 < len && nums[i + 3] == z)
						res.add(Arrays.asList(z, z, z, z));
					break;
				}

				threeSumForFourSum(nums, target - z, i + 1, len - 1, res, z);
			}

			return res;
		}

		/*
		 * Find all possible distinguished three numbers adding up to the target
		 * in sorted array nums[] between indices low and high. If there are,
		 * add all of them into the ArrayList fourSumList, using
		 * fourSumList.add(Arrays.asList(z1, the three numbers))
		 */
		public void threeSumForFourSum(int[] nums, int target, int low, int high, ArrayList<List<Integer>> fourSumList,
				int z1) {
			if (low + 1 >= high)
				return;

			int max = nums[high];
			if (3 * nums[low] > target || 3 * max < target)
				return;

			int i, z;
			for (i = low; i < high - 1; i++) {
				z = nums[i];
				if (i > low && z == nums[i - 1]) // avoid duplicate
					continue;
				if (z + 2 * max < target) // z is too small
					continue;

				if (3 * z > target) // z is too large
					break;

				if (3 * z == target) { // z is the boundary
					if (i + 1 < high && nums[i + 2] == z)
						fourSumList.add(Arrays.asList(z1, z, z, z));
					break;
				}

				twoSumForFourSum(nums, target - z, i + 1, high, fourSumList, z1, z);
			}

		}

		/*
		 * Find all possible distinguished two numbers adding up to the target
		 * in sorted array nums[] between indices low and high. If there are,
		 * add all of them into the ArrayList fourSumList, using
		 * fourSumList.add(Arrays.asList(z1, z2, the two numbers))
		 */
		public void twoSumForFourSum(int[] nums, int target, int low, int high, ArrayList<List<Integer>> fourSumList,
				int z1, int z2) {

			if (low >= high)
				return;

			if (2 * nums[low] > target || 2 * nums[high] < target)
				return;

			int i = low, j = high, sum, x;
			while (i < j) {
				sum = nums[i] + nums[j];
				if (sum == target) {
					fourSumList.add(Arrays.asList(z1, z2, nums[i], nums[j]));

					x = nums[i];
					while (++i < j && x == nums[i]) // avoid duplicate
						;
					x = nums[j];
					while (i < --j && x == nums[j]) // avoid duplicate
						;
				}
				if (sum < target)
					i++;
				if (sum > target)
					j--;
			}
			return;
		}

----------------------------------------------------------------------------------------------------
My 16ms c++ code
    class Solution {
    public:
        vector<vector<int>> fourSum(vector<int>& nums, int target) {
            vector<vector<int>> total;
            int n = nums.size();
            if(n<4)  return total;
            sort(nums.begin(),nums.end());
            for(int i=0;i<n-3;i++)
            {
                if(i>0&&nums[i]==nums[i-1]) continue;
                if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break;
                if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]<target) continue;
                for(int j=i+1;j<n-2;j++)
                {
                    if(j>i+1&&nums[j]==nums[j-1]) continue;
                    if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;
                    if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target) continue;
                    int left=j+1,right=n-1;
                    while(left<right){
                        int sum=nums[left]+nums[right]+nums[i]+nums[j];
                        if(sum<target) left++;
                        else if(sum>target) right--;
                        else{
                            total.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                            do{left++;}while(nums[left]==nums[left-1]&&left<right);
                            do{right--;}while(nums[right]==nums[right+1]&&left<right);
                        }
                    }
                }
            }
            return total;
        }
    };

----------------------------------------------------------------------------------------------------
Clean accepted java O(n^3) solution based on 3sum
    public class Solution {
        public List<List<Integer>> fourSum(int[] num, int target) {
            ArrayList<List<Integer>> ans = new ArrayList<>();
            if(num.length<4)return ans;
            Arrays.sort(num);
            for(int i=0; i<num.length-3; i++){
                if(i>0&&num[i]==num[i-1])continue;
                for(int j=i+1; j<num.length-2; j++){
                    if(j>i+1&&num[j]==num[j-1])continue;
                    int low=j+1, high=num.length-1;
                    while(low<high){
                        int sum=num[i]+num[j]+num[low]+num[high];
                        if(sum==target){
                            ans.add(Arrays.asList(num[i], num[j], num[low], num[high]));
                            while(low<high&&num[low]==num[low+1])low++;
                            while(low<high&&num[high]==num[high-1])high--;
                            low++;
                            high--;
                        }
                        else if(sum<target)low++;
                        else high--;
                    }
                }
            }
            return ans;
        }
    }

----------------------------------------------------------------------------------------------------
Python 140ms beats 100%, and works for N-sum (N&gt;=2)
The core is to implement a fast 2-pointer to solve 2-sum, and recursion to reduce the N-sum to 2-sum. Some optimization was be made knowing the list is sorted.

    def fourSum(self, nums, target):
        nums.sort()
        results = []
        self.findNsum(nums, target, 4, [], results)
        return results
    
    def findNsum(self, nums, target, N, result, results):
        if len(nums) < N or N < 2: return
    
        # solve 2-sum
        if N == 2:
            l,r = 0,len(nums)-1
            while l < r:
                if nums[l] + nums[r] == target:
                    results.append(result + [nums[l], nums[r]])
                    l += 1
                    r -= 1
                    while l < r and nums[l] == nums[l - 1]:
                        l += 1
                    while r > l and nums[r] == nums[r + 1]:
                        r -= 1
                elif nums[l] + nums[r] < target:
                    l += 1
                else:
                    r -= 1
        else:
            for i in range(0, len(nums)-N+1):   # careful about range
                if target < nums[i]*N or target > nums[-1]*N:  # take advantages of sorted list
                    break
                if i == 0 or i > 0 and nums[i-1] != nums[i]:  # recursively reduce N
                    self.findNsum(nums[i+1:], target-nums[i], N-1, result+[nums[i]], results)
        return


Just revisited and clean the code


    def fourSum(self, nums, target):
        def findNsum(nums, target, N, result, results):
            if len(nums) < N or N < 2 or target < nums[0]*N or target > nums[-1]*N:  # early termination
                return
            if N == 2: # two pointers solve sorted 2-sum problem
                l,r = 0,len(nums)-1
                while l < r:
                    s = nums[l] + nums[r]
                    if s == target:
                        results.append(result + [nums[l], nums[r]])
                        l += 1
                        while l < r and nums[l] == nums[l-1]:
                            l += 1
                    elif s < target:
                        l += 1
                    else:
                        r -= 1
            else: # recursively reduce N
                for i in range(len(nums)-N+1):
                    if i == 0 or (i > 0 and nums[i-1] != nums[i]):
                        findNsum(nums[i+1:], target-nums[i], N-1, result+[nums[i]], results)

        results = []
        findNsum(sorted(nums), target, 4, [], results)
        return results

----------------------------------------------------------------------------------------------------
4Sum C++ solution with explanation and comparison with 3Sum problem. Easy to understand.
For the reference, please have a look at my explanation of `3Sum` problem because the algorithm are exactly the same. The link is as blow.

[My 3Sum problem answer][1]

The key idea is to downgrade the problem to a `2Sum` problem eventually. And the same algorithm can be expand to `NSum` problem.

After you had a look at my explanation of `3Sum`, the code below will be extremely easy to understand.


    class Solution {
    public:
        vector<vector<int> > fourSum(vector<int> &num, int target) {
        
            vector<vector<int> > res;
        
            if (num.empty())
                return res;
        
            std::sort(num.begin(),num.end());
        
            for (int i = 0; i < num.size(); i++) {
            
                int target_3 = target - num[i];
            
                for (int j = i + 1; j < num.size(); j++) {
                
                    int target_2 = target_3 - num[j];
                
                    int front = j + 1;
                    int back = num.size() - 1;
                
                    while(front < back) {
                    
                        int two_sum = num[front] + num[back];
                    
                        if (two_sum < target_2) front++;
                    
                        else if (two_sum > target_2) back--;
                    
                        else {
                        
                            vector<int> quadruplet(4, 0);
                            quadruplet[0] = num[i];
                            quadruplet[1] = num[j];
                            quadruplet[2] = num[front];
                            quadruplet[3] = num[back];
                            res.push_back(quadruplet);
                        
                            // Processing the duplicates of number 3
                            while (front < back && num[front] == quadruplet[2]) ++front;
                        
                            // Processing the duplicates of number 4
                            while (front < back && num[back] == quadruplet[3]) --back;
                    
                        }
                    }
                    
                    // Processing the duplicates of number 2
                    while(j + 1 < num.size() && num[j + 1] == num[j]) ++j;
                }
            
                // Processing the duplicates of number 1
                while (i + 1 < num.size() && num[i + 1] == num[i]) ++i;
            
            }
        
            return res;
        
        }
    };


  [1]: https://oj.leetcode.com/discuss/23595/share-my-solution-around-50ms-with-explanation-and-comments

----------------------------------------------------------------------------------------------------
Lower bound n^3
