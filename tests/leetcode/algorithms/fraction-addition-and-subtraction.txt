Java Solution, PreSum + HashMap
public class Solution {
    public int subarraySum(int[] nums, int k) {
        int sum = 0, result = 0;
        Map<Integer, Integer> preSum = new HashMap<>();
        preSum.put(0, 1);
        
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (preSum.containsKey(sum - k)) {
                result += preSum.get(sum - k);
            }
            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Python, Simple with Explanation
def subarraySum(self, A, K):
    count = collections.Counter()
    count[0] = 1
    ans = su = 0
    for x in A:
        su += x
        ans += count[su-K]
        count[su] += 1
    return ans


----------------------------------------------------------------------------------------------------
C++ prefix sum + map
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int cum=0; // cumulated sum
        map<int,int> rec; // prefix sum recorder
        int cnt = 0; // number of found subarray
        rec[0]++; // to take into account those subarrays that begin with index 0
        for(int i=0;i<nums.size();i++){
            cum += nums[i];
            cnt += rec[cum-k];
            rec[cum]++;
        }
        return cnt;
    }
};


----------------------------------------------------------------------------------------------------
Share my O(n) time solution
public int subarraySum(int[] a, int k) {
        int sum = 0;
		HashMap<Integer, Integer> map = new HashMap<>();
		map.put(0, 1);
		int count = 0;
		for (int i = 0; i < a.length; i++) {
			sum += a[i];
			if (map.containsKey(sum - k)) {
				count += map.get(sum-k);
			}
			if (!map.containsKey(sum)) {
				map.put(sum, 1);
			} else {
			    map.put(sum, map.get(sum) + 1);
			}
		}
		return count;
    }


----------------------------------------------------------------------------------------------------
Basic Java solution
public int subarraySum(int[] nums, int k) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            int sum=nums[i];
            if(sum==k){
                count++;
            }
            for(int j=i+1;j<nums.length;j++){
                sum+=nums[j];
                if(sum==k) count++;
            }
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
Super Simple Python
    def subarraySum(self, nums, k):

        sums = {0:1} # prefix sum array
        res = s = 0
        for n in nums:
            s += n # increment current sum
            res += sums.get(s - k, 0) # check if there is a prefix subarray we can take out to reach k
            sums[s] = sums.get(s, 0) + 1 # add current sum to sum count
        return res


----------------------------------------------------------------------------------------------------
C++ 4 lines O(n)
int subarraySum(vector<int>& nums, int k) {
    unordered_map<int, int> sums({{0, 1}});
    for (auto i = 0, sum = 0; i < nums.size(); sum += nums[i++], sums[INT_MAX] += sums[sum - k], ++sums[sum]);
    return sums[INT_MAX];
}


----------------------------------------------------------------------------------------------------
Doesn&#x27;t empty array count as a sub-array?
nums = [1], k = 0

----------------------------------------------------------------------------------------------------
Python O(n) Solution using Map
def subarraySum(self, nums, k):
    dic = {0:1}
    res, total = 0, 0
    for i in range(len(nums)):
        total += nums[i]
        res += dic.get(total-k, 0)
        dic[total] = dic.get(total, 0) + 1
    return res


----------------------------------------------------------------------------------------------------
Prefix Sum with HashMap - Java O(n) Solution
public class Solution {
    public int subarraySum(int[] nums, int k) {
        // count prefix sum's frequency
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int n = nums.length;
        int[] sums = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sums[i] = sums[i - 1] + nums[i - 1];
            if (!map.containsKey(sums[i])) {
                map.put(sums[i], 1);
            } else {
                map.put(sums[i], map.get(sums[i]) + 1);
            }
        }
        int cnt = 0;
        for (int j = n - 1; j >= 0; j--) {
            // remove current position decrease count by 1
            if (map.get(sums[j + 1]) - 1 == 0) map.remove(sums[j + 1]);
            else map.put(sums[j + 1], map.get(sums[j + 1]) - 1);
            if (map.containsKey(sums[j + 1] - k)) {
                cnt += map.get(sums[j + 1] - k);
            }
        }
        return cnt;
        
    }
}


----------------------------------------------------------------------------------------------------
TLE for cumulative sum in python
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int nLen = nums.size();
        int count = 0;
        int last = 0;
        if (nLen <= 0) {
            return 0;
        }
        for (int i = 0; i < nLen; i++) {
            last = 0;
            for (int j = i; j < nLen; j++) {
                last = last + nums[j];
                if (last == k) {
                    count++;
                }
            }
        }
        return count;
    }
};


----------------------------------------------------------------------------------------------------
share my complex mergesort code:)
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        vector<int>sum;
        int cnt=0;
        for(int i=0; i<nums.size(); ++i){
            cnt+=nums[i];
            sum.push_back(cnt);
        }
        return merge(sum, 0, nums.size()-1, k);
    }
    
    int merge(vector<int>& sum, int begin, int last, int k){
        if(begin==last)
            return sum[begin]==k;
        int mid=begin+(last-begin)/2;
        int res=merge(sum, begin, mid, k)+merge(sum, mid+1, last, k);
        vector<int>tmp;
        int i=begin, j=mid+1;
        while(i<=mid&&j<=last){
            if(sum[j]-sum[i]==k){
                int l=i, r=j;
                while(j<=last&&sum[j]==sum[r]){
                    j++;
                }
                while(i<=mid&&sum[i]==sum[l]){
                    i++;
                }
                res+=(r-j)*(l-i);
            }
            else if(sum[j]-sum[i]>k)
                i++;
            else
                j++;
        }
        i=begin;
        j=mid+1;
        while(i<=mid||j<=last){
            tmp.push_back(j>last||(i<=mid&&sum[i]<sum[j])?sum[i++]:sum[j++]);
        }
        for(i=begin; i<=last; ++i){
            sum[i]=tmp[i-begin];
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
merge sort solution
int ret, _k;
void merge(vector<int> &sum, vector<int> &t, int a, int mid, int b) {
	int i = a, j = mid + 1, k = a;
	while (i <= mid && j <= b) {
		if (_k >= 0)
			if (t[i] <= t[j]) {
			    sum[k++] = t[i];
    			int x = j;
			    while (x <= b && t[i] >= (t[x] - _k)) {
			        if (t[i] == (t[x] - _k)) ret++;
			        x++;
			    }
    			i++;
			} else sum[k++] = t[j++];
		else {
			if (t[i] >= t[j]) {
			    sum[k++] = t[i];
    			int x = j;
			    while (x <= b && t[i] <= (t[x] - _k)) {
			        if (t[i] == (t[x] - _k)) ret++;
			        x++;
			    }
    			i++;
			} else sum[k++] = t[j++];
		}
	}
	while (i <= mid) {
		sum[k++] = t[i++];
	}
	while (j <= b) {
		sum[k++] = t[j++];
	}
}
void mergeSort(vector<int> &sum, vector<int> &t, int a, int b) {
	if (a >= b) return;
	int mid = a + (b - a) / 2;
	mergeSort(t, sum, a, mid);
	mergeSort(t, sum, mid + 1, b);
	merge(sum, t, a, mid, b);
}
int subarraySum(vector<int>& nums, int k) {
	ret = 0;
	_k = k;
    vector<int> sum(nums.size()+1, 0);
    vector<int> t(nums.size()+1, 0);
    for (int i = 0; i < nums.size(); i++) {
    	sum[i + 1] = sum[i] + nums[i];
    	t[i + 1] = sum[i + 1];
    }
	mergeSort(sum, t, 0, t.size() - 1);
	return ret;
}


----------------------------------------------------------------------------------------------------
share my java solution, short!
public class Solution {
    public int subarraySum(int[] nums, int k) {
          if(nums==null || nums.length<1){
                  return 0;  
          }
          Map<Integer,Integer> map=new HashMap<>();
          map.put(0,1);
          int sum=0;
          int res=0;
          for(int i=0;i<nums.length;i++){
              sum+=nums[i];
              
              res+=map.getOrDefault(sum-k,0);
              
              map.put(sum,map.getOrDefault(sum,0)+1);
          }
          
          return res;
    }
}


----------------------------------------------------------------------------------------------------
simple JAVA solution Hashmap with only one traverse
        public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + nums[i];
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int num : sum) {
            if (map.containsKey(num)) {
                count += map.get(num);
            }
            map.put(num + k, map.containsKey(num + k) ? map.get(num + k) + 1 : 1);
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
Is it possible to solve this using two pointers?
    if(nums.length == 1)
        return (nums[0] == k) ? 1 : 0;
    
    int start = 0, end = 1;
    int sum = nums[0], ways = 0;

    while(start <= end){ //end < nums.length && start < nums.length){
        if(sum == k){
            ways++;
            if(start < nums.length){
                sum -= nums[start];
            }
            start++;
            
            if(end < nums.length){
                sum += nums[end];
                end++;
            }
        }
        else if(sum < k && end < nums.length){
            sum += nums[end];
            end++;
        }
        else if(start < nums.length){
            sum -= nums[start];
            start++;
        }
    }
    return ways;
}


----------------------------------------------------------------------------------------------------
python - 70ms - running sum
class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        # compute the running sum
        RS, ans, d = 0,0,{}

        for i in nums:
            RS += i
            ans += d.get(RS-k,0) + (1 if RS == k else 0)
            d[RS] = d.get(RS, 0) + 1
        
        return ans
        


----------------------------------------------------------------------------------------------------
