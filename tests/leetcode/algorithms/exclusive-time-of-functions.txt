concise Java Solution O(N) time O(26) space
3 identical chunks "CE", "CE CE CE" <-- this is a frame
Begin to insert 'A' --> "CEACE CE" <-- result is (c[25] - 1) * (n + 1) + 25 -i = 2 * 3 + 2 = 8

----------------------------------------------------------------------------------------------------
Java PriorityQueue solution - Similar problem Rearrange string K distance apart
public int leastInterval(char[] tasks, int n) {
     Map<Character, Integer> map = new HashMap<>();
    for (int i = 0; i < tasks.length; i++) {
        map.put(tasks[i], map.getOrDefault(tasks[i], 0) + 1); // map key is TaskName, and value is number of times to be executed.
    }
    PriorityQueue<Map.Entry<Character, Integer>> q = new PriorityQueue<>( //frequency sort
            (a,b) -> a.getValue() != b.getValue() ? b.getValue() - a.getValue() : a.getKey() - b.getKey());

    q.addAll(map.entrySet());

    int count = 0;
    while (!q.isEmpty()) {
        int k = n + 1;
        List<Map.Entry> tempList = new ArrayList<>();
        while (k > 0 && !q.isEmpty()) {
            Map.Entry<Character, Integer> top = q.poll(); // most frequency task
            top.setValue(top.getValue() - 1); // decrease frequency, meaning it got executed
            tempList.add(top); // collect task to add back to queue
            k--;
            count++; //successfully executed task
        }

        for (Map.Entry<Character, Integer> e : tempList) {
            if (e.getValue() > 0) q.add(e); // add valid tasks 
        }

        if (q.isEmpty()) break;
        count = count + k; // if k > 0, then it means we need to be idle
    }
    return count;
}

----------------------------------------------------------------------------------------------------
C++ 8lines O(n)
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char,int>mp;
        int count = 0;
        for(auto e : tasks)
        {
            mp[e]++;
            count = max(count, mp[e]);
        }
        
        int ans = (count-1)*(n+1);
        for(auto e : mp) if(e.second == count) ans++;
        return max((int)tasks.size(), ans);
    }
};

----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
max(len(tasks), L)

----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code - Priority Queue
public class Solution {
    public int leastInterval(char[] tasks, int n) {
        Map<Character, Integer> counts = new HashMap<Character, Integer>();
        for (char t : tasks) {
            counts.put(t, counts.getOrDefault(t, 0) + 1);
        }

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);
        pq.addAll(counts.values());

        int alltime = 0;
        int cycle = n + 1;
        while (!pq.isEmpty()) {
            int worktime = 0;
            List<Integer> tmp = new ArrayList<Integer>();
            for (int i = 0; i < cycle; i++) {
                if (!pq.isEmpty()) {
                    tmp.add(pq.poll());
                    worktime++;
                }
            }
            for (int cnt : tmp) {
                if (--cnt > 0) {
                    pq.offer(cnt);
                }
            }
            alltime += !pq.isEmpty() ? cycle : worktime;
        }
        
        return alltime;
    }
}


----------------------------------------------------------------------------------------------------
Java Solution, PriorityQueue and HashMap
public class Solution {
    public int leastInterval(char[] tasks, int n) {
        if (n == 0) return tasks.length;
        
        Map<Character, Integer> taskToCount = new HashMap<>();
        for (char c : tasks) {
            taskToCount.put(c, taskToCount.getOrDefault(c, 0) + 1);
        }
        
        Queue<Integer> queue = new PriorityQueue<>((i1, i2) -> i2 - i1);
        for (char c : taskToCount.keySet()) queue.offer(taskToCount.get(c));
        
        Map<Integer, Integer> coolDown = new HashMap<>();
        int currTime = 0;
        while (!queue.isEmpty() || !coolDown.isEmpty()) {
            if (coolDown.containsKey(currTime - n - 1)) {
                queue.offer(coolDown.remove(currTime - n - 1));
            }
            if (!queue.isEmpty()) {
                int left = queue.poll() - 1;
        	if (left != 0) coolDown.put(currTime, left);
            }
            currTime++;
        }
        
        return currTime;
    }
}


----------------------------------------------------------------------------------------------------
Java greedy algorithm with correctness proof, using PriorityQueue and waiting list
    public static int leastInterval(char[] tasks, int n) {
        if(n == 0) return tasks.length;
        int[] count = new int[26];
        for (int t : tasks) count[t-'A']++;
        PriorityQueue<int[]> maxheap = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o2[1] - o1[1];
            }
        });
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) maxheap.add(new int[]{i, count[i]});
        }
        LinkedList<int[]> waitlist = new LinkedList<>();
        int t = 0, waitCount = 0;
        while (!maxheap.isEmpty() || waitCount > 0) {
            t++;
            int[] top = null;
            if (!maxheap.isEmpty()) top = maxheap.poll();
            if (top == null || --top[1] == 0) {
                waitlist.add(null);
            } else {
                waitlist.add(top);
                waitCount++;
            }
            if (waitlist.size() == n+1) {
                int[] job = waitlist.poll();
                if (job != null) {
                    maxheap.add(waitlist.poll());
                    waitCount--;
                }
            }
        }
        return t;
    }


----------------------------------------------------------------------------------------------------
Java O(n) time O(1) space 1 pass, no sorting solution with detailed explanation
public class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] counter = new int[26];
        int max = 0;
        int maxCount = 0;
        for(char task : tasks) {
            counter[task - 'A']++;
            if(max == counter[task - 'A']) {
                maxCount++;
            }
            else if(max < counter[task - 'A']) {
                max = counter[task - 'A'];
                maxCount = 1;
            }
        }
        
        int partCount = max - 1;
        int partLength = n - (maxCount - 1);
        int emptySlots = partCount * partLength;
        int availableTasks = tasks.length - max * maxCount;
        int idles = Math.max(0, emptySlots - availableTasks);
        
        return tasks.length + idles;
    }
}


----------------------------------------------------------------------------------------------------
Python O(n) time O(1) space
class Solution(object):
    
    # O(nlogn) greedy to place most popular and distinct tasks first
    # Actually, I don't think this is greedy
    # We always place different tasks in a cycle which will minimize steps
    # If not different tasks can be placed in a cycle, place an `idle`.
    
    def _leastInterval(self, tasks, n):
        """
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """
        n += 1
        ans = 0
        d = collections.Counter(tasks)
        heap = [-c for c in d.values()]
        heapq.heapify(heap)
        while heap:
            stack = []
            cnt = 0
            for _ in range(n):
                if heap:
                    c = heapq.heappop(heap)
                    cnt += 1
                    if c < -1:
                        stack.append(c + 1)
            for item in stack:
                heapq.heappush(heap, item)
            ans += heap and n or cnt # == if heap then n else cnt
        return ans
        
    
    # O(n) # of the most frequent tasks, say longest, will determine the legnth
    # to void counting idle intervals, we count (longest - 1) * (n + 1)
    # then count how many will in the last cycle which means finding ties
    # if counted number is less than # of tasks which means 
    # less frequent tasks can be always placed in such cycle
    # and it won't cause any conflicts with requirement since even most frequent can be settle
    # finally, return max(# of task, total counted number)
    
    def leastInterval(self, tasks, n):
        d = collections.Counter(tasks)
        counts = d.values()
        longest = max(counts)
        ans = (longest - 1) * (n + 1)
        for count in counts:
            ans += count == longest and 1 or 0
        return max(len(tasks), ans)


----------------------------------------------------------------------------------------------------
Java Solution #PriorityQueue #CoolDownTable
public class Solution {
    public int leastInterval(char[] tasks, int n) {
 
        Map<Character, Integer> tasksTable = new HashMap<>();
        for (char c : tasks) tasksTable.put(c, tasksTable.getOrDefault(c, 0)+1);

        // A task should be either in a waiting queue or on the cooldown table
        PriorityQueue<Character> waitingQueue = 
                new PriorityQueue<>((c1, c2)->tasksTable.get(c2)-tasksTable.get(c1));
        for (Character c : tasksTable.keySet()) waitingQueue.add(c);

        // A task should be either in a waiting queue or on the cooldown table
        Map<Integer, Character> coolDownTable = new HashMap<>();

        int time = 0;
        while(!waitingQueue.isEmpty() || !coolDownTable.isEmpty()) {
            // Cool down and release the defrost task if any
            int releaseTime = time - n - 1;
            if (coolDownTable.containsKey(releaseTime)) {
                waitingQueue.add(coolDownTable.remove(releaseTime));
            }

            if (!waitingQueue.isEmpty()) {
                char task = waitingQueue.poll();

                int remaining = tasksTable.get(task) - 1;
                tasksTable.put(task, remaining);

                if (remaining != 0) {
                    coolDownTable.put(time, task);
                }
            }

            ++time;
        }

        return time;
    }
}


----------------------------------------------------------------------------------------------------
Python solution - Max Heap Queue, easier than Awice&#x27;s
class Solution(object):
    def leastInterval(self, tasks, n):
        """
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """
        if n == 0:
            return len(tasks)

        hs = collections.defaultdict(int)
        for task in tasks:
            hs[task] += 1

        count = 0
        cycle = n + 1

        heap = []

        for k, i in hs.iteritems():
            if i > 0:
                heapq.heappush(heap, (-i))                
        while heap:
            worktime = 0
            tmp = []
            for i in xrange(cycle):
                if heap:
                    tmp.append(heapq.heappop(heap))
                    worktime += 1
            for cnt in tmp:
                cnt *= -1
                cnt -= 1
                if cnt > 0:
                    heapq.heappush(heap, -cnt)
            
            count += cycle if len(heap) > 0 else worktime

        return count



----------------------------------------------------------------------------------------------------
Java O(n) solution beats 99.76%, use only array, easy understanding
public class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] storage = new int[26];
        for (char c : tasks) {
            storage[(c - 'A')]++;
        }
        int max = 0;
        int count = 1;
        for (int num : storage) {
            if (num == 0) {
                continue;
            }
            if (max < num) {
                max = num;
                count = 1;
            } else if (max == num) {
                count++;
            }
        }
        int space = (n + 1) * (max - 1) + count;
        return (space < nums.length) ? nums.length : space;
    }
}


----------------------------------------------------------------------------------------------------
Java 8 solution using 2 maps
public int leastInterval(char[] tasks, int n) {
        Map<Character, Long> freq = IntStream.range(0, tasks.length).
                mapToObj(i -> tasks[i]).collect(Collectors.groupingBy(y -> y, Collectors.counting()));
        Map<Character, Integer> interval = freq.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), e->-1));

        int res = 0;
        int count = tasks.length;

        while(count != 0) {
            Character ch;
            final int r = res;

            Optional<Map.Entry<Character, Long>> op =  freq.entrySet().stream().filter(e -> e.getValue() > 0 && (interval.get(e.getKey()) == -1 || (r - interval.get(e.getKey())) > n)).collect(Collectors.maxBy(Map.Entry.comparingByValue()));
            if(op.isPresent()) {
                --count;
                ch = op.get().getKey();
                freq.put(ch, freq.get(ch)-1);
                interval.put(ch, res);
            }
            ++res;
        }
        return res;
    }


----------------------------------------------------------------------------------------------------
java one map solution, easy to understand
public class Solution {
    public int leastInterval(char[] tasks, int cooldown) {
        HashMap<Character, Integer> map = new HashMap<>();
        int max = 0;
        int n = tasks.length;
        for (char c : tasks) {
            if(!map.containsKey(c)) {
                map.put(c, 0);
            }
            map.put(c, map.get(c) + 1);
            max = Math.max(max, map.get(c));
        }
        int count = (max - 1) * (cooldown + 1);
        int extra = 0;
        for(int val : map.values()){
            if(val > max - 1){
                extra++;
            }
        }
        return Math.max(count + extra, n);
    }
}


----------------------------------------------------------------------------------------------------
Java Solution
    Arrays.sort(counter);
    int res = 0;
    
    while ((25 - n) >= 0 && counter[25 - n] != 0) {    
        res += n + 1;
        for (int j = 25; j >= 25 - n; j--) {
            if (counter[j] == 0)
                break;
            counter[j]--; 
        }
        Arrays.sort(counter);
    }
    if (counter[25] == 0)
        return res;
    res += (counter[25] - 1) * (n + 1);
    for (int i = 25; i>=0; i--) {
        if (counter[i] == counter[25]) {
            res += 1;
        }
    }
    return res;
}


----------------------------------------------------------------------------------------------------
C++ solution using sets
class Solution {
public:
    // set is used to store the updated time at which a task can be scheduled. The first set value returns the best task to be scheduled at that particular time interval
    int leastInterval(vector<char>& tasks, int n) {
        int hash[26]={0},counter=0;
        set<pair<int,int>> s;
        for(int i=0;i<tasks.size();i++) {
            s.insert(make_pair(0,(tasks[i]-65)%26));
            hash[(tasks[i]-65)%26]++;
            }
        for(auto i = s.begin();i!=s.end();){
               if((*i).first <= counter){
                if(hash[(*i).second]!=0){
                    hash[(*i).second]--;
                }
                if(hash[(*i).second] ==0){  // all counts of a particular task has been scheduled, so it can be removed from set!
                    s.erase(i);
                    i = s.begin();
                }
                else{ // updating set with newer <interval,task>
                    pair<int,int> p;
                    p.first = (*i).first+n+1;
                    p.second = (*i).second;
                    s.erase(i);
                    s.insert(p);
                    i = s.begin();
                }
            }
       counter++;
        }
        return counter;
    }
};


----------------------------------------------------------------------------------------------------
Java simulate solution. easy to understand.
public int leastInterval(char[] tasks, int n) {
	int interval = 0;
	int[] count = new int[26];
	for (int i = 0; i < tasks.length; ++i) {
		++count[tasks[i] - 'A'];
	}
	List<Integer> cL = new ArrayList<Integer>();
	for (int i = 0; i < 26; ++i) {
		if (count[i] > 0) {
			cL.add(count[i]);
		}
	}
	if (n == 0) {//processing special condition
		for (int x : cL) {
			interval += x;
		}
		return interval;
	}
	while (cL.size() > 0) {
		Collections.sort(cL);//make sure always consume the task that has the most instances
		int removedTask = 0;
		for (int i = 0; i <= n; ++i) {
			int m = cL.size();
			if (m - 1 - i < 0) {//if there's no more distinct task instance to consume, idle.
				++interval;
			} else {//consume a task instance
				++interval;
				int cC = cL.get(m - 1 - i);
				if (cC > 1) {
					cL.set(m - 1 - i, cC - 1);
				} else {
					++removedTask;//count the task types that are to be removed 
					if (cL.size() == removedTask) {//if all task done, exit, there's no reason to idle if no more tasks
						break;
					}
				}
			}
		}
		for (int i=0;i < removedTask; ++i) {// for every round, remove consumed to 0 instance tasks
			cL.remove(Integer.valueOf(1));
		}
	}
	return interval;
}

----------------------------------------------------------------------------------------------------
Java O(n) solution with one size 26 map
public class Solution {
    public int leastInterval(char[] tasks, int n) {
        int l=tasks.length;
        if(l<=1) return l;
        int[] count=new int[26];
        for(int i=0;i<l;i++) count[tasks[i]-'A']++;
        Arrays.sort(count);
        int max=count[25],total=0;
        for(int i=24;i>=0;i--){
            if(count[i]!=max) break;
            total++;
        }
        return Math.max((n+1)*max-n+total,l);
    }
}


----------------------------------------------------------------------------------------------------
Java O(N) Solution using 2 arrays and no complicated math
public class Solution {
    public int leastInterval(char[] tasks, int n) {
        
        int[] count = new int[26];
        for (int i = 0; i < tasks.length; i++) {
            count[tasks[i]-'A']++;
        }
        
        int process = 0;
        int idle = 0;
        int[] cooldown = new int[26];
        while (process < tasks.length) {
            int max = -1;
            int index = -1;
            for (int j = 0; j < count.length; j++) {
                if (cooldown[j] > 0) {
                    cooldown[j]--;
                    continue;
                }
                if (count[j] > max && count[j] > 0) {
                    max = count[j];
                    index = j;
                }
            }
            if (index > -1) {
                count[index]--;
                cooldown[index] += n;
                process++;
            }
            else {
                idle++;
            }
        }
        
        return process + idle;
    }
}


----------------------------------------------------------------------------------------------------
