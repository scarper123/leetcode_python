Simple HashSet solution Java
public int longestPalindrome(String s) {
        if(s==null || s.length()==0) return 0;
        HashSet<Character> hs = new HashSet<Character>();
        int count = 0;
        for(int i=0; i<s.length(); i++){
            if(hs.contains(s.charAt(i))){
                hs.remove(s.charAt(i));
                count++;
            }else{
                hs.add(s.charAt(i));
            }
        }
        if(!hs.isEmpty()) return count*2+1;
        return count*2;
}


----------------------------------------------------------------------------------------------------
What are the odds? (Python &amp; C++)
def longestPalindrome(self, s):
    use = sum(v & ~1 for v in collections.Counter(s).values())
    return use + (use < len(s))

def longestPalindrome(self, s):
    counts = collections.Counter(s).values()
    return sum(v & ~1 for v in counts) + any(v & 1 for v in counts)

int longestPalindrome(string s) {
    int use = 0;
    for (char c='A'; c<='z'; c++)
        use += count(s.begin(), s.end(), c) & ~1;
    return use + (use < s.size());
}

int longestPalindrome(string s) {
    vector<int> count(256);
    for (char c : s)
        ++count[c];
    int odds = 0;
    for (int c : count)
        odds += c & 1;
    return s.size() - odds + (odds > 0);
}

int longestPalindrome(string s) {
    vector<int> count(256);
    int odds = 0;
    for (char c : s)
        odds += ++count[c] & 1 ? 1 : -1;
    return s.size() - odds + (odds > 0);
}

----------------------------------------------------------------------------------------------------
JAVA Solution. Simple and Clear, Using int&#91;26&#93;
public int longestPalindrome(String s) {
    int[] lowercase = new int[26];
    int[] uppercase = new int[26];
    int res = 0;
    for (int i = 0; i < s.length(); i++){
        char temp = s.charAt(i);
        if (temp >= 97) lowercase[temp-'a']++;
        else uppercase[temp-'A']++;
    }
    for (int i = 0; i < 26; i++){
        res+=(lowercase[i]/2)*2;
        res+=(uppercase[i]/2)*2;
    }
    return res == s.length() ? res : res+1;
        
}

----------------------------------------------------------------------------------------------------
Simple Java Solution in One Pass
public int longestPalindrome(String s) {
        boolean[] map = new boolean[128];
        int len = 0;
        for (char c : s.toCharArray()) {
            map[c] = !map[c];         // flip on each occurrence, false when seen n*2 times
            if (!map[c]) len+=2;
        }
        if (len < s.length()) len++; // if more than len, atleast one single is present
        return len;
    }


----------------------------------------------------------------------------------------------------
Easy to understand accepted solution with explanation
    int longestPalindrome(string s) {
        vector<int> v(256,0);
        for(int i = 0; i < s.size(); ++i)
           ++v[s[i]];
        int res = 0;
        bool odd = false;
        for(int i = 0; i < 256; ++i)
           if(v[i]%2 == 0)
               res += v[i];
            else
            {
               res += v[i] - 1;
               odd = true;
            }
        if(odd)
          ++res;
        return res;
    }


----------------------------------------------------------------------------------------------------
5 lines C++
class Solution {
public:
    int longestPalindrome(string s) {
        vector<int> m(256, 0);        
        for (auto& c : s) m[c-'\0']++;
        int result = 0;
        for (auto& i : m) result += i%2 ? (result%2 ? i-1 : i) : i;
        return result;
    }
};


----------------------------------------------------------------------------------------------------
PYTHON - 35ms 99th percentile O(n) solution
def longestPalindrome(self, s):
    """
    :type s: str
    :rtype: int
    """
    ctmap = {}
    for c in s:
        if c not in ctmap:
            ctmap[c] = 1
        else:
            ctmap[c] += 1

    ret = 0
    singleCharFound = 0
    for key in ctmap:
        if ctmap[key] % 2 == 0:
            ret += ctmap[key]
        else:
            ret += ctmap[key] - 1
            singleCharFound = 1
    
    return ret + singleCharFound

----------------------------------------------------------------------------------------------------
very simple Java solution use boolean&#91;&#93;
public int longestPalindrome(String s) {
    boolean[] set = new boolean[256];
    int count = 0;
    for (int i = 0; i < s.length(); i++) {
        count += set[s.charAt(i)]?2:0;
        set[s.charAt(i)] = !set[s.charAt(i)];
    }
    if (count < s.length()) count++;
    return count;
}

----------------------------------------------------------------------------------------------------
Simple Java Solution
public int longestPalindrome(String s) {
	if(s==null || s.length()==0) return 0;
	Set<Character> set = new HashSet<>();
	int count = 0;
	char[] chars = s.toCharArray();
	for(char c: chars) {
		if(set.remove(c)) {
			count++;
		} else {
			set.add(c);
		}
	}
	return set.isEmpty() ? count*2 : count*2+1;
}


----------------------------------------------------------------------------------------------------
10 ms Java solution
public class Solution {
    public int longestPalindrome(String s) {
        if(s==null|| s.length()==0)
        return 0;
        if(s.length()==1)
        return 1;
        
        int[] alpha=new int[128];
        int max_length=0;
        for(char c:s.toCharArray()){
            alpha[c]++;
            if(alpha[c]==2)
            {
                max_length+=2;
                alpha[c]=0;
            }
        }
        if(s.length()>max_length)
         return max_length+1;
        else
         return max_length;
        
    }
}


----------------------------------------------------------------------------------------------------
Java One pass solution
public class Solution {
    public int longestPalindrome(String s) {
        int[] freq = new int[256];
        int count = 0;
        for (char ch : s.toCharArray()) {
            freq[ch - 'A'] ++;
            if (freq[ch - 'A'] == 2) {
                count += 2;
                freq[ch - 'A'] = 0;
            }
        }
        if (count < s.length()) count += 1;
        return count;
    }
}


----------------------------------------------------------------------------------------------------
Simple int array solution Java (5 lines)
public int longestPalindrome(String s) {
      int[] letters = new int[58];
      int longest = 0;
      for (char c : s.toCharArray()) letters[c - 'A']++;
      for (int l : letters) longest += l % 2 == 0 ? l : l - 1;
      return longest < s.length() ? longest + 1 : longest;
}


----------------------------------------------------------------------------------------------------
Python Code
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        counter, sum = dict(), 0
        flag = True
        for i in s:
           counter.setdefault(i,0)
           counter[i] += 1

        for v in counter.values():
            if v & 1:
                sum += v-1
                flag = False
            else:
                sum += v
                
        return sum if flag else sum + 1


----------------------------------------------------------------------------------------------------
2 lines in Python
class Solution(object):
    def longestPalindrome(self, s):
        c = collections.Counter(s)
        return sum(v - 1 * (v % 2 != 0) for v in c.values()) + 1 * any(v % 2 != 0 for v in c.values())


----------------------------------------------------------------------------------------------------
Simple Java beat 99.67%
public int longestPalindrome(String s) {
        int[] chars = new int[128];
        char[] t = s.toCharArray();
        for(char c:t){
            chars[c]++;
        }
        int single = 0;
        for(int n:chars){
            if(n%2!=0){
                single++;
            }
        }
        return single>1?t.length-single+1:t.length;
    }


----------------------------------------------------------------------------------------------------
Simple python solution using dict.
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        d = {}
        for c in s: # count for each letter, O(n)
            d[c] = d.get(c, 0) + 1
        # subtract the "number of odd values minus 1" or zero from the string length, O(n)
        return len(s) - max(len(tuple(v for v in d.values() if v % 2)) - 1, 0)


----------------------------------------------------------------------------------------------------
3ms 5 lines concise C++ solution
    int longestPalindrome(string s) {
        if (s.size() <= 1) return s.size();
        int count = 0, list[256] = { 0 };
        for (auto& c : s) list[c - '\0']++;
        for (auto& n : list) count += (n % 2)? n - 1 : n;
        return (count < s.size()) ? count + 1 : count;
    }

----------------------------------------------------------------------------------------------------
Simple Java Solution
public class Solution {
    public int longestPalindrome(String s) {

		if (s == null || s.length() == 0) {
			return 0;
		}

		int[] hash = new int[200];

		for (Character ch : s.toCharArray()) {
			++hash[(int) ch];
		}

		int count = 0;
		boolean single = false;

		for (int i : hash) {
			count += (i >> 1);
			if ((i & 1) == 1) {
				single = true;
			}
		}

		return (count << 1) + (single ? 1 : 0);
	}
}


----------------------------------------------------------------------------------------------------
3ms c++ solution using hash table
class Solution {
public:
    int longestPalindrome(string s) {
        int rep[58] = {0};
        for (char c : s) {
            rep[(int)(c - 'A')]++;
        }
        int out = 0, odd = 0;
        for (int i = 0; i < 58; i++) {
            if (rep[i] % 2 == 0) out += rep[i];
            else {
                out += (rep[i] - 1);
                odd ++;
            }
        }
        return (odd > 0 ? out + 1 : out);
    }
};


----------------------------------------------------------------------------------------------------
My 5-line Simple JAVA solution
public class Solution {
    public int longestPalindrome(String s) {
        int[] count = new int[Math.abs('A' - 'z')+1];
        int ans = 0;
        for(int i = 0; i< s.length(); i++) count[s.charAt(i) - 'A']++; 
        for(int n: count) ans += n/2;
        return Math.min(ans*2+1, s.length());
    }
}


----------------------------------------------------------------------------------------------------
