Clean java solution O(n)
public int countSegments(String s) {
    int res=0;
    for(int i=0; i<s.length(); i++)
        if(s.charAt(i)!=' ' && (i==0 || s.charAt(i-1)==' '))
            res++;        
    return res;
}

Time complexity:  O(n)
Space complexity: O(1)

----------------------------------------------------------------------------------------------------
O(n) sentinel value concise solution, C++
class Solution {
public:
    int countSegments(string s) {
        int res = 0;
        s.push_back(' ');
        for(int i = 1; i < s.size(); ++i)
          if(s[i] == ' ' && s[i-1] != ' ') ++res;
        return res;
    }
};


----------------------------------------------------------------------------------------------------
one-liners
int countSegments(string s) {
    return regex_replace(regex_replace(s, regex("\\S+"), "x"), regex(" "), "").size();
}

----------------------------------------------------------------------------------------------------
AC Solution Java with trim() and split()
public int countSegments(String s) {
    String trimmed = s.trim();
    if (trimmed.length() == 0) return 0;
    else return trimmed.split("\\s+").length;
}

----------------------------------------------------------------------------------------------------
C++ concise three line solutions
class Solution {
public:
    int countSegments(string s) {
        int res = 0;
        for (int i = 0; i < s.size(); i++) 
            res += s[i] != ' ' && (i + 1 == s.size() || s[i + 1] == ' ');
        return res;
    }
};


----------------------------------------------------------------------------------------------------
2-line C++ solution simply using stringstream &gt;&gt; operator
    int countSegments(string s) {
      stringstream ss(s); int res = 0;
      while (ss >> s) ++res; return res;
    }


----------------------------------------------------------------------------------------------------
One line python solution
<p>class Solution(object):<br/>
def countSegments(self, s):<br/>
&#34;&#34;&#34;<br/>
:type s: str<br/>
:rtype: int<br/>
&#34;&#34;&#34;<br/>
return len(s.split())</p>


----------------------------------------------------------------------------------------------------
Java, count only the start of each new word
public class Solution {
    public int countSegments(String s) {
        int counter = 0;
        for (int i=0; i<s.length(); i++) {
            if (s.charAt(i)!=' ' && (i==0 || s.charAt(i-1)==' ')) {
                counter++;
            }
        }
        return counter;
    }
}


----------------------------------------------------------------------------------------------------
Simple Java Solution (Beats 100%)
int segs = 0;
char[] chars = s.toCharArray();
for(int i=0;i<chars.length;i++) {
    if(chars[i]!=' ') segs++;
    while(i<chars.length && chars[i]!=' ') i++;
}
return segs;


----------------------------------------------------------------------------------------------------
One Line Java Solution w. Java 8 Stream and Lambda Expression
public int countSegments(String s) {
        return (int) Arrays.stream(s.split(" ")).filter(i -> 0 < i.trim().length()).count();
}


----------------------------------------------------------------------------------------------------
Clean C# implementation
public class Solution {
    public int CountSegments(string s) {
        const char Space = ' ';
        int result = 0;
        
        // check null or empty string
        if (s == null || s == string.Empty) {
            return result;
        }        
        
        for(int i = 0; i < s.Length; i++) {
            // count 1 when run into a space and previous char is not space.
            if(i > 0 && s[i] == Space && s[i-1] != Space) {
                result++;
            }
        }
        
        // we need to handle the case that the string ending with a word
        if (s[s.Length - 1] != Space) {
            result++;
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
My JavaScript Solution
var countSegments = function(s) {
    s = s.trim();
    return (s.length === 0 ? 0 : s.replace(/\s{2,}/g," ").split(" ").length);
};


----------------------------------------------------------------------------------------------------
C# solution
public class Solution {
    public int CountSegments(string s) {
          s = s.Trim();
            
            if (s.Length == 0)
            {
                return 0;
            }


            string[] split = s.Split(' ');
            List<string> list = new List<string>();
            for (int i = 0; i < split.Length; i++)
            {
                if (split[i].Length > 0)
                {
                    list.Add(split[i]);
                }
            }
            return list.Count;

        
    }
}


----------------------------------------------------------------------------------------------------
1-Line JavaScript Code
<p>/**</p>
<ul>
<li>&#64;param {string} s</li>
<li>&#64;return {number}<br/>
*/<br/>
var countSegments = function(s) {<br/>
return (s.replace(/\s+/g, &#39; &#39;).trim() === &#39;&#39; ? 0 : s.replace(/\s+/g, &#39; &#39;).trim().split(&#39; &#39;).length);<br/>
};</li>
</ul>


----------------------------------------------------------------------------------------------------
Clean C++ 4 lines O(n) solution
    int countSegments(string s) {
        s.append(" ");
        int count=0;
        for(string::iterator it=s.begin();it!=s.end();it++) if(*it!=' '&&*(it+1)==' ') count++;
        return count;
    }


----------------------------------------------------------------------------------------------------
0ms c++ solution using stringstream
<p>class Solution {<br/>
public:<br/>
int countSegments(string s) {<br/>
string buf;<br/>
int res = 0;<br/>
stringstream ss(s);<br/>
while(ss &gt;&gt; buf){<br/>
res++;<br/>
}<br/>
return res;<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
Python One-liner without split
    def countSegments(self, s):

        return sum(s[i] != ' ' and (i == 0 or s[i-1] == ' ') for i in range(len(s)))


----------------------------------------------------------------------------------------------------
One Line Swift Solution
func countSegments(_ s: String) -> Int {
    return s.characters.split(separator: " ").map(String.init).count
}

----------------------------------------------------------------------------------------------------
easy undestanding solution with stringstream.(c++)
<p>...<br/>
class Solution {<br/>
public:<br/>
int countSegments(string s) {<br/>
stringstream ss(s);<br/>
int res=0;<br/>
string t;<br/>
while(ss&gt;&gt;t){res++;}<br/>
return res;<br/>
}<br/>
};<br/>
...</p>


----------------------------------------------------------------------------------------------------
C# Solution with Linq and Split()
public class Solution
{
    public int CountSegments(string s)
    {
        return s.Split(' ').Count(x => x != String.Empty);
    }
}


----------------------------------------------------------------------------------------------------
