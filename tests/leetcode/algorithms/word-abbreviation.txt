Standard test program is wrong?
W

----------------------------------------------------------------------------------------------------
&quot;short&quot; java solution, beats 98%
int MAXCOUNT = 6;   // the max balls you need will not exceed 6 since "The number of balls in your hand won't exceed 5"

public int findMinStep(String board, String hand) {
    int[] handCount = new int[26];
    for (int i = 0; i < hand.length(); ++i) ++handCount[hand.charAt(i) - 'A'];
    int rs = helper(board + "#", handCount);  // append a "#" to avoid special process while j==board.length, make the code shorter.
    return rs == MAXCOUNT ? -1 : rs;
}
private int helper(String s, int[] h) {
    s = removeConsecutive(s);     
    if (s.equals("#")) return 0;
    int  rs = MAXCOUNT, need = 0;
    for (int i = 0, j = 0 ; j < s.length(); ++j) {
        if (s.charAt(j) == s.charAt(i)) continue;
        need = 3 - (j - i);     //balls need to remove current consecutive balls.
        if (h[s.charAt(i) - 'A'] >= need) {
            h[s.charAt(i) - 'A'] -= need;
            rs = Math.min(rs, need + helper(s.substring(0, i) + s.substring(j), h));
            h[s.charAt(i) - 'A'] += need;
        }
        i = j;
    }
    return rs;
}
//remove consecutive balls longer than 3
private String removeConsecutive(String board) {
    for (int i = 0, j = 0; j < board.length(); ++j) {
        if (board.charAt(j) == board.charAt(i)) continue;
        if (j - i >= 3) return removeConsecutive(board.substring(0, i) + board.substring(j));
        else i = j;
    }
    return board;
}


----------------------------------------------------------------------------------------------------
Recursive java solution
public class Solution {
    public int findMinStep(String board, String hand) {
        List<Character> boardList = new ArrayList<Character>();
        for (char c : board.toCharArray()) {
            boardList.add(c);
        }
        Map<Character,Integer> handMap = new HashMap<>();
        handMap.put('R',0);
        handMap.put('Y',0);
        handMap.put('B',0);
        handMap.put('G',0);
        handMap.put('W',0);
        for (char h : hand.toCharArray()) {
            handMap.put(h, handMap.get(h) + 1);
        }
        return find(boardList, handMap);
    }
    
    private int find(List<Character> board, Map<Character, Integer> hand) {
        cleanupBoard(board);
        if (board.size() == 0) return 0;
        if (empty(hand)) return -1;
        int count = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i<board.size(); i++) {
            char c = board.get(i);
            count++;
            if (i == board.size() - 1 || board.get(i+1) != c) {
                int missing = 3 - count;
                if (hand.get(c) >= missing) {
                    hand.put(c, hand.get(c) - missing);
                    List<Character> smallerBoard = new ArrayList<>(board);
                    for (int j = 0; j<count; j++) {
                        smallerBoard.remove(i-j);
                    }
                    int smallerFind = find(smallerBoard, hand);
                    if ( smallerFind != -1 ) {
                        min = Math.min(smallerFind + missing, min);
                    }
                    hand.put(c, hand.get(c) + missing);
                }
                count = 0;
            }
        }
        return (min == Integer.MAX_VALUE) ? -1 : min;
    }
    
    private void cleanupBoard(List<Character> board) {
        int count = 0;
        boolean cleaned = false;
        for (int i = 0; i<board.size(); i++) {
            char c = board.get(i);
            count++;
            if (i == board.size() - 1 || board.get(i+1) != c) {
                if (count >= 3) {
                    for (int j = 0; j<count; j++) {
                        board.remove(i-j);
                    }
                    cleaned = true;
                    break;
                }
                count = 0;
            }
        }
        if (cleaned) {
            cleanupBoard(board);
        }
    }
    
    private boolean empty(Map<Character,Integer> hand) {
        for (int val : hand.values()) {
            if (val > 0) return false;
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
Concise 3ms C++ Solution
#define MAX_STEP 6 
class Solution {
public:
    int findMinStep(string board, string hand) {
        sort(hand.begin(), hand.end()); 
        int res = helper(board, hand); 
        return res > hand.size() ? -1 : res;
    }
    
    int helper(string b, string h) {
        if (b.empty()) return 0;
        if (h.empty()) return MAX_STEP;
        int res = MAX_STEP;
        for (int i = 0; i < h.size(); i++) {
            int j = 0;
            int n = b.size();
            while (j < n) {
                int k = b.find(h[i], j);
                if (k == string::npos) break;
                if (k < n-1 && b[k] == b[k+1]) { // 2 consecutive balls with same color on board
                    string nextb = shrink(b.substr(0, k) + b.substr(k+2)); // shrink the string until no 3 or more consecutive balls in same color
                    if (nextb.empty()) return 1; // this is the best result for current board, no need to continue
                    string nexth = h;
                    nexth.erase(i, 1); // remove the used ball from hand
                    res = min(res, helper(nextb, nexth) + 1);
                    k++;
                }
                else if (i > 0 && h[i] == h[i-1]) { // 2 balls with same color in hand
                    string nextb = shrink(b.substr(0, k) + b.substr(k+1)); // shrink the string until no 3 or more consecutive balls in same color
                    if (nextb.empty()) return 2;  // this is the best result for current board, no need to continue
                    string nexth = h;
                    nexth.erase(i, 1); // remove the used balls from hand
                    nexth.erase(i-1, 1);
                    res = min(res, helper(nextb, nexth) + 2);
                }
                j = k + 1;
            }
        }
        return res;
    }
    
    string shrink(string s) {
        while(s.size() > 0) {
            int start = 0;
            bool done = true;
            for (int i = 0; i <= s.size(); i++) {
                if (i == s.size() || s[i] != s[start]) {
                    if (i - start >= 3) {
                        s = s.substr(0, start) + s.substr(i);
                        done = false;
                        break;
                    }
                    start = i;
                }
            }
            if (done) break;
        }
        return s;
    }
};


----------------------------------------------------------------------------------------------------
16-line 9ms recursive solution with pre-process, memorization and edge case test, no helper functions (detailed explanation)
    int findMinStep(string b, string h) {
      // pre-process
      string a; int L, r = 0;
      for (char c:b) // shrink b to remove consecutive identical letters
        if (c-r) if ((L=a.size()) < 2 || c-a[L-1] || c-a[L-2]) a += c, r = 0;
                 else r = c, a.pop_back(), a.pop_back();
      sort(h.begin(), h.end()); // sort hand for memorization
      
      // memorization
      if (m.count(b=a) && m[b].count(h)) return m[b][h];
        
      // base cases
      if (b.empty()) return 0; else if (h.empty()) return -1;
    
      // edge cases
      for (char c:b) if (count(a.begin(),(a=b+h).end(),c) < 3) return m[b][h] = -1; 
      
      // recursion
      for (int i = 0, res = INT_MAX; i <= h.size(); ++i) { // each letter in hand
        if (i==h.size()) return m[b][h] = res<INT_MAX? res : -1;
        if (i && h[i]==h[i-1] || b.find(h[i])==string::npos) continue;
        for (int j = 0, step; j < b.size(); ++j) { // each insertion position
          if (b[j]-h[i] || (j && b[j]==b[j-1])) continue;
          string bb(b); bb.insert(bb.begin() + j, h[i]); // insert h[i] to board
          string hh(h); hh.erase(hh.begin() + hh.find(h[i])); // remove h[i] from hand
          if (step = findMinStep(bb, hh)+1) res = min(res, step);
        }
      }
    }
    
    // m[b][h] = min steps for borad=b & hand=h
    unordered_map<string, unordered_map<string, int>> m;


----------------------------------------------------------------------------------------------------
StraightForward Recursive Java Solution beat 97%
public class Solution {
    
    private int aux(String s, int[] c){
        if("".equals(s)) return 0;
//worst case, every character needs 2 characters; plus one to make it impossible, ;-)
        int res = 2 * s.length() + 1; 
        for(int i = 0; i < s.length();){
            int j = i++;
            while(i < s.length() && s.charAt(i) == s.charAt(j)) i++;
            int inc = 3 - i + j;
            if(c[s.charAt(j)] >= inc){
                int used = inc <= 0 ? 0 : inc;
                c[s.charAt(j)] -= used;
                int temp = aux(s.substring(0, j) + s.substring(i), c);
                if(temp >= 0) res = Math.min(res, used + temp);
                c[s.charAt(j)] += used;
            }
        }
        return res == 2 * s.length() + 1 ? -1 : res;
    }
    
    public int findMinStep(String board, String hand) {
        int[] c = new int[128];
        for(char x : hand.toCharArray()){
            c[x]++;
        }
        return  aux(board, c);
    }
}


----------------------------------------------------------------------------------------------------
Misunderstanding!
<p>I thought this zuma game is like the real one, the ball in hand should not be out-of-order, you can not use the later one then back to the former one.......<br/>
&#34;WRYYRWWRRWW&#34;<br/>
&#34;WYBR&#34;<br/>
this should be -1......</p>


----------------------------------------------------------------------------------------------------
Search and memorize Java solution
public class Solution {
	    public int findMinStep(String board, String hand) {
	        HashMap<Character, int[]> mhand = new HashMap<Character, int[]>();
	        mhand.put('R', new int[]{0});
	        mhand.put('Y', new int[]{0});
	        mhand.put('B', new int[]{0});
	        mhand.put('G', new int[]{0});
	        mhand.put('W', new int[]{0});
	        for(char c:hand.toCharArray()){
	                mhand.get(c)[0]++;
	        }
	        HashMap<String, Integer> record = new HashMap<String, Integer>();
	        int min = helper(board, mhand, record);
	        if(min>=10000){
	            return -1;
	        } else {
	            return min;
	        }
	    }
	    
	    int helper(String board, HashMap<Character, int[]> hand, HashMap<String, Integer> record){
	        if(board.length()==0){
	            return 0;
	        } else {
	            int min = 10000;
                for(int i=0;i<board.length();i++){
                    if(hand.get(board.charAt(i))[0]>0){
                        hand.get(board.charAt(i))[0]--;
                        String newboard = board.substring(0,i)+board.charAt(i)+board.substring(i);
                        newboard = further(newboard);
                        String c = code(newboard, hand);
	                    if(record.containsKey(c)){
	                    	min = Math.min(min, 1+record.get(c));
	                    } else {
	                    	int s = helper(newboard, hand, record);
	                    	min = Math.min(min, 1+s);
	                    	record.put(c, s);
	                    }
                        hand.get(board.charAt(i))[0]++;
                    }
                }
	            return min;
	        }
	    }
	    String further(String board){
	        if(board.length()==0){
	            return "";
	        }
	        int count=1;
	        for(int i=1;i<board.length();i++){
	            if(board.charAt(i-1)==board.charAt(i)){
	                count++;
	            } else {
	                if(count>=3){
	                    return further(board.substring(0, i-count)+board.substring(i));
	                } else {
	                    count=1;
	                }
	            }
	        }
	        if(count>=3){
	            return board.substring(0, board.length()-count);
	        }
	        return board;
	    }    
	    String code(String board, HashMap<Character, int[]> hand){
	    	StringBuilder sb = new StringBuilder();
	    	sb.append(board);
	    	for(Map.Entry<Character, int[]> e: hand.entrySet()){
	    		sb.append(e.getKey());
	    		sb.append(e.getValue()[0]);
	    	}
	    	return sb.toString();
	    }
}


----------------------------------------------------------------------------------------------------
Java Recursive Solution with comments, 22ms
public int findMinStep(String board, String hand) {
    //precomputation
    //convert board from String to StringBuilder, easy to delete and insert char.
    //convert hand from String to HashMap, easy to get the number of a particular kind of ball in hand.
    StringBuilder b = new StringBuilder(board);
    Map<Character,Integer> handMap = new HashMap<>(5);
    handMap.put('R', 0);
    handMap.put('B', 0);
    handMap.put('G', 0);
    handMap.put('W', 0);
    handMap.put('Y', 0);
    for(char c : hand.toCharArray()) {
        handMap.put(c, handMap.get(c)+1);
    }
    //after precomputation, use helper method to find the answer recursively.
    return helper(b, handMap);
 }

public int helper(StringBuilder board, Map<Character,Integer> hand) {
    if(board.length() == 0) return 0;
    if(handIsEmpty(hand)) return -1;
    int count = 1;
    int min = Integer.MAX_VALUE;
    //find a place to insert ball(s) to remove at least three balls.
    for (int i = 0; i < board.length(); i++) {
        char nowChar = board.charAt(i);
        if(i+1 < board.length() && board.charAt(i+1) == nowChar) {
            count++;
            continue;
        }
        int missing = 3-count;
        if(hand.get(nowChar) - missing >= 0) {
            //new board to manipulate
            StringBuilder newBoard = new StringBuilder(board);
            //insert ball(s) according to the missing number
            newBoard = newBoard.insert(i+1,nowChar);
            if(missing == 2) newBoard = newBoard.insert(i+1,nowChar);
            //update the number of balls in hand
            hand.put(nowChar, hand.get(nowChar)-missing);
            //shrink board
            shrinkBoard(newBoard);
            //find the min for the new board
            int res = helper(newBoard, hand);
            //if find a way to remove all balls
            if(res != -1) {
                min = Math.min(min, res+missing);
            }
            //recover the balls in hand for further computation
            hand.put(nowChar, hand.get(nowChar)+missing);

        }
        count = 1;

    }
    return min == Integer.MAX_VALUE ? -1:min;
}

//method to shrink the board if possible.
public void shrinkBoard(StringBuilder b) {
    if(b.length() < 3) return;
    boolean clean = true;
    int count = 0;
    char c = b.charAt(0);
    for (int i = 0; i < b.length(); i++) {
        if(b.charAt(i) == c) count++;
        else {
            if(count >= 3) {
                b.delete(i-count,i);
                clean = false;
                count = 0;
                break;
            } else {
                c = b.charAt(i);
                count = 1;
            }
        }
    }
    if(count >= 3) {
        b.delete(b.length()-count, b.length());
        clean = false;
    }

    if(!clean) shrinkBoard(b);
}
//test hand is empty or not.
public boolean handIsEmpty(Map<Character,Integer> hand) {
    for(int temp:hand.values()) {
        if(temp != 0 ) return false;
    }
    return true;
}

----------------------------------------------------------------------------------------------------
DP O(N^3) Solution in Python with explanation
class Solution(object):
    def findMinStep(self, board, hand):
        """
        :type board: str
        :type hand: str
        :rtype: int
        """
        def getBalls(balls):
            """
            Convert the init given board string into a ball list.
            Each element of the list is in the form of [color, ballCnt]
            This function can automatically clear the 3 consective balls with
            the same color in the given string.

            >>> getBalls("RRBBBGYYWWWYB")
            [["R", 2], ["B", 3], ["G", 1], ["B", 1]]
            """
            ballList = []
            for ball in balls:
                if not ballList or ballList[-1][0] != ball:
                    if ballList and ballList[-1][1] >= 3:
                        ballList.pop(-1)
                    ballList.append([ball, 1])
                elif ball == ballList[-1][0]:
                    ballList[-1][1] += 1
            return ballList
        
        def combineBalls(balls1, balls2):
            """
            Combine 2 sets of balls together.

            >>> combineBalls({"R": 1}, {"R": 1, "G": 1})
            {"R": 2, "G": 1}
            """
            ans = dict(balls1)
            for key, value in balls2.items():
                if key in ans:
                    ans[key] += value
                else:
                    ans[key] = value
            return ans
        
        def cntBalls(balls):
            """
            Count the number of balls we have chosen.
            Since there is only 5 colors in the game, this function can be done in O(1) time.
            """
            return sum(balls.values())

        def updateAns(ans1, ans2):
            """
            Compare two different solution to the sub-problem,
            and return the better one.
            If `ans1` has fewer balls and `ans1` can be formed by the balls given,
            then just return `ans1`, else we return `ans2`
            Therefore, `ans1` should always be the new soluton, while `ans2` the old.
            """
            if cntBalls(ans1) < cntBalls(ans2) and checkAvailable(ans1, ballsInHand) >= 0:
                return ans1
            return ans2
        
        def checkAvailable(balls, ballsInHand):
            """
            Check whether current balls is available according to the given balls.
            Since there is only 5 colors in the game, this function can be done in O(1) time.
            """
            for key, value in balls.items():
                if balls[key] != 0:
                    if key not in ballsInHand:
                        return -1
                    if ballsInHand[key] < value:
                        return -1
            return sum(balls.values())

        def memorySearch(start, end):
            if end < start:
                return {}
            elif (start, end) in history:
                return history[(start, end)]
            elif start == end:
                # There is only one color in the sub-problem
                return {ballsTable[start][0]: 3 - ballsTable[start][1]}
            elif start + 1 == end:
                # There is only two color in the sub-problem
                return combineBalls(memorySearch(start, start), memorySearch(end, end))
            # When there are more than 3 color in the sub-problem
            thisAns = {"R":float("inf")}
            firstColor, lastColor = ballsTable[start][0], ballsTable[end][0]
            # The first possible Solution is to split the balls into 2 parts and finish both of them seperately
            for k in xrange(start, end):
                thisBalls = combineBalls(memorySearch(start, k), memorySearch(k+1, end))
                thisAns = updateAns(thisBalls, thisAns)
            # The second possible Solution is to clear the first and the last balls in the end
            if firstColor == lastColor:
                toAdd = max(0, 3 - ballsTable[start][1] - ballsTable[end][1])
                thisBalls = combineBalls(memorySearch(start+1, end-1), {firstColor: toAdd})
                thisAns = updateAns(thisBalls, thisAns)
            # The third possible Solution is to clear the first and the last balls in the end with
            # one ball in the middle
            if firstColor == lastColor and 1 in (ballsTable[start][1], ballsTable[end][1]):
                idx = start + 1
                while idx < end:
                    if ballsTable[idx][0] == firstColor and ballsTable[idx][1] == 1:
                        thisBalls = combineBalls(memorySearch(start + 1, idx - 1), memorySearch(idx + 1, end - 1))
                        thisAns = updateAns(thisBalls, thisAns)
                    idx += 1
            history[(start, end)] = thisAns
            return thisAns
            
        # Initialization
        ballsTable = getBalls(board)
        ballsInHand = {}
        for ball in hand:
            ballsInHand[ball] = ballsInHand.get(ball, 0) + 1
        history = {}
        # print ballsTable
        length = len(ballsTable)
        return checkAvailable(memorySearch(0, length - 1), ballsInHand)


----------------------------------------------------------------------------------------------------
memoization c++ solution
class Solution {
public:
	bool removeCon(std::string& str) {
		int con = 1;
		for (size_t i = 1; i < str.size(); i++) {
			if (str[i] == str[i - 1]) {
				con++;
			} else {
				if (con >= 3) {
					str.erase(i - con, con);
					return true;
				}
				con = 1;
			}
		}

		if (con >= 3) {
			str.erase(str.size() - con, con);
			return true;
		}

		return false;
	}

    int solve(string board, string hand) {
		while (removeCon(board));

		if (board.empty()) {
			return 0;
		}

		if (hand.empty() || board.size() + hand.size() < 3) {
			return -1;
		}

		auto it = f.find(std::make_pair(board, hand));
		if (it != f.end()) {
			return it->second;
		}

		int best = -1;
		for (size_t i = 0; i < hand.size(); i++) {
			for (size_t j = 0; j < board.size(); j++) {
				if (board[j] == hand[i]) {
					std::string new_board = board;
					std::string new_hand = hand;

					new_board.insert(new_board.begin() + j, hand[i]);
					new_hand.erase(i, 1);
					int ret = solve(new_board, new_hand);
					if (ret > -1) {
						if (best == -1) {
							best = ret + 1;
						} else {
							best = std::min(best, ret + 1);
						}
					}
				}
			}
		}

		f[std::make_pair(board, hand)] = best;
		return best;
    }

	int findMinStep(string board, string hand) {
		f.clear();
		std::sort(hand.begin(), hand.end());
		return solve(board, hand);
	}

	std::map<std::pair<std::string, std::string>, int> f;
};


----------------------------------------------------------------------------------------------------
Java BFS solution
public class Solution {
    Map<Character, Integer> colorId = new HashMap<>();
    
    public int findMinStep(String board, String hand) {
        String color = "RYWBG";
        List<Integer> handBall = new ArrayList<>(Arrays.asList(0,0,0,0,0));
        int index = 0;
        for(char c : color.toCharArray()){
            colorId.put(c, index ++);
        }
        
        for(char ball : hand.toCharArray()){
            handBall.set(colorId.get(ball), handBall.get(colorId.get(ball)) + 1);
        }

        return BFS(new StringBuilder(board), handBall);
    }
    
    public int BFS(StringBuilder board, List<Integer> handBall){
        Queue<State> queue = new LinkedList<>();
        Set<String> nextBoardSet = new HashSet<>();
        queue.offer(new State(board, handBall));
        int ans = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            ans ++;
            while(size -- > 0){
                State currentState = queue.poll();
                StringBuilder currentBoard = currentState.board;
                List<Integer> currentHandBall = currentState.handBall;
                
                for(int start = 0, end = start + 1; start < currentBoard.length(); start = end, end++){
                    while(end < currentBoard.length() && currentBoard.charAt(end) == currentBoard.charAt(end - 1)){
                        end ++;
                    }
                    int number = end - start;
                    int colorIndex = colorId.get(currentBoard.charAt(start));
                    if(currentHandBall.get(colorIndex) < 3 - number){
                        continue;
                    }
                    else{
                        StringBuilder nextBoard = new StringBuilder(currentBoard.toString());
                        if(number == 2){
                        	nextBoard.delete(start, end);
                        	nextBoard = reduce(nextBoard);
                            if(nextBoard.length() == 0){
                                return ans;
                            }
                        }
                        else{
                        	nextBoard.insert(end, currentBoard.charAt(start));
                        }
                        if(!nextBoardSet.add(nextBoard.toString())){
                            continue;
                        }
                        
                        List<Integer> nextHandBall = new ArrayList<>();
                        nextHandBall.addAll(currentHandBall);
                        nextHandBall.set(colorIndex, nextHandBall.get((colorIndex)) - 1);
                        queue.offer(new State(nextBoard, nextHandBall));
                    }
                }
            }
        }
        return -1;
    }
    
    public StringBuilder reduce(StringBuilder nextBoard){
        String board = nextBoard.toString();
        String tmp = board.replaceAll("([RYBGW])\\1{2,}","");
        while (tmp.length() != board.length()) {
            board = tmp;
            tmp = board.replaceAll("([RYBGW])\\1{2,}","");
        }
        return new StringBuilder(tmp);
    }
    
}

class State {
    StringBuilder board;
    List<Integer> handBall = new ArrayList<>();
    
    public State(StringBuilder board, List<Integer> handBall){
        this.board = board;
        this.handBall = handBall;
    }
}



----------------------------------------------------------------------------------------------------
Simple and concise DFS solution
function dfs (board, hand) {
    let res = Infinity;

    if (board.length === 0)
        return 0;

    for (let i = 0; i < board.length; i++) {
        const ch = board[i], start = i;
        while (board[i + 1] === ch)
            i++;

        const need = Math.max(0, 3 - (i - start + 1));
        if ((hand[ch] || 0) < need)
            continue;

        hand[ch] = (hand[ch] || 0) - need;
        const removed = board.slice(0, start) + board.slice(i + 1);
        res = Math.min(res, dfs(removed, hand) + need);
        hand[ch] += need;
    }

    return res;
}

var findMinStep = function (board, hand) {
    hand = hand.split('').reduce((acc, v) =>
        (acc[v] = (acc[v] || 0) + 1, acc), {});
    const res = dfs(board, hand);
    return isFinite(res) ? res : -1;
}


----------------------------------------------------------------------------------------------------
Simplest Method
class Solution {
public:
    void reduce(string &s) { // cancel continuous chars with nums >= 3
        int i = 0, j = 0;
        int n = s.size();
        while (i < n - 2) {
            int j = i;
            while (j < n && s[i] == s[j]) j++;
            if (j-i >= 3) {
                s.erase(i, j-i);
                n = s.size();
                i -= 2;
                if (i < 0) i = 0;
            } else {
                i = j;
            }
        }
    }
    
    int findMinStep(string board, string hand) {
        int minCnt = INT_MAX;
        unordered_set<char> usedHand; 
        for (int i = 0; i < hand.size(); i++) {//for each char in hand
            if (usedHand.count(hand[i])) continue; // if we have tested this char before, skip
            usedHand.insert(hand[i]);
            for (int j = 0; j < board.size(); j++) { // for each char in board
                if (hand[i] != board[j]) continue; // the main idea is insert a char from hand next to the same char in board
                string s1 = board;
                string h1 = hand;
                s1.insert(j, 1, hand[i]);
                reduce(s1);
                if (s1.size() == 0) return 1;
                h1.erase(i, 1);
                int subCnt = findMinStep(s1, h1); // a new state
                if (subCnt == -1) continue;
                minCnt = min(subCnt + 1, minCnt);
            }       
        }
        return minCnt == INT_MAX ?-1 :minCnt;
    }
};


----------------------------------------------------------------------------------------------------
BFS
    int findMinStep(string board, string hand) {
        unordered_map<char,int> ht;
        for(char c:hand) ht[c]++;
        queue<pair<string,unordered_map<char,int>>> q({make_pair(board,ht)});
        int step = 0;
        while(!q.empty()) {
            int n = q.size();
            step++;
            for(int i=0;i<n;i++) {
                auto& p = q.front();
                string bd = p.first;
                for(int j=0;j<bd.size();j++) {
                    auto hnd = p.second;
                    if(!hnd[bd[j]]) continue;
                    hnd[bd[j]]--;
                    string bod = bd;
                    int rmv = rm(bod.insert(j,1,bd[j]),j);
                    if(rmv) j+=rmv-1;
                    if(bod.empty()) return step;
                    q.push(make_pair(bod,hnd));
                }
                q.pop();
            }
        }
        return -1;
    }
    int rm(string& board, int p) { //remove balls, return # of balls removed to the right of p
        int l = p-1, r = p+1;
        while(l>=0 && board[l]==board[p]) l--;
        while(r<board.size()&& board[r]==board[p]) r++;
        if(r-l>3) {
            l++;
            int rmv = rm(board.erase(l, r-l),l);
            return r-p-1+rmv;
        } else return 0;
    }


----------------------------------------------------------------------------------------------------
Simple C++ DFS Solution using list
#include <iostream>
#include <list>
#include <vector>
using namespace std;

const int kMaxNeed = 6;
struct Node{
    char ch;
    int count;
    Node(char c, int i) : ch(c), count(i){}
};
void CleanBoard(list<Node> &board){
    auto it = board.begin();
    while (it != board.end()) {
        if (it->count >= 3) {
            it = board.erase(it);
            // Ensure iterator != end(), before you use the it
            // Ensure iterator != begin(), before invoking prev(it)
            if (it != board.begin() &&
                it != board.end() &&
                it->ch == prev(it)->ch)
            {
                it->count += prev(it)->count;
                board.erase(prev(it));
            }
        } else {
            it++;
        }
    }
}
int DFS(list<Node> board, vector<int> &hand, int remain_in_hand) {
    CleanBoard(board);
    if (board.size() == 0)  return 0;
    //cannot remove all the balls
    if (remain_in_hand <= 0)  return kMaxNeed;
    int min_need = kMaxNeed;
    for (auto it = board.begin(); it != board.end(); ++it) {
        int need = 3 - it->count;
        if (hand[it->ch] >= need) {
            hand[it->ch] -= need;
            it->count += need;
            list<Node> next_board = board;
            int ret = DFS(next_board, hand, remain_in_hand - need);
            min_need = min(min_need, ret + need);
            it->count -= need;
            hand[it->ch] += need;
        }
    }
    return min_need;
}
int findMinStep(string board, string hand) {
    list<Node> board_list;
    vector<int> hand_count(CHAR_MAX, 0);
    int remain_in_hand = 0;
    for (int i = 0; i < board.length(); ++i) {
        board_list.push_back(Node(board[i], 1));
        if (i != board.length() - 1 && board[i] == board[i + 1]) {
            board_list.back().count++;
            i++;
        }
    }

    for (char ch : hand) {
        hand_count[ch]++;
        remain_in_hand ++;
    }

    int ret = DFS(board_list, hand_count, remain_in_hand);
    return ret == kMaxNeed ? -1 : ret;
}

int main() {
    cout << findMinStep("WRRBBW", "RB") << endl; // -1
    cout << findMinStep("WWRRBBWW", "WRBRW") << endl; // 2
    cout << findMinStep("G", "GGGGG") << endl; // 2
    cout << findMinStep("RBYYBBRRB", "YRBGB") << endl; // 3
}


----------------------------------------------------------------------------------------------------
80 Lines Brute-force Swift Solution
class Solution {
   func findMinStep(_ board: String, _ hand: String) -> Int {
        var handRecord:[Character:Int] = [:]
        var res = 6
        for char in hand.characters{
            if handRecord[char] == nil{
                handRecord.updateValue(1, forKey: char)
            }else{
                handRecord[char]! += 1
            }
        }
        helper(board: board, hand: &handRecord, numsOfHand: hand.characters.count, res: &res, cur: 0)
        return res == 6 ? -1 : res    
    }
    
    func helper(board:String, hand:inout [Character:Int], numsOfHand:Int, res: inout Int, cur:Int){
        if res<=0 || cur > numsOfHand{
            return
        }
        var i = 0
        let boardRecord = board.characters.map({ String($0) })
        while i<boardRecord.count{
            if i+1<boardRecord.count && boardRecord[i]==boardRecord[i+1]{
                if hand[Character(boardRecord[i])] != nil && hand[Character(boardRecord[i])]! > 0{
                    hand[Character(boardRecord[i])]! -= 1
                    var nextBoard = boardRecord
                    nextBoard.insert(boardRecord[i], at: i)
                    nextBoard = refreshBoard(board: nextBoard)
                    if nextBoard.count > 0{
                        helper(board: array2String(array: nextBoard), hand: &hand, numsOfHand: numsOfHand, res: &res, cur: cur+1)
                    }else{
                        res = min(res, cur + 1)
                    }
                    hand[Character(boardRecord[i])]! += 1
                    i+=1
                }
            }else{
                if hand[Character(boardRecord[i])] != nil && hand[Character(boardRecord[i])]!>=2{
                    hand[Character(boardRecord[i])]! -= 2
                    var nextBoard = boardRecord
                    nextBoard.insert(boardRecord[i], at: i)
                    nextBoard.insert(boardRecord[i], at: i)
                    nextBoard = refreshBoard(board: nextBoard)
                    if nextBoard.count > 0{
                        helper(board: array2String(array: nextBoard), hand: &hand, numsOfHand: numsOfHand, res: &res, cur: cur+2)
                    }else{
                        res = min(res, cur + 2)
                    }
                    hand[Character(boardRecord[i])]! += 2     
                }
            }
            i+=1
        }    
    }
    func refreshBoard(board:[String]) -> [String]{
        var boardRecord = board
        var count = 0
        for i in 0..<boardRecord.count{
            if i+1<boardRecord.count && boardRecord[i] == boardRecord[i+1]{
                count+=1
            }else{
                if count>=2{
                    for _ in 0..<count+1{
                        boardRecord.remove(at: i-count)
                    }
                    return refreshBoard(board:boardRecord)
                }
                count = 0
            }
        }
        return boardRecord
    }    
    func array2String(array:[String])->String{
        var string:String = ""  
        for i in array{
            string.append(i)
        }
        return string        
    }
}

----------------------------------------------------------------------------------------------------
Can someone explain the approach along with the code snippet.
<p>I tried in java but ran out of time. I was trying to use recursion to list out all possible ways and choose the one with minimum insertions. I&#39;m keen on knowing what approach was taken rather than just the code snippet.</p>


----------------------------------------------------------------------------------------------------
Super slow backtracking
public class Solution {
    public int findMinStep(String board, String hand) {
        int[] balls = new int[26];
        for(char c: hand.toCharArray()) balls[c-'A']++;
        int res = helper(board, balls); 
        return (res==Integer.MIN_VALUE) ? -1 : hand.length() - res; 
    }
    
    private int helper(String s, int[] balls){
        int left = 0; 
        for(int ii: balls) left+=ii; 
        if(s.equals("")) return left; 
        if(left==0) return Integer.MIN_VALUE;
            
        int res = Integer.MIN_VALUE;     
        for(int i = 0; i<s.length(); i++){
            char c = s.charAt(i);
            if(balls[c-'A']>0){
            //for every ball on board, insert a same ball to the left and to the right,  if any
           //yeah I know there are some duplicates, but should not be the TLE reason I assume
                balls[c-'A']--; 
                StringBuilder sb = new StringBuilder(s); 
                sb.insert(i, c);
                String tmp = sb.toString(); 
                while( !remove(tmp).equals(tmp) ){
                    tmp = remove(tmp); 
                }
                res = Math.max(res, helper(tmp, balls)); 
                
                sb = new StringBuilder(s); 
                sb.insert(i+1, c);
                tmp = sb.toString(); 
                while( !remove(tmp).equals(tmp) ){
                    tmp = remove(tmp); 
                }
                res = Math.max(res, helper(tmp, balls)); 
                balls[c-'A']++; 
            }
        }
        if(res==Integer.MIN_VALUE) return res; 
        return res;     
    }
    
    private String remove(String s){//remove any >=3 consecutive letters, if any
        int cnt = 1; 
        int startIndex = -1; 
        char[] chars = s.toCharArray(); 
        for(int i = 1; i<=chars.length; i++){
            if(i<chars.length && chars[i]==chars[i-1]){
                cnt++; 
            }else{
                if(cnt>=3) startIndex = i-cnt; 
                cnt=1; 
            }
        }
        if(startIndex!=-1){
            StringBuilder sb = new StringBuilder(s);
            while(startIndex+1<sb.length() && sb.charAt(startIndex) == sb.charAt(startIndex+1)){
                sb.deleteCharAt(startIndex); 
            }
            sb.deleteCharAt(startIndex);
            s = sb.toString(); 
        }
        return s; 
    }
}



----------------------------------------------------------------------------------------------------
