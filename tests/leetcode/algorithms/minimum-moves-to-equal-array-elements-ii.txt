Clear Explanation: 8ms Binary Search Java
public class Solution {
    public int splitArray(int[] nums, int m) {
        int max = 0; long sum = 0;
        for (int num : nums) {
            max = Math.max(num, max);
            sum += num;
        }
        if (m == 1) return (int)sum;
        //binary search
        long l = max; long r = sum;
        while (l <= r) {
            long mid = (l + r)/ 2;
            if (valid(mid, nums, m)) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return (int)l;
    }
    public boolean valid(long target, int[] nums, int m) {
        int count = 1;
        long total = 0;
        for(int num : nums) {
            total += num;
            if (total > target) {
                total = num;
                count++;
                if (count > m) {
                    return false;
                }
            }
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++ &#x2F; Fast &#x2F; Very clear explanation &#x2F; Clean Code&#93; Solution with Greedy Algorithm and Binary Search
class Solution {
private:
    /* 
        Params:
            nums - The input array; 
            cuts - How many cuts are available (cuts = #groups - 1); 
            max - The maximum of the (sum of elements in one group);
        Rtn:
            Whether we can use at most 'cuts' number of cuts to segment the entire array, 
            such that the sum of each group will not exceed 'max'.
     */
    bool doable (const vector<int>& nums, int cuts, long long max) {
        
        // 'acc' is the temporary accumulator for the currently processed group.
        
        int acc = 0;
        for (num : nums) {
            
            // If the current processed element in this array is larger than 'max', we cannot segment the array.
            // (Reason is straightforward, if 'nums' is [10, 2, 3, 5] and 'max' is 6, even you can have 3 cuts
            // (by which you can cut array as [[10], [2], [3], [5]]), the group containing 10 will be larger than 6, 
            //  there is no way to do this).
            // Ps: This step is unnecessary in this solution. Because 'left' in the splitArray() function can assure 
            // 'max' will be larger than every single element. I just want to write a generalized doable() function :)
            
            if (num > max) return false;
            
            // If the (sum of the currently processed group) + (current element) is smaller than max, we can add current 
            // element into this group.
            
            else if (acc + num <= max) acc += num;
            
            // If not, we will make a cut before this element, and this element will be the first element in the new group.
            
            else {
                --cuts;
                acc = num;
                
                // If we've used up all cuts, this means this 'max' is not doable.
                if (cuts < 0) return false;
            }
        }
        
        // If we can reach here, this means we've used at most 'cuts' cut to segment the array, and the sum of each groups is
        // not larger than 'max'. Yeah!
        return true;
    }
    
public:
    int splitArray(vector<int>& nums, int m) {
        // Use long long to avoid overflow.
        long long left = 0, right = 0;
        // The smallest possible value ('left') is the the value of the largest element in this array.
        // The largest possible value ('right') is the sum of all elements in this array.
        for (num : nums) {
            left = max(left, (long long)num);
            right += num;
        }
        
        // Use binary search, find the lower bound of the possible (minimum sum of groups within m - 1 cuts).
        while (left < right) {
            long long mid = left + (right - left) / 2;
            if (doable(nums, m - 1, mid)) right = mid;
            else left = mid + 1;
        }
        return left;
    }
};


----------------------------------------------------------------------------------------------------
Java easy binary search solution 8ms
public class Solution {
    public int splitArray(int[] nums, int m) {
        long sum = 0;
        int max = 0;
        for(int num: nums){
            max = Math.max(max, num);
            sum += num;
        }
        return (int)binary(nums, m, sum, max);
    }
    
    private long binary(int[] nums, int m, long high, long low){
        long mid = 0;
        while(low < high){
            mid = (high + low)/2;
            if(valid(nums, m, mid)){
                //System.out.println(mid);
                high = mid;
            }else{
                low = mid + 1;
            }
        }
        return high;
    }
    
    private boolean valid(int[] nums, int m, long max){
        int cur = 0;
        int count = 1;
        for(int num: nums){
            cur += num;
            if(cur > max){
                cur = num;
                count++;
                if(count > m){
                    return false;
                }
            }
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
DP Java
public int splitArray(int[] nums, int m)
{
    int L = nums.length;
    int[] S = new int[L+1];
    S[0]=0;
    for(int i=0; i<L; i++)
        S[i+1] = S[i]+nums[i];

    int[] dp = new int[L];
    for(int i=0; i<L; i++)
        dp[i] = S[L]-S[i];

    for(int s=1; s<m; s++)
    {
        for(int i=0; i<L-s; i++)
        {
            dp[i]=Integer.MAX_VALUE;
            for(int j=i+1; j<=L-s; j++)
            {
                int t = Math.max(dp[j], S[j]-S[i]);
                if(t<=dp[i])
                    dp[i]=t;
                else
                    break;
            }
        }
    }

    return dp[0];
}

----------------------------------------------------------------------------------------------------
Binary Search C++ Solution
class Solution {
public:
    using ll = long long;

    bool canSplit(vector<int>& nums, int m, ll sum) {
        int c = 1;
        ll s = 0;
        for (auto& num : nums) {
            s += num;
            if (s > sum) {
                s = num;
                ++c;
            }
        }
        return c <= m;
    }

    int splitArray(vector<int>& nums, int m) {
        ll left = 0, right = 0;
        for (auto& num : nums) {
            left = max(left, (ll)num);
            right += num;
        }
        while (left <= right) {
            ll mid = left + (right-left)/2;
            if (canSplit(nums, m, mid))
                right = mid-1;
            else
                left = mid+1;
        }
        return left;
    }
};


----------------------------------------------------------------------------------------------------
Python solution dp and binary search
class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        def valid(mid):
            cnt = 0
            current = 0
            for n in nums:
                current += n
                if current>mid:
                    cnt += 1
                    if cnt>=m:
                        return False
                    current = n
            return True

        l = max(nums)
        h = sum(nums)

        while l<h:
            mid = l+(h-l)/2
            if valid(mid):
                h = mid
            else:
                l = mid+1
        return l


----------------------------------------------------------------------------------------------------
Explanation + Ruby 11-liner
nums

----------------------------------------------------------------------------------------------------
JAVA recursive DP. Having trouble in Iterative DP.
public int splitArray(int[] nums, int m) {
	if (nums.length == 0 || nums == null || m == 0)
		return Integer.MAX_VALUE;
	return splitArray(nums, m, 0);
}

public int splitArray(int[] nums, int m, int start) {
	if (nums.length == 0 || nums == null || m == 0)
		return Integer.MAX_VALUE;
	if (start > nums.length)
		return Integer.MAX_VALUE;
	if (m == 1) {
		int sum = 0;
		for (int i = start; i < nums.length; i++)
			sum += nums[i];
		return sum;
	}
	int sum = 0;
	int split = 0;
	int min = Integer.MAX_VALUE;
	for (int i = start; i < nums.length; i++) {
		sum += nums[i];
		split = Math.max(sum, splitArray(nums, m - 1, i + 1));
		min = Math.min(min, split);
	}
	return min;
}

----------------------------------------------------------------------------------------------------
Easy C++ binary search solution with explanation
    bool splits(vector<int>& nums, int m, long max_largest_sum)
    {
        long cur_subarray_sum = nums[0];
        int nsubarays = 1;
        for(int i = 1; i < nums.size(); ++i)
        {
            cur_subarray_sum += nums[i];
            if(cur_subarray_sum > max_largest_sum)
            {
                ++nsubarays;
                cur_subarray_sum = nums[i];
            }
        }
        if(nsubarays > m)
           return false;
        return true;
    }
    int splitArray(vector<int>& nums, int m) {
        int n = nums.size();
        long minres = nums[0], maxres = nums[0];
        for(int i = 1; i < n; ++i)
        {
            minres = max(minres,long(nums[i]));
            maxres += nums[i];
        }
        int res = 0;
        while(minres <= maxres)
        {
            long mid = (minres+maxres)/2;
            if(splits(nums,m,mid))
            {
               maxres  = mid-1;
               res = mid;
            }
            else
               minres = mid+1;
        }
        return res;
    }


----------------------------------------------------------------------------------------------------
I was soling the wrong problem due to bad wording. Please fix it!!!
<p>&#34;....you can split the array into m non-empty continuous subarrays&#34;<br/>
I understood this to be.. that the subarrays themselves have to be continues (e.g. 1,2,3,4...)<br/>
The wording should be changed to prevent ambiguities.</p>


----------------------------------------------------------------------------------------------------
Python DP+Memoization gets TLE but Java passes. Can this be fixed?
class Solution(object):
    def helper(self, i, nums, m, cache):
        if i == len(nums):
            return 0
        elif m == 1:
            return sum(nums[i:])
        else:
            if i in cache and m in cache[i]:
                return cache[i][m]
            cache.setdefault(i, {})
            cache[i][m] = float('inf')
            for j in range(1,len(nums)+1):
                left, right = sum(nums[i:i+j]), self.helper(i+j, nums, m-1, cache)
                cache[i][m] = min(cache[i][m], max(left, right))
            return cache[i][m]
    
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        cache = {}
        return self.helper(0, nums, m, cache)


----------------------------------------------------------------------------------------------------
Java DP
public class Solution {
    
    public int splitArray(int[] nums, int K) {
        int[] s = new int[nums.length];
        s[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            s[i] = nums[i] + s[i - 1];
        }
        
        for (int k = 2; k <= K; k++) {
            for (int i = nums.length - 1; i >= k - 1; i--) {
                int min = Integer.MAX_VALUE;
                int left = nums[i];
                for (int p = i - 1; p >= k - 2; p--) {
                    min = Math.min(min, Math.max(s[p], left));
                    left += nums[p];
                    if (left >= min) {
                        break;
                    }
                }
                s[i] = min;
            }
        }
        
        return s[nums.length - 1];
    }
}


----------------------------------------------------------------------------------------------------
Python solution with a little optimization, beats 100%
import bisect
class Solution(object):
    def splitArray(self, nums, m):
        if not nums: return 0
        n, sums = len(nums), [0, nums[0]]
        for i in xrange(1,n): sums.append(sums[-1] + nums[i])
        avg = sums[-1]/m
        def trial(ub, less = True):
        	prev = 0
	        for i in xrange(m-1):
	        	curr = bisect.bisect(sums, sums[prev] + ub, prev)
	        	if not less and curr < len(sums) and sums[curr] - sums[prev] - ub < ub - sums[curr-1] + sums[prev]:
		        	ub, prev = max(ub, sums[curr] - sums[prev]), curr
		        else: prev = curr - 1
	        return max(ub, sums[-1] - sums[prev])
        lo, hi = avg, trial(avg, False)
        while lo < hi:
        	mid = lo + ((hi - lo)>>1)
        	tmp = trial(mid)
        	if tmp > mid: hi, lo = min(hi, tmp), mid + 1
        	else: hi = mid
        return hi


----------------------------------------------------------------------------------------------------
9ms C++ solution with two functions using binary search
class Solution {
private:
    bool valid(vector<long>& sums, long sum, int m) {
        int count = 0, start = 1, end = (int)sums.size();
        while (start < end) {
            int left = start, right = end, mid = 0;
            while (left < right) {
                mid = left + (right - left) / 2;
                if (sums[mid] - sums[start - 1] <= sum)
                    left = mid + 1;
                else
                    right = mid;
            }
            if (++count > m)
                return false;
            start = left;
        }
        return true;
    };
public:
    int splitArray(vector<int>& nums, int m) {
        int n = (int)nums.size();
        long left = 0, right = 0, mid = 0;
        vector<long> sums(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            left = max(left, (long)nums[i]);
            right += nums[i];
            sums[i + 1] = right;
        }
        if (m == 1) return right;
        if (m == n) return left;
        
        while (left < right) {
            mid = left + (right - left) / 2;
            if (!valid(sums, mid, m))
                left = mid + 1;
            else
                right = mid;
        }
        return left;
    }
};


----------------------------------------------------------------------------------------------------
Very Concise 20-Lines Java Code to Binary Search Smallest Sum
    public int splitArray(int[] nums, int m) {
        int n = nums.length;
        long suml = nums[0], sumr = 0;
        for (int i = 0; i < n; 
            suml = Math.max(nums[i], suml), sumr += nums[i++]);
        
        while (suml < sumr) {
            long mid = (suml + sumr) / 2, m1 = 0;
            for (int i = 0, sumc = 0; i < n && m1 < m; sumc += nums[i++])
                if (sumc + nums[i] > mid) {
                    m1++;
                    sumc = 0;
                } 
            
            if (m1 < m)
                sumr = mid;
            else
                suml = mid + 1;
        }
        
        return (int)suml;
    }


----------------------------------------------------------------------------------------------------
C++ DP SOLUTION
class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        int n = nums.size();
        //dp[i][k] means max sum of k parts of elements 0..i
        vector<vector<long>> dp(n, vector<long>(m+1, INT_MAX));
        //sum array is used to calculate range sum of i..j
        vector<long> sum(n, 0);
        for (int i = 0; i < n; i++) {
            sum[i] = i == 0 ?nums[0] :(sum[i-1] + nums[i]);
        }
        // build dp from 0 to n-1 emelents
        for (int i = 0; i < nums.size(); i++) {
            //elements from 0 to indexi can be divided to i+1 parts mostly;
            int maxDivide = min(m, i+1);
            //for each dividing choice
            for (int k = 1; k <= maxDivide; k++) {
                if (k == 1) {
                    dp[i][k] = sum[i];
                    continue;
                }
                //divide 0..i to k parts, so i can be with i-1; i-1, i-2...; i-1, i-2..k-1;
                for (int j = i; j >= k-1; j--) {//0..k-2 can be divided to mostly k-1 parts
                    long partsum = sum[i] - sum[j] + nums[j];
                    if (partsum > dp[i][k]) break; //early termination
                    dp[i][k] = min(dp[i][k], max(partsum, dp[j-1][k-1]));
                }
            }
        }
        return dp[n-1][m];
    }
};


----------------------------------------------------------------------------------------------------
Python solution with detailed explanation
class Solution(object):
    def is_valid(self, nums, m, mid):
        # assume mid is < max(nums)
        cuts, curr_sum  = 0, 0
        for x in nums:
            curr_sum += x
            if curr_sum > mid:
                cuts, curr_sum = cuts+1, x
        subs = cuts + 1
        return (subs <= m)
    
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        low, high, ans = max(nums), sum(nums), -1
        while low <= high:
            mid = (low+high)//2
            if self.is_valid(nums, m, mid): # can you make at-most m sub-arrays with maximum sum atmost mid 
                ans, high = mid, mid-1
            else:
                low = mid + 1
        return ans


----------------------------------------------------------------------------------------------------
Clear and easy method using DP in C++
