My simple accepted solution(JAVA)
The core idea of this algorithm: 

1.Each depth of the tree only select one node.  
2. View depth is current size of result list.

Here is the code:

    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> result = new ArrayList<Integer>();
            rightView(root, result, 0);
            return result;
        }
        
        public void rightView(TreeNode curr, List<Integer> result, int currDepth){
            if(curr == null){
                return;
            }
            if(currDepth == result.size()){
                result.add(curr.val);
            }
            
            rightView(curr.right, result, currDepth + 1);
            rightView(curr.left, result, currDepth + 1);
            
        }
    }

----------------------------------------------------------------------------------------------------
My C++ solution, modified preorder traversal
    class Solution {
    public:
        void recursion(TreeNode *root, int level, vector<int> &res)
        {
            if(root==NULL) return ;
            if(res.size()<level) res.push_back(root->val);
            recursion(root->right, level+1, res);
            recursion(root->left, level+1, res);
        }
        
        vector<int> rightSideView(TreeNode *root) {
            vector<int> res;
            recursion(root, 1, res);
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
Reverse Level Order Traversal, java
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            // reverse level traversal
            List<Integer> result = new ArrayList();
            Queue<TreeNode> queue = new LinkedList();
            if (root == null) return result;
            
            queue.offer(root);
            while (queue.size() != 0) {
                int size = queue.size();
                for (int i=0; i<size; i++) {
                    TreeNode cur = queue.poll();
                    if (i == 0) result.add(cur.val);
                    if (cur.right != null) queue.offer(cur.right);
                    if (cur.left != null) queue.offer(cur.left);
                }
                
            }
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
Simple C++ solution (BTW: I like clean codes)
    class Solution {
    public:
        void dfs(TreeNode* root, int lv, vector<int> &res){
            if(!root)   return;
            if(lv>=res.size()) res.push_back(root->val);
            dfs(root->right,lv+1,res);
            dfs(root->left,lv+1,res);
        }

        vector<int> rightSideView(TreeNode* root) {
            vector<int> res;
            dfs(root, 0, res);
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
5-9 Lines Python, 48+ ms
Solution 1: **Recursive, combine right and left:** 5 lines, 56 ms

Compute the right view of both right and left left subtree, then combine them. For very unbalanced trees, this can be O(n^2), though.

    def rightSideView(self, root):
        if not root:
            return []
        right = self.rightSideView(root.right)
        left = self.rightSideView(root.left)
        return [root.val] + right + left[len(right):]

---

Solution 2: **Recursive, first come first serve:** 9 lines, 48 ms

DFS-traverse the tree right-to-left, add values to the view whenever we first reach a new record depth. This is O(n).

    def rightSideView(self, root):
        def collect(node, depth):
            if node:
                if depth == len(view):
                    view.append(node.val)
                collect(node.right, depth+1)
                collect(node.left, depth+1)
        view = []
        collect(root, 0)
        return view

---

Solution 3: **Iterative, level-by-level:** 7 lines, 48 ms

Traverse the tree level by level and add the last value of each level to the view. This is O(n).

    def rightSideView(self, root):
        view = []
        if root:
            level = [root]
            while level:
                view += level[-1].val,
                level = [kid for node in level for kid in (node.left, node.right) if kid]
        return view


----------------------------------------------------------------------------------------------------
Java Solution using Divide and Conquer
    public List<Integer> rightSideView(TreeNode root) {
        if(root==null)
            return new ArrayList<Integer>();
        List<Integer> left = rightSideView(root.left);
        List<Integer> right = rightSideView(root.right);
        List<Integer> re = new ArrayList<Integer>();
        re.add(root.val);
        for(int i=0;i<Math.max(left.size(), right.size());i++){
            if(i>=right.size())
                re.add(left.get(i));
            else
                re.add(right.get(i));
        }
        return re;
    }

----------------------------------------------------------------------------------------------------
Simple Java solution w&#x2F; recursion (2ms)
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            ArrayList list = new ArrayList();
            rightSideView(root, 0, list);
            
            return list;
        }
        
        public void rightSideView(TreeNode root, int level, ArrayList list) {
            if(root == null) return;

            if(list.size() == level)
                list.add(root.val);

            rightSideView(root.right, level + 1, list);
            rightSideView(root.left, level + 1, list);
        }
    }

----------------------------------------------------------------------------------------------------
Share my Java iterative solution, based on level order traversal
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> ret = new ArrayList<Integer>();
            if(root == null) return ret;
            Queue<TreeNode> q = new LinkedList<TreeNode>();
            q.offer(root);
            while(!q.isEmpty()){
                int cnt = q.size();
                for(int i = 0;i < cnt;i++){
                    TreeNode cur = q.poll();
                    if(i == cnt-1){
                        ret.add(cur.val);
                    }
                    if(cur.left != null){
                        q.offer(cur.left);
                    } 
                    if(cur.right != null){
                        q.offer(cur.right);
                    } 
                }
            }
            return ret;
        }
    }

----------------------------------------------------------------------------------------------------
9ms C++ BFS, O(n) time, concise with explanation
**9ms C++ iterative, concise code with explanation**

Using a queue **mQ** to perform level order traversal. In the beginning of a level traversal, the last element is pushed into result array **ret**. The core idea is similar with [Binary Tree Level Order Traversal][1]

O(n) time, O(logn) space

    class Solution {
    public:
        vector<int> rightSideView(TreeNode *root) {
            queue<TreeNode*>mQ;
            vector<int> ret;
            if(!root)return ret;
            mQ.push(root);
            while(!mQ.empty()){
                ret.push_back(mQ.back()->val);
                for(int i=mQ.size();i>0;i--){
                    TreeNode *tn=mQ.front();
                    mQ.pop();
                    if(tn->left)mQ.push(tn->left);
                    if(tn->right)mQ.push(tn->right);
                }
            }
            return ret;
        }
    };


  [1]: https://leetcode.com/problems/binary-tree-level-order-traversal/

----------------------------------------------------------------------------------------------------
Recursive solution
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> res = new ArrayList<Integer>();
            
            if(root == null) return res;
            
            visitLevel(root, 1, res);
            return res;
        }
        
        public void visitLevel(TreeNode root, int level, List<Integer> res){
            
            if(root == null) return;
            if(level > res.size()){
                res.add(root.val);    
            }
            
            visitLevel(root.right, level+1, res);
            visitLevel(root.left, level+1, res);
        }
    }

----------------------------------------------------------------------------------------------------
JAVA solution using recursion
    public class Solution {
  

     public List<Integer> rightSideView(TreeNode root) {
    		ArrayList<Integer> result = new ArrayList<Integer>();
    		if (root == null) return result;
    		return helper(root, result, 0);
    	}

	public List<Integer> helper(TreeNode root, ArrayList<Integer> result,
			int height) {
		if (height == result.size()) {
			result.add(root.val);
		}

		if (root.right != null) {
			helper(root.right, result, height + 1);

		}
		if (root.left != null) {
			helper(root.left, result, height + 1);
		}
		return result;
	}
}

Comments: height == result.size() is the core part in this recursion, it limits the amount of Node add to the result in each level(height) of the Tree.

Some thoughts: If the questions is asking for a left view of the binary tree, just swap the order of 

    if (root.right != null) {
			helper(root.right, result, height + 1);

		}
and

    if (root.left != null) {
        helper(root.left, result, height + 1);
    }

Moreover, if it's asking of the "x-ray view" of the binary tree, for example, display the second element from the right view(given a valid tree). The solution could be adding a counter inside

    if (height == result.size()) {
		result.add(root.val);
    }

and keep track of the counter.

----------------------------------------------------------------------------------------------------
DFS solution better than 90% solutions!
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     *     int val;
     *     TreeNode left;
     *     TreeNode right;
     *     TreeNode(int x) { val = x; }
     * }
     */
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> res = new ArrayList<Integer>();
            if (root == null){
                return res;
            }
            dfs (root, res, 0);
            return res;
        }
        
        public void dfs (TreeNode root, List<Integer> res, int level){
            if (root == null){
                return;
            }
            if (res.size() == level){
                res.add (root.val);
            }
            if (root.right != null){
                dfs (root.right, res, level + 1);
            }
            if (root.left != null){
                dfs (root.left, res, level + 1);
            }
        }
    }

----------------------------------------------------------------------------------------------------
O(n) Java Solution, I myself was asked this question by Amazon in phone interview
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new LinkedList<Integer>();
        if(root == null) return res;
        List<TreeNode> candidates = new LinkedList<TreeNode>();
        candidates.add(root);
        while(!candidates.isEmpty()) {
            List<TreeNode> temp = new LinkedList<TreeNode>();
            res.add(candidates.get(0).val);
            for(TreeNode curr : candidates) {
                if(curr.right != null)
                    temp.add(curr.right);
                if(curr.left != null)
                    temp.add(curr.left);
            }
            candidates = temp;
        }
        return res;
    }

**A variation of this question is to print a tree one level at a time.**

----------------------------------------------------------------------------------------------------
Python solution
    # Definition for a binary tree node.
    # class TreeNode(object):
    #     def __init__(self, x):
    #         self.val = x
    #         self.left = None
    #         self.right = None
    
    class Solution(object):
        def rightSideView(self, root):
            """
            :type root: TreeNode
            :rtype: List[int]
            """
            if root==None:
                return []
            ans=[root.val]
            left=ans+self.rightSideView(root.left)
            right=ans+self.rightSideView(root.right)
            if len(right)>=len(left):
                return right
            return right+left[len(right):]

----------------------------------------------------------------------------------------------------
Simple Java solution with BFS
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> result = new ArrayList<Integer>();
            if(root==null) return result;
            Queue<TreeNode> q = new LinkedList<TreeNode>();
            q.add(root);
            while(q.size()>0){
                int size = q.size();
                for(int i=0;i<size;i++){
                    TreeNode node= q.poll();
                    if(i==size-1)
                        result.add(node.val);
                    if(node.left!=null) q.add(node.left);
                    if(node.right!=null) q.add(node.right);
                }
            }
            return result;
        }
    }

----------------------------------------------------------------------------------------------------
My 7ms C++ accepted code
     /**
    * Definition for binary tree
    * struct TreeNode {
    *     int val;
    *     TreeNode *left;
    *     TreeNode *right;
    *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
    * };
    */
    class Solution {
    public:
    	vector<int> rightSideView(TreeNode *root) {
    		vector<int> right_side;
    		rightSide(root, right_side, 0);
    		return right_side;
    	}
    	void rightSide(TreeNode *r, vector<int> &a, int i)
    	{
    		if (r == NULL)return;
    		if (i == a.size())
    			a.push_back(r->val);
    		rightSide(r->right, a, i + 1);
    		rightSide(r->left, a, i + 1);
    	}
    };

----------------------------------------------------------------------------------------------------
18-line recursive C++ solution in 7 ms
    class Solution {
        int level = 0;//number of numbers that have been "seen".
        vector<int> answer;
    public:
        vector<int> rightSideView(TreeNode *root) {
            if (root!=NULL) travDown(root,0);
            return answer;
        }
        void travDown(TreeNode* nd, int N){//travel down, always go right first
            if (N>=level) {
                answer.push_back(nd->val);
                level++;
            }
            ++N;
            if (nd->right!=NULL) travDown(nd->right,N);
            if (nd->left!=NULL) travDown(nd->left,N);
        }
    };

----------------------------------------------------------------------------------------------------
My 4ms C++ iteratvie solution
My c++ solution is based on level order traversal. The run time is 4ms.

    vector<int> rightSideView(TreeNode* root){
    	vector<int> res;
    	if (!root)
    		return res;
    	queue<TreeNode*> q;
    	q.push(root);
    	int len;
    	TreeNode* t;
    	while(!q.empty()){
    		len = q.size();
    		for(int i = 0; i < len; ++i){
    			t = q.front();
    			q.pop();			
    			if(t->left)
    				q.push(t->left);
    			if(t->right)
    				q.push(t->right);
    		}
    		res.push_back(t->val);
    	}
    	return res;
    }

----------------------------------------------------------------------------------------------------
Java solution of 10 lines code(DFS)
    public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        help(root,1,result);
        return result;
    }
    public void help(TreeNode root, int depth, List<Integer> result){
        if(root==null) return;
        if(result.size()<depth) result.add(root.val);
        help(root.right,depth+1,result);
        help(root.left,depth+1,result);
    }
}

----------------------------------------------------------------------------------------------------
O(n) Java Solution Using Level Order Traversal
    public class Solution {
        public List<Integer> rightSideView(TreeNode root) {
            Queue<TreeNode> queue = new LinkedList<>();
            List<Integer> rst = new ArrayList<>();
            if(root == null) return rst;
            
            queue.offer(root);
            while(!queue.isEmpty()){
                int levelNum = queue.size();
                for(int i = 0; i < levelNum; i++){
                    if(queue.peek().left != null) queue.offer(queue.peek().left);
                    if(queue.peek().right != null) queue.offer(queue.peek().right);
                    if(i == levelNum - 1) rst.add(queue.poll().val);
                    else queue.poll();
                }
            }
            return rst;
        }
    }

Using level order traversal and put the last one of each level into the result list.

----------------------------------------------------------------------------------------------------
