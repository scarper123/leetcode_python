Java 4 lines concise solution with explanation
k = 0

----------------------------------------------------------------------------------------------------
Easy Java Solution
public class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int result = 0;
        int count = 0;
        
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
        	count++;
        	result = Math.max(count, result);
            }
            else count = 0;
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Simple C Solution with easy explanation
int findMaxConsecutiveOnes(int* nums, int numsSize) {
 int max = 0;
 int sum = 0;
 for (int i=0; i<numsSize; i++)
 {
     sum = (sum+nums[i])*nums[i];
     if(max<sum){max=sum;}
 }
return max;
}


----------------------------------------------------------------------------------------------------
Simple Python
class Solution(object):
    def findMaxConsecutiveOnes(self, nums):
        cnt = 0
        ans = 0
        for num in nums:
            if num == 1:
                cnt += 1
                ans = max(ans, cnt)
            else:
                cnt = 0
        return ans


----------------------------------------------------------------------------------------------------
C++ solution with O(n)
<p>class Solution {<br/>
public:<br/>
int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) {<br/>
int max=0,cur=0;<br/>
for(int i=0;i&lt;nums.size();i++)<br/>
{<br/>
if(nums&#91;i&#93;&amp;1)<br/>
{<br/>
max=max&gt;++cur?max:cur;<br/>
}<br/>
else cur=0;<br/>
}<br/>
return max;<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
A Python Solution
def findMaxConsecutiveOnes(self, nums):
    n = 0
    maxn = 0
    for i,v in enumerate(nums):
        if v == 1:
            n += 1
        else:
            maxn = max(maxn, n)
            n = 0
    maxn = max(maxn, n)
    return maxn

----------------------------------------------------------------------------------------------------
one-liner
def find_max_consecutive_ones(nums)
  nums.join.split('0').map(&:size).max || 0
end


----------------------------------------------------------------------------------------------------
Simple C++ code
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int max_cnt = 0, cnt = 0;
        for (auto n : nums) {
            if (n == 1) max_cnt = max(++cnt, max_cnt);
            else cnt = 0;
        }
        return max_cnt;
    }


----------------------------------------------------------------------------------------------------
Java Straightforward O(n) solution

    public int findMaxConsecutiveOnes(int[] nums) {
        int maxOnes = 0;
        for (int i = 0; i < nums.length; i++){
            int newOnes = 0;
            while (i < nums.length && nums[i] == 1){
                newOnes++;
                i++;
            }
            maxOnes = Math.max(maxOnes, newOnes);
        }
        return maxOnes;
    }


----------------------------------------------------------------------------------------------------
Concise C++ solution
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int count = 0, max = 0;
        for (int i = 0; i < nums.size(); ++i){
            if (nums[i]){
                if (++count > max) max = count;
            }
            else count = 0;
        }
        return max;
    }
};

----------------------------------------------------------------------------------------------------
Concise Java Solution without &quot;if&quot;.
public class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int maxSum = 0, sum = 0;
        for (int n : nums) {
            sum *= n;
            sum += n;
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum;
    }
}


----------------------------------------------------------------------------------------------------
Python easy solution
class Solution(object):
    def findMaxConsecutiveOnes(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        cur = 0 #number of 1 for current 
        maxNum = 0 #number of 1 in total
        for i in nums:
            if i == 1 :
                cur += 1
            else :
                cur = 0
            maxNum = max(maxNum, cur)
        return maxNum    


----------------------------------------------------------------------------------------------------
Python Solution
def findMaxConsecutiveOnes(self, nums):

    num_str = ''.join(map(str,nums))
    num_list = num_str.split('0')
    
    return len(max(num_list))

----------------------------------------------------------------------------------------------------
C++_AC
class Solution {
public:
int findMaxConsecutiveOnes(vector<int>& nums) {
    int ans = 0;
    int MAX = 0;
    for(auto num : nums){
        if(num == 0){
            MAX = max(MAX, ans);
            ans = 0;
        }else{
            ans++;
        }
    }
    return max(MAX,ans);
   //do not forget this step.
  // or you can also add '0' at the end of vector nums.
}
};

----------------------------------------------------------------------------------------------------
Very Simple c#, No &quot;if&quot; &quot;else&quot; used, no string concat used
public int FindMaxConsecutiveOnes(int[] nums) {
        if(nums == null || nums.Length == 0) return 0;
            int j = 0, n = 0, i = 0;
            for (i = 0; i < nums.Length; i++)
            {
                j = (nums[i] + j) * nums[i];
                n = Math.Max(n, j);
            }
            return Math.Max(n, j);
    }


----------------------------------------------------------------------------------------------------
C# - one pass, no strings just iterate array - greedy - super simple
    public int FindMaxConsecutiveOnes(int[] nums) 
    {
        int max = 0;
        int curr = 0;
        foreach (int x in nums)
        {
            curr = x == 0 ? 0 : curr + 1;
            max = curr > max ? curr : max;
        }
        return max;
    }


----------------------------------------------------------------------------------------------------
Python 1 line solution, is this valid?
def findMaxConsecutiveOnes(self, nums):

    return max(''.join(map(str,nums)).split('0')).count('1')


----------------------------------------------------------------------------------------------------
End it earlier Solution since nobody mentions this.
public class Solution {
    public int FindMaxConsecutiveOnes(int[] nums) {
        int rs=0;
        int cur=0;
        for(int i=0;i<nums.Length;i++)
        {
            if(nums[i]==1)
            {
                cur++;
            }
            else
            {
                rs=Math.Max(rs,cur);
                cur=0;
                //end it earlier
                if(rs>=nums.Length-1-i)
                {
                    return rs;
                }
            }
        }
        rs=Math.Max(rs,cur);
        return rs;
    }
}


----------------------------------------------------------------------------------------------------
Javascript Solution
var str = nums.join("").split("0").map(function(value){
    return value.length;
});
return Math.max.apply(null, str);

----------------------------------------------------------------------------------------------------
C++ 2 pointers O(n) solution
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int max=0;
        vector<int>::iterator head=nums.begin();
        vector<int>::iterator tail=nums.begin();
        while(tail!=nums.end()){
            while(*tail==1) tail++;
            if(tail-head>max) max=tail-head;
            head=tail;
            while(*head==0&&head!=nums.end()) head++;
            tail=head;
        }
        return max;
    }


----------------------------------------------------------------------------------------------------
