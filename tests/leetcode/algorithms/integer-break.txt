1-3 lines, C++&#x2F;Java&#x2F;Python&#x2F;C&#x2F;C#&#x2F;JavaScript&#x2F;Ruby
We can't really delete the node, but we can kinda achieve the same effect by instead removing the **next** node after copying its data into the node that we were asked to delete.

**C++**

    void deleteNode(ListNode* node) {
        *node = *node->next;
    }

But better properly delete the next node:

    void deleteNode(ListNode* node) {
        auto next = node->next;
        *node = *next;
        delete next;
    }

**Java and C#**

    public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
    }

**Python**

    def deleteNode(self, node):
        node.val = node.next.val
        node.next = node.next.next

**C**

    void deleteNode(struct ListNode* node) {
        *node = *node->next;
    }

But better properly free the next node's memory:

    void deleteNode(struct ListNode* node) {
        struct ListNode* next = node->next;
        *node = *next;
        free(next);
    }

**JavaScript**

    var deleteNode = function(node) {
        node.val = node.next.val;
        node.next = node.next.next;
    };

**Ruby**

    def delete_node(node)
        node.val = node.next.val
        node.next = node.next.next
        nil
    end


----------------------------------------------------------------------------------------------------
Why LeetCode accepted such stupid question?
This question is stupid and should be deleted intermediately.

----------------------------------------------------------------------------------------------------
Easy solution in java
    public void deleteNode(ListNode node) {
        node.val=node.next.val;
        node.next=node.next.next;
    }

Since we couldn't enter the preceding node, we can not delete the given node. We can just copy the next node to the given node and delete the next one.

----------------------------------------------------------------------------------------------------
This question is wrong.You cannot delete the node
    post the answer first:
    class Solution {
    public:
        void deleteNode(ListNode* node) {
            node->val = node->next->val;
            node->next = node->next->next;
        }
    };

However, this question is INCORRECT for sure, since you don't really "delete" a node, you are replacing the value. In fact, this is a terrible design leading to memory leaks almost for sure.

I wonder what company gives such misleading question. It's better called "modify" a node, instead of "deleting". Deleting means free the memory, and the incorrect description will mislead any person with slight experience on C++.

----------------------------------------------------------------------------------------------------
Easy question, Easy solution(JAVA)
    public class Solution {
        public void deleteNode(ListNode node) {
            if(node != null && node.next != null) {
                node.val = node.next.val;
                node.next = node.next.next;
            }
        }
    }

----------------------------------------------------------------------------------------------------
My C++ solution in 1 line


    class Solution {
    public:
        void deleteNode(ListNode* node) {
            *node = *(node->next);
        }
    };

if the node should be freed, we need 3 lines: 

    class Solution {
    public:
        void deleteNode(ListNode* node) {
            ListNode* temp = node->next;
            *node = *temp;
            delete temp;
        }
    };

----------------------------------------------------------------------------------------------------
Simple java solution 1ms
    public class Solution {
    public void deleteNode(ListNode node) {
       ListNode n1 = null;
		n1 = node.next;
		if (n1 != null) {
			node.val = n1.val;
			node.next = n1.next;
		}
    }
}

----------------------------------------------------------------------------------------------------
Python two lines solution, copy value and then delete the next node.
    def deleteNode(self, node):
        node.val = node.next.val
        node.next = node.next.next

----------------------------------------------------------------------------------------------------
4ms C solution (with explanation)
/* Here's my simple 4ms solution
We have been given a pointer to the node to be deleted. 
We know that while deleting a node from the linked list, we have to fix the links between the previous and the next node. The following are the steps to achieve this:

 1. Find out the next node of the pointer to the node that we have.
 2. Copy the data from the next node to the node to be deleted.
 3. Fix the link and delete the next node

*/

    void deleteNode(struct ListNode* node) {
        struct ListNode* nextNode = node->next;
        node->val = nextNode->val;
        node->next = nextNode->next;
        free(nextNode);
    }

----------------------------------------------------------------------------------------------------
Solution in Java in 2 lines
The idea is to copy the data of next node to current node and then delete the next node.


    public class Solution {
        public void deleteNode(ListNode node) {
            
            node.val = node.next.val;
            node.next = node.next.next;
        }
    }

----------------------------------------------------------------------------------------------------
2 Line Java O(1) Fast Accepted Solution
Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.

    public void deleteNode(ListNode node) {

		node.val = node.next.val;
		node.next = node.next.next;

	}

----------------------------------------------------------------------------------------------------
Simple C++ solution
    void deleteNode(ListNode* node) {
        node->val = node->next->val;
        ListNode* t = node->next;
        node->next = t->next;
        delete t;
    }

----------------------------------------------------------------------------------------------------
My java easy answer
**Notice :**  In this problem, we can't delete the last node with java code , so the problem says "except the tail". If I'm wrong, please tell me :) 

    public void deleteNode(ListNode node) {
        
        if(node.next==null || node==null )
			return ;

        node.val = node.next.val;
		node.next = node.next.next;
		
    }

----------------------------------------------------------------------------------------------------
C++ 16ms simple solution
    class Solution {
    public:
    void deleteNode(ListNode* node) {
        if(node == NULL) return;
        ListNode *tmp = node->next;
        node->val = tmp->val;
        node->next = tmp->next;
        delete tmp;
    }
    };

----------------------------------------------------------------------------------------------------
Simple 4ms C solution
    void deleteNode(struct ListNode* node) {
        struct ListNode* temp;
        temp=node->next;
        node->val=temp->val;
        node->next=temp->next;
        free(temp);
    }

Eg.a->b->c->d->e->....->z->NULL
Now suppose we wan't to delete node 'c',we can't directly do b->d and free(c) as we have access only to the node to be deleted,i.e.,'c'.But we can access d via c, so we copy d's info into c's info and make c point e, in short, c is now the same as d and so we delete d and get the desired result.

----------------------------------------------------------------------------------------------------
Java 1ms Solution
    public class Solution {
        public void deleteNode(ListNode node) {
    		if (node.next != null) {
    			node.val = node.next.val;
    			node.next = node.next.next;
    		}
    	}
    }

----------------------------------------------------------------------------------------------------
A JS solution..
    var deleteNode = function(node) {
        
        if(node.val !== undefined && node.next !== undefined){
            //copy the next node to this node
            node.val = node.next.val;
            node.next = node.next.next;
        }
    };

----------------------------------------------------------------------------------------------------
Pointer to head of linked list missing from expected solution for &quot;Delete Node in a Singly Linked List&quot;
For "Delete Node in a Linked List", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/

----------------------------------------------------------------------------------------------------
&#91;Java&#93; two line, 1ms
 node.val = node.next.val;
 node.next = node.next.next;

  

----------------------------------------------------------------------------------------------------
Java Solution
public void deleteNode(ListNode node) {
        if(node == null) {
            return;
        }
        if(node.next == null) {
            node = null;
            return;
        }
        
        node.val = node.next.val;
        node.next = node.next.next;
    }

----------------------------------------------------------------------------------------------------
