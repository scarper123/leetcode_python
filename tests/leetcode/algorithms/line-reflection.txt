My O(n) time solution use Java
    public class Solution {
        // 9.3 70 years diaoZhaTian China jiaYou 
        public int hIndex(int[] citations) {
            int length = citations.length;
            if (length == 0) {
            	return 0;
            }
            
            int[] array2 = new int[length + 1];
            for (int i = 0; i < length; i++) {
            	if (citations[i] > length) {
            		array2[length] += 1;
            	} else {
            		array2[citations[i]] += 1;
            	}
            }
            int t = 0;
            int result = 0;
    
            for (int i = length; i >= 0; i--) {
            	t = t + array2[i];
            	if (t >= i) {
            		return i;
            	}
            }
            return 0;
        }
    }

----------------------------------------------------------------------------------------------------
Java bucket sort O(n) solution with detail explanation
This type of problems always throw me off, but it just takes some getting used to.  The idea behind it is some bucket sort mechanisms.  First, you may ask why bucket sort.  Well, the h-index is defined as the number of papers with reference greater than the number.  So assume `n` is the total number of papers, if we have `n+1` buckets, number from 0 to n, then for any paper with reference corresponding to the index of the bucket, we increment the count for that bucket.  The only exception is that for any paper with larger number of reference than `n`, we put in the `n`-th bucket.  

Then we iterate from the back to the front of the buckets, whenever the total count exceeds the index of the bucket, meaning that we have the index number of papers that have reference greater than or equal to the index.  Which will be our h-index result.  The reason to scan from the end of the array is that we are looking for the greatest h-index.  For example, given array `[3,0,6,5,1]`, we have 6 buckets to contain how many papers have the corresponding index.  Hope to image and explanation help.


![Buckets][1]




    public int hIndex(int[] citations) {
        int n = citations.length;
        int[] buckets = new int[n+1];
        for(int c : citations) {
            if(c >= n) {
                buckets[n]++;
            } else {
                buckets[c]++;
            }
        }
        int count = 0;
        for(int i = n; i >= 0; i--) {
            count += buckets[i];
            if(count >= i) {
                return i;
            }
        }
        return 0;
    }


  [1]: http://i67.tinypic.com/2yvpfv5.jpg

----------------------------------------------------------------------------------------------------
A Clean O(N) Solution in Java
    public int hIndex(int[] citations) {
        int len = citations.length;
        int[] count = new int[len + 1];
        
        for (int c: citations)
            if (c > len) 
                count[len]++;
            else 
                count[c]++;
        
        
        int total = 0;
        for (int i = len; i >= 0; i--) {
            total += count[i];
            if (total >= i)
                return i;
        }
        
        return 0;
    }

----------------------------------------------------------------------------------------------------
Java, O(n) time, with easy explanation.
The idea is to see that the result can only range from 0 to the length of the array (because we can't have h-index greater than the total papers published). So we create an array "arr" which acts like a HashMap (using pigeon hole principle) and loop backwards from the highest element, then we find "tot" which is the total number of papers that has more than i citations, and we stop when tot>=i (total number of papers with more than i citations >= i). We don't need to keep going because we are trying the biggest i possible, we we stop and return the result.

    public class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length, tot=0;
        int[] arr = new int[n+1];
        for (int i=0; i<n; i++) {
            if (citations[i]>=n) arr[n]++;
            else arr[citations[i]]++;
        }
        for (int i=n; i>=0; i--) {
            tot += arr[i];
            if (tot>=i) return i;
        }
        return 0;
    }
}

----------------------------------------------------------------------------------------------------
My easy solution
     public int hIndex(int[] citations) {
       Arrays.sort(citations);
       int len=citations.length;
        for(int i=0;i<len;i++){
            if(citations[i]>=len-i) return len-i;
            
        }
        return 0;
    }

----------------------------------------------------------------------------------------------------
Simple Java solution with sort
    public class Solution {
        public int hIndex(int[] citations) {
            if (citations == null || citations.length == 0) return 0;
            Arrays.sort(citations);
            int len = citations.length;
            for (int i = 0; i < citations.length; i++) {
                if (len <= citations[i])
                    return len;
                else
                    len--;
            }
            return len;
        }
    }

----------------------------------------------------------------------------------------------------
O(n) Java solution using O(n) space
Explanation: The idea is to use another array, index is the citation and value is the number of papers that has at least the citation. Since the h-index can only be n, the new array will only need the index to be at most n, thus the array size will only need n+1. Papers that have more than n citations will store in array[n].
Go through the array based on h index definition: array[i]>=i, find the max value of i.


    public class Solution {
    public int hIndex(int[] citations) {
        if(citations == null || citations.length == 0) return 0;
        
        int n = citations.length;
        int[] num = new int[n+1];
        
        for(int i=0; i<n; i++) {
            if(citations[i]>n) num[n]++;
            else num[citations[i]]++;
        }
        
        if(num[n]>=n) return n;
        for(int i=n-1; i>=0; i--) {
            num[i] += num[i+1];
            if(num[i]>=i) return i;
        }
        return 0;
    }
    }

----------------------------------------------------------------------------------------------------
O(n) time C++ solution using hash table
class Solution {
public:

    int hIndex(vector<int>& citations) {
        if(citations.empty())
            return 0;
        int n = citations.size();
        vector<int> hash(n + 1, 0);
        for(int i = 0; i < n; ++i){
            if(citations[i] >= n)
                hash[n]++;
            else
                hash[citations[i]]++;
        }
        int paper = 0;
        for(int i = n; i >= 0; --i){
            paper += hash[i];
            if(paper >= i)
                return i;
        }
    }
};

----------------------------------------------------------------------------------------------------
Better solution than Hint, no extra space
Have a better solution without extra space. 
Using in place divide (not sort) and the time in normal case is n + n/2 + n/4 + ... ~= 2n = O(n). 
In worst case is: O(n^2), but just like quicksort, in most cases, it's a better solution.
It beats 100% submits at least in my desktop.

Here is the code:

    public int hIndex(int[] citations) 
    {
        int length = citations.length;
        int start = 0;
        int end = length - 1;
        int hIndex = 0;
        
        while (start <= end)
        {
            int current = divideByPartition(citations, start, end);
            if (length - current <= citations[current])
            {
                hIndex = length - current;
                end = current - 1;
            }
            else
                start = current + 1;
        }
        
        return hIndex;
    }

     // divide the array by the last item and return the new index of this partition item.
    private int divideByPartition(int[] a, int start, int end)
    {
        if (start == end) return end;
        
        int p = a[end];
        int head = start;
        for (int current = start; current < end; current++)
        {
            if (a[current] < p)
            {
                int temp = a[head];
                a[head] = a[current];
                a[current] = temp;
                head++;
            }
        }
        a[end] = a[head];
        a[head] = p;
        return head;
    }

----------------------------------------------------------------------------------------------------
Python O(n lgn) time with sort, O(n) time with O(n) space
Sort

    def hIndex(self, citations):
        citations.sort()
        n = len(citations)
        for i in xrange(n):
            if citations[i] >= (n-i):
                return n-i
        return 0


O(n) space, O(n) time

    def hIndex(self, citations):
        n = len(citations)
        citeCount = [0] * (n+1)
        for c in citations:
            if c >= n:
                citeCount[n] += 1
            else:
                citeCount[c] += 1
        
        i = n-1
        while i >= 0:
            citeCount[i] += citeCount[i+1]
            if citeCount[i+1] >= i+1:
                return i+1
            i -= 1
        return 0
        
        
        

----------------------------------------------------------------------------------------------------
O(NlogN) 12ms solution
    class Solution {
    public:
        int hIndex(vector<int>& citations) {
            if(citations.empty())
                return 0;
            sort(citations.begin(), citations.end());
            int n=citations.size();
            int i=0;
            while(i<n && citations[i]<(n-i)) i++;
            return n-i;
        }
    };

----------------------------------------------------------------------------------------------------
1 line Python solution
It's straightforward:

        return sum(i < j for i, j in enumerate(sorted(citations, reverse=True)))

----------------------------------------------------------------------------------------------------
O(N) time , O(1)space solution
in order to reach O(N) time ,we need to sort array in O(N) time.
In this problem, we can do that using counting sort.<br>However, counting sort requires extra O(N) space to do the trick, and as a result ,we will get the "count" for every element. <br>But in this problem, we only need the "count" information for element smaller than n <br>because h-index will be in range [0, n] <br>
So we can get rid of elements bigger than n, then consider the array as a linkedlist  and do the counting sort right on itself <br>
Here is my implementation.

    public int hIndex(int[] citations) {
        int c=0, num=0;
        
        for(int i=0;i<citations.length;i++){
            c = citations[i];
            if(c<0)continue;
            //-1 means that the count of number is 0
            //-2 means that the count of number is 1, and so forth
            citations[i] = -1;
            if(c<citations.length){
                //loop like a linkedlist
                while((num=citations[c])>-1){
                    citations[c] = -2;  
                    if(num>citations.length-1){
                        break;
                    }
                    c = num;
                }
                if(num<citations.length){
                    citations[c]--;
                }
            }
        }
        c = 0;
        for(int i=0;i<citations.length;i++){
            num = -citations[i]-1;  //occurrences of i
            if(num>0){
                if(i>=citations.length-(c+num-1)){
                    return i>=citations.length-c ? citations.length-c : i;
                }
                c += num;
            }
        }
        return citations.length-c;
    }

----------------------------------------------------------------------------------------------------
If we really come across this question in interview, sort is allowed or not?
According to the hint, I tried my version with the build-in `sort()` and get a one time AC. But if in a real interview scenario, do we allow to use build-in sort to solve this problem?

What would the actual point the interviewee might look for?

----------------------------------------------------------------------------------------------------
Two Method with Explaination
