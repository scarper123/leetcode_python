A square number is 1+3+5+7+..., JAVA code
    public boolean isPerfectSquare(int num) {
        int i = 1;
        while (num > 0) {
            num -= i;
            i += 2;
        }
        return num == 0;
    }

----------------------------------------------------------------------------------------------------
3-4 short lines, Integer Newton, Most Languages
Just slightly modified my [sqrt solutions](https://leetcode.com/discuss/58631/3-4-short-lines-integer-newton-every-language). You can find some explanation there.

(Note I renamed the parameter to x because that's the name in the sqrt problem and I like it better.)

**Java, C++, C, C#**

        long r = x;
        while (r*r > x)
            r = (r + x/r) / 2;
        return r*r == x;

**Python**

        r = x
        while r*r > x:
            r = (r + x/r) / 2
        return r*r == x

**Ruby**

        r  = x
        r = (r + x/r) / 2 while r*r > x
        r*r == x

**JavaScript**

        r = x;
        while (r*r > x)
            r = ((r + x/r) / 2) | 0;
        return r*r == x;


----------------------------------------------------------------------------------------------------
Java Three Solutions 1,3,5,.. Sequence&#x2F;Binary Search&#x2F;Newton
1. a square number is 1+3+5+7+... Time Complexity O(sqrt(N)) (Credit to lizhibupt, thanks for correcting this).
2. binary search. Time Complexity O(logN)
3. Newton Method. See [this wiki page][1]. Time Complexity is close to constant, given a positive integer.

<pre><code>

    public boolean isPerfectSquare(int num) {
      if (num < 1) return false;
      for (int i = 1; num > 0; i += 2)
        num -= i;
      return num == 0;
    }
    
    public boolean isPerfectSquare(int num) {
      if (num < 1) return false;
      long left = 1, right = num;// long type to avoid 2147483647 case
    
      while (left <= right) {
        long mid = left + (right - left) / 2;
        long t = mid * mid;
        if (t > num) {
          right = mid - 1;
        } else if (t < num) {
          left = mid + 1;
        } else {
          return true;
        }
      }
    
      return false;
    }
    
    boolean isPerfectSquare(int num) {
      if (num < 1) return false;
      long t = num / 2;
      while (t * t > num) {
        t = (t + num / t) / 2;
      }
      return t * t == num;
    }



  [1]: https://en.wikipedia.org/wiki/Newton%27s_method


----------------------------------------------------------------------------------------------------
O(1) time c++ solution inspired by Q_rsqrt
    class Solution {
    public:
        bool isPerfectSquare(int num) {
            if (num < 0) return false;
            int root = floorSqrt(num);
            return root * root == num;
        }
    
        int32_t floorSqrt(int32_t x) {
            double y=x; int64_t i=0x5fe6eb50c7b537a9;
            y = *(double*)&(i = i-(*(int64_t*)&y)/2);
            y = y * (3 - x * y * y) * 0.5;
            y = y * (3 - x * y * y) * 0.5;
            i = x * y + 1; return i - (i * i > x);
        }
    };

----------------------------------------------------------------------------------------------------
O(logN) Bisection method
    bool isPerfectSquare(int num) {
        long long l = 0, r = num;
        while (l <= r) {
            long long mid = (l + r) >> 1;
            long long sqmid = mid * mid;
            if (sqmid > num) r = mid - 1;
            else if (sqmid < num) l = mid + 1;
            else return true;
        }
        return false;
    }

----------------------------------------------------------------------------------------------------
Java Binary Search Solution ( the obvious one)
    public class Solution {
        public boolean isPerfectSquare(int num) {
    
         if(num == 1)
            return true;
    
            long low = 1,
                high = num / 2,
                mid = 0;
    
            long nums = (long)num;
    
            while(low <= high)
            {
                mid = low + (high - low) / 2;
    
                if((mid * mid) == nums)
                    return true;
                else if( (mid * mid) < nums)
                    low = mid + 1;
                else
                    high = mid - 1;
            }
    
    
    
            return false;
        }
    }

----------------------------------------------------------------------------------------------------
O(1) Java solution
/*
    use solution from 069 - Sqrt(x), compare res * res == num
    time: O(16) = O(1), space: O(1)
*/
public boolean solution(int num) {
    int root = 0, bit = 1 << 15;
    while (bit > 0) {
        root |= bit;
        if (root > num / root) {    // if root * root > num
            root ^= bit;    // set the bit back to 0
        }
        bit >>= 1;
    }
    return root * root == num;
}

----------------------------------------------------------------------------------------------------
Python solution using Newton&#x27;s method
    class Solution(object):
        def isPerfectSquare(self, num):
            """
            :type num: int
            :rtype: bool
            """
            if num < 0: return False
            if num <= 1: return True
            n = num/2  # start guessing using n = num/2
            while n*n!= num:
                inc = (num-n*n)/(2*n)
                n += inc
                if -1 <= inc <= 1: break
            if n*n < num: n+=1
            if n*n > num: n-=1
            return n*n == num

f(x) = x^2   (find x that f(x) = num)

f'(x) = 2*x

start process with x = n (any positive number)

if f(x) != num, update x = x + (num - f(x))/f'(x) = x + (num - n^2)/(2n)

----------------------------------------------------------------------------------------------------
Binary search solution in Python
    class Solution(object):
        def isPerfectSquare(self, num):
            b, e = 1, (num >> 1) + 1
            while b <= e:
                mid = (b + e) >> 1
                sq = mid * mid
                if sq == num:
                    return True
                if sq > num:
                    e = mid - 1
                else:
                    b = mid + 1
            return False

----------------------------------------------------------------------------------------------------
0ms binary search based solution
    public boolean isPerfectSquare(int x) {
            if(x <= 0) throw new IllegalArgumentException();
            if(x == 1) return true;
            int hi = x;
            int lo = 1;
            while(lo <= hi){
                int mid = lo + (hi - lo)/2;
                if(mid * mid == x) return true;
                int div = x/mid;
                if(div >= mid){
                    lo = mid + 1;
                }
                if(div < mid){
                    hi = mid - 1;
                }
            }
            return false;
       }

----------------------------------------------------------------------------------------------------
My concise and easy to understand Java solution without using long
    public class Solution {
        public boolean isPerfectSquare(int num) {
            if (num < 0) return false;
            if (num == 0) return true;
            int start = 1, end = num, mid = 0;
            while (start <= end) {
                mid = (end - start) / 2 + start;
                if (mid * mid > num || mid * mid <= 0) end = mid - 1;
                else if (mid * mid < num ) start = mid + 1;
                else return true;
            }
            return start * start == num;
        }
    }

----------------------------------------------------------------------------------------------------
Java binary search O(lgn) solution without using &quot;long&quot; type to avoid overflow
public boolean isPerfectSquare(int num){
        
        if(num <= 0) return false;
        
        int left = 1, right = num;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            // use "/" to avoid overflow
            if(mid > num / mid){
                right = mid - 1;
            }else if(mid < num / mid){
                left = mid + 1;
            }else{
                return num % mid == 0;
            }
        }
        return false;
    }


----------------------------------------------------------------------------------------------------
C++ O(logn) code based on Newton&#x27;s method
    class Solution {
    public:
        bool isPerfectSquare(int num) {
            int x = 1;
            int temp = 0;
            
            while (temp != x) {
                temp = x;
                x = round((x + round(num / x)) / 2);
            }
    
            return x * x == num;
        }
    };

Condition in while loop is based on the idea of convergence in Newton's method.

----------------------------------------------------------------------------------------------------
0ms C++ solution
    class Solution {
    public:
        bool isPerfectSquare(int num) {
            if(num == 0) return 1;
            long long hi = 1, lo = 1;
            while(hi * hi < num) hi <<= 1;
            lo = hi >> 1;
            while(lo < hi) {
                long long mid = (hi + lo) / 2;
                if(mid * mid >= num) hi = mid;
                else lo = mid + 1;
            }
            return hi * hi == num;
        }
    };

----------------------------------------------------------------------------------------------------
JavaScript solution with explanation (dynamic programming)
/*
Explanation: 
It can be build using dynamic programming:
Sqrt    Sqr
1       1   
    3
2       4   = 3 + 1
    5
3       9   = 5 + 4
    7
4       16  = 9 + 7
    9
5       25  = 16 + 9
    11
6       36  = 25 + 11
    13
7       49  = 36 + 13
    15
8       64  = 49 + 15
    17
9       81  = 64 + 17
    19
10      100 = 81 + 19
*/
var isPerfectSquare = function(num) {
  var start = 1;
  var curr = 1;
  var tmp;
  
  if(num === 1){
    return true;
  }
  
  while(curr <= num){
    start += 2;
    tmp = start + curr;
    if (tmp <= num){
      curr = tmp;
      if(curr === num){
          return true;
      }
    } else{
      return false;
    }
  }
  
};


----------------------------------------------------------------------------------------------------
Is the Newton&#x27;s Iteration Really O(1)?
I'm not entirely convinced that the Newton solution is really all that much better than the binary search log(n) solution.

Obviously, it takes more than one pass for the Newton solution to achieve the correct result. In fact, it takes *many* passes to reduce the initial "guess" to the square root of n. If you try it with the max integer size, 2147483647, Newton's iteration takes 20 cycles to even get to the correct integer value (and then has to continue cycling through ever-decreasing decimals). A log(n) binary search, on the other hand, takes 31 iterations, max.

Knowing that, it seems a little disingenuous to call Newton's iteration solution a constant-time solution when it's arguably not really any better than a log(n) search. If you were asked this question in an interview, I feel that the binary search method would be the best way to handle this problem, especially since Newton's iteration is something you either know or you don't - you aren't expected to derive it yourself in a 30 minute interview.

Is there anyone who knows the true Big O of Newton's iteration solution?

----------------------------------------------------------------------------------------------------
C++ binary search solution
    class Solution {
    public:
        bool isPerfectSquare(int num) {
          int low = 1, high = min(num, 46341);
          while (low <= high) {
            int middle = (low + high) / 2;
            if (middle * middle == num) return true;
            if (middle * middle > num) {
              high = middle - 1;
            } else {
              low = middle + 1;
            }
          }
          return false;
        }
    };

----------------------------------------------------------------------------------------------------
Is it OK to use log?
Since log(N^2)=2log(N), the problem becomes easy:

    public boolean isPerfectSquare(int num) {
        int sqrt=(int)Math.exp(Math.log(num)/2);
        return sqrt*sqrt == num || (sqrt+1)*(sqrt+1)==num;
    }

----------------------------------------------------------------------------------------------------
With a Little Help from My Friends
def isPerfectSquare(self, num):
    class C: __getitem__ = lambda _, x: x*x >= num
    return bisect.bisect(C(), False, 0, num) ** 2 == num

----------------------------------------------------------------------------------------------------
Java binary search without using long
    public boolean isPerfectSquare(int num) {
        if (num == 0) return true;
        int start = 1;
        int end = num;
        while (start < end - 1) {
            int mid = start + (end - start) / 2;
            if (mid == num / mid && num % mid == 0) return true;
            if (mid > num / mid) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if ((num / start == start && num % start == 0) || (num % end == 0 && num / end == end))  return true;
        else return false;
    }


----------------------------------------------------------------------------------------------------
