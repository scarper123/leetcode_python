My Simple Java Solution
    public int[] plusOne(int[] digits) {
            
        int n = digits.length;
        for(int i=n-1; i>=0; i--) {
            if(digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            
            digits[i] = 0;
        }
        
        int[] newNumber = new int [n+1];
        newNumber[0] = 1;
        
        return newNumber;
    }

----------------------------------------------------------------------------------------------------
Is it a simple code(C++)?
    void plusone(vector<int> &digits)
    {
    	int n = digits.size();
    	for (int i = n - 1; i >= 0; --i)
    	{
    		if (digits[i] == 9)
    		{
    			digits[i] = 0;
    		}
    		else
    		{
    			digits[i]++;
    			return;
    		}
    	}
    		digits[0] =1;
    		digits.push_back(0);
    		
    }

----------------------------------------------------------------------------------------------------
Simple java solution

    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >=0; i--) {
            if (digits[i] != 9) {
                digits[i]++;
                break;
            } else {
                digits[i] = 0;
            }
        }
        if (digits[0] == 0) {
            int[] res = new int[digits.length+1];
            res[0] = 1;
            return res;
        }
        return digits;
    }



----------------------------------------------------------------------------------------------------
My C++ Solution with few lines
    class Solution {
    public:
        vector<int> plusOne(vector<int> &digits) {
            bool carry = true;
            
            for(int i=digits.size()-1; i >= 0 && carry; i--) {
                carry = (++digits[i]%=10) == 0;
            }
    
            if(carry) {
                digits.insert(digits.begin(), 1);
            }
        
            return digits;
        }
    };

----------------------------------------------------------------------------------------------------
To avoid confusion, please mention that the lowest digit is on the right end
The question description does not explicitly say that. 
I found that is the case. 

----------------------------------------------------------------------------------------------------
Simple Python solution with explanation (Plus One)
    def plusOne(digits):
        num = 0
        for i in range(len(digits)):
        	num += digits[i] * pow(10, (len(digits)-1-i))
        return [int(i) for i in str(num+1)]

We're given a list of digits, and the idea here is to convert that list to an integer, *num*. So each digit is multiplied by the proper place value and added to *num*. For example, if *digits* = [3, 8, 2, 5] then on the first iteration 3 is multiplied by 10 to the power of 4-1-0 = 3, so this results in 3000, which is added to *num*. Then 8 is multiplied by 10^2 and added to *num*, and so on.

The last step is to add 1 to *num*, convert it to a list and return that list.

----------------------------------------------------------------------------------------------------
I cannot fully understand the meaning of question &#x27;Plus One&#x27;
Could someone explain this to me? And please don't show up the code. Thanks

----------------------------------------------------------------------------------------------------
Java concise solution with early return.
    
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length-1; i>= 0; i--) {
            digits[i] += carry;
            if (digits[i] <= 9) // early return 
                return digits;
            digits[i] = 0;
        }
        int[] ret = new int[digits.length+1];
        ret[0] = 1;
        return ret;
    }

----------------------------------------------------------------------------------------------------
Fastest and simplest C++ solution
    class Solution {
    public:
        vector<int> plusOne(vector<int> &digits) {
            int i,j,carry=1;
            // traditional long addition..
            for(i=digits.size()-1;i>=0&&carry;i--){
                int sum=carry+digits[i];
                carry=sum/10;
                digits[i]=sum%10;
            }
            if(carry){ // if carry is 1, then digits must be all 99..999
                digits[0]=1;
                digits.push_back(0);
            }
            return digits;
        }
    };

----------------------------------------------------------------------------------------------------
Missing information
When I started writing the solution I was thinking we were talking about binary digits, please add this information to the text of the problem. The numerical base requested.

Would be cool to have a more general problem that also passes the numerical base to the function ;-)

----------------------------------------------------------------------------------------------------
JAVA recursion solution
    public class Solution {
        public int[] plusOne(int[] digits) {
            return helper(digits,digits.length-1);
        }
        
        private int[] helper(int[] digits, int index){
            if(digits[index] < 9){
                digits[index]++;
                return digits;
            }else{
                if(index != 0){
                    digits[index] = 0;
                    return helper(digits,index-1);
                }else{
                    int[] res = new int[digits.length+1];
                    res[0] = 1;
                    return res;
                }
            }
        }
    }

----------------------------------------------------------------------------------------------------
Share my 4ms C++ solution.
