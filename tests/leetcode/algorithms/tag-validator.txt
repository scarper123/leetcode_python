1 line Ruby &#x2F; Python
>>> setup = 's = "Let\'s take LeetCode contest" * 1000'
>>> for stmt in statements:
        print ' '.join('%.2f' % timeit(stmt, setup, number=1000) for _ in range(5)), 'seconds for:', stmt

0.16 0.14 0.13 0.14 0.14 seconds for: ' '.join(s.split()[::-1])[::-1]
0.69 0.71 0.69 0.70 0.70 seconds for: ' '.join(x[::-1] for x in s.split())
0.63 0.68 0.63 0.64 0.64 seconds for: ' '.join([x[::-1] for x in s.split()])


----------------------------------------------------------------------------------------------------
short java code without explanation
    public String reverseWords(String s) {
        String[] str = s.split(" ");
        for (int i = 0; i < str.length; i++) str[i] = new StringBuilder(str[i]).reverse().toString();
        StringBuilder result = new StringBuilder();
        for (String st : str) result.append(st + " ");
        return result.toString().trim();
    } 


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code
public class Solution {
    public String reverseWords(String s) {
        char[] ca = s.toCharArray();
        for (int i = 0; i < ca.length; i++) {
            if (ca[i] != ' ') {   // when i is a non-space
                int j = i;
                while (j + 1 < ca.length && ca[j + 1] != ' ') { j++; } // move j to the end of the word
                reverse(ca, i, j);
                i = j;
            }
        }
        return new String(ca);
    }

    private void reverse(char[] ca, int i, int j) {
        for (; i < j; i++, j--) {
            char tmp = ca[i];
            ca[i] = ca[j];
            ca[j] = tmp;
        }
    }
}


----------------------------------------------------------------------------------------------------
Easiest Java Solution (9ms) - Similar to Reverse Words in a String II
public String reverseWords(String s) 
{
    char[] s1 = s.toCharArray();
    int i = 0;
    for(int j = 0; j < s1.length; j++)
    {
        if(s1[j] == ' ')
        {
            reverse(s1, i, j - 1);
            i = j + 1;
        }
    }
    reverse(s1, i, s1.length - 1);
    return new String(s1);
}

public void reverse(char[] s, int l, int r)
{
	while(l < r)
	{
		char temp = s[l];
		s[l] = s[r];
		s[r] = temp;
		l++; r--;
	}
}

----------------------------------------------------------------------------------------------------
C++ Solution
class Solution {
public:
    string reverseWords(string s) {
        size_t front = 0;
        for(int i = 0; i <= s.length(); ++i){
            if(i == s.length() || s[i] == ' '){
                reverse(&s[front], &s[i]);
                front = i + 1;
            }
        }
        
        return s;
    }
};


----------------------------------------------------------------------------------------------------
C solution
void reverse(int b, int e, char *s){
    while(b < e) {
        s[b] = s[b] ^ s[e];
        s[e] = s[b] ^ s[e];
        s[b] = s[b] ^ s[e];
        b++;
        e--;
    }
}

char* reverseWords(char* s) {
    int i, s_len = strlen(s), index = 0;
    
    for(i = 0; i <= s_len; i++) {
        if((s[i] == ' ') || (s[i] == '\0')){
            reverse(index, i - 1, s);
            index = i + 1;
        }
    }
    return s;
}


----------------------------------------------------------------------------------------------------
1 line Python
class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        return " ".join(map(lambda x: x[::-1], s.split()))


----------------------------------------------------------------------------------------------------
Java Solution
public String reverseWords(String s) {
    String[] strs = s.split(" ");
    StringBuffer sb = new StringBuffer();
    for(String str: strs){
        StringBuffer temp = new StringBuffer(str);
        sb.append(temp.reverse());
        sb.append(" ");
    }
    sb.setLength(sb.length()-1);
    return sb.toString();
}

----------------------------------------------------------------------------------------------------
Java Solution, StringBuilder
public class Solution {
    public String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        
        int i = 0, j = 0;
        while (i < s.length()) {
            if (s.charAt(i) == ' ') {
                sb.append(" ");
                i++;
            }
            else {
                j = i + 1;
                while (j < s.length() && s.charAt(j) != ' ') j++;
                sb.append((new StringBuilder(s.substring(i, j))).reverse());
                i = j;
            }
        }
        
        return sb.toString();
    }
}


----------------------------------------------------------------------------------------------------
C++ Solution With istringstream
string reverseWords(string s) {
	istringstream iss{s};
	auto iter = s.begin();
	for (string word; iss >> word;) {
		iter = copy(word.rbegin(), word.rend(), iter);
		if (iter != s.end())
			++iter;
	}
	return s;
}


----------------------------------------------------------------------------------------------------
C++ O(N) Time In-place Solution
// OJ: https://leetcode.com/problems/reverse-words-in-a-string-iii
// Auther: github.com/lzl124631x
// Time: O(N)
// Space: O(1)
class Solution {
public:
  string reverseWords(string s) {
    int begin = 0;
    while (begin < s.size() && isspace(s[begin])) ++begin;
    while (begin < s.size()) {
      int end = begin;
      while (end < s.size() && !isspace(s[end])) ++end;
      reverse(s.begin() + begin, s.begin() + end);
      begin = end;
      while (begin < s.size() && isspace(s[begin])) ++begin;
    }
    return s;
  }
};


----------------------------------------------------------------------------------------------------
Java Simple Solution
    public String reverseWords(String s) {
        char[] c = s.toCharArray();
        int i = 0, j = 0;
        for(char cc: s.toCharArray()) {
            if(cc == ' ') {
                int end = j-1; 
            while(i<end) {
                char temp = c[i];
                c[i] = c[end];
                c[end] = temp;
                end--;
                i++;
            }
            i = j+1;
            } else if (j == s.length()-1) {
                int end = j; 
            while(i<end) {
                char temp = c[i];
                c[i] = c[end];
                c[end] = temp;
                end--;
                i++;
            }
            i = j+1;
            }
            j++;
        }
        return new String(c);
    }


----------------------------------------------------------------------------------------------------
Easy Javascript solution
var reverseWords = function(s) {
    var str = s.split(" ");
    for(let i = 0;i < str.length;i++){
        str[i] = str[i].split("").reverse().join("");
    }
    return str.join(" ");
};


----------------------------------------------------------------------------------------------------
C Solution
void reverse(char *s, int l, int r)
{
	char tmp;
	while(l < r)
	{
		tmp = s[l];
		s[l] = s[r];
		s[r] = tmp;
		l ++;
		r --;
	}
}

char* reverseWords(char* s) {
	int l, r, len=strlen(s);
	l=r=0;
	while(1){
		if(r >= len-1)	return s;
		while(s[l] == ' ') l++;
		r = l;
		while(s[r] != ' ' && r < len) r++;
		reverse(s, l, r-1);
		l=r;
	}
}


----------------------------------------------------------------------------------------------------
C# Simple straight fwd solution - not the most efficient
public class Solution {
    public string ReverseWords(string s) {
        if(s == null || s.Length <= 0)
            return string.Empty;
        var words = s.Split(' ');
        StringBuilder sb = new StringBuilder();
        foreach(string str in words)
        {
            char[] c = str.ToCharArray();
            sb.Append(string.Join("", c.Reverse()));
            sb.Append(" ");
        }
        return sb.ToString().Trim();
    }
}


----------------------------------------------------------------------------------------------------
Golang concise solution
func reverseWords(s string) string {
	start := 0
	for {
		if i := strings.Index(s[start:], " "); i == -1 {
			break
		} else {
			s = reverse(s, start, start+i-1)
			start = start + i + 1
		}
	}

	if start < len(s) {
		s = reverse(s, start, len(s)-1)
	}
	return s
}

func reverse(s string, start, end int) string {
	sb := []byte(s)
	for start < end {
		sb[start], sb[end] = sb[end], sb[start]
		start, end = start+1, end-1
	}
	return string(sb)



----------------------------------------------------------------------------------------------------
Java StringBuilder+String.join()
public class Solution {
    public String reverseWords(String s) {
        //check if input is valid
        if (s == null || s.length() == 0)
            return "";
            
        String[] str = s.split(" ");

        for (int i = 0; i < str.length; i++) {
            StringBuilder temp = new StringBuilder(str[i]);
            str[i] = temp.reverse().toString();
        }
        
        return String.join(" ", str);
    }
}


----------------------------------------------------------------------------------------------------
Very simple Java Solution with self explanatory and Clean code
 public String reverseWords(String s) {
        char[] input = s.toCharArray();

        int start = 0;
        int end = 0;

        int i=0;

        while(i < input.length){

            while(i < input.length && Character.isWhitespace(input[i])){
                i++;
            }
            start = i;

            while(i < input.length && !Character.isWhitespace(input[i])){
                i++;
            }
            end = i-1;
            reverse(input,start,end);
        }

        return new String(input);
    }

    public void reverse(char[] input, int start, int end){
        while(start <= end){
            char temp = input[start];
            input[start] = input[end];
            input[end] = temp;
            start++;
            end--;
        }
    }



----------------------------------------------------------------------------------------------------
Java 8: 1 Line Solution
public class Solution {
    public String reverseWords(String s) {
        return new ArrayList<>(Arrays.asList(s.split(" "))).stream()
            .map(str -> new StringBuilder(str).reverse().toString())
            .collect(Collectors.joining(" "));
    }
}


----------------------------------------------------------------------------------------------------
C# Solution
    public string ReverseWords(string s) {
            char spliter = ' ';
            char[] array = s.ToCharArray();
            int index = 0,
                startIndex = 0,
                endIndex = 0;

            while (index <= array.Length - 1)
            {
                if (array[index] == spliter || index == array.Length - 1)
                {
                    if (array[index] == spliter)
                        endIndex = index - 1;
                    else
                        endIndex = index;

                    while (startIndex < endIndex)
                    {
                        array[startIndex] = (char)((int)array[startIndex] + (int)array[endIndex]);
                        array[endIndex] = (char)((int)array[startIndex] - (int)array[endIndex]);
                        array[startIndex] = (char)((int)array[startIndex] - (int)array[endIndex]);

                        startIndex++;
                        endIndex--;
                    }

                    startIndex = index + 1;
                }

                index++;
            }

            return new string(array);
    }

----------------------------------------------------------------------------------------------------
