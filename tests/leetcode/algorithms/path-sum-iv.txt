&#91;Java&#x2F;C++&#93; Simple greedy like solution with explanation
bool checkPossibility(vector<int>& nums) {
        int cnt = 0;                                                                    //the number of changes
        for(int i = 1; i < nums.size() && cnt<=1 ; i++){
            if(nums[i-1] > nums[i]){
                cnt++;
                if(i-2<0 || nums[i-2] <= nums[i])nums[i-1] = nums[i];                    //modify nums[i-1] of a priority
                else nums[i] = nums[i-1];                                                //have to modify nums[i]
            }
        }
        return cnt<=1;
    } 


----------------------------------------------------------------------------------------------------
Python Extremely Easy to Understand
class Solution(object):
    def checkPossibility(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        one, two = nums[:], nums[:]
        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                one[i] = nums[i + 1]
                two[i + 1] = nums[i]
                break
        return one == sorted(one) or two == sorted(two)


----------------------------------------------------------------------------------------------------
Java solution, 7 liner.
class Solution {
    public boolean checkPossibility(int[] nums) {
        int n = nums.length, count = 0;
        
        for (int i = 0; i + 1 < n; i++) {
            if (nums[i] > nums[i + 1]) {
                count++;
                if (i > 0 && nums[i + 1] < nums[i - 1]) nums[i + 1] = nums[i];
                else nums[i] = nums[i + 1];
            }
        }
            
        return count <= 1;
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code - 6 liner Without Modifying Input
class Solution {
public:
    bool checkPossibility(vector<int>& a) {
        bool modified = false;
        for (int i = 1, prev = a[0]; i < a.size(); i++) {
            if (a[i] < prev && modified++) return false;
            if (a[i] < prev && i - 2 >= 0 && a[i - 2] > a[i]) continue;
            prev = a[i];
        }
        return true;
    }
};


----------------------------------------------------------------------------------------------------
Very easy to understand C++
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        for (int i=0; i < nums.size()-1; i++){
            if (nums[i] > nums[i+1]){
                
                int temp = nums[i];
                //
                // "erase" nums[i], then check if nums is sorted without nums[i]
                //
                nums[i] = nums[i+1];
                if (is_sorted(nums.begin(), nums.end())) { return true; }
                
                //
                // "erase" nums[i+1], then check if nums is sorted without nums[i+1]
                //
                nums[i+1] = nums[i] = temp;
                if (is_sorted(nums.begin(), nums.end())) { return true; }
                
                //
                // nums is NOT sorted (without nums[i] XOR without nums[i+1])
                //
                return false;
            }
        }
        return true;
    }
};


----------------------------------------------------------------------------------------------------
Simple Python solution
def checkPossibility(self, nums):
    count_dec = 0
    for i in range(len(nums) - 1):
        if nums[i] > nums[i + 1]:
            count_dec += 1
            if i == 0:
                nums[i] = nums[i + 1]
            elif nums[i - 1] <= nums[i + 1]:
                nums[i] = nums[i - 1]
            else:
                nums[i + 1] = nums[i]
        if count_dec > 1:
            return False
    return True


----------------------------------------------------------------------------------------------------
Java solution with explanation
class Solution {
    public boolean checkPossibility(int[] nums) {
        if (nums == null || nums.length <= 1) return true;
        boolean found = false;
        for (int i = 1; i< nums.length; i++){
            if(nums[i]<nums[i-1]){
                if(found) return false;
                else {
                    if(i-2>=0 && nums[i]<nums[i-2]) nums[i] = nums[i-1];
                    found = true;
                }
            }
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
share my java solution!
class Solution {
    public boolean checkPossibility(int[] nums) {
        if(nums == null || nums.length<=2){
            return true;
        }   
        int index = 0;
        int count = 0;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]>nums[i+1]){
                count++;
                index = i;
            }
            if(count>1){
                return false;
            }
        }
        
        if(index==0 || index+1 == nums.length-1){
            return true;
        }
        return nums[index+1]>=nums[index-1] || nums[index+2]>=nums[index];
    }
}


----------------------------------------------------------------------------------------------------
Java Solution
public boolean checkPossibility(int[] nums) {

    boolean cantGoMore = false;
    if(nums.length > 1 && nums[0] > nums[1]) {
        cantGoMore = true;
        nums[0] = 1;
    }
    for (int i = 1; i < nums.length; i++) {
        if (nums[i - 1] > nums[i]) {
            if (cantGoMore) return false;
            if(i == nums.length-1) return true;
            if (nums[i + 1] - nums[i - 1] <= 1 && nums[i] - nums[i-2] <=1) return false;
            cantGoMore = true;
        }
    }
    return true;
}

----------------------------------------------------------------------------------------------------
Simple Java Solution
class Solution {
    public boolean checkPossibility(int[] nums) {
        boolean modifiedOne=false;
        
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]>nums[i+1]){
                if(modifiedOne) return false;
                if((i==0||nums[i-1]<=nums[i+1])||((i+1)==nums.length-1||nums[i]<=nums[i+2])){
                    modifiedOne=true;
                }
                else{
                    return false;
                }
            }
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
Python Easy Understand Solution
def checkPossibility(self, nums):
        i = -1
        for j in range(len(nums) - 1):
            if nums[j] > nums[j + 1]:
                if i >= 0:
                    return False
                else:
                    i = j
        if i in [-1, 0, len(nums) - 2]:
            return True
        if nums[i - 1] <= nums[i + 1] or nums[i] <= nums[i + 2]:
            return True
        return False

----------------------------------------------------------------------------------------------------
Trivial C solution.
bool checkPossibility(int* nums, int numsSize) {
    int i = 0 ;
    bool result = true;
    bool result1 = true;
    if (numsSize<=2)
        return true;
    
    int *nums1 = malloc(sizeof(int)*numsSize);
    
    if (!nums1)
        return false;
    
    memcpy (nums1, nums, sizeof(int)*numsSize);
    for (i=0; i < numsSize-1; i++)
    {
        if (nums[i] > nums[i+1])
        {
            nums[i+1] = nums[i];
            nums1[i] = nums1[i+1];
            break;
        }
    }

    for (i=0; i < numsSize-1; i++)
    {
        if (nums[i] > nums[i+1])
            result = false;
        if (nums1[i] > nums1[i+1])
            result1 = false;
    }
    if (nums1)
        free(nums1);
    
    return (result || result1);
}


----------------------------------------------------------------------------------------------------
C++ O(n) - count invalid sequence
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int cnt =0;
        for(int i =0; (i+1)<nums.size();i++)
        {
            if(nums[i]>nums[i+1]) 
            {
                cnt++;
                if(cnt>=2) return false;
                if(i==0 || nums[i-1]<=nums[i+1]) nums[i]=nums[i+1]; // Special case for the first element(no element exists before pos i)
                else nums[i+1]=nums[i];
            }
        }
        return true;
    }
};


----------------------------------------------------------------------------------------------------
O(n) time C++ solution with explanation, no need to modify the array
if (nums.size() <= 2) {return true;}
        int count = 0;
        for (int i = 1; i < nums.size(); ++i){
            if (nums[i] < nums[i-1]){
                ++count;
                if (count == 2) return false;
                if (i != 1 and i != nums.size()-1){
                    if (nums[i-1] > nums[i+1] and nums[i] < nums[i-2]){
                        return false;
                    }
                }
            }
        }
        return true;


----------------------------------------------------------------------------------------------------
