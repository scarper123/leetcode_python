Java DP Solution
    public int minSteps(int n) {
        int[] dp = new int[n+1];

        for (int i = 2; i <= n; i++) {
            dp[i] = i;
            for (int j = i-1; j > 1; j--) {
                if (i % j == 0) {
                    dp[i] = dp[j] + (i/j);
                    break;
                }
                
            }
        }
        return dp[n];
    }


----------------------------------------------------------------------------------------------------
Loop best case log(n), no DP, no extra space, no recursion, with explanation
    public int minSteps(int n) {
        int s = 0;
        for (int d = 2; d <= n; d++) {
            while (n % d == 0) {
                s += d;
                n /= d;
            }
        }
        return s;
    }


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code with Explanation - 4 lines, No DP
class Solution {
    public int minSteps(int n) {
        if (n == 1) return 0;
        for (int i = 2; i < n; i++)
            if (n % i == 0) return i + minSteps(n / i);
        return n;
    }
}


----------------------------------------------------------------------------------------------------
Very Simple Java Solution With Detail Explanation
public int minSteps(int n) {
    int res = 0;
    for(int i=2;i<=n;i++){
        while(n%i == 0){
            res+= i;
            n=n/i;
        }
    }
    return res;
}

----------------------------------------------------------------------------------------------------
Java solution, Memorized BFS
public class Solution {
    class Stat {
        int currLen;
        int clipLen;
        public Stat (int a, int b) {
            currLen = a; clipLen = b;
        }
    }
    
    public int minSteps(int n) {
        if (n == 1) return 0;
        
        int step = 1;
        Queue<Stat> queue = new LinkedList<>();
        queue.add(new Stat(1, 1));
        Set<String> set = new HashSet<>();
        set.add("1,1");
        
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Stat s = queue.poll();
                // Copy All
                if (!set.contains(s.currLen + "," + s.currLen)) {
                    queue.add(new Stat(s.currLen, s.currLen));
                    set.add(s.currLen + "," + s.currLen);
                }
                // Paste
                if (s.currLen + s.clipLen == n) return step;
                if (!set.contains((s.currLen + s.clipLen) + "," + s.clipLen) && s.currLen + s.clipLen < n) {
                    queue.add(new Stat(s.currLen + s.clipLen, s.clipLen));
                    set.add((s.currLen + s.clipLen) + "," + s.clipLen);
                }
            }
        }
        
        return -1;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def minSteps(self, n):
    def factors(n):
        d = 2
        while d * d <= n:
            while n % d == 0:
                n /= d
                yield d
            d += 1
        if n > 1:
            yield n

    return sum(factors(n))


----------------------------------------------------------------------------------------------------
O(n) in swift
func minSteps(_ n: Int) -> Int {
    
    var s = 0; // Steps
    var lc = 0; // Number of Last copied 'A' s
    var p = 1; // No of 'A' currently present on screen
    
    while(p<n)
    {
        
        if ( n % p == 0 )
        {
            lc = p;
            s = s + 1;
        }
        s = s + 1;
        p = p + lc;
    }
    return s;
    
}


----------------------------------------------------------------------------------------------------
C++, O(sqrt(n)), DP and greedy prime number solution
class Solution {
public:
    int minSteps(int n) {
        int ans = 0;
        for (int i = 2; i <= sqrt(n); i++) {
            while (n%i == 0) {
                ans += i;
                n /= i;
            }
        }
        if (n > 1) ans += n;
        return ans;
    }
};


----------------------------------------------------------------------------------------------------
Java recursive solution with explanation
public class Solution {
    public int minSteps(int n) {
        //consider the 1st step done as there is only one possible - ie copy
        return n == 1 ? 0 : 1 + minSteps(1, 1, n);
    }
    
    private int minSteps(int m, int clip, int n) {
        if(m == n) {
            return 0;
        }
        
        if(m > n) {
	    // -1 signals that the key sequence followed so far is invalid
            return -1;
        }
        
        if(m == clip) {
	    //avoid a sequence with consecutive copies
            int pasteCost = minSteps(m + clip, clip, n);
            return pasteCost == -1 ? -1 : 1 + pasteCost;
        }
        
        int copyCost = minSteps(m, m, n);
        int pasteCost = minSteps(m + clip, clip, n);
        if(copyCost == -1 && pasteCost == -1) {
            return -1;
        }
        else if(copyCost == -1) {
            return 1 + pasteCost;
        }
        else if(pasteCost == -1) {
            return 1 + copyCost;
        }
        else {
            return 1 + Math.min(copyCost, pasteCost);    
        }
    }
}


----------------------------------------------------------------------------------------------------
Java math solution
public int minSteps(int n) {
        if(n == 1) return 0;
        if(n <= 5) return n;
        int count = 0;
        int a = 2;
        while(a * a <= n) {
            while(n % a == 0) {
                count += a;
                n /= a;
            }
            a++;
        }
        if(n > 1) count+= n;
        return count;
    }


----------------------------------------------------------------------------------------------------
C++ 3 ms 5 lines (prime numbers)
int minSteps(int n) {
    static const int primes[11] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31 };
    if (n <= 5) return n == 1 ? 0 : n;
    for (auto i : primes)
        if (n % i == 0) return i + minSteps(n / i);
    return n; // prime number.
}


----------------------------------------------------------------------------------------------------
&#91;Java-8ms&#93; Math-Adding Prime factors
int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
public int minSteps(int n) {
   if (n == 1) return 0;
   for (int i : primes)
       if (n % i == 0) 
           return i + minSteps(n / i);
   return n;
}

----------------------------------------------------------------------------------------------------
Precompute the whole thing?
<p>There are only 1000 different possible inputs for the function. What if you precalculated the answer for each n and put them in a hard-coded array?</p>
<p>I tried that after the contest ended and got Accepted.</p>


----------------------------------------------------------------------------------------------------
python code beats 100%
def minSteps(self, n):
        if n==1:
            return 0
        f = 1
        for i in range(int(n**0.5),0,-1):
            if n%i ==0:
                f =i
                break
        if f == 1:
            return n
        return int(self.minSteps(f) + self.minSteps(n/f))


----------------------------------------------------------------------------------------------------
C++ one pass 0ms solution. O(n) time, O(1) space.
class Solution {
public:
    int minSteps(int n) {
        int remain = n - 1, step = 0, ret = 0, done = 1;
        while(remain) {
            if(step == 0) {
                step += 1;
                ret += 2;
                done = 2;
                remain -= step;
            } else {
                if(remain % done == 0) {
                    ret += 2;
                    step = done;
                    remain -= step;
                    done += step;
                } else {
                    ret += 1;
                    remain -= step;
                    done += step;
                }
            }
        }
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
Simple Python DP Solution with Explanation
class Solution(object):
    def minSteps(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 1:
            return 0

        M = [i for i in range(n + 1)]

        for i in range(2, n + 1):
            for j in range(2, i):
                if i % j == 0:
                    M[i] = min(M[i], M[j] + i // j)

        return M[-1]


----------------------------------------------------------------------------------------------------
Depth First Search &#91;Swift&#93;
class Solution {
    func minSteps(_ n: Int) -> Int {
        if n == 1 {
            return 0
        }
        
        var result = Int.max
        
        helper(n, 2, 1, 2, &result)
        
        return result
    }
    
    fileprivate func helper(_ n: Int, _ candidate: Int, _ copy: Int, _ steps: Int, _ result: inout Int) {
        if candidate > n {
            return
        }
        if candidate == n {
            result = min(result, steps)
            return
        }
        
        helper(n, candidate + copy, copy, steps + 1, &result)
        helper(n, candidate * 2, candidate, steps + 2, &result)
    }
}


----------------------------------------------------------------------------------------------------
Java short recursion
public int minSteps(int n) {
    return helper(n);
}
private int helper(int n) {
    if (n==1) return 0;
    if (n==2) return 2;
    for (int i = 2; i<=(int)Math.sqrt(n); i++) {
        if (n%i==0){
            return i + helper(n/i);
        }
    }
    return n;
}

----------------------------------------------------------------------------------------------------
Java simple Solution
//go on populating dp array starting from index 2, if any of the index is product of previous two indices, then jus add the number of steps
//n=1 -> 1 step
//n=2 -> 2 steps
//n=3 -> 3 steps
//n=4 -> 2steps*2steps = 4steps
//n=5 -> 5 steps
//n=6 -> 3steps * 2steps = 6steps
public int minSteps(int n) {
       if(n<=1)return 0;
        int[] dp = new int[n+1];
        for(int i=2; i<n+1; i++){ 
            int j=i;
            for(int k=2; k<j/2; k++){
                if(j%k==0){
                    int m=j/k;
                    dp[i]=dp[m]+dp[k];
                    break;
                }
            }
            if(dp[j]==0){
                dp[j] = j;
            }
        }
        return dp[n];
    }


----------------------------------------------------------------------------------------------------
Java Math Solution
public class Solution {
    public int minSteps(int n) {
        if(n == 1) return 0;
        int factor = (int)Math.sqrt(n);
        while(factor > 1) {
            if(n % factor == 0) return minSteps(factor) + minSteps(n/factor);
            factor--;
        }
        return n;
    }
}

----------------------------------------------------------------------------------------------------
