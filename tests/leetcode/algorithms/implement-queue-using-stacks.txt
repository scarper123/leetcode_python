My accepted JAVA solution
    public class Solution {
        public List<List<Integer>> zigzagLevelOrder(TreeNode root) 
        {
            List<List<Integer>> sol = new ArrayList<>();
            travel(root, sol, 0);
            return sol;
        }
        
        private void travel(TreeNode curr, List<List<Integer>> sol, int level)
        {
            if(curr == null) return;
            
            if(sol.size() <= level)
            {
                List<Integer> newLevel = new LinkedList<>();
                sol.add(newLevel);
            }
            
            List<Integer> collection  = sol.get(level);
            if(level % 2 == 0) collection.add(curr.val);
            else collection.add(0, curr.val);
            
            travel(curr.left, sol, level + 1);
            travel(curr.right, sol, level + 1);
        }
    }

1.  O(n) solution by using LinkedList along with ArrayList.  So insertion in the inner list and outer list are both O(1),
2.  Using DFS and creating new lists when needed.

should be quite straightforward.  any better answer?

----------------------------------------------------------------------------------------------------
&#91;c++&#93; 5ms version: one queue and without reverse operation by using size of each level
  
Assuming after traversing the 1st level, nodes in queue are {9, 20, 8}, And we are going to traverse 2nd level, which is even line and should print value from right to left [8, 20, 9]. 

We know there are 3 nodes in current queue, so the vector for this level in final result should be of size 3. 
Then,     queue [i] -> goes to ->  vector[queue.size() - 1 - i]
i.e. the ith node in current queue should be placed in (queue.size() - 1 - i) position in vector for that line.
 
For example, for node(9), it's index in queue is 0, so its index in vector should be (3-1-0) = 2. 


    vector<vector<int> > zigzagLevelOrder(TreeNode* root) {
        if (root == NULL) {
            return vector<vector<int> > ();
        }
        vector<vector<int> > result;
    
        queue<TreeNode*> nodesQueue;
        nodesQueue.push(root);
        bool leftToRight = true;
    
        while ( !nodesQueue.empty()) {
            int size = nodesQueue.size();
            vector<int> row(size);
            for (int i = 0; i < size; i++) {
                TreeNode* node = nodesQueue.front();
                nodesQueue.pop();

                // find position to fill node's value
                int index = (leftToRight) ? i : (size - 1 - i);

                row[index] = node->val;
                if (node->left) {
                    nodesQueue.push(node->left);
                }
                if (node->right) {
                    nodesQueue.push(node->right);
                }
            }
            // after this level
            leftToRight = !leftToRight;
            result.push_back(row);
        }
        return result;
    }
    
       


----------------------------------------------------------------------------------------------------
A concise and easy understanding Java solution
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean order = true;
        int size = 1;

        while(!q.isEmpty()) {
            List<Integer> tmp = new ArrayList<>();
            for(int i = 0; i < size; ++i) {
                TreeNode n = q.poll();
                if(order) {
                    tmp.add(n.val);
                } else {
                    tmp.add(0, n.val);
                }
                if(n.left != null) q.add(n.left);
                if(n.right != null) q.add(n.right);
            }
            res.add(tmp);
            size = q.size();
            order = order ? false : true;
        }
        return res;
    }
}

----------------------------------------------------------------------------------------------------
Clear iterative solution with deque, no reverse
 for zig, pop_back, push_front, left then right, 

 for zag, pop_front, push_back, right then left

    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        std::deque<TreeNode*> deq;
        deq.push_back(root);
        int iszig=1;
        while(!deq.empty()) {
            int sz=deq.size();
            iszig=iszig^1;
            vector<int> row;
            while(sz--) {
                if(iszig) { // pop_front, push_back, right then left
                    root=deq.front();deq.pop_front();
                    row.push_back(root->val);
                    if(root->right) deq.push_back(root->right);
                    if(root->left) deq.push_back(root->left);
                }
                else { // pop_back, push_front, left then right
                    root=deq.back();deq.pop_back();
                    row.push_back(root->val);
                    if(root->left) deq.push_front(root->left);
                    if(root->right) deq.push_front(root->right);
                }
            }
            res.push_back(row);
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
JAVA Double Stack Solution
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
       TreeNode c=root;
       List<List<Integer>> ans =new ArrayList<List<Integer>>();
       if(c==null) return ans;
       Stack<TreeNode> s1=new Stack<TreeNode>();
       Stack<TreeNode> s2=new Stack<TreeNode>();
       s1.push(root);
       while(!s1.isEmpty()||!s2.isEmpty())
       {
           List<Integer> tmp=new ArrayList<Integer>();
            while(!s1.isEmpty())
            {
                c=s1.pop();
                tmp.add(c.val);
                if(c.left!=null) s2.push(c.left);
                if(c.right!=null) s2.push(c.right);
            }
            ans.add(tmp);
            tmp=new ArrayList<Integer>();
            while(!s2.isEmpty())
            {
                c=s2.pop();
                tmp.add(c.val);
                if(c.right!=null)s1.push(c.right);
                if(c.left!=null)s1.push(c.left);
            }
            if(!tmp.isEmpty()) ans.add(tmp);
       }
       return ans;
    }

----------------------------------------------------------------------------------------------------
Python simple BFS
Simple straightforward solution using flag to decide whether from left to right or from right to left

    class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root: return []
        res, temp, stack, flag=[], [], [root], 1
        while stack:
            for i in xrange(len(stack)):
                node=stack.pop(0)
                temp+=[node.val]
                if node.left: stack+=[node.left]
                if node.right: stack+=[node.right]
            res+=[temp[::flag]]
            temp=[]
            flag*=-1
        return res

----------------------------------------------------------------------------------------------------
My AC Java code
I use two stacks, one for processing current layer and one for storing nodes for the next layer. I also use a flag (order in your code) to indicate the direction. It is straightforward

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> output = new ArrayList<List<Integer>>();
        if (root == null) return output;
        Stack<TreeNode> cur_layer = new Stack<TreeNode>(); cur_layer.push(root);
        Stack<TreeNode> next_layer = new Stack<TreeNode>();
        List<Integer> layer_output = new ArrayList<Integer>();
        int d = 0; // 0: left to right; 1: right to left.
        
        while (!cur_layer.isEmpty()){
        	TreeNode node = cur_layer.pop();
        	layer_output.add(node.val);
        	if(d==0){
        		if (node.left != null) next_layer.push(node.left);
        		if (node.right != null) next_layer.push(node.right);
        	}else{
        		if (node.right != null) next_layer.push(node.right);
        		if (node.left != null) next_layer.push(node.left);
        	}
        	
        	if (cur_layer.isEmpty()){
        		output.add(layer_output);
        		layer_output = new ArrayList<Integer>();
        		cur_layer = next_layer;
        		next_layer = new Stack<TreeNode>();;
        		d ^= 1;
        	}
        }
        return output;
    }

----------------------------------------------------------------------------------------------------
My Java Solution Beats 98%
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        travel(res, 0, root);
        return res;
    }
    private void travel(List<List<Integer>> res, int level, TreeNode cur) {
        if (cur == null) return;
        if (res.size() <= level) {
            res.add(new ArrayList<Integer>());
        }
        if (level % 2 == 0) {
            res.get(level).add(cur.val);
        }   else {
            res.get(level).add(0, cur.val);
        }
        travel(res, level + 1, cur.left);
        travel(res, level + 1, cur.right);
    }

----------------------------------------------------------------------------------------------------
Accepted C++ recursive solution with no queues
Simple algorithm: 

 1. do depth first recursive tree search
 2. populate all vectors for each tree level from left to right
 3. reverse even levels to conform with zigzar requirement

.

    class Solution {
    vector<vector<int> > result;
    public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        
        if(root!=NULL)
        {
            traverse(root, 0);
        }
        
        for(int i=1;i<result.size();i+=2)
        {
            vector<int>* v = &result[i];
            std:reverse(v->begin(), v->end());
        }
        return result;
    }
    
    void traverse(TreeNode* node, int level)
    {
        if(node == NULL) return;
        
        vector<int>* row = getRow(level);
        row->push_back(node->val);
        
        traverse(node->left, level+1);
        traverse(node->right, level+1);
    }
    
    vector<int>* getRow(int level)
    {
        if(result.size()<=level)
        {
            vector<int> newRow;
            result.push_back(newRow);
        }
        return &result[level];
    }
    };

----------------------------------------------------------------------------------------------------
Simple and clear python solution with explain
I use a additional function addLevel to record the level number of nodes, then according to the level number, I can easily deal with the level order, see the code for details

    # Definition for a  binary tree node
    # class TreeNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.left = None
    #         self.right = None
    
    class Solution:
        # @param root, a tree node
        # @return a list of lists of integers
        def zigzagLevelOrder(self, root):
            ans = []
            self.addLevel(ans, 0, root)#level from 0
            return ans
            
            
        def addLevel(self, ans, level, root):
            if not root:
                return
            elif len(ans) <= level:
                    ans.append([root.val])
            elif not level%2:#if it is an even level, then then level ans should be inversed, so I use extend founction
                ans[level].extend([root.val])
            else:
                ans[level].insert(0,root.val)# if it is an odd level, then level ans should be ordinal, so I use insert function
            self.addLevel(ans, level + 1, root.left)
            self.addLevel(ans, level + 1, root.right)

----------------------------------------------------------------------------------------------------
&#91;recommend for beginners&#93;clean C++ implementation with detailed explanation
    class Solution {
    public:
        vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
            vector<vector<int>> result;
            if(!root) return result;
            deque<TreeNode*> tree;
            tree.push_back(root);
            int flag=0;
            while(!tree.empty()){
                int count=tree.size();
                vector<int> level;
                while(count-- > 0){
                    TreeNode* cur=tree.front();
                    tree.pop_front();
                    level.push_back(cur->val);
                    if(cur->left) tree.push_back(cur->left);
                    if(cur->right) tree.push_back(cur->right);
                }
                if(flag & 1) reverse(level.begin(), level.end());
                result.push_back(level);
                flag++;
            }
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
Java, easy understand recursive methods, beats 96% (attach easy BFS methods)
    //recursive method
      public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
            List<LinkedList<Integer>> res = new ArrayList<>();
            
            helper(res,root,0);
            
            List<List<Integer>> finalRes = new ArrayList<>();
            finalRes.addAll(res);
            return finalRes;
        }
        
        public void helper(List<LinkedList<Integer>> res, TreeNode root, int level){
            if(root == null)
                return;
            if(res.size() <= level)
                res.add(new LinkedList<>());
            
            if((level + 1) % 2 != 0)
                res.get(level).add(root.val);
            else
                res.get(level).addFirst(root.val);
            
            helper(res,root.left,level + 1);
            helper(res,root.right,level + 1);     
        }
    
    
       //BFS method
      public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null)
            return res;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int level = 1;
        while(!q.isEmpty()){
            LinkedList<Integer> path = new LinkedList<>();
            int levelNums = q.size();
            
            for(int i = 0; i < levelNums; i++){
                root = q.poll();
                if(level % 2 != 0){
                    path.add(root.val);
                }else{
                    path.addFirst(root.val);
                }
                
                if(root.left != null)
                    q.offer(root.left);
                if(root.right != null)
                    q.offer(root.right);
            }
            res.add(path);
            level++;
        }
        
        return res;
    }



----------------------------------------------------------------------------------------------------
Is this any different from Level Order Traversal with a check for level number ?
It seems like the solution can be obtained by just manipulating the answer from the level order question.

----------------------------------------------------------------------------------------------------
Java iterative and recursive solutions.
        
    // bfs 
    public List<List<Integer>> zigzagLevelOrder1(TreeNode root) {
        List<List<Integer>> ret = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int l = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (node != null) {
                    level.add(node.val);
                    queue.add(node.left);
                    queue.add(node.right);
                }
            }
            if (!level.isEmpty()) {
                if (l % 2 == 1) {
                    Collections.reverse(level);
                }
                ret.add(level);
            }
            l++;
        }
        return ret;
     }
     
     // dfs recursively
     public List<List<Integer>> zigzagLevelOrder2(TreeNode root) {
         List<List<Integer>> ret = new ArrayList<>();
         dfs(root, 0, ret);
         return ret;
     }
     
     private void dfs(TreeNode node, int l, List<List<Integer>> ret) {
         if (node != null) {
             if (l == ret.size()) {
                 List<Integer> level = new ArrayList<>();
                 ret.add(level);
             }
             if (l % 2 == 1) {
                ret.get(l).add(0, node.val);  // insert at the beginning
             } else {
                ret.get(l).add(node.val);
             }
             dfs(node.left, l+1, ret);
             dfs(node.right, l+1, ret);
         }
     }
     
     // dfs iteratively
     // import javafx.util.Pair;
     public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
         List<List<Integer>> ret = new ArrayList<>();
         Deque<Pair<TreeNode, Integer>> stack = new LinkedList<>();
         stack.push(new Pair(root, 0));
         while (!stack.isEmpty()) {
             Pair<TreeNode, Integer> p = stack.pop();
             TreeNode node = p.getKey();
             int l = p.getValue();
             if (node != null) {
                if (l == ret.size()) {
                    ret.add(new ArrayList<>());
                }
                if (l % 2 == 1) {
                    ret.get(l).add(0, node.val);
                } else {
                    ret.get(l).add(node.val);
                }
                stack.push(new Pair(node.right, l+1));
                stack.push(new Pair(node.left, l+1));
             }
         }
         return ret;
     }

----------------------------------------------------------------------------------------------------
8-liner Python
class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return []
        res, level, direction = [], [root], 1
        while level:
            res.append([n.val for n in level][::direction])
            direction *= -1
            level = [kid for node in level for kid in (node.left, node.right) if kid]
        return res


----------------------------------------------------------------------------------------------------
Short and clear python code
    class Solution:
    # @param root, a tree node
    # @return a list of lists of integers
    def zigzagLevelOrder(self, root):
        queue = collections.deque([root])
        res = []
        while queue:
            r = []
            for _ in range(len(queue)):
                q = queue.popleft()
                if q:
                    r.append(q.val)
                    queue.append(q.left)
                    queue.append(q.right)
            r = r[::-1] if len(res) % 2 else r
            if r:
                res.append(r)
        return res


----------------------------------------------------------------------------------------------------
Consice recursive C++ solution
The idea is to solve the problem normally if it was about traversing every level separately then reverse odd rows.

    class Solution {
    public:
        void build(TreeNode* n, vector<vector<int>>& R, int d) {
            if (!n) return;
            if (d == R.size()) R.push_back(vector<int>());
            R[d].push_back(n->val);
            build(n->left, R, d + 1);
            build(n->right, R, d + 1);
        }
        
        vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
            vector<vector<int>> R;
            build(root, R, 0);
            for (int i = 1; i < R.size(); i += 2) reverse(R[i].begin(), R[i].end());
            return R;
        }
    };

----------------------------------------------------------------------------------------------------
My 4ms solution based on level order traversal
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
    		vector<vector<int>> ret;
    		if (root == NULL)	return ret;
    		queue<TreeNode*> queue;
    		queue.push(root);
    		int i = 0;
    
    		while (!queue.empty()){
    			vector<int> subret;
    			int ssize = queue.size();
    			while (ssize--){
    				root = queue.front();
    				queue.pop();
    				subret.push_back(root->val);
    				if (root->left != NULL)	queue.push(root->left);
    				if (root->right != NULL)queue.push(root->right);
    			}
    			if (i++ % 2 == 1)
    				reverse(subret.begin(), subret.end());
    			ret.push_back(subret);
    		}
    
    		return ret;
    	}

----------------------------------------------------------------------------------------------------
My accepted python code with one queue. Why do we need two stacks if one queue will do?
Hello. Similar to someone's question here, I use one queue and do BFS. I maintain the level of the node along with it so I simply do in place reversal of the list of the traversed nodes. This just means calling 

    if this_level > 0 and this_level%2==0: result[-1] = result[-1][::-1]

in Python. I haven't read the two stack solution yet because I want to solve the problem myself. But I need to be convinced why such an approach is preferable over straightforward(probably this approach comes to mind for most people as well?) BFS solution.


    class Elem:
        def __init__(self, node, level):
            self.node  = node
            self.level = level
    
    class Solution:
        # @param root, a tree node
        # @return a list of lists of integers
        def zigzagLevelOrder(self, root):
            result = []
            if not root: return []
            
            q = collections.deque()
            q.appendleft(Elem(root, 0))
            
            prev_level = -1
            while q:
                elem = q.pop()
                this_node, this_level = elem.node, elem.level
                
                # record result
                if this_level != prev_level:
                    # reverse prev list if this_level is even
                    if this_level > 0 and this_level%2==0:
                        result[-1] = result[-1][::-1]
                    
                    result.append([this_node.val])
                    prev_level = this_level
                else:
                    result[-1].append(this_node.val)
                    
                # push the children to the queue
                if this_node.left != None:
                    q.appendleft(Elem(this_node.left, this_level+1))
                if this_node.right != None:
                    q.appendleft(Elem(this_node.right, this_level+1))
                    
            if this_level>0 and this_level%2==1:
                result[-1] = result[-1][::-1]
                
            return result        

----------------------------------------------------------------------------------------------------
Accepted C++ Non-recursion Solution with One Queue and One Loop
    class Solution {
    public:
        vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
            vector<vector<int>> ret;
            if(root == NULL) return ret;
            vector<int> level;
            bool tag = true;    //define the order of output(left to right or right to left)
            
            queue<TreeNode*> TreeQ;
            TreeQ.push(root);
            TreeQ.push(NULL);   //distinguish one level from another level
            
            while(!TreeQ.empty())
            {
                TreeNode* node = TreeQ.front();
                TreeQ.pop();
                if(node != NULL)
                {
                    level.push_back(node->val);
                    if(node->left) TreeQ.push(node->left);
                    if(node->right) TreeQ.push(node->right);
                }
                else
                {
                    if(tag)
                    {
                        ret.push_back(level);
                    }
                    else
                    {
                        reverse(level.begin(), level.end());
                        ret.push_back(level);
                    }
                    tag = !tag;
                    if(!TreeQ.empty())   // avoid endless loop to last level of tree
                    {
                        level.clear();
                        TreeQ.push(NULL);
                    }
                }
            }
            
            return ret;
        }
    };
I used two tricks:

 1. Insert "NULL" to distinguish one level from another level
  
 2. used one tag to define the order of output , meaning from left to right or right to left.



----------------------------------------------------------------------------------------------------
