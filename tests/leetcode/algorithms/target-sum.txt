It is a math question
  sum - minNum * n = m


----------------------------------------------------------------------------------------------------
Java O(n) solution. Short.
public class Solution {
    public int minMoves(int[] nums) {
        if (nums.length == 0) return 0;
        int min = nums[0];
        for (int n : nums) min = Math.min(min, n);
        int res = 0;
        for (int n : nums) res += n - min;
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Simple one-liners
int minMoves(vector<int>& nums) {
    return accumulate(begin(nums), end(nums), 0L) - nums.size() * *min_element(begin(nums), end(nums));
}


----------------------------------------------------------------------------------------------------
What if we are not smart enough to come up with decrease 1. Here is how we do it.
public int minMoves(int[] nums) {
        if(nums==null||nums.length<=1) return 0;
        long min=(long)nums[0];
        long sum=0;
        for(int i=0;i<nums.length;i++){
            sum+=(long)nums[i];
            min=Math.min(min,nums[i]);
        }
        return (int)(sum-min*nums.length);
    }


----------------------------------------------------------------------------------------------------
Four Python solutions with detailed explanation
class Solution(object):
    def minMoves(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        c = 0
        for i in range(len(nums)-1, -1, -1):
            if nums[i] == nums[0]:
                break
            c += nums[i] - nums[0]
        return c


----------------------------------------------------------------------------------------------------
C++ solution with explanation
class Solution {
public:
    int minMoves(vector<int>& nums) {
       int n = nums.size();
       if(n <= 1)
          return 0;
       int mn = nums[0];
       long sum = nums[0];
       for(int i = 1; i < n; ++i)
       {
           mn = min(mn,nums[i]);
           sum += nums[i];
       }
       return sum -long(mn)*long(n); 
    }
};


----------------------------------------------------------------------------------------------------
Thinking process of solving problems use Java, 37ms
    public int minMoves(int[] nums) {
        Arrays.sort(nums);

        int n = nums.length;
        int step = 0;
        int finalNum = nums[0];

        for (int i = 1; i < n; i++) {
            int tmp = finalNum;
            finalNum = nums[i] + step;
            if (finalNum == tmp) continue;   //attention!!
            step = finalNum - tmp + step;
        }

        return step;
    }


----------------------------------------------------------------------------------------------------
Simple O(n) Java solution with explanation
    public int minMoves(int[] nums) {
        int min = Integer.MAX_VALUE;
        for (int x : nums) {
            if (x < min) {
                min = x;
            }
        }
        int count = 0;
        for (int x : nums) {
            count += x - min;
        }
        return count;
    }

----------------------------------------------------------------------------------------------------
java  one loop 5 line solution beats 99%
public int minMoves(int[] nums) {
    int total = 0, min = nums[0];
    for (int n  : nums) {
        total += n;
        if (n < min) min = n;
    }
    return total - nums.length * min;
}

----------------------------------------------------------------------------------------------------
O(n) Java Solution, simple and clear
public int minMoves(int[] nums) {
    if (nums == null || nums.length == 0) return 0;
    int minN = nums[0], res = 0;
    for (int num : nums) minN = Math.min(minN, num);
    for (int num : nums) res += (num-minN);
    return res;
}

----------------------------------------------------------------------------------------------------
This is not an easy problem. Brute force approaches are TLE.
<p>This problem is at least a medium.</p>


----------------------------------------------------------------------------------------------------
Java O(n) Accepted Solution With Explanation
    public int minMoves(int[] nums) {
        if (nums.length <= 1) return 0;
        int min = Integer.MAX_VALUE;
        int sum = 0;
        
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            min = Math.min(min, nums[i]);
        }

        return sum-nums.length*min;
    }

----------------------------------------------------------------------------------------------------
Simple Java Solution
Arrays.sort(nums);
int maxIndex = nums.length-1;
int moves = 0;
while(maxIndex>0) {
	int max = nums[maxIndex];
	int diff = max-nums[0];
	if(diff==0) break;
	moves+=diff;
	maxIndex--;
}
return moves;


----------------------------------------------------------------------------------------------------
C simply solution, 33ms
int minMoves(int* nums, int numsSize) {
    
    int minNum=nums[0];
    int minTotalMoves=0;
    
    for(int i=1;i<numsSize;++i)
    {
        minNum=minNum>nums[i]?nums[i]:minNum;
    }
    for(int i=0;i<numsSize;++i)
    {
        minTotalMoves+=nums[i]-minNum;
    }
    
    return minTotalMoves;
}


----------------------------------------------------------------------------------------------------
JAVA very easy way.
 public class Solution {
    public int minMoves(int[] nums) {
        int sum  = 0;
        int min = Integer.MAX_VALUE;
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            sum += nums[i];
            min = Math.min(min, nums[i]);
        }
        
        return sum - min * len;
    }
}


----------------------------------------------------------------------------------------------------
simple O(n) python solution
    def minMoves(self, nums):
        min_val = min(nums)
        return sum([v-min_val for v in nums])


----------------------------------------------------------------------------------------------------
Simple JavaScript Code
var minMoves = function(nums) {
    var min = nums[0];
    var sum = min;
    var len = nums.length;
    for(let i = 1; i < len; i++){
        sum += nums[i];
        min = nums[i] < min? nums[i]: min;
    }
    return sum - len * min;
};


----------------------------------------------------------------------------------------------------
C++, O(n), One pass
class Solution {
public:
    int minMoves(vector<int>& nums) {
        int sum = 0, i, len = nums.size();
        if (len <= 1) return 0;
        int mymin = nums[0];
        
        for(i=1;i<len;i++) {
            if (mymin > nums[i]){
                sum += i*(mymin - nums[i]);
                mymin = nums[i];
            } else {
                sum += nums[i] - mymin;
            }
        }
        
        return sum;
    }
};


----------------------------------------------------------------------------------------------------
MY SOLUTION
public class Solution {
    public int minMoves(int[] nums) {
        int min = Integer.MAX_VALUE;
        int total = 0;

        for (int n : nums) {
            if ( n < min) min = n;
        }

        for (int n : nums) {
            total += n - min;
        }

        return total;
    }
}

----------------------------------------------------------------------------------------------------
my-solution
class Solution(object):
    def minMoves(self, nums):
        m, r = nums[0], 0
        for x in nums[1:]:
            if m > x:
                m = x
        for x in nums:
            r += (x - m)
        return r


----------------------------------------------------------------------------------------------------
