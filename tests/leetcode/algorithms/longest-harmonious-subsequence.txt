Java Solution, post-order traversal
public class Solution {
    int result = 0;
    
    public int findTilt(TreeNode root) {
        postOrder(root);
        return result;
    }
    
    private int postOrder(TreeNode root) {
        if (root == null) return 0;
        
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        
        result += Math.abs(left - right);
        
        return left + right + root.val;
    }
}


----------------------------------------------------------------------------------------------------
Python, Simple with Explanation
def findTilt(self, root):
    self.ans = 0
    def _sum(node):
        if not node: return 0
        left, right = _sum(node.left), _sum(node.right)
        self.ans += abs(left - right)
        return node.val + left + right
    _sum(root)
    return self.ans


----------------------------------------------------------------------------------------------------
Simple Java Solution  -- without Global Variable
public int findTilt(TreeNode root) {
    int[] ret = new int[1];
    helper(root, ret);
    return ret[0];
}
    
private int helper(TreeNode node, int[] ret){
    if(node == null){
        return 0;
    }
    int l_sum = helper(node.left, ret);
    int r_sum = helper(node.right, ret);
    ret[0] += Math.abs(l_sum - r_sum);
    return l_sum + r_sum + node.val
}


----------------------------------------------------------------------------------------------------
Python straightforward solution
def findTilt(self, root):
        def tilt(root):
            # return (sum, tilt) of tree
            if not root: return (0, 0)
            left = tilt(root.left)
            right = tilt(root.right)
            return (left[0] + right[0] + root.val, abs(left[0] - right[0]) + left[1] + right[1])
        return tilt(root)[1]

----------------------------------------------------------------------------------------------------
Java O(n) Postorder Traversal
public class Solution {
    
    int tilt = 0;
    
    public int findTilt(TreeNode root) {
        postorder(root);
        return tilt;
    }
    
    public int postorder(TreeNode root) {
        if (root == null) return 0;
        int leftSum = postorder(root.left);
        int rightSum = postorder(root.right);
        tilt += Math.abs(leftSum - rightSum);
        return leftSum + rightSum + root.val;
    }
    
}


----------------------------------------------------------------------------------------------------
C++ postorder traverse solution
class Solution {
public:
    int findTilt(TreeNode* root) {
        if(root == NULL) return 0;
        
        int res = 0;
        
        postorder(root, res);
        
        return res;
    }
private:
    int postorder(TreeNode* root, int& res){
        if(root == NULL) return 0;
        
        int leftsum= postorder(root->left,res);
        
        int rightsum = postorder(root->right,res);
        
        res += abs(leftsum - rightsum);
        
        return leftsum + rightsum + root->val;
        
    }
};


----------------------------------------------------------------------------------------------------
C++ easy and clean soluion
    int res=0;
    int findTilt(TreeNode* root) {
        DFS(root);
        return res;
    }
    
    int DFS(TreeNode* n) {
        if(n==NULL) return 0;
        int l=DFS(n->left);
        int r=DFS(n->right);
        res+=abs(l-r);
        return l+r+n->val;
    }

----------------------------------------------------------------------------------------------------
Java Solution, no globle varible, Easy and clean
    public int findTilt(TreeNode root) {
        if (root == null) return 0;
        int curVal = 0;
        curVal = Math.abs(sumSubTree(root.left) - sumSubTree(root.right));
        return curVal + findTilt(root.left) + findTilt(root.right);
    }

    private int sumSubTree(TreeNode root) {
        if (root == null) return 0;
        return root.val + sumSubTree(root.left) + sumSubTree(root.right);
    }

----------------------------------------------------------------------------------------------------
Simple C Solution with recursion
int treesum(struct TreeNode* node){
    if(node == NULL) return 0;
    else return node->val+treesum(node->left)+treesum(node->right);
}
int findTilt(struct TreeNode* root) {   
    if(root == NULL) return 0;
    else return abs(treesum(root->left)-treesum(root->right))+findTilt(root->left)+findTilt(root->right);
}


----------------------------------------------------------------------------------------------------
C solution
int tree_tilt = 0;
int node_sum(struct TreeNode *root)
{
	int node_tilt,left_sum = 0, right_sum = 0;
	if (root != NULL)
	{
		left_sum = node_sum(root->left);
		right_sum = node_sum(root->right);
		node_tilt = abs(left_sum - right_sum);
		tree_tilt+=node_tilt;
		return(root->val + left_sum + right_sum);
	}
	else
		return(0);
}
int findTilt(struct TreeNode* root)
{
    tree_tilt=0;
	node_sum(root);
	return(tree_tilt);
}

----------------------------------------------------------------------------------------------------
Java Postorder Traversal(easy to understand)
public class Solution {

  public int findTilt(TreeNode root) {
    if (root == null) return 0;
    return Math.abs(sum(root.left, 0) - sum(root.right, 0)) + findTilt(root.left) + findTilt(root.right);
  }

  private int sum(TreeNode root, int sum) {
  	if (root == null) return sum;
  	return sum(root.left, sum) + sum(root.right, sum) + root.val;
  }
}


----------------------------------------------------------------------------------------------------
JavaScript Solution, Concise ES6 using IIFE
function findTilt(root) {
    let tilt = 0;
    (function postTraversal(root) {
        if (!root) return 0;
        const left = postTraversal(root.left);
        const right = postTraversal(root.right);
        
        tilt += Math.abs(left - right);
        
        return left + right + root.val;
    })(root);
    return tilt;
}


----------------------------------------------------------------------------------------------------
Binary tilt tree: Explain the given test case.
<p>Link to problem: <a href="https://leetcode.com/problems/binary-tree-tilt/#/description" rel="nofollow">https://leetcode.com/problems/binary-tree-tilt/#/description</a></p>
<p>Test case to explain: &#91;1,2,3,4,null,5&#93;<br/>
Expected O/P for test case: 11<br/>
My O/P: 10</p>
<p>Kindly explain the approach arithmetically and program logic is not required.</p>


----------------------------------------------------------------------------------------------------
JavaScript Recursive Solution
var findTilt = function(root) {
  let tilt = 0;
  function postOrder(root) {
    if (root === null) {
      return 0;
    }
    let left = postOrder(root.left);
    let right = postOrder(root.right);
    tilt += Math.abs(left - right);
    return root.val + left + right;
  }
  postOrder(root);
  return tilt;
};

----------------------------------------------------------------------------------------------------
Python postorder traversal without recursion
def findTilt(self, root):
    """
    :type root: TreeNode
    :rtype: int
    """
    p = root
    s = list()
    res = 0
    summap = dict() # (<access times>, <sum>)
    while p is not None or len(s) != 0:
        while p is not None:
            s.append(p)
            summap[p] = (1, 0)
            p = p.left
        if len(s) != 0:
            cur = s[-1]
            _acnt, _sum = summap[cur]
            if _acnt == 1:
                summap[cur] = (2, _sum)
                if cur.right is not None:
                    p = cur.right
            else:
                _, ls = summap.get(cur.left, (0, 0))
                _, rs = summap.get(cur.right, (0, 0))
                res += abs(ls - rs)
                summap[cur] = (_acnt, cur.val + ls + rs)
                s.pop()
                if cur.left in summap:
                    del summap[cur.left]
                if cur.right in summap:
                    del summap[cur.right]
                

    return res

----------------------------------------------------------------------------------------------------
Simple Java code using postorder
public int findTilt(TreeNode root) {
        if(root==null) {
            return 0;
        }
        return helper(root).tilt;
    }
    private Wrapper helper(TreeNode root) {
        if(root.left==null && root.right==null) {
            return new Wrapper(root.val,0); //leaf node.
        }
        
        int leftTiltSum=0;
        int leftTilt=0;
        if(root.left!=null) {
            Wrapper left = helper(root.left);
            leftTilt = left.tilt;
            leftTiltSum = left.sum;
        }
        
        int rightTiltSum=0;
        int rightTilt=0;
        if(root.right!=null) {
            Wrapper right = helper(root.right);
            rightTilt = right.tilt;
            rightTiltSum = right.sum;
        }

        return new Wrapper(leftTiltSum+rightTiltSum+root.val,leftTilt+rightTilt+Math.abs(leftTiltSum-rightTiltSum));
    }
    
    
    private class Wrapper {
        int sum;
        int tilt;
        Wrapper(int sum, int tilt) {
            this.sum = sum;
            this.tilt = tilt;
        }
    }


----------------------------------------------------------------------------------------------------
Clean C++ recursive solution
    int findTilt(TreeNode* root) {
        if(!root) return 0;
        int leftSum=DFS(root->left);
        int rightSum=DFS(root->right);
        int tilt=abs(leftSum-rightSum);
        return tilt+findTilt(root->left)+findTilt(root->right);
    }
    
    int DFS(TreeNode* root){
        if(!root) return 0;
        return root->val+DFS(root->left)+DFS(root->right);
    }


----------------------------------------------------------------------------------------------------
5-line concise Java solution without global variable
public class Solution {
    public int findTilt(TreeNode root) {
        if(root==null) return 0;
        return Math.abs(findAllBelow(root.right)-findAllBelow(root.left))+findTilt(root.left)+findTilt(root.right);
    }
    
    public int findAllBelow(TreeNode t){
        if(t==null) return 0;
        return t.val+findAllBelow(t.left)+findAllBelow(t.right);
    }
}


----------------------------------------------------------------------------------------------------
Simple C solution 9ms (recursion ,no global variable)
int tiltcount(struct TreeNode *root ,int *sum)
{
    if(!root) { return 0;}
    int L = tiltcount(root->left,sum); // sum of left nodes
    int R= tiltcount(root->right,sum); //sum of right nodes
    *sum += abs(L-R); //absolute difference 
    return (L+R+root->val) ; 
}

int findTilt(struct TreeNode* root) {
    int sum = 0;
    tiltcount(root,&sum);
    return sum;
}


----------------------------------------------------------------------------------------------------
Divide &amp; Conquer of JAVA
public class Solution {

    public int findTilt(TreeNode root){
        if(root == null) return 0;
        
        int left = findTilt(root.left);
        int right = findTilt(root.right);
        
        return left+right+Math.abs(findSum(root.left) - findSum(root.right));
    }
    private int findSum(TreeNode root){
        if(root == null) return 0;
        
        int left = findSum(root.left);
        int right = findSum(root.right);
        
        return left+right+root.val;
    }
}

----------------------------------------------------------------------------------------------------
