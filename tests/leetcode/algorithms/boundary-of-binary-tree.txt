Right-to-Left BFS (Python + Java)
public int findLeftMostNode(TreeNode root) {
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        root = queue.poll();
        if (root.right != null)
            queue.add(root.right);
        if (root.left != null)
            queue.add(root.left);
    }
    return root.val;
}

----------------------------------------------------------------------------------------------------
Simple Java Solution, beats 100.0%!
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        return findBottomLeftValue(root, 1, new int[]{0,0});
    }
    public int findBottomLeftValue(TreeNode root, int depth, int[] res) {
        if (res[1]<depth) {res[0]=root.val;res[1]=depth;}
        if (root.left!=null) findBottomLeftValue(root.left, depth+1, res);
        if (root.right!=null) findBottomLeftValue(root.right, depth+1, res);
        return res[0];
    }
}


----------------------------------------------------------------------------------------------------
Verbose Java Solution, Binary tree level order traversal
public class Solution {
    public int findLeftMostNode(TreeNode root) {
        if (root == null) return 0;
        
        int result = 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (i == 0) result = node.val;
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }
        }
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
C++ recursive solution (beats 100%) with basic explanation
class Solution {
public:
    void findBottomLeftValue(TreeNode* root, int& maxDepth, int& leftVal, int depth) {
        if (root == NULL) {
            return;
        }
        //Go to the left and right of each node 
        findBottomLeftValue(root->left, maxDepth, leftVal, depth+1);
        findBottomLeftValue(root->right, maxDepth, leftVal, depth+1);
        
        //Update leftVal and maxDepth
        if (depth > maxDepth) {
            maxDepth = depth;
            leftVal = root->val;
        }
    }
    
    //Entry function
    int findBottomLeftValue(TreeNode* root) {
        int maxDepth = 0;
        //Initialize leftVal with root's value to cover the edge case with single node
        int leftVal = root->val;
        findBottomLeftValue(root, maxDepth, leftVal, 0);
        return leftVal;
    }
};


----------------------------------------------------------------------------------------------------
standard BFS in java
    public int findBottomLeftValue(TreeNode root) {
        /*any initial value is valid*/
        int result = -1;
        ArrayDeque<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            result = queue.peek().val;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode treeNode = queue.poll();
                if (treeNode.left != null) {
                    queue.offer(treeNode.left);
                }
                if (treeNode.right != null) {
                    queue.offer(treeNode.right);
                }
            }
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
my BFS solution for python
def findBottomLeftValue(self, root):
    """
    :type root: TreeNode
    :rtype: int
    """
    queue=[root]; ans=0
    while any(queue):
        ans=queue[0].val
        queue=[leaf for node in queue for leaf in (node.left,node.right) if leaf]
    return ans

----------------------------------------------------------------------------------------------------
C++ BFS solution
class Solution {
public:
    int findLeftMostNode(TreeNode* root) {
        queue<TreeNode*> q;
        queue<int> level;
        
        q.push(root);
        level.push(0);
        
        int m=0;
        while(q.size()){
            TreeNode *r = q.front(); q.pop();
            int l = level.front(); level.pop();
            if(r->left) {
                q.push(r->left);
                level.push(l+1);
            }
            
            if(r->right){
                q.push(r->right);
                level.push(l+1);
            }
            
            if(l > m){
                m = l;
                root = r;
            }
        }
        
        return root->val;
        
    }
};

----------------------------------------------------------------------------------------------------
Why answer for &#91;1,null,1&#93;  is 1?
1
  \
   1


----------------------------------------------------------------------------------------------------
Java solution by post-order traversal (beats 54%)
private class ResultSet {
    final int depth;
    final int val;

    ResultSet(int depth, int val) {
        this.depth = depth;
        this.val = val;
    }
}

public int findBottomLeftValue(TreeNode root) {
    return bottomLeft(root, 0).val;
}

private ResultSet bottomLeft(TreeNode root, int depth) {
    if (root == null) return null;
    if (root.left == null && root.right == null) return new ResultSet(depth, root.val);
    else if (root.left == null) return bottomLeft(root.right, depth + 1);
    else if (root.right == null) return bottomLeft(root.left, depth + 1);
    else {
        ResultSet left = bottomLeft(root.left, depth + 1);
        ResultSet right = bottomLeft(root.right, depth + 1);
        return right.depth > left.depth ? right : left;
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Clean Code - DFS Recursion with Explanation
class Solution {
public:
    int treeHeight(TreeNode* root) {
        int height = 0;
        dfs(root, 1, height);
        return height;
    }

private:
    void dfs(TreeNode* node, int depth, int& height) {
        if (!node) {
            return;
        }
        if (depth > height) {
            height = depth;
        }
        dfs(node->left, depth + 1, height);
        dfs(node->right, depth + 1, height);
    }
};


----------------------------------------------------------------------------------------------------
Standard travel by level - Java BFS
public class Solution {
    public int findLeftMostNode(TreeNode root) {
        List<TreeNode> list = new LinkedList<>();
        list.add(root);
        Integer res = null;
        while(list.size()>0){
            List<TreeNode> next = new LinkedList<>();
            int size = list.size(); 
            for(int i = 0; i<size; i++){
                TreeNode cur = list.get(i);
                if(i==0) res = cur.val; 
                if(cur.left!=null) next.add(cur.left);
                if(cur.right!=null) next.add(cur.right);
            }
            list = next;
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Java BFS
    public int findLeftMostNode(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int queueSize = 1, lastVal = 0;
        while (queueSize > 0) {
            for (int i=0;i<queueSize;i++) {
                TreeNode cur = queue.poll();
                if (i == 0) lastVal = cur.val;
                if (cur.left != null) queue.add(cur.left);
                if (cur.right != null) queue.add(cur.right);
            }
            queueSize = queue.size();
        }
        return lastVal;
    }


----------------------------------------------------------------------------------------------------
Python preorder traversal solution O(n) time, &quot;O(1)&quot; space
class Solution(object):
    def findLeftMostNode(self, root):
        self.max_level = 0
        self.val = None
        self.helper(root, 1)
        return self.val
        
    def helper(self, root, level):
        if not root: return
        if level > self.max_level:
            self.max_level = level
            self.val = root.val
        self.helper(root.left, level + 1)
        self.helper(root.right, level + 1)


----------------------------------------------------------------------------------------------------
C++ Solution using DFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int ans = 0, h = -1;
        dfs(root, ans, h, 0);
        return ans;
    }
private:
    void dfs(TreeNode* root, int &ans, int &h, int dep){
        if(dep > h){
            ans = root->val;
            h = dep;
        }
        if(root->left)
            dfs(root->left, ans, h, dep + 1);
        if(root->right)
            dfs(root->right, ans, h, dep + 1);
    }
};


----------------------------------------------------------------------------------------------------
C++ Simple Solution, Concise Code, O(1) space with Morris Trv
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        int height = 0;
        pair<int, int> res = {0, -1};
        TreeNode* cur = root, *prev = nullptr;
        while (cur) {
            if (cur->left == nullptr) {
                //
                if (height > res.second)
                    res = {cur->val, height};
                cur = cur->right;
                height++;
            } else {
                prev = cur->left;
                int move = 1;
                while (prev->right && prev->right != cur) {
                    prev = prev->right;
                    move++;
                }
                if (prev->right == nullptr) {
                    prev->right = cur;
                    //
                    if (height > res.second)
                        res = {cur->val, height};
                    cur = cur->left;
                    height++;
                } else {
                    prev->right = NULL;
                    height -= move + 1;
                    cur = cur->right;
                    height++;
                }
                    
            }
        }
        return res.first;
    }
};


----------------------------------------------------------------------------------------------------
BFS and DFS Java solution
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        // result[0]: bottem left value, result[1]: the level of bottem left value
        int[] result = new int[2];
        findBottomLeftValue(root, 1, result);
        return result[0];
    }
    private void findBottomLeftValue(TreeNode root, int level, int[] result) {
        if (root.left != null) {
            findBottomLeftValue(root.left, level + 1, result);
        }
        if (root.right != null) {
            findBottomLeftValue(root.right, level + 1, result);
        }
        if (level > result[1]) {
            result[0] = root.val;
            result[1] = level;
        }
    }
}


----------------------------------------------------------------------------------------------------
What is wrong with this?
int left_ele = 0, maxlevel=0;
void helper(struct TreeNode* root, int level) {
    if(root){
        helper(root->left, level+1);
        helper(root->right, level+1);
        if(level > maxlevel){
            maxlevel = level;
            left_ele = root->val;
        }
    }
}
int findBottomLeftValue(struct TreeNode* root) {
    left_ele = root->val;
    helper(root, 0);
    return left_ele;
}



----------------------------------------------------------------------------------------------------
C# solution - BFS
	public int FindBottomLeftValue(TreeNode root) {
        
			int result = 0;
			if (root == null) return result;
			var queue = new Queue<TreeNode>();
			queue.Enqueue(root);
			queue.Enqueue(null);

			while (queue.Count != 0)
			{
				result = queue.Peek().val;
				while (queue.Peek() != null)
				{
					var node = queue.Dequeue();
					if (node.left != null) queue.Enqueue(node.left);
					if (node.right != null) queue.Enqueue(node.right);
				}
				queue.Dequeue();
				if (queue.Count != 0) queue.Enqueue(null);
			}
			return result;
    }


----------------------------------------------------------------------------------------------------
Python DFS + Stack and BFS + Queue Solution
#DFS + stack   

    def findBottomLeftValue(self, root):
        if not root:
            return
        max_depth = 0
        stack = [(root, 1)]
         
        while stack:
            curr, level = stack.pop()
            if curr:
                if level > max_depth:
                    max_depth = level
                    ans = curr.val
                stack.append((curr.right, level + 1))
                stack.append((curr.left, level + 1))
        return ans


----------------------------------------------------------------------------------------------------
My simple recursive solution

    int deep = 0;
    int res = 0;
    public int findBottomLeftValue(TreeNode root) {
        travel(root, 1);
        return res;
    }
    
    void travel(TreeNode root, int d) {
        if (root != null) {
            if (d > deep) {
                deep = d;
                res = root.val;
            }
            travel(root.left, d+1);
            travel(root.right, d+1);
        }
    }


----------------------------------------------------------------------------------------------------
