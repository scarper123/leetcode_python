My accepted 15 lines of code for Java
Only 15 lines.
If overflow exists, the new result will not equal previous one.
No flags needed. No hard code like 0xf7777777 needed.
Sorry for my bad english.

    public int reverse(int x)
    {
        int result = 0;

        while (x != 0)
        {
            int tail = x % 10;
            int newResult = result * 10 + tail;
            if ((newResult - tail) / 10 != result)
            { return 0; }
            result = newResult;
            x = x / 10;
        }

        return result;
    }



----------------------------------------------------------------------------------------------------
Very Short (7 lines) and Elegant Solution
    public int reverse(int x) {
            long rev= 0;
            while( x != 0){
                rev= rev*10 + x % 10;
                x= x/10;
                if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)
                    return 0;
            }
            return (int) rev;
        }

----------------------------------------------------------------------------------------------------
Shortest code possible in c++
long long make res a 64 bit number, the overflow is checked.

    class Solution {
    public:
        int reverse(int x) {
            long long res = 0;
            while(x) {
                res = res*10 + x%10;
                x /= 10;
            }
            return (res<INT_MIN || res>INT_MAX) ? 0 : res;
        }
    };

----------------------------------------------------------------------------------------------------
Golfing in Python
Get the `s`ign, get the `r`eversed absolute integer, and return their product if `r` didn't "overflow".

    def reverse(self, x):
        s = cmp(x, 0)
        r = int(`s*x`[::-1])
        return s*r * (r < 2**31)

As compressed one-liner, for potential comparison:

    def reverse(self, x):
        s=cmp(x,0);r=int(`s*x`[::-1]);return(r<2**31)*s*r

Anybody got something shorter?

----------------------------------------------------------------------------------------------------
8 ms simple C++ solution which checks overflow
    class Solution {
    public:
        int reverse(int x) {
            int ans = 0;
            while (x) {
                int temp = ans * 10 + x % 10;
                if (temp / 10 != ans)
                    return 0;
                ans = temp;
                x /= 10;
            }
            return ans;
        }
    };

----------------------------------------------------------------------------------------------------
Simple Java Solution O(N) time and O(1) space.
Simply just modulo the input by 10, add it to a long-integer variable as the result.
Repeat. When the result is > max integer or < min integer, return 0. Hence, return the result as an integer

    public class Solution {
        public int reverse(int x) {
            long result =0;
            while(x != 0)
            {
                result = (result*10) + (x%10);
                if(result > Integer.MAX_VALUE) return 0;
                if(result < Integer.MIN_VALUE) return 0;
                x = x/10;
            }
            return (int)result;
            
            
        }
    }

----------------------------------------------------------------------------------------------------
How do we handle the overflow case?
Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter).



----------------------------------------------------------------------------------------------------
A simple C solution with 5ms
    int reverse(int x) {
        long long val = 0;
    	do 
    	{
    		val = val * 10 + x % 10;
    		x /= 10;
    	} while (x);
    	
    	return (val > INT_MAX || val < INT_MIN) ? 0 : val;
    }

----------------------------------------------------------------------------------------------------
Reverse Integer in JavaScript
Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, "integer" cell size should be defined as something in the task, e.g. double word.

----------------------------------------------------------------------------------------------------
Number in Python doesn&#x27;t have limit, for the overflow case.
Number in Python doesn't have limit, either the input or output number won't overflow anyway.
But OJ still requires 0 as outcome of the huge reversed number.

----------------------------------------------------------------------------------------------------
4ms C++ solution, easy to understand
    int reverse(int x) {
        long result = 0;
        while(x != 0)
        {
            result = result*10 + x % 10;
            x /= 10;
        }
        return (result > INT_MAX || result < INT_MIN)? 0 : result;
    }

----------------------------------------------------------------------------------------------------
Might be helpful to you: my 2ms 11 lines Java solution
    public int reverse(int x) {
        long result = 0;
        while (x != 0) {
            result = result * 10 + x%10;
            if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {
                return 0;
            }
            x = x / 10;
        }
        return (int)result;
    }

----------------------------------------------------------------------------------------------------
Java, 2ms, 9 lines of code, easy understand
    public int rever(int x){
    		long r = 0;
    		while(x != 0){
    			r = r*10 + x%10;
    			x /= 10;
    		}
    		if(r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE)
    			return (int)r;
    		else
    			return 0;
    	}

----------------------------------------------------------------------------------------------------
Share my clean accepted C++ Solution without long type or magic number
    class Solution {
    public:
        int reverse(int x) {
            if (x == INT_MIN)
                return 0;
            if (x < 0)
                return -reverse(-x);
            
            int rx = 0; // store reversed integer
            while (x != 0) {
                // check overflow
                if (rx > INT_MAX / 10 || 10 * rx > INT_MAX - x % 10) return 0;
                rx = rx * 10 + x % 10;
                x = x / 10;
            }
            return rx;
        }
    };

----------------------------------------------------------------------------------------------------
5 lines, 2ms Java solution
    public class Solution {
        public int reverse(int x) {
            long answer = 0;
            while(x != 0) {
                answer = 10 * answer + x % 10;
                x /= 10;
            }
            return (answer > Integer.MAX_VALUE || answer < Integer.MIN_VALUE) ? 0 : (int) answer;
        }
    }

----------------------------------------------------------------------------------------------------
The problem should tell us that when the num is out of range of int, then we need to return 0
The problem should tell us that when the num is out of range of int, then we need to return 0

----------------------------------------------------------------------------------------------------
My 2ms 4lines clean Java solution may help you
    public class Solution {
        public int reverse(int x) {
            long res = 0;
    		for (; x != 0; x /= 10)
    			res = res * 10 + x % 10;
    		return res > Integer.MAX_VALUE || res < Integer.MIN_VALUE ? 0: (int) res;
        }
    }

----------------------------------------------------------------------------------------------------
Can we give different language different &quot;overflow&quot; boundary?
In official and most of people's solution, C++ or Java is used. So check 2147483647 in the code is necessary. But 2147483647 is not the boundary in Python. So in Python code, adding 

>         if (result >= 2147483647):
            return 0

is sort of ugly and just for AC.

Can we have different boundary for Python in this case?

----------------------------------------------------------------------------------------------------
Simple Java Accepted Code with Explanation
    public int reverse(int x) {
        long result = 0;
        //long type is for compare. Only larger range can compare Max and Min Integer 

        while(x!=0)
        {
        	int mod = x%10;
        	x = x/10;
        	result = result*10 + mod;
        	if(result>Integer.MAX_VALUE||result<Integer.MIN_VALUE) return 0;
        }
        return (int) result;
    }

----------------------------------------------------------------------------------------------------
My 4ms c solution
    int reverse(int x) {
    int px=0;
    while(x!=0)
     {
        if(px>INT_MAX/10 || px<INT_MIN/10)return 0;
        px=px*10+x%10;
        x=x/10;
    }
    return px; 
}

----------------------------------------------------------------------------------------------------
