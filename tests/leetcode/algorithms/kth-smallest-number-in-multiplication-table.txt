Java solution, binary search
class Solution {
    public int findKthNumber(int m, int n, int k) {
    	int low = 1 , high = m * n + 1;
        
    	while (low < high) {
    	    int mid = low + (high - low) / 2;
    	    int c = count(mid, m, n);
    	    if (c >= k) high = mid;
            else low = mid + 1;
    	}
        
    	return high;
    }
    
    private int count(int v, int m, int n) {
	int count = 0;
	for (int i = 1; i <= m; i++) {
	    int temp = Math.min(v / i , n);
	    count += temp;
	}
	return count;
    }
}


----------------------------------------------------------------------------------------------------
This name is very miss leading
<p>The name and description are very misleading. This should be the kth smallest number.</p>


----------------------------------------------------------------------------------------------------
This problem is found on another Online Judge
<p>This exact problem is found on the Codeforces OJ on this link:<br/>
<a href="http://codeforces.com/contest/448/problem/D" rel="nofollow">http://codeforces.com/contest/448/problem/D</a><br/>
Its solution is also fully written on stack overflow on this link:<br/>
<a href="https://stackoverflow.com/questions/33464901/using-binary-search-to-find-k-th-largest-number-in-nm-multiplication-table" rel="nofollow">https://stackoverflow.com/questions/33464901/using-binary-search-to-find-k-th-largest-number-in-nm-multiplication-table</a></p>
<p>I found several people who blindly copied that code and got AC!. The reason I know this problem was on Stackoverflow was because <strong>I</strong> was the one who asked that question in 2015!!</p>


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def findKthNumber(self, m, n, k):
    def enough(x):
        return sum(min(x / i, n) for i in xrange(1, m+1)) >= k

    lo, hi = 1, m*n
    while lo < hi:
        mi = (lo + hi) / 2
        if not enough(mi):
            lo = mi + 1
        else:
            hi = mi
    return lo


----------------------------------------------------------------------------------------------------
solution like Kth Smallest Number in Sorted Matrix
private int count(int value, int m, int n) {
    int i = m, j = 1;
    int count = 0;
    while (i >= 1 && j <= n) {
        if (i * j <= value) {
            count += i;
            j++;
        } else {
            i--;
        }
    }
    return count;
}


----------------------------------------------------------------------------------------------------
My 8 Lines C++ Solution
class Solution {
public:
    int findKthNumber(int m, int n, int k) {
        int left = 1, right = m * n;
        while (left < right) {
            int mid = left + (right - left) / 2, cnt = 0;
            for (int i = 1; i <= m; ++i) {
                cnt += (mid / i <= n) ? (mid / i) : n;
            }
            if (cnt < k) left = mid + 1;
            else right = mid;
        }
        return left;
    }
};

----------------------------------------------------------------------------------------------------
oneliner
def find_kth_number(m, n, k)
  (1..m*n).bsearch { |x| (1..m).map { |i| [x / i, n].min }.sum >= k }
end


----------------------------------------------------------------------------------------------------
Python Solution, Binary Search
def findKthNumber(self, m, n, k):
        low, high = 1, m * n + 1
    	while low < high:
    	    mid = (high + low) / 2
    	    c = sum(min(mid / i , n) for i in range(1, m + 1))
    	    if c >= k: high = mid
            else: low = mid + 1
    	return high


----------------------------------------------------------------------------------------------------
Easy to Understand Java Solution
class Solution {
    public int findKthNumber(int m, int n, int k) {
        int low = 1, high = m * n;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int count = helper(m, n, mid);
            if (count >= k) high = mid - 1;
            else low = mid + 1;
        }
        return low;
    }
    private int helper(int m, int n, int num) {
        int count = 0;
        for (int i = 1; i <= m; i++) {
            count += Math.min(num / i, n);
        }
        return count;
    }
}


----------------------------------------------------------------------------------------------------
C++ fast and short O(mlog(m*n)) solution, beats 100%
    int findKthNumber(int m, int n, int k) {
        int l=1, h=m*n, mid=l+(h-l)/2;
        while(l<h) {
            int p=0, p0=0;
            for(int j=0;j<m;j++) {
                p+=min(mid/(j+1), n);
                p0+=min((mid-1)/(j+1), n);
            }
            if(k>p0&&k<=p) return mid;
            else if(p0>=k) h=mid;
            else if(p<k) l=mid+1;
            mid=l+(h-l)/2;
        }
        return mid;
    }

----------------------------------------------------------------------------------------------------
C++, binary search
int findKthNumber(int m, int n, int k)
{
    int low = 1, high = m * n;
    
    while(low < high)
    {
        int count = 0;
        int mid = (low + high) / 2;

        if(m < n)            
        {    
            for(int i = 1; i <= m; i++)
            {
                count += min(mid / i, n);
            }
        }
        else
        {
            for(int i = 1; i <= n; i++)
            {
                count += min(mid / i, m);
            }                
        }
        
        if(count < k)
        {
            low = mid + 1;
        }
        else
        {
            high = mid;
        }
    }
    
    return low;
}

----------------------------------------------------------------------------------------------------
c++ solution beats 100%
class Solution {
public:
    int findKthNumber(int m, int n, int k) {
        int l = 1, r = m*n, mid, res;
        while(l<=r)
        {
            mid = (l+r) >> 1;
            int cnt = 0;
            for(int i = 1; i <= m; i++) cnt += min(mid / i, n);
            if(cnt >= k)
            {
                res = mid;
                r = mid - 1;
            }
            else if(cnt < k)
                l = mid + 1;
        }      
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Python Binary Search
class Solution(object):
    def findKthNumber(self, m, n, k):
        def binary(num):
            cnt = 0
            for i in range(1, m + 1):
                cnt += min(n, num / i)
            return cnt
        left, right = 0, m * n + 1
        while right - left > 1:
            mid = (left + right) >> 1
            if binary(mid) < k:
                left = mid
            else:
                right = mid
        return left + 1


----------------------------------------------------------------------------------------------------
This is the same as 378
<p>Almost the same code can be used.</p>


----------------------------------------------------------------------------------------------------
Two common solutions for kth of sorted matrix with python
class Solution(object):
    def findKthNumber(self, m, n, k):
        st,en=1,m*n
        while st<en:
            mid=(st+en)>>1
            count=sum([min(mid/i,n) for i in range(1,m+1)])
            if count<k:st=mid+1
            else:en=mid
        return st


----------------------------------------------------------------------------------------------------
