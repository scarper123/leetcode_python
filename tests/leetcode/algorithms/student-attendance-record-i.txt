3 Lines
public class Solution {
    public boolean detectCapitalUse(String word) {
        int cnt = 0;
        for(char c: word.toCharArray()) if('Z' - c >= 0) cnt++;
        return ((cnt==0 || cnt==word.length()) || (cnt==1 && 'Z' - word.charAt(0)>=0));
    }
}


----------------------------------------------------------------------------------------------------
Python has useful methods...
def detectCapitalUse(self, word):
    return word.isupper() or word.islower() or word.istitle()

----------------------------------------------------------------------------------------------------
Java 1-Liner
public boolean detectCapitalUse(String word) {
    return word.matches("[A-Z]+|[a-z]+|[A-Z][a-z]+");
}


----------------------------------------------------------------------------------------------------
Simple Java Solution O(n) time O(1) space
    public boolean detectCapitalUse(String word) {
        int numUpper = 0;
        for (int i=0;i<word.length();i++)
            if (Character.isUpperCase(word.charAt(i))) numUpper++;
        if (numUpper == 1) return Character.isUpperCase(word.charAt(0));
        return numUpper == 0 || numUpper == word.length();
    }



----------------------------------------------------------------------------------------------------
Java short solution using built-in String methods
public boolean detectCapitalUse(String word) {
        if (word.length() < 2) return true;
        if (word.toUpperCase().equals(word)) return true;
        if (word.substring(1).toLowerCase().equals(word.substring(1))) return true;
        return false;
}


----------------------------------------------------------------------------------------------------
C++ Solution
class Solution {
public:
    bool detectCapitalUse(string word) {
		int size=word.size(),count=0;
		if(size<=1)
			return true;
		for (int i = 1; i < size; i++){
			if(word[i]>='a'&&word[i]<='z')
				count+=1;
			else
				count+=2;
		}
		if(count==size-1)
			return true;
		else if(count==2*(size-1))
			return word[0]>='A'&&word[0]<='Z';
		else 
			return false;
    }
};


----------------------------------------------------------------------------------------------------
Intuitive Javascript Solution
var detectCapitalUse = function(word) {
    // either all capitals, all small cases, or Capital follow by small cases
    return /^[A-Z]+$|^[a-z]+$|^[A-Z][a-z]+$/.test(word);
};


----------------------------------------------------------------------------------------------------
6ms 2 lines C++ solution
class Solution {
public:
    bool detectCapitalUse(string word) {
        int capCnt = count_if(word.begin(), word.end(), [](char c){return c <= 'Z';});
        return !capCnt || capCnt == word.size() || (capCnt == 1 && word[0] <= 'Z');
    }
};



----------------------------------------------------------------------------------------------------
C++ 1-liner
class Solution {
public:
    bool detectCapitalUse(string word) {
        return regex_match(word, regex("[A-Z]+|[a-z]+|[A-Z][a-z]*"));
    }
};


----------------------------------------------------------------------------------------------------
C# - 1 liner
    public bool DetectCapitalUse(string word) 
    {
        if (word.Length < 2) return true;
        bool firstIsCapital = word[0] - 'A' < 26;
        bool secondIsCapital = word[1] - 'A' < 26;
        if (!firstIsCapital && secondIsCapital) return false;
        for (int i = 2; i < word.Length; i++)
        {
            bool isCapital = word[i] - 'A' < 26;
            if ((secondIsCapital && !isCapital) || (!secondIsCapital && isCapital)) return false;
        }
        return true;
    }


----------------------------------------------------------------------------------------------------
Share my AC solution
public boolean detectCapitalUse(String word) {
	if (word.equals(word.toUpperCase())) return true;
	else if (word.equals(word.toLowerCase())) return true;
	if (word.charAt(0)- 'A'>=0 && word.charAt(0)- 'A'<26){
		String resString = word.substring(1);
		if (resString.equals(resString.toLowerCase()))return true;
	}
	return false;
}


----------------------------------------------------------------------------------------------------
Python solution with detailed explanation
class Solution(object):
    def detectCapitalUse(self, word):
        """
        :type word: str
        :rtype: bool
        """
        x = 0
        for ch in word:
            if 65<=ord(ch)<=96:
                x = x+1
        if len(word) == x or x == 0:
            return True
        if len(word) > 1 and x == 1 and 65<=ord(word[0])<=96:
            return True
        return False


----------------------------------------------------------------------------------------------------
C Solution
bool detectCapitalUse(char* word) {
    int count = 0, first = 0;
    
    for (int i = 0; i < strlen(word); i++) {
        if (i == 0 && isupper(word[i])) {
            first = 1;
            count++;
        }
        else if (isupper(word[i])) {
            count++;
        }
    }

    if (count == strlen(word) || count == 0) return true;
    else if (first == 1 && count == 1) return true;
    else return false;
}


----------------------------------------------------------------------------------------------------
Python sum amount of uppercase letters
def detectCapitalUse(self, word):
    # total = sum(map(lambda x: x.isupper(), word))
    total = reduce(lambda x, y: x + y.isupper(), word, 0)
    return total == 0 or len(word) == total or (total == 1 and word[0].isupper())


----------------------------------------------------------------------------------------------------
python solution which can be understanded easily
class Solution(object):
    def detectCapitalUse(self, word):
        """
        :type word: str
        :rtype: bool
        """
        if word.lower()==word or word.upper()==word:
            return True
        elif word[0].lower()!=word[0] and word[1:].lower()==word[1:]:
            return True
        else:
            return False


----------------------------------------------------------------------------------------------------
C# solution
public class Solution {
    public bool DetectCapitalUse(string word) {

        if (word==word.ToUpper()||word==word.ToLower()) return true;
         else
         {
         string str = word.Substring(1);
         if(str==str.ToLower()) return true;
         }
         return false;

  
  }
}


----------------------------------------------------------------------------------------------------
Simple C Solution
bool detectCapitalUse(char* word) {
    bool capitalValid = isupper(word[0]);
    for(int i=1; i<strlen(word); ++i){
        if(capitalValid){
            if(!isupper(word[i])) {
                if(i>1){
                      return false;      
                }else{
                    capitalValid = false;
                }
            }
        }else{
            if(isupper(word[i])) return false;
        }
    }
    
    return true;
}


----------------------------------------------------------------------------------------------------
1-line JavaScript solution, no regex
var detectCapitalUse = function(word) {
    return word === word.toUpperCase() || word === word[0] + word.substr(1).toLowerCase();
};


----------------------------------------------------------------------------------------------------
C# beats 79%
public bool DetectCapitalUse(string word) {
        
        bool allCap = true;
        for(int i = 0;i<word.Length;i++)
        {
            if(word[i].ToString() != word[i].ToString().ToUpper())
            {
                allCap= false;
            }
        }
        
        // all lower or first cap
        bool allLowerOrFirstCap = true;
        for(int i = 1;i<word.Length;i++)
        {
            if(word[i].ToString() != word[i].ToString().ToLower())
            {
                allLowerOrFirstCap= false;
            }
        }
        
        return allCap || allLowerOrFirstCap;
    }


----------------------------------------------------------------------------------------------------
scala version
  def detectCapitalUse(word: String): Boolean = {
    for (char <- word) {
      if (char < 'a' && word.indexOf(char) != 0 && word.dropWhile(_ == char).exists(x => x > 'a')) return false
    }
    true
  }

  def detectCapitalUseReg(word: String): Boolean = {
    word.matches("[A-Z]*|[A-Z]?[a-z]*")
  }


----------------------------------------------------------------------------------------------------
