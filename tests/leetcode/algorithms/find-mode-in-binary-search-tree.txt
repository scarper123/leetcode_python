Java 1 Line Solution :D
public class Solution {
    public int hammingDistance(int x, int y) {
        return Integer.bitCount(x ^ y);
    }
}


----------------------------------------------------------------------------------------------------
My C++ solution using bit manipulation
class Solution {
public:
    int hammingDistance(int x, int y) {
        int dist = 0, n = x ^ y;
        while (n) {
            ++dist;
            n &= n - 1;
        }
        return dist;
    }
};


----------------------------------------------------------------------------------------------------
Java 3-Line Solution
public int hammingDistance(int x, int y) {
    int xor = x ^ y, count = 0;
    for (int i=0;i<32;i++) count += (xor >> i) & 1;
    return count;
}


----------------------------------------------------------------------------------------------------
Python 1 line 49ms
<p>class Solution(object):<br/>
def hammingDistance(self, x, y):<br/>
&#34;&#34;&#34;<br/>
:type x: int<br/>
:type y: int<br/>
:rtype: int<br/>
&#34;&#34;&#34;<br/>
return bin(x^y).count(&#39;1&#39;)</p>


----------------------------------------------------------------------------------------------------
C simple solution, 0MS
int hammingDistance(int x, int y) {
    
    int tmpInt=x^y;
    int dis=0;
    
    while(tmpInt)
    {
        if((tmpInt>>1)<<1 != tmpInt)
        {
            ++dis;
        }
        
        tmpInt>>=1;
    }
    
    return dis;
}


----------------------------------------------------------------------------------------------------
Javascript one line solution
/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
var hammingDistance = function(x, y) {
    return (x ^ y).toString(2).replace(/0/g, '').length;
};

----------------------------------------------------------------------------------------------------
Java solution
    public int hammingDistance(int x, int y) {
        int xor = x ^ y, count = 0;
        
        while (xor != 0) {
            xor &= (xor - 1);
            count++;
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
Beats 100% Python
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        x = x ^ y
        y = 0
        while x:
            y += 1
            x = x & (x - 1)
        return y


----------------------------------------------------------------------------------------------------
C# - Simple solution
<ul>
<li>Do XOR between the numbers which then gives the difference bits as &#39;1&#39;</li>
<li>Calculate those difference no.of bits by bit-END operation on preceding numbers until it is zero<br/>
...............<br/>
public int HammingDistance(int x, int y) {<br/>
int z = x ^ y;<br/>
int n = 0;<br/>
while(z &gt; 0)<br/>
{<br/>
z = z &amp; (z-1);<br/>
++n;<br/>
}<br/>
return n;<br/>
}<br/>
...............</li>
</ul>


----------------------------------------------------------------------------------------------------
Python Explanation
ans = 0
while x or y:
  ans += (x % 2) ^ (y % 2)
  x /= 2
  y /= 2
return ans


----------------------------------------------------------------------------------------------------
C++ one liner
class Solution {
public:
    int hammingDistance(int x, int y) {
        return __builtin_popcount(x^y);
    }
};

----------------------------------------------------------------------------------------------------
Java solution without system function Integer.bitCount()
1

----------------------------------------------------------------------------------------------------
C intuitive solution 0ms
int hammingDistance(int x, int y) {
    int dist=0,count=0,temp=0,arr1[1024]={0},arr2[1024]={0};
    while(x>0){
        temp=x%2;
        arr1[count]=temp;
        x=x/2;
        count++;
    }
    count=0;
    while(y>0){
        temp=y%2;
        arr2[count]=temp;
        y=y/2;
        count++;
    }
    for(x=32;x>=0;x--){
        if(arr1[x] != arr2[x])
            dist++;
    }
    return dist;
}


----------------------------------------------------------------------------------------------------
C++ Easy To Understand
class Solution {
public:
    int hammingDistance(int x, int y) {
        int dist = 0;
        int XOR = x ^ y;
        while (XOR) {
            dist += XOR & 1;
            XOR >>= 1;
        }
        return dist;
    }
};


----------------------------------------------------------------------------------------------------
My C++ easy understand solution
 int hammingDistance(int x, int y) {
        int xorr = x ^ y;
        int dig = 0;
        while(xorr > 0){
            dig += xorr & 1;
            xorr >>= 1;
        }
        return dig;
}


----------------------------------------------------------------------------------------------------
C ++ solution use bitwise operations without loop
int hammingDistance(int x, int y) {
        int z = (x ^ y);
        int m1 = 0x55555555;
        int m2 = 0x33333333;
        int m3 = 0x0f0f0f0f;

        z = (z & m1) + ((z >> 1) & m1);
        z = (z & m2) + ((z >> 2) & m2);
        z = (z & m3) + ((z >> 4) & m3);
        z += (z >> 8);
        z += (z >> 16);

        return z & 0x3f;
    }


----------------------------------------------------------------------------------------------------
0ms c++ solution
    int z = x^y;
    int count =0 ; 
    while(z>0){
    if(z%2==1)count++;
    z=z/2;
    }

    return count;
}


----------------------------------------------------------------------------------------------------
0ms C two line solution
int hammingDistance(int x, int y) {
	if((x^y)==0) return 0;
	return (x^y)%2 + hammingDistance(x/2,y/2);
}


----------------------------------------------------------------------------------------------------
C++ solution, simple and easy to understand
class Solution {
public:
    int hammingDistance(int x, int y) {
        x=x^y;
        int res=0;
        // get the total 1 digits
        while(x>0){
            if(x&1) res++; // if its final bit is 1, res++
            x=x>>1;
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Javascript solution
/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
var hammingDistance = function(x, y) {
    let diff = x ^ y;
    let result = 0;
    
    // find number of ones in the XOR result
    while (diff > 0) {
        if (diff & 1 === 1) result += 1;
        diff >>= 1;
    }
    
    return result;
};


----------------------------------------------------------------------------------------------------
