No Fancy Algorithm, just Simple and Powerful In-Order Traversal
This question appeared difficult to me but it is really just a simple in-order traversal! I got really frustrated when other people are showing off Morris Traversal which is totally not necessary here. 

Let's start by writing the in order traversal:

    private void traverse (TreeNode root) {
       if (root == null)
          return;
       traverse(root.left);
       // Do some business
       traverse(root.right);
    }

So when we need to print the node values in order, we insert System.out.println(root.val) in the place of "Do some business".

What is the business we are doing here?
We need to find the first and second elements that are not in order right?

How do we find these two elements? For example, we have the following tree that is printed as in order traversal:

6, 3, 4, 5, 2

We compare each node with its next one and we can find out that 6 is the first element to swap because 6 > 3 and 2 is the second element to swap because 2 < 5.

Really, what we are comparing is the current node and its previous node in the "in order traversal". 

Let us define three variables, firstElement, secondElement, and prevElement. Now we just need to build the "do some business" logic as finding the two elements. See the code below:

    public class Solution {
        
        TreeNode firstElement = null;
        TreeNode secondElement = null;
        // The reason for this initialization is to avoid null pointer exception in the first comparison when prevElement has not been initialized
        TreeNode prevElement = new TreeNode(Integer.MIN_VALUE);
        
        public void recoverTree(TreeNode root) {
            
            // In order traversal to find the two elements
            traverse(root);
            
            // Swap the values of the two nodes
            int temp = firstElement.val;
            firstElement.val = secondElement.val;
            secondElement.val = temp;
        }
        
        private void traverse(TreeNode root) {
            
            if (root == null)
                return;
                
            traverse(root.left);
            
            // Start of "do some business", 
            // If first element has not been found, assign it to prevElement (refer to 6 in the example above)
            if (firstElement == null && prevElement.val >= root.val) {
                firstElement = prevElement;
            }
        
            // If first element is found, assign the second element to the root (refer to 2 in the example above)
            if (firstElement != null && prevElement.val >= root.val) {
                secondElement = root;
            }        
            prevElement = root;

            // End of "do some business"

            traverse(root.right);
    }

And we are done, it is just that easy!

----------------------------------------------------------------------------------------------------
Detail Explain about How Morris Traversal Finds two Incorrect Pointer
To understand this, you need to first understand Morris Traversal or Morris Threading Traversal.
It take use of leaf nodes' right/left pointer to achieve O(1) space Traversal on a Binary Tree.
Below is a standard Inorder Morris Traversal, referred from http://www.cnblogs.com/AnnieKim/archive/2013/06/15/morristraversal.html (a Chinese Blog, while the graphs are great for illustration)

    public void morrisTraversal(TreeNode root){
    		TreeNode temp = null;
    		while(root!=null){
    			if(root.left!=null){
    				// connect threading for root
    				temp = root.left;
    				while(temp.right!=null && temp.right != root)
    					temp = temp.right;
    				// the threading already exists
    				if(temp.right!=null){
    					temp.right = null;
    					System.out.println(root.val);
    					root = root.right;
    				}else{
    					// construct the threading
    					temp.right = root;
    					root = root.left;
    				}
    			}else{
    				System.out.println(root.val);
    				root = root.right;
    			}
    		}
    	}

In the above code, `System.out.println(root.val);`appear twice, which functions as outputing the Node in ascending order (BST). Since these places are in order, replace them with

        if(pre!=null && pre.val > root.val){
        	if(first==null){first = pre;second = root;}
        	else{second = root;}
      }
    pre = root;

each time, the pre node and root are in order as `System.out.println(root.val);` outputs them in order.

Then, come to how to specify the first wrong node and second wrong node.

When they are not consecutive, the first time we meet `pre.val > root.val` ensure us the first node is the pre node, since root should be traversal ahead of pre, pre should be at least at small as root. The second time we meet `pre.val > root.val` ensure us the second node is the root node, since we are now looking for a node to replace with out first node, which is found before.

When they are consecutive, which means the case `pre.val > cur.val` will appear only once. We need to take case this case without destroy the previous analysis. So the first node will still be pre, and the second will be just set to root. Once we meet this case again, the first node will not be affected.

Below is the updated version on Morris Traversal.


    public void recoverTree(TreeNode root) {
            TreeNode pre = null;
            TreeNode first = null, second = null;
            // Morris Traversal
            TreeNode temp = null;
    		while(root!=null){
    			if(root.left!=null){
    				// connect threading for root
    				temp = root.left;
    				while(temp.right!=null && temp.right != root)
    					temp = temp.right;
    				// the threading already exists
    				if(temp.right!=null){
    				    if(pre!=null && pre.val > root.val){
    				        if(first==null){first = pre;second = root;}
    				        else{second = root;}
    				    }
    				    pre = root;
    				    
    					temp.right = null;
    					root = root.right;
    				}else{
    					// construct the threading
    					temp.right = root;
    					root = root.left;
    				}
    			}else{
    				if(pre!=null && pre.val > root.val){
    				    if(first==null){first = pre;second = root;}
    				    else{second = root;}
    				}
    				pre = root;
    				root = root.right;
    			}
    		}
    		// swap two node values;
    		if(first!= null && second != null){
    		    int t = first.val;
    		    first.val = second.val;
    		    second.val = t;
    		}
        }



----------------------------------------------------------------------------------------------------
Tree Deserializer and Visualizer for Python
Wrote some tools for my own local testing. For example `deserialize('[1,2,3,null,null,4,null,null,5]')` will turn that into a tree and return the root [as explained in the FAQ](https://leetcode.com/faq/). I also wrote a visualizer. Two examples:

`drawtree(deserialize('[1,2,3,null,null,4,null,null,5]'))`:

![enter image description here][1]

`drawtree(deserialize('[2,1,3,0,7,9,1,2,null,1,0,null,null,8,8,null,null,null,null,7]'))`:

![enter image description here][2]

Here's the code. If you save it as a Python script and run it, it should as a demo show the above two pictures in turtle windows (one after the other). And you can of course import it from other scripts and then it will only provide the class/functions and not show the demo.

    class TreeNode:
        def __init__(self, val, left=None, right=None):
            self.val = val
            self.left = left
            self.right = right
        def __repr__(self):
            return 'TreeNode({})'.format(self.val)
        
    def deserialize(string):
        if string == '{}':
            return None
        nodes = [None if val == 'null' else TreeNode(int(val))
                 for val in string.strip('[]{}').split(',')]
        kids = nodes[::-1]
        root = kids.pop()
        for node in nodes:
            if node:
                if kids: node.left  = kids.pop()
                if kids: node.right = kids.pop()
        return root
    
    def drawtree(root):
        def height(root):
            return 1 + max(height(root.left), height(root.right)) if root else -1
        def jumpto(x, y):
            t.penup()
            t.goto(x, y)
            t.pendown()
        def draw(node, x, y, dx):
            if node:
                t.goto(x, y)
                jumpto(x, y-20)
                t.write(node.val, align='center', font=('Arial', 12, 'normal'))
                draw(node.left, x-dx, y-60, dx/2)
                jumpto(x, y-20)
                draw(node.right, x+dx, y-60, dx/2)
        import turtle
        t = turtle.Turtle()
        t.speed(0); turtle.delay(0)
        h = height(root)
        jumpto(0, 30*h)
        draw(root, 0, 30*h, 40*h)
        t.hideturtle()
        turtle.mainloop()
        
    if __name__ == '__main__':
        drawtree(deserialize('[1,2,3,null,null,4,null,null,5]'))
        drawtree(deserialize('[2,1,3,0,7,9,1,2,null,1,0,null,null,8,8,null,null,null,null,7]'))

  [1]: http://pochmann.org/leetcode/images/tree1.png
  [2]: http://pochmann.org/leetcode/images/tree2.png


----------------------------------------------------------------------------------------------------
Share my solutions and detailed explanation with recursive&#x2F;iterative in-order-traversal and Morris-traversal
In-order traversal is really useful in BST. Following in-order traversal, we should have following order: prev.val < curr.val. If not, then we found at least one incorrectly placed node

So the basic idea is to visit the tree with in-order traversal and search for two swapped nodes. Then swap them back.

Now the problem is if we found an incorrect pair where prev.val > curr.val, how do we know which node is the incorrect one?  The answer is it depends on whether we have found incorrect node before. So What is that?

Since we get two elements that are swapped by mistake, there must be a smaller TreeNode get a larger value and a larger TreeNode get a smaller value.
Their value are swapped, but the incorrect smaller node is still in smaller tree and incorrect larger node is still in larger tree. So we will visit the incorrect smaller node first, and this node will be detected when we compare its value with next.val, i.e.  when it is treated as prev node. The incorrect larger node will be detected when we compare its value with prev.val. We don't know if it is close or not close to incorrect smaller node, so we should continue search BST and update it if we found another incorrect node.

Therefore if it is the first time we found an incorrect pair, the prev node must be the first incorrect node.
If it is not the first time we found an incorrect pair, the curr node must be the second incorrect node, though
we may have corner case that two incorrect nodes are in same pair.

Recursive in-order traversal based on above idea:

    public void recoverTree(TreeNode root) {
        //use inorder traversal to detect incorrect node
        
        inOrder(root);
        

        int temp = first.val;
        first.val = second.val;
        second.val = temp;
    }
    
    TreeNode prev = null;
    TreeNode first = null;
    TreeNode second = null;
    
    public void inOrder(TreeNode root){
        if(root == null) return;
        //search left tree
        inOrder(root.left);
        
        //in inorder traversal of BST, prev should always have smaller value than current value
        if(prev != null && prev.val >= root.val){
            //incorrect smaller node is always found as prev node
            if(first == null) first = prev;
          //incorrect larger node is always found as curr(root) node
            second = root;
        }
        
        
        //update prev node
        prev = root;

        //search right tree
        inOrder(root.right);
    }


iterative in-order traversal based on above idea:


    public void recoverTree(TreeNode root) {
        TreeNode first = null;
        TreeNode second = null;
        
        TreeNode curr = root;
        TreeNode prev = null;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        
        while(!stack.isEmpty() ||  curr != null){
            if(curr != null){
                //visit curr's left subtree
                stack.push(curr);
                curr = curr.left;
            }else{
                //done left subtree of curr Node
                curr = stack.pop();
                
                //compare curr.val with prev.val if we have one
                if(prev != null && curr.val <= prev.val){
                    //incorrect smaller node is always found as prev node
                    if(first == null) first = prev;
                    //incorrect larger node is always found as curr node
                    second = curr;         
                }  
                
                //visit curr's right subtree
                prev = curr;
                curr = curr.right;
            }
        }
        
        //recover swapped nodes
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
    }

Both recursive and iterative will occupy O(n) space in worst case, in which the tree is like a LinkedList

To reduce the space to constant space, we have to use Morris-traversal.

Morris-traversal is similar to recursive/iterative traversal, but we need to modify the tree structure during the
traversal.  before we visiting the left tree of a root, we will build a back-edge between rightmost node in left tree and the root. So we can go back to the root node after we are done with the left tree. Then we locate the rightmost node in left subtree again, cut the back-edge, recover the tree structure and start visit right subtree. The detection of two incorrect TreeNodes is similar to iterative/recursive in-order traversal.
We don't use extra data structure here, so the space complexity is reduced to O(1) and the time complexity will be O(n)

Morris-traversal based on above description:

    public void recoverTree(TreeNode root) {
    	//Morris-traversal
    	
        TreeNode first = null;
        TreeNode second = null;
        
        TreeNode pred = null; //rightmost node in left tree
        TreeNode prev = null; 
        
        TreeNode curr = root;
        
        while(curr != null){
            //for each node, we compare it with prev node as we did in in-order-traversal
            if(prev != null && curr.val <= prev.val){
                if(first == null) first = prev;
                second = curr;
            }
            
            if(curr.left != null){
                //got left tree, then let's locate its rightmost node in left tree
                pred = curr.left;
                //we may have visited the left tree before, and connect the rightmost node with curr node (root node)
                while(pred.right != null && pred.right != curr){
                    pred = pred.right;
                }
                
                if(pred.right == curr){
                    //if this left tree has been visited before, then we are done with it
                    //cut the connection with currNode and start visit curr's right tree
                    pred.right = null;
                    prev = curr;
                    curr = curr.right;
                }else{
                    //if this left tree has not been visited before, then we create a back edge from rightmost node
                    // to curr node, so we can return to the start point after done the left tree
                    pred.right = curr;
                    curr = curr.left;
                }
                
            }else{
                //no left tree, then just visit its right tree
                prev = curr;
                curr = curr.right;
            }
        }
        
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
    }



----------------------------------------------------------------------------------------------------
&#91;recommend for beginners&#93;clean C++ implementation with detailed explaination
Just use the "first" and "second" pointer to find the 2 nodes that violate the order. Then change the value of the first node ad the second node by their value.

    class Solution {
        TreeNode* first=NULL;
        TreeNode* second=NULL;
        TreeNode* prev = new TreeNode(INT_MIN);
    public:
        void recoverTree(TreeNode* root) {
            help(root);
            swp(first->val, second->val);
        }
        
        void help(TreeNode* root){
            if(root==NULL)  return;
            help(root->left);
            if(first==NULL && prev->val >= root->val)   first=prev;
            if(first!=NULL && prev->val >= root->val)   second=root;
            prev=root;
            help(root->right);
        }
    };

----------------------------------------------------------------------------------------------------
Share My java Solution using Morris Traversal
The Key idea is to use Morris Traversal which only uses O(1) Space. Here is my code and comments.
The code just uses the variable root as the current node.

    public class Solution {
      public void recoverTree(TreeNode root) {  
    
        TreeNode first = null;     // first node need to be swap
        TreeNode second = null;    // second node need to be swap
        TreeNode pre = new TreeNode(Integer.MIN_VALUE);  //previous node.
    
        while(root!=null){
          TreeNode node = root.left;
    
          // If left is not null, we need to find the rightmost node of left subtree,
          // Set its right child to current node
          if(node!=null){ 
         
            //find the rightmost
            while(node.right!=null && node.right != root){
              node = node.right;
            }
    
            //There are two cases,
            //null: first time we access current, set node.right to current and move to left child of current and continue;
            //current: we accessed current before, thus we've finished traversing left subtree, set node.right back to null;
            if(node.right == null){
              node.right = root;
              root = root.left;
              continue;
            }else{
              node.right = null;
            }
          }
    
          // compare current node with previous node
          if(root.val < pre.val ){
            // first time we enconter reversed order, we set previous node to first
            if( first == null ){
              first = pre;
            }
            //In case that two nodes are successive, we set second to current every time.
            second = root;
          }
          pre = root;
          root = root.right;      
        }
    
        //swap the value;
        int temp = second.val;
        second.val = first.val;
        first.val = temp;
      }
    }

----------------------------------------------------------------------------------------------------
REAL O(1) Space (No recursion&#x2F;No stack, etc) O(n) Time solution. 48ms C++
Someone complained that a recursion solution isn't really a O(1) space solution. Ok, here comes the real O(1) solution. No recursion, no stack. Pure Morris traversal. 48 ms, C++ :

    class Solution {
            TreeNode * wrong_node0 = nullptr, * wrong_node1 = nullptr, * prev = nullptr;
            void verify(TreeNode * cur)
            {
                if (prev != nullptr && prev -> val > cur -> val)
                {
                    if (wrong_node0 == nullptr)
                    {
                        wrong_node0 = prev;
                        wrong_node1 = cur; // in case the tree has only 2 elements.
                    }
                    else
                        wrong_node1 = cur;
                }
                prev = cur;
            }
            void morrisInorder(TreeNode * root)
            {
                TreeNode * cur = root;
                while (cur)
                {
                    if (cur->left == nullptr)
                    {
                        verify(cur);       
                        cur = cur->right;
                        continue;
                    }
                    TreeNode * pred = cur->left;
                    while (pred -> right != nullptr && pred -> right != cur)
                        pred = pred -> right; //finding predecessor
                    if (pred -> right == nullptr)
                    {
                        pred -> right = cur;
                        cur = cur -> left;
                    }else {//pred -> right == cur;
                        pred -> right = nullptr;
                        verify(cur);
                        cur = cur -> right;
                    }
                }
            }
        public:
            void recoverTree(TreeNode* root) {
                morrisInorder(root);
                swap(wrong_node0->val, wrong_node1->val);
            }
        };

----------------------------------------------------------------------------------------------------
How can the space complextity be better than O(log N) with stack
You need a stack to do traversing. Either it is manual stack or system recursive one, it is O(log N) at least.

----------------------------------------------------------------------------------------------------
An elegent O(n) time complexity and O(1) space complexity Algorithm
