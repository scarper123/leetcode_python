Java 1-liner
public boolean checkRecord(String s) {
    return !s.matches(".*LLL.*|.*A.*A.*");
}


----------------------------------------------------------------------------------------------------
C++ very simple solution
bool checkRecord(string s) {
    int a=0, l=0;
    for(int i=0;i<s.size();i++) {
        if(s[i]=='A') a++;
        if(s[i]=='L') l++;
        else l=0;
        if(a>=2||l>2) return false;
    }
    return true;
}

----------------------------------------------------------------------------------------------------
Java Simple without Regex 3 lines
public class Solution {
    public boolean checkRecord(String s) {
        if(s.indexOf("A") != s.lastIndexOf("A") || s.contains("LLL"))
            return false;
        return true;
    }
}


----------------------------------------------------------------------------------------------------
Java O(N) solution - Accepted
public boolean checkRecord(String s) {
        int countA=0;
        int continuosL = 0;
        int charA = 'A';
        int charL ='L';
        for(int i=0;i<s.length();i++){
            if(s.charAt(i) == charA){
                countA++;
                continuosL = 0;
            }
            else if(s.charAt(i) == charL){
                continuosL++;
            }
            else{
                continuosL = 0;
            }
            if(countA >1 || continuosL > 2 ){
                return false;
            }
        }
        return true;

    }


----------------------------------------------------------------------------------------------------
Tiny Ruby, Short Python&#x2F;Java&#x2F;C++
bool checkRecord(string s) {
    return !regex_search(s, regex("A.*A|LLL"));
}

----------------------------------------------------------------------------------------------------
Java 1 line solution
public class Solution {
    public boolean checkRecord(String s) {
        return !s.matches(".*A.*A.*") && !s.matches(".*LLL.*");
    }
}


----------------------------------------------------------------------------------------------------
One line Java solution without Regex
public boolean checkRecord(String s) {
    return !s.contains("LLL") && (s.indexOf("A") == s.lastIndexOf("A"));
}


----------------------------------------------------------------------------------------------------
Java - O(n) time and O(1) space solution
public boolean checkRecord(String s) {
        //Time ~ O(n)
        //Space ~ O(1)
        // ---> where n is the length of String s
        
        int countA = 0;
        int countL = 0;
        
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == 'A'){
                if(countA == 1){
                    return false;
                } else{
                    countA = countA + 1;
                }
                countL = 0;
            } else if(s.charAt(i) == 'L'){
                if(countL == 2){
                    return false;
                } else{
                    countL = countL + 1;
                }
            } else{
                countL = 0;
            }
        }
        
        return true;
    }


----------------------------------------------------------------------------------------------------
Python 1 liner without regex
    def checkRecord(self, s):
        return len(s.split('A'))<=2 and s.find('LLL')==-1


----------------------------------------------------------------------------------------------------
A few short JavaScript solutions
var checkRecord = function(s, a = 2, l = 3) {
    return !new RegExp(`((A.*){${a}}|L{${l}})`).test(s);
};


----------------------------------------------------------------------------------------------------
1 line Python
return s.count('A') <= 1 and s.count('LLL') == 0

----------------------------------------------------------------------------------------------------
1 line python easy understand solution
class Solution(object):
    def checkRecord(self, s):
        return s.count("A")<2 and reduce(max,map(len,re.split(r'A|P',s)))<3
            
        


----------------------------------------------------------------------------------------------------
Java solution
    public boolean checkRecord(String s) {
    int acount=0;
    int lcount=0;
    for(char c : s.toCharArray()) {
        if(c=='L') {
            lcount++;
        }
        else {
            lcount=0;
            if(c=='A') {
                acount++;
            }
        }
        if(acount>1 || lcount>=3) {
            return false;
        }
    }
    return true;
   }


----------------------------------------------------------------------------------------------------
Java Easy to Understand without indexOf and contains methods
public class Solution {
    public boolean checkRecord(String s) {
        if(s.length() < 2) return true;
        int ab = 0;
        if(s.charAt(0) == 'A') ab++;
        if(s.charAt(1) == 'A') ab++;
        if(ab > 1) return false;
        for(int i = 2; i < s.length(); i++){
            if(s.charAt(i) == 'A') ab++;
            if(ab > 1) return false;
            if(s.charAt(i-2) == 'L' && s.charAt(i-1) == 'L' && s.charAt(i) == 'L') return false;
        }
        return true;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def checkRecord(self, S):
    return S.count('A') <= 1 and 'LLL' not in S


----------------------------------------------------------------------------------------------------
O(n) JavaScript Solution
/**
 * @param {string} s
 * @return {boolean}
 */
var checkRecord = function(s) {
  let countA = 0;
  let hasTripleL = false;
  for (let j = 0; j <= s.length - 3; ++j) {
    if (s[j]=== 'L' && s[j+1] === 'L' && s[j+2] === 'L') {
      return false;
    }
  }
  for(let i = 0; i < s.length; ++i) {
    if (s[i] === 'A') {
      countA++;
    }
  }
  if (countA > 1) {
    return false
  } else {
    return true;
  }
};

----------------------------------------------------------------------------------------------------
python 1 line
class Solution(object):
    def checkRecord(self, s):
        """
        :type s: str
        :rtype: bool
        """
        return re.match(r'^(.*)LLL(.*)$',s)==None and re.match(r'(.*)[A]+(.*)[A]+(.*)',s)==None


----------------------------------------------------------------------------------------------------
python one line
from collections import Counter
class Solution(object):
    def checkRecord(self, s):
        """
        :type s: str
        :rtype: bool
        """
        return (Counter(s)['A'] <=1 and 'LLL' not in s)


----------------------------------------------------------------------------------------------------
c++ solution
class Solution {
public:
    bool checkRecord(string s) {
        int Acount=0, Lcount=0;
		for (size_t i=0; i<s.size(); ++i) {
			if (s.at(i)=='A') {
				Acount += 1;
				if (Acount > 1) return false;
				Lcount = 0;
			}
			else if (s.at(i)=='L') {
				Lcount += 1;
				if (Lcount > 2) return false;
			}
			else {
				Lcount = 0;
			}
		}
		if (Acount > 1 || Lcount > 2) return false;
		return true;
    }
};


----------------------------------------------------------------------------------------------------
python 1-line beats 94%
class Solution(object):
    def checkRecord(self, s):
        return s.count('A')<2 and s.count('LLL')==0


----------------------------------------------------------------------------------------------------
