Java solution, 6 liner
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if (root == null) return null;
        
        if (root.val < L) return trimBST(root.right, L, R);
        if (root.val > R) return trimBST(root.left, L, R);
        
        root.left = trimBST(root.left, L, R);
        root.right = trimBST(root.right, L, R);
        
        return root;
    }
}


----------------------------------------------------------------------------------------------------
C++, recursion
TreeNode* trimBST(TreeNode* root, int L, int R, bool top=true) {
    if (!root)
        return root;
    root->left = trimBST(root->left, L, R, false);
    root->right = trimBST(root->right, L, R, false);
    if (root->val >= L && root->val <= R)
        return root;
    auto result = root->val < L ? root->right : root->left;
    if (!top)
        delete root;
    return result;
}


----------------------------------------------------------------------------------------------------
Simple Java recursive solution
public TreeNode trimBST(TreeNode root, int L, int R) {
        if (root == null) {
            return root;
        }

        if (root.val > R) {
            return trimBST(root.left, L, R);
        }

        if (root.val < L) {
            return trimBST(root.right, L, R);
        }

        root.left = trimBST(root.left, L, R);
        root.right = trimBST(root.right, L, R);
        return root;
    }


----------------------------------------------------------------------------------------------------
Simple Java recursive solution
public TreeNode trimBST(TreeNode root, int L, int R) {
        if(root == null) return null;
        if(root.val >= L && root.val <= R) {
            root.left = trimBST(root.left, L, R);
            root.right = trimBST(root.right, L, R);
            return root;
        }
        if(root.val < L)  return trimBST(root.right, L, R);
        if(root.val > R)  return trimBST(root.left, L, R);
    }


----------------------------------------------------------------------------------------------------
clear python solution
class Solution(object):
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        if not root:
            return None
        if L > root.val:
            return self.trimBST(root.right, L, R)
        elif R < root.val:
            return self.trimBST(root.left, L, R)
        root.left = self.trimBST(root.left, L, R)
        root.right = self.trimBST(root.right, L, R)
        return root


----------------------------------------------------------------------------------------------------
easy java
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if (root == null) return null;
        TreeNode left = trimBST(root.left, L, R);
        TreeNode right = trimBST(root.right, L, R);
        root.left = left;
        root.right = right;
        return root.val >= L && root.val <= R? root : root.val < L? right : left; 
    }


----------------------------------------------------------------------------------------------------
Java recursion with explanation
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if (root == null)  return null;
       
        if (root.val < L) {
            return trimBST(root.right, L, R);
        } else if (root.val > R) {
            return trimBST(root.left, L, R);
        }
        root.left = trimBST(root.left, L, root.val);
        root.right = trimBST(root.right, root.val, R);
        return root;
    }
}


----------------------------------------------------------------------------------------------------
Very short and clean DFS solution (Java and C#)
    public TreeNode TrimBST(TreeNode root, int L, int R)
    {
        if (root == null) return null;

        if (root.val < L)
            return TrimBST(root.right, L, R);
        if (root.val > R)
            return TrimBST(root.left, L, R);

        root.left = TrimBST(root.left, L, R);
        root.right = TrimBST(root.right, L, R);

        return root;
    }   


----------------------------------------------------------------------------------------------------
Java Recursive 6 Lines Solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if (root == null) return null;
        if (root.val < L) return trimBST(root.right, L, R);
        if (root.val > R) return trimBST(root.left, L, R);
        root.left = trimBST(root.left, L, R);
        root.right = trimBST(root.right, L, R);
        return root;
    }
}


----------------------------------------------------------------------------------------------------
1 - null - 2 and  2 - null - 1 is not the same?
<p>1 - null - 2 and  2 - null - 1 is not the same?</p>


----------------------------------------------------------------------------------------------------
Java DFS
public TreeNode trimBST(TreeNode root, int L, int R) {
    if (root == null){
        return root;
    }
    if(root.val < L){
        return trimBST(root.right, L, R);
    }
    if (root.val > R) {
        return trimBST(root.left, L, R);
    }
    
    root.left  = trimBST(root.left, L, R);
    root.right = trimBST(root.right, L, R);
    
    return root;
}

----------------------------------------------------------------------------------------------------
Java Recursion easy
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        
        if(root==null)
            return root;
    return solve(root,L,R);
        // return root;
    }
    
    TreeNode solve(TreeNode root, int L, int R)
    {
        if(root==null)
            return null;
            if(root.val>=L && root.val<=R)
            {
              root.left=solve(root.left,L,R);
               root.right=solve(root.right,L,R);
            }
        if(root.val<L){

            root=solve(root.right,L,R);
        }
        if(root!=null && root.val>R )
            root=solve(root.left,L,R);
        return root;
    }
}

----------------------------------------------------------------------------------------------------
Python simple recursion
class Solution:
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        def helper(node):
            if node is None:
                return None
            if node.val > R:
                return helper(node.left)
            if node.val < L:
                return helper(node.right)
            node.left, node.right = helper(node.left), helper(node.right)
            return node
        return helper(root)


----------------------------------------------------------------------------------------------------
share my short java solution!
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
         if(root==null){
             return null;
         }
         if(root.val<L){
             return trimBST(root.right,L,R);
         }else if(root.val>R){
             return trimBST(root.left,L,R);
         }else{
             root.left = trimBST(root.left,L,R);
             root.right = trimBST(root.right,L,R);
             return root;
         }
    }  
}


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def trimBST(self, root, L, R):
    def trim(node):
        if node:
            if node.val > R:
                return trim(node.left)
            elif node.val < L:
                return trim(node.right)
            else:
                node.left = trim(node.left)
                node.right = trim(node.right)
                return node

    return trim(root)


----------------------------------------------------------------------------------------------------
Simple C++ using recursion
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int L, int R) {
        if (!root) { return NULL; }
        if      (root->val > R) { return trimBST(root->left,  L, R); }
        else if (root->val < L) { return trimBST(root->right, L, R); }
        else {
            root->left = trimBST(root->left, L, R);
            root->right = trimBST(root->right, L, R);
        }
        return root;
    }
};


----------------------------------------------------------------------------------------------------
Divide and Conquer - Swift
class Solution {
    func trimBST(_ root: TreeNode?, _ L: Int, _ R: Int) -> TreeNode? {
        guard let root = root else { return nil }
        
        var newRoot : TreeNode? = nil
        
        if root.val < L {
            newRoot = trimBST(root.right, L, R)
        } else if root.val > R {
            newRoot = trimBST(root.left, L, R)
        } else {
            newRoot = root
            newRoot?.left = trimBST(root.left, L, R)
            newRoot?.right = trimBST(root.right, L, R)
        }
        
        return newRoot
    }
}


----------------------------------------------------------------------------------------------------
c++ &amp; 4 lines python solutions
class Solution(object):
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        if root:
            root.left = self.trimBST(root.left, L, R)
            root.right = self.trimBST(root.right, L, R)
            return root.right if root.val < L else root.left if root.val > R else root

# 77 / 77 test cases passed.
# Status: Accepted
# Runtime: 106 ms


----------------------------------------------------------------------------------------------------
Simple recursive  - python
class Solution(object):
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        if root:
            if L <= root.val <= R:
                root.left  = self.trimBST(root.left, L, R)
                root.right = self.trimBST(root.right,L, R) 
                return root
            if root.val < L:
                return self.trimBST(root.right,L, R) 
            elif root.val > R:
                return self.trimBST(root.left,L, R)
        return None


----------------------------------------------------------------------------------------------------
