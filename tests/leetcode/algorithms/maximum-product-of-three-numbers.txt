Java Solution, find Min
public class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        if (ops == null || ops.length == 0) {
            return m * n;
        }
        
        int row = Integer.MAX_VALUE, col = Integer.MAX_VALUE;
        for(int[] op : ops) {
            row = Math.min(row, op[0]);
            col = Math.min(col, op[1]);
        }
        
        return row * col;
    }
}


----------------------------------------------------------------------------------------------------
Python solution , beat 100%
    def maxCount(self, m, n, ops):
        """
        :type m: int
        :type n: int
        :type ops: List[List[int]]
        :rtype: int
        """
        if not ops:
            return m*n
        return min(op[0] for op in ops)*min(op[1] for op in ops)

----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def maxCount(self, R, C, ops):
    if not ops: return R * C
    X, Y = zip(*ops)
    return min(X) * min(Y)


----------------------------------------------------------------------------------------------------
Java simple solution
public class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        int rowMin = m;
        int colMin = n;
        for (int[] pair : ops) {
            rowMin = Math.min(rowMin, pair[0]);
            colMin = Math.min(colMin, pair[1]);
        }
        return rowMin * colMin;
    }
}


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code
//          if (op[0] == 0 || op[1] == 0)  continue;


----------------------------------------------------------------------------------------------------
C++ short solution
class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        for (int i = 0; i < ops.size(); ++i) {
            m = min(m, ops[i][0]);
            n = min(n, ops[i][1]);
        }
        return m*n;
    }
};


----------------------------------------------------------------------------------------------------
Java easy to understand
public class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        for(int i=0;i<ops.length;i++){
            if(ops[i][0]<m) m=ops[i][0];
            if(ops[i][1]<n) n=ops[i][1];
        }
        return m*n;
    }
}


----------------------------------------------------------------------------------------------------
Beats 92%
public static int MaxCount(int m, int n, int[,] ops)
{
    int minrow = m;
    int mincol = n;

    for (int i = 0; i < ops.GetLength(0); i++)
    {
        minrow = Math.Min(minrow, ops[i, 0]);
        mincol = Math.Min(mincol, ops[i, 1]);
    }
    return minrow * mincol;
}


----------------------------------------------------------------------------------------------------
&#91;598. Range Addition II&#93; C++_AC
class Solution {
public:
int maxCount(int m, int n, vector<vector<int>>& ops) {
    int x = m, y = n;
    for(int i = 0; i < ops.size(); ++i){
        x = min(x, ops[i][0]);
        y = min(y, ops[i][1]);
    }
    return x*y;
}
};

----------------------------------------------------------------------------------------------------
Python fast
    return r*c'''

----------------------------------------------------------------------------------------------------
Intuitive Javascript Solution
var maxCount = function(m, n, ops) {
    let minRow = m;
    let minCol = n;
    
    // find overlap of the operators
    for (const op of ops) {
        minRow = Math.min(minRow, op[0]);
        minCol = Math.min(minCol, op[1]);
    }
    
    return minRow * minCol;
};


----------------------------------------------------------------------------------------------------
Simple Java Solution
public class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        int x = m;
        int y = n;
        for (int i = 0; i < ops.length; i++) {
            int[] op = ops[i];
            if (op[0] <= x) {
                x = op[0];
            }
            if (op[1] <= y) {
                y = op[1];
            }
        }
        return x * y;
    }
}


----------------------------------------------------------------------------------------------------
Easy python with explaination
    def maxCount(self, m, n, ops):
        """
        :type m: int
        :type n: int
        :type ops: List[List[int]]
        :rtype: int
        """
        if ops==[]:return m*n
        min_col=ops[0][1]
        min_row=ops[0][0]
        for op in ops:
            min_row=min(min_row,op[0])
            min_col=min(min_col,op[1])
        return min_row*min_col


----------------------------------------------------------------------------------------------------
m= 3 , n =3 and ops=&#91;&#93;
<p>For input m = 3 , n =3 and ops = &#91;&#93; . How come the output is 9? Isn&#39;t this a mistake ?</p>


----------------------------------------------------------------------------------------------------
Clean 7 lines C++ 6ms solution
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        int minRow=m;
        int minCol=n;
        for(int i=0;i<ops.size();i++){
            if(ops[i][0]<minRow) minRow=ops[i][0];
            if(ops[i][1]<minCol) minCol=ops[i][1];
        }
        return minRow*minCol;
    }


----------------------------------------------------------------------------------------------------
C++ 5-lines simple solution
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        int a=m, b=n;
        for(int i=0;i<ops.size();i++) {
            a=min(a, ops[i][0]);
            b=min(b, ops[i][1]);
        }
        return a*b;
    }

----------------------------------------------------------------------------------------------------
1-liner Python (beat 90%) and 2-liner C++ find min(a, m)*min(b, n)
    def maxCount(self, m, n, ops):
        return min(op[0] for op in ops)*min(op[1] for op in ops) if ops else m*n


----------------------------------------------------------------------------------------------------
Simple C++
class Solution {
public:
    int maxCount(int m, int n, vector<vector<int>>& ops) {
        for(int i=0; i<ops.size(); i++){
                if(m>ops[i][0]) m = ops[i][0];
                if(n> ops[i][1]) n=ops[i][1];
            }    
        return m*n;
    }
};


----------------------------------------------------------------------------------------------------
Easy Python Solution
class Solution(object):
    def maxCount(self, m, n, ops):
        """
        :type m: int
        :type n: int
        :type ops: List[List[int]]
        :rtype: int
        """
        if not ops:
            return m*n
        x, y = 1e9, 1e9
        for op in ops:
            if op[0] < x:
                x = op[0]
            if op[1] < y:
                y = op[1]
        return x*y


----------------------------------------------------------------------------------------------------
Easy Python
<p>The key is to find the intersection.<br/>
One easy way to find intersection is to make row=min(row,list_row)</p>
<p>&#34;&#34;&#34;<br/>
r,c=m,n<br/>
for rc in ops:<br/>
r,c=min(rc&#91;0&#93;,r),min(rc&#91;1&#93;,c)<br/>
return r*c<br/>
&#34;&#34;&#34;</p>


----------------------------------------------------------------------------------------------------
