Simple Java Solution

    public int countBattleships(char[][] board) {
        int m = board.length;
        if (m==0) return 0;
        int n = board[0].length;
        
        int count=0;
        
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (board[i][j] == '.') continue;
                if (i > 0 && board[i-1][j] == 'X') continue;
                if (j > 0 && board[i][j-1] == 'X') continue;
                count++;
            }
        }
        
        return count;
    }


----------------------------------------------------------------------------------------------------
Share my 7-line code, 1-line core code, 3ms, super easy
public int countBattleships(char[][] board) {
    int count = 0;
    for(int i=0;i<board.length;i++)
        for(int j=0;j<board[0].length;j++)
            if(board[i][j]=='X' && (i==0 || board[i-1][j]!='X') && (j==0 || board[i][j-1]!='X')) count++;
    return count;
}


----------------------------------------------------------------------------------------------------
Python solution
class Solution(object):
    def countBattleships(self, board):
        if len(board) == 0: return 0
        m, n = len(board), len(board[0])
        count = 0
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'X' and (i == 0 or board[i-1][j] == '.') and (j == 0 or board[i][j-1] == '.'):
                    count += 1
        return count


----------------------------------------------------------------------------------------------------
Confused with test cases
<p>&#91;&#34;XXXX&#34;,&#34;...X&#34;,&#34;...X&#34;&#93; returns 1<br/>
&#91;&#34;.X..&#34;,&#34;XXXX&#34;,&#34;.X..&#34;&#93; returns 2<br/>
what&#39;s the rule here?</p>


----------------------------------------------------------------------------------------------------
4ms Java Optimized code
C

----------------------------------------------------------------------------------------------------
C++ 3ms 6 lines solution with runtime O(n) and space O(1)
int countBattleships(vector<vector<char>>& board) {
        if (board.empty() || board[0].empty()) { return 0; }
        int m = board.size(), n = board[0].size(), cnt = 0;
        
        for (int r = 0; r < m; r++)
            for (int c = 0; c < n; c++)
                cnt += board[r][c] == 'X' && (r == 0 || board[r - 1][c] != 'X') && (c == 0 || board[r][c - 1] != 'X');
        
        return cnt;
}


----------------------------------------------------------------------------------------------------
DFS &amp; BFS Flood Fill Algorithm with C++
class Solution {
public:
    int go[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    int countBattleships(vector<vector<char>>& board) {
        if (board.empty()) return 0;
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> flag(m, vector<bool>(n, false));
        int result = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'X' && !flag[i][j]) {
                    ++result;

                    queue<pair<int, int>> q;
                    q.push({i, j});
                    while (!q.empty()) {
                        auto t = q.front(); q.pop();
                        flag[t.first][t.second] = true;
                        for (int d = 0; d < 4; ++d) {
                            int ni = t.first+go[d][0], nj = t.second+go[d][1];
                            if (ni < 0 || ni >= m || nj < 0 || nj >= n || board[ni][nj] == '.' || flag[ni][nj]) continue;
                            q.push({ni, nj});
                        }
                    }
                }
            }
        }
        return result;
    }
};


----------------------------------------------------------------------------------------------------
O(n^2) time and O(1) space without modifying the board
public class Solution {
    public int countBattleships(char[][] board) {
        int count = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'X' && (i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.')) {
                    count++;
                }
            }
        }
        return count;
    }
}


----------------------------------------------------------------------------------------------------
Very easy to understand java solution
    public int countBattleships(char[][] board) {
        int result = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'X' &&
                        (i == 0 || board[i - 1][j] == '.') &&
                        (j == 0 || board[i][j - 1] == '.')) {
                    result++;
                }

            }
        }
        return result;
    }

----------------------------------------------------------------------------------------------------
Python 1-liner
def countBattleships(self, board):
    res = 0
    for y in range(len(board)):
        for x in range(len(board[0])):
            if all([board[y][x] == 'X',
                    not x or board[y][x-1] != 'X',
                    not y or board[y-1][x] != 'X']):
                res += 1
    return res

----------------------------------------------------------------------------------------------------
Very simple 4ms Java solution with explanation
 public int countBattleships(char[][] board) {
        // 41.99% 4ms one pass
        int m = board.length, n = board[0].length;
        int count = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 'X') {
                    if((i + 1 == m || board[i + 1][j] == '.') 
                    && (j + 1 == n || board[i][j + 1] == '.')) {
                        count++;
                    }
                }
            }
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
Java damn simple solution.
/**
 * === Count # of starting points. 
 * Starting point is X where left and up are empty.  
 */ 
public class Solution {
    public int countBattleships(char[][] bd) {
        int count = 0;
        // count starting point. 
        for(int i =0; i < bd.length; i ++){
            for(int j =0; j <bd[i].length; j ++ ){
                if(isStart(bd, i , j))
                    count ++;
            }
        }
        
        return count;
        
    }
    
    boolean isStart(char[][] bd, int i , int j){
        char up   = i -1 >= 0 ? bd[i-1][j] : '.';
        char left = j -1 >= 0 ? bd[i][j-1] : '.';
        
        return bd[i][j] == 'X' && left == '.' && up == '.';
    }
}

----------------------------------------------------------------------------------------------------
O(n) Java solution (2 ms)
	public int countBattleships(char[][] board) {
            if (board.length == 0) return 0;
	    int sum = 0;
	    int rows = board.length;
	    int cols = board[0].length;
	    
	    for (int r = 0; r < rows; r++) {
	    	for (int c = 0; c < cols; c++) {
	    	    if(board[r][c] != 'X') continue;
	    	    if (r == rows - 1 || board[r+1][c] != 'X') {
	   	        sum++;
			if(r < rows-1 || !(rows > 1 && board[r-1][c] == 'X')) {
			    while(c < cols && board[r][c] == 'X') {
				c++;
	                    }
			}
                    }
		}
	    }
	    return sum;
	}


----------------------------------------------------------------------------------------------------
Clean c++ solution
int countBattleships(vector<vector<char>>& board) {
        int size = board.size();
        int csize = size > 0 ? board[0].size() : 0;
        int count = 0;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < csize; j++) {
                if (board[i][j] == 'X' && !(i > 0 && board[i - 1][j] == 'X' || j > 0 && board[i][j - 1] == 'X')) {
                    count++;
                }
            }
        }
        return count;
    }


----------------------------------------------------------------------------------------------------
Concise C++ Solution and general C++ solution
int countBattleships(vector<vector<char>>& board) {
    if (board.empty()) return 0;
    int row = board.size(), col = board[0].size(), res = 0;
    vector<vector<bool>> visited(row, vector<bool>(col, false));
    vector<vector<int>> moves = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if (visited[i][j] || board[i][j] == '.') continue;
            res++;
            visited[i][j] = true;
            for (int dir = 0; dir < 4; dir++) {
                int x = i + moves[dir][0], y = j + moves[dir][1];
                while (x >= 0 && x < row && y >= 0 && y < col && (visited[x][y] = board[x][y] == 'X')) {
                    x += moves[dir][0]; 
                    y += moves[dir][1];
                }
            }
        }
    }
    return res;
}


----------------------------------------------------------------------------------------------------
Concise c# solution
public class Solution {
public int CountBattleships(char[,] board) {
    int r = 0;
    for(int i = 0; i < board.GetLength(0); i++) {
        for(int j = 0; j < board.GetLength(1); j++) {
            if(board[i,j] == 'X' &&
                (i == 0 || board[i-1,j] == '.') &&
                (j == 0 || board[i,j-1] == '.')
            ) {
                r++;        
            }
        }
    }
    return r;
}


----------------------------------------------------------------------------------------------------
Concise C++ Solution
int countBattleships(vector<vector<char>>& board) {
        if(!board.size()) return 0;
        int count=0;
        int n=board.size(),m=board[0].size();
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                if(board[i][j]=='X'){
                    if(i>0 && board[i-1][j]=='X') continue;
                    count++;
                    while(j<m && board[i][j]=='X') j++;
                }
                
        return count;
    }


----------------------------------------------------------------------------------------------------
Simple PYTHON O(n) time O(1) space 90% inline explanation
class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        cols = len(board)
        rows = len(board[0])
        ct = 0
        for c in xrange(cols):
            for r in xrange(rows):
                # We count a battleship only first time we see it. If a battleship piece 'X'
                # is encountered, it is only new if neither the upper or left components are not also
                # pieces of the same battleship. These prior indices are guarenteed to already be explored by 
                # the time we get to the current board index.
                if board[c][r] != 'X':
                    continue
                if r > 0 and board[c][r - 1] == 'X':
                    continue
                if c > 0 and board[c - 1][r] == 'X':
                    continue
                ct += 1
        return ct


----------------------------------------------------------------------------------------------------
Java tricky solution
if (board == null) return 0;
	double count = 0;
	int height = board.length;
	int width = board[0].length;
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			if (board[i][j] == '.') continue;
			int near = 0;
			
			if (i!=0 && board[i-1][j] == 'X') near++;
			if (i!=height-1 && board[i+1][j] == 'X') near++;
			
			if (j!=0 && board[i][j-1] == 'X') near++;
			if (j!=width-1 && board[i][j+1] == 'X') near++;
			
			if (near == 1) count += 0.5;
			else if (near == 0) count += 1;
		}
	}
	return (int)count;


----------------------------------------------------------------------------------------------------
Maybe a wrong test case
<p>If the test case is &#91;&#34;X.X&#34;&#93;,the answer should be 1,but the test system  output 2,what the problem?</p>


----------------------------------------------------------------------------------------------------
