3 Line JAVA recursive solution
This solution is inspired by renzid https://leetcode.com/discuss/33043/3-line-recursive-solution

    public ListNode deleteDuplicates(ListNode head) {
            if(head == null || head.next == null)return head;
            head.next = deleteDuplicates(head.next);
            return head.val == head.next.val ? head.next : head;
    }

Enjoy!

----------------------------------------------------------------------------------------------------
My pretty solution. Java.
    public class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            ListNode list = head;
             
             while(list != null) {
            	 if (list.next == null) {
            		 break;
            	 }
            	 if (list.val == list.next.val) {
            		 list.next = list.next.next;
            	 } else {
            		 list = list.next;
            	 }
             }
             
             return head;
        }
    }

----------------------------------------------------------------------------------------------------
Concise solution and memory freeing
I noticed that the solutions posted here are too long and complicated. They use unnecessary variables and/or checks etc.
The solution can be much more concise. Here is my solution:

    class Solution {
    public:
        ListNode *deleteDuplicates(ListNode *head) {
            ListNode* cur = head;
            while (cur) {
                while (cur->next && cur->val == cur->next->val)
                    cur->next = cur->next->next;
                cur = cur->next;
            }
            return head;
        }
    };

**Note about freeing memory**. We need to free memory when we delete a node. But don't use `delete node;` construct on an interview without discussing it with the interviewer. A list node can be allocated in many different ways and we can use `delete node;` only if we are sure that the nodes were allocated with `new TreeNode(...);`.

----------------------------------------------------------------------------------------------------
Simple iterative Python 6 lines, 60 ms
    def deleteDuplicates(self, head):
        cur = head
        while cur:
            while cur.next and cur.next.val == cur.val:
                cur.next = cur.next.next     # skip duplicated node
            cur = cur.next     # not duplicate of current node, move to next node
        return head

----------------------------------------------------------------------------------------------------
One-Liner in C++ &#x2F; Ruby
    return h && (h->next = deleteDuplicates(h->next)) && h->next->val == h->val ? h->next : h;

Update after shawnyi's comment:

While the above does remove the duplicates from the list, it doesn't delete the nodes from memory, causing memory leaks. Here's a version which takes care of that.

    if (h && (h->next = deleteDuplicates(h->next)) && h->next->val == h->val) delete h, h = h->next; return h;

I wouldn't really write it like that, though, so it doesn't really deserve the label "one-liner". I guess I should've just written it in let's say Ruby in the first place, which has garbage collection. It's even shorter there anyway, since it doesn't use arrows and doesn't need the return keyword.

    def delete_duplicates(h)
        h && (h.next = delete_duplicates(h.next)) && h.next.val == h.val ? h.next : h
    end

----------------------------------------------------------------------------------------------------
Clean Java solution
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode dummy=head;
        while(dummy.next!=null){
            if(dummy.next.val==dummy.val){
                dummy.next=dummy.next.next;
            }else dummy=dummy.next;
        }
        return head;
    }


----------------------------------------------------------------------------------------------------
Easy understand Java solution
 public ListNode deleteDuplicates(ListNode head) {

        ListNode temp = head;

        while(temp!=null&&temp.next!=null){

            if(temp.val == temp.next.val){

                temp.next = temp.next.next;
            }
            else
                temp = temp.next;
        }
        return head;
    }


----------------------------------------------------------------------------------------------------
Easy to understand c++ solution
no need to initialize a new node

    ListNode* deleteDuplicates(ListNode* head) {
            ListNode* cur = head;
            while(cur) {
            	while(cur->next && cur->val == cur->next->val) {
            		cur->next = cur->next->next;
            	}
            	cur = cur->next;
            }
            return head;
        }

----------------------------------------------------------------------------------------------------
&#91;Python 109ms&#93; Why my solution is fast than others?
I just use a while loop to find duplicates. And my runtime is 109ms.

A common runtime in python is 200ms ~ 400ms.

    # Definition for singly-linked list.
    # class ListNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.next = None
    
    class Solution:
        # @param head, a ListNode
        # @return a ListNode
        def deleteDuplicates(self, head):
            if head == None:
                return head
                
            node = head
            
            while node.next:
                if node.val == node.next.val:
                    node.next = node.next.next
                else:
                    node = node.next
                    
            return head

----------------------------------------------------------------------------------------------------
4 ms C solution
    if (head) {
        struct ListNode *p = head;
        while (p->next) {
            if (p->val != p->next->val) {
                p = p->next;
            }
            else {
                struct ListNode *tmp = p->next;
                p->next = p->next->next;
                free(tmp);
            }
        }
    }
    
    return head;

----------------------------------------------------------------------------------------------------
Share a recursive solution in python
There is straight forward iterative solution, but it turns out recursive is quite few lines and not too hard to understand.

    class Solution:
        # @param head, a ListNode
        # @return a ListNode
        def deleteDuplicates(self, head):
            if head and head.next and head.val != head.next.val:
                head.next = self.deleteDuplicates(head.next)
            elif head and head.next:
                head = self.deleteDuplicates(head.next)
            return head

----------------------------------------------------------------------------------------------------
Share my 320ms Java solution
    public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode curP = head;
        while(curP!=null){
            while(curP.next!=null&&curP.val ==curP.next.val){
                curP.next = curP.next.next;
            }
            curP=curP.next;
        }
        return head;
    }
}

----------------------------------------------------------------------------------------------------
Clear Java solution
    public class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            if(head == null) return null;
            ListNode pre = head;
            ListNode cur = head.next;
            while(cur != null){
                if(cur.val == pre.val){
                    pre.next = cur.next;
                    cur = cur.next;
                }
                else{
                    pre = pre.next;
                    cur = pre.next;
                }
            }
            return head;
        }
    }

----------------------------------------------------------------------------------------------------
&#91;recommend for beginners&#93;C++ implementation with detailed explaination
This is the most easy linked-list node question, we just need to update when meet different value or just delete the duplicate value node .

    class Solution {
    public:
        ListNode* deleteDuplicates(ListNode* head) {
            if(!head)   return NULL;
            int val=head->val;
            ListNode *pre=head, *cur=head->next;
            while(cur){
                if(cur->val==val){
                    pre->next=cur->next;
                    cur=cur->next;
                }
                else{
                    val=cur->val;
                    pre=pre->next;
                    cur=cur->next;
                }
            }
            return head;
        }
    };

----------------------------------------------------------------------------------------------------
Straightfoward C++ recursive and iterative solution
    ListNode* deleteDuplicates(ListNode* head) {
        helper(head);
        return head;
    }
    
    void helper(ListNode* head){
        if (!head || !head->next) return ;
        while (head->val == head->next->val) {
            head->next = head->next->next;
            if(!head->next) return;
        }
        helper(head->next);
    }


----------------------------------------------------------------------------------------------------
Why my solution will give a wrong answer for test case {1,1}
public class Solution {

    public ListNode deleteDuplicates(ListNode head) {

        if (head == null || head.next == null || head.next.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(Integer.MIN_VALUE);
        dummy.next = head;
        ListNode pre = dummy;
        ListNode next = pre.next;
        while (next != null) {
            if (pre.val == next.val) {
                pre.next = next.next;
                next = pre.next;
                continue;
            }else {
                pre = pre.next;
                next = next.next;
                continue;
            }
        }
        return dummy.next;
    }
}

----------------------------------------------------------------------------------------------------
The question of Remove Duplicates from Sorted List
    public class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            if(head == null)return null;
            ListNode h1 = head;
            int size = 0;
            int count = 0;
            int count_num = 0;
            while(h1 != null){
                size++;
                h1 = h1.next;
            }
            ListNode[] list = new ListNode[size];
            list[0] = head;
            count_num++;
            head = head.next;
            while(count < size - 1){
                    if(list[count_num - 1].val != head.val && head != null){
                        list[count_num] = head;
                        count_num++;
                    }
                count++;
                head = head.next;
            }
            return list[0];
        }
    }

Please tell me why I get wrong answer

----------------------------------------------------------------------------------------------------
Two Pointers Java Solution
        public ListNode deleteDuplicates(ListNode head) {
    		if(head==null || head.next==null) return head;
    		ListNode p = head;
    		ListNode curr = p.next;
    		while(curr!=null) {
    			if(curr.val!=p.val) {
    				p.next=curr;
    				p=curr;
    			}
    			curr=curr.next;
    		}
    		p.next=curr;
    		return head;
    	}

----------------------------------------------------------------------------------------------------
7-line C++ Iterative Solution
I saw many people are discussing whether to delete the removed nodes. I think if you want to delete something, you must make sure it is dynamically allocated on the heap. As the question didn't tell us, we don't need to delete them. Correct me if I'm wrong. 

    class Solution {
    public:
        ListNode* deleteDuplicates(ListNode* head) 
        {
            ListNode* curr=head;
            while(curr) 
                if(curr->next)
                    curr->val==curr->next->val?curr->next=curr->next->next:curr=curr->next;
                else    
                    break;
            return head;
        }
    };


Besides, I also wondering how to make it more concise, like 

    class Solution {
    public:
        ListNode* deleteDuplicates(ListNode* head) 
        {
            ListNode* curr=head;
            while(curr) 
                curr->next?(curr->val==curr->next->val?curr->next=curr->next->next:curr=curr->next):break;
            return head;
        }
    };

But I'm getting syntax error. How to do this correctly?

----------------------------------------------------------------------------------------------------
Clean java solution
    public class Solution {
        public ListNode deleteDuplicates(ListNode head) {
            ListNode tmp = head;
            while(tmp != null) {
                if(tmp.next != null && tmp.next.val == tmp.val)
                    tmp.next = tmp.next.next;
                else
                    tmp = tmp.next;
            }
            return head;
        }
    }

----------------------------------------------------------------------------------------------------
