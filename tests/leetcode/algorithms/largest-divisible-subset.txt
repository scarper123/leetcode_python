Easy to understand Java Solution
The idea is simple: print the tree in pre-order traversal and use "X" to denote null node and split node with ",". We can use a StringBuilder for building the string on the fly. For deserializing, we use a Queue to store the pre-order traversal and since we have "X" as null node, we know exactly how to where to end building subtress.

    public class Codec {
        private static final String spliter = ",";
        private static final String NN = "X";
    
        // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            StringBuilder sb = new StringBuilder();
            buildString(root, sb);
            return sb.toString();
        }
    
        private void buildString(TreeNode node, StringBuilder sb) {
            if (node == null) {
                sb.append(NN).append(spliter);
            } else {
                sb.append(node.val).append(spliter);
                buildString(node.left, sb);
                buildString(node.right,sb);
            }
        }
        // Decodes your encoded data to tree.
        public TreeNode deserialize(String data) {
            Deque<String> nodes = new LinkedList<>();
            nodes.addAll(Arrays.asList(data.split(spliter)));
            return buildTree(nodes);
        }
        
        private TreeNode buildTree(Deque<String> nodes) {
            String val = nodes.remove();
            if (val.equals(NN)) return null;
            else {
                TreeNode node = new TreeNode(Integer.valueOf(val));
                node.left = buildTree(nodes);
                node.right = buildTree(nodes);
                return node;
            }
        }
    }

----------------------------------------------------------------------------------------------------
Recursive preorder, Python and C++, O(n)
**Python**

    class Codec:
    
        def serialize(self, root):
            def doit(node):
                if node:
                    vals.append(str(node.val))
                    doit(node.left)
                    doit(node.right)
                else:
                    vals.append('#')
            vals = []
            doit(root)
            return ' '.join(vals)
    
        def deserialize(self, data):
            def doit():
                val = next(vals)
                if val == '#':
                    return None
                node = TreeNode(int(val))
                node.left = doit()
                node.right = doit()
                return node
            vals = iter(data.split())
            return doit()

---

**C++**

    class Codec {
    public:
    
        string serialize(TreeNode* root) {
            ostringstream out;
            serialize(root, out);
            return out.str();
        }
    
        TreeNode* deserialize(string data) {
            istringstream in(data);
            return deserialize(in);
        }
    
    private:
    
        void serialize(TreeNode* root, ostringstream& out) {
            if (root) {
                out << root->val << ' ';
                serialize(root->left, out);
                serialize(root->right, out);
            } else {
                out << "# ";
            }
        }
    
        TreeNode* deserialize(istringstream& in) {
            string val;
            in >> val;
            if (val == "#")
                return nullptr;
            TreeNode* root = new TreeNode(stoi(val));
            root->left = deserialize(in);
            root->right = deserialize(in);
            return root;
        }
    };

----------------------------------------------------------------------------------------------------
Short and straight forward BFS Java code with a queue
Here I use typical BFS method to handle a binary tree. I use string `n` to represent null values. The string of the binary tree in the example will be `"1 2 3 n n 4 5 n n n n "`.

When deserialize the string, I assign left and right child for each not-null node, and add the not-null children to the queue, waiting to be handled later.



    public class Codec {
        public String serialize(TreeNode root) {
            if (root == null) return "";
            Queue<TreeNode> q = new LinkedList<>();
            StringBuilder res = new StringBuilder();
            q.add(root);
            while (!q.isEmpty()) {
                TreeNode node = q.poll();
                if (node == null) {
                    res.append("n ");
                    continue;
                }
                res.append(node.val + " ");
                q.add(node.left);
                q.add(node.right);
            }
            return res.toString();
        }

        public TreeNode deserialize(String data) {
            if (data == "") return null;
            Queue<TreeNode> q = new LinkedList<>();
            String[] values = data.split(" ");
            TreeNode root = new TreeNode(Integer.parseInt(values[0]));
            q.add(root);
            for (int i = 1; i < values.length; i++) {
                TreeNode parent = q.poll();
                if (!values[i].equals("n")) {
                    TreeNode left = new TreeNode(Integer.parseInt(values[i]));
                    parent.left = left;
                    q.add(left);
                }
                if (!values[++i].equals("n")) {
                    TreeNode right = new TreeNode(Integer.parseInt(values[i]));
                    parent.right = right;
                    q.add(right);
                }
            }
            return root;
        }
    }

----------------------------------------------------------------------------------------------------
Clean C++ solution
    class Codec {
    public:
        // Encodes a tree to a single string.
        string serialize(TreeNode* root) {
            if (root == nullptr) return "#";
            return to_string(root->val)+","+serialize(root->left)+","+serialize(root->right);
        }
    
        // Decodes your encoded data to tree.
        TreeNode* deserialize(string data) {
            return mydeserialize(data);
        }
        TreeNode* mydeserialize(string& data) {
            if (data[0]=='#') {
                if(data.size() > 1) data = data.substr(2);
                return nullptr;
            } else {
                TreeNode* node = new TreeNode(helper(data));
                node->left = mydeserialize(data);
                node->right = mydeserialize(data);
                return node;
            }
        }
    private:
        int helper(string& data) {
            int pos = data.find(',');
            int val = stoi(data.substr(0,pos));
            data = data.substr(pos+1);
            return val;
        }
    };`

----------------------------------------------------------------------------------------------------
Recursive DFS, Iterative DFS and BFS
This problem can solved in 3 different ways

(1) Iterative DFS

    public class Codec {
    
        // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            StringBuilder sb=new StringBuilder();
            TreeNode x=root;
            Deque<TreeNode> stack=new LinkedList<>();
            while (x!=null || !stack.isEmpty()) {
                if (x!=null) {
                    sb.append(String.valueOf(x.val));
                    sb.append(' ');
                    stack.push(x);
                    x=x.left;
                }
                else {
                    sb.append("null ");
                    x=stack.pop();
                    x=x.right;
                }
            }
            return sb.toString();
        }
    
        // Decodes your encoded data to tree.
        public TreeNode deserialize(String data) {
            if (data.length()==0) return null;
            String[] node=data.split(" ");
            int n=node.length;
            Deque<TreeNode> stack=new LinkedList<>();
            TreeNode root=new TreeNode(Integer.valueOf(node[0]));
            TreeNode x=root;
            stack.push(x);
            
            int i=1;
            while (i<n) {
                while (i<n && !node[i].equals("null")) {
                    x.left=new TreeNode(Integer.valueOf(node[i++]));
                    x=x.left;
                    stack.push(x);
                }
                while (i<n && node[i].equals("null")) {
                    x=stack.pop();
                    i++;
                }
                if (i<n) {
                    x.right=new TreeNode(Integer.valueOf(node[i++]));
                    x=x.right;
                    stack.push(x);
                }
            }
            return root;
        }
    }

(2) recursive DFS

    public class Codec {
    
        // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            StringBuilder sb=new StringBuilder();
            dfs(root,sb);
            return sb.toString();
        }
        private void dfs(TreeNode x, StringBuilder sb) {
            if (x==null) {
                sb.append("null ");
                return;
            }
            sb.append(String.valueOf(x.val));
            sb.append(' ');
            dfs(x.left,sb);
            dfs(x.right,sb);
        }
    
        // Decodes your encoded data to tree.
        public TreeNode deserialize(String data) {
            String[] node=data.split(" ");
            int[] d=new int[1];
            return dfs(node,d);
        }
        private TreeNode dfs(String[] node, int[] d) {
            if (node[d[0]].equals("null")) {
                d[0]++;
                return null;
            }
            TreeNode x=new TreeNode(Integer.valueOf(node[d[0]]));
            d[0]++;
            x.left=dfs(node,d);
            x.right=dfs(node,d);
            return x;
        }
    }

(3) BFS 

    public class Codec {
    
        // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            if (root==null) return "";
            Queue<TreeNode> qu=new LinkedList<>();
            StringBuilder sb=new StringBuilder();
            qu.offer(root);
            sb.append(String.valueOf(root.val));
            sb.append(' ');
            while (!qu.isEmpty()) {
                TreeNode x=qu.poll();
                if (x.left==null) sb.append("null ");
                else {
                    qu.offer(x.left);
                    sb.append(String.valueOf(x.left.val));
                    sb.append(' ');
                }
                if (x.right==null) sb.append("null ");
                else {
                    qu.offer(x.right);
                    sb.append(String.valueOf(x.right.val));
                    sb.append(' ');
                }
            }
            return sb.toString();
        }
    
        // Decodes your encoded data to tree.
        public TreeNode deserialize(String data) {
            if (data.length()==0) return null;
            String[] node=data.split(" ");
            Queue<TreeNode> qu=new LinkedList<>();
            TreeNode root=new TreeNode(Integer.valueOf(node[0]));
            qu.offer(root);
            int i=1;
            while (!qu.isEmpty()) {
                Queue<TreeNode> nextQu=new LinkedList<>();
                while (!qu.isEmpty()) {
                    TreeNode x=qu.poll();
                    if (node[i].equals("null")) x.left=null;
                    else {
                        x.left=new TreeNode(Integer.valueOf(node[i]));
                        nextQu.offer(x.left);
                    }
                    i++;
                    if (node[i].equals("null")) x.right=null;
                    else {
                        x.right=new TreeNode(Integer.valueOf(node[i]));
                        nextQu.offer(x.right);
                    }
                    i++;
                }
                qu=nextQu;
            }
            return root;
        }
    }

----------------------------------------------------------------------------------------------------
Easy to understand java solution
     public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();    
        helperS(root, sb);
        return sb.toString();
    }
    
    private void helperS(TreeNode node, StringBuilder sb){
        if(node == null){
            sb.append("null").append(",");
            return;
        }
        
        sb.append(node.val).append(",");
        
        helperS(node.left, sb);
        helperS(node.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] vals  = data.split("[,]");
        int[]    index = new int[]{0};
        return helperD(vals, index);
    }
    
    private TreeNode helperD(String[] vals, int[] index){
        if(index[0] == vals.length){
            return null;
        }
        
        String visiting = vals[index[0]++];
        if(visiting.equals("null")){
            return null;
        }
        
        TreeNode node = new TreeNode(Integer.valueOf(visiting));
        node.left     = helperD(vals, index);
        node.right    = helperD(vals, index);
        
        return node;
    }

----------------------------------------------------------------------------------------------------
Short and clear recursive Java solution
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) 
    {
        if(root == null) return "#";
        
        return "" + root.val + " " + serialize(root.left) + " " + serialize(root.right);
    }
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) 
    {
        return build(new Scanner(data));
    }
    
    private TreeNode build(Scanner sc)
    {
        if(!sc.hasNext()) return null;
        String tk = sc.next();
        if(tk.equals("#")) return null;
        
        TreeNode root = new TreeNode(Integer.parseInt(tk));
        root.left = build(sc);
        root.right = build(sc);
        
        return root;
    }

----------------------------------------------------------------------------------------------------
C++ Accepted O(n) Easy Solution
Idea: Level-order traversal. Use '#' to denote a nullptr. User ',' to separate entries. The output is very similar to Leetcode's default deserialization logic.


--

Time Complexities: O(n) to serialize and O(n) to deserialize

Space Complexities: O(n) to serialize and O(n) to deserialize

--

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Codec {
    public:
    
        // Encodes a tree to a single string.
        string serialize(TreeNode* root) {
            queue<TreeNode*> q;
            q.push(root);
            string str;
            while (!q.empty()) {
                if (q.front() == nullptr) {
                    str = str + "#,";
                } else {
                    q.push(q.front()->left);
                    q.push(q.front()->right);
                    str = str + to_string(q.front()->val) + ",";
                }
                q.pop();
            }
            return str;
        }
    
        // Decodes your encoded data to tree.
        TreeNode* deserialize(string data) {
            TreeNode* root = nullptr;
            queue<TreeNode**> q;
            q.push(&root);
            string::iterator first = data.begin();
            while (first != data.end()) {
                TreeNode** pp = q.front();
                if (*first == '#') {
                    // *pp = nullptr;
                    advance(first, 2);
                } else {
                    string::iterator last = find(first, data.end(), ',');
                    int val = stoi(string(first, last));
                    *pp = new TreeNode(val);
                    q.push(&((*pp)->left));
                    q.push(&((*pp)->right));
                    first = next(last);
                }
                q.pop();
            }
            return root;
        }
    };
    
    // Your Codec object will be instantiated and called as such:
    // Codec codec;
    // codec.deserialize(codec.serialize(root));



----------------------------------------------------------------------------------------------------
My Simple Java Solution #Preorder-Traversal #Recursive #Simple Logic
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        serializeHelper(root,result);
        return result.toString();
    }
    
    private void serializeHelper(TreeNode root, ArrayList<Integer> result){
        if (root == null) {
            result.add(null);
            return;
        }
        result.add(root.val);
        serializeHelper(root.left,result);
        serializeHelper(root.right,result);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] strArray = data.substring(1,data.length()-1).split(", ");
        Deque<String> strList = new LinkedList<String>(Arrays.asList(strArray)); 
        return deserializeHelper(strList);
    }
    
    private TreeNode deserializeHelper(Deque<String> strList){
        if (strList.size() == 0) return null;
        String str = strList.pop();
        if (str.equals("null")) return null;
        TreeNode currentRoot = new TreeNode(Integer.parseInt(str));
        currentRoot.left = deserializeHelper(strList);
        currentRoot.right = deserializeHelper(strList);
        return currentRoot;
    }
}

----------------------------------------------------------------------------------------------------
Python preorder recursive traversal

    def serialize(self, root):
        preorder = ''
        if not root:
            preorder += ',None'
            return preorder
        preorder += ','+str(root.val)
        preorder += self.serialize(root.left)
        preorder += self.serialize(root.right)
        return preorder

    def deserialize(self, encode_data):
        pos = -1
        data = encode_data[1:].split(',')
        for i in xrange(len(data)):
            if data[i] == 'None':
                data[i] = None
            else:
                data[i] = int(data[i])
        root, count = self.buildTree(data, pos)
        return root
        
    def buildTree(self, data, pos):
        pos += 1
        if pos >= len(data) or data[pos]==None:
            return None, pos
            
        root = TreeNode(data[pos])
        root.left, pos = self.buildTree(data, pos)
        root.right, pos = self.buildTree(data, pos)
        return root, pos


----------------------------------------------------------------------------------------------------
C++ 36ms solution
The serialization format looks like:   1[2[3,],4[5,6[,7]]], O(n) one-pass processing for both ser/deser


    class Codec {
    private:
    	void serialize(TreeNode* root, stringstream& ss) {
    		if (root == nullptr) return;
    
    		ss << root->val;
    		if (root->left != nullptr || root->right != nullptr) {
    			ss << "[";
    			serialize(root->left, ss);
    			ss << ",";
    			serialize(root->right, ss);
    			ss << "]";
    		}
    	}
    
    	TreeNode* deserialize(string& data, int& pos) {
    		int n = data.size();
    		int i = pos;
    		bool foundL = false;
    
    		while (i < n) {
    			if (data[i] == ',' || data[i] == ']') break;
    
    			if (data[i] == '[') {
    				foundL = true;
    				break;
    			}
    
    			i++;
    		}
    
    		if (i == pos && i < n) return nullptr;
    
    		int val = atoi(data.substr(pos, i - pos).c_str());
    		auto node = new TreeNode(val);
    
    		if (i == n) return node;
    
    		pos = i;
    		if (foundL) {
    			// find a '['
    			pos++; // skip '['
    			node->left = deserialize(data, pos);
    			pos++; // skip ','
    			node->right = deserialize(data, pos);
    			pos++; // skip ']'
    		}
    
    		return node;
    	}
    
    public:    
    	// Encodes a tree to a single string.
    	string serialize(TreeNode* root) {
    		stringstream ss;
    		serialize(root, ss);
    		return ss.str();
    	}
    
    	// Decodes your encoded data to tree.
    	TreeNode* deserialize(string data) {
    		if (data.empty()) return nullptr;
    		int pos = 0;
    		return deserialize(data, pos);
    	}
    };

----------------------------------------------------------------------------------------------------
Java Solution with queue
Use two queues swap for binary traversal, for any null node, append "null". For deserialisation, split the string with space, again use queue to construct the tree. The code is as below:

    public class Codec {
    
        // Encodes a tree to a single string.
        public String serialize(TreeNode root) {
            // if(root==null) return "";
            StringBuilder sb = new StringBuilder();
            Queue<TreeNode> parent = new LinkedList<>();
            parent.offer(root);
            while(!parent.isEmpty()) {
                Queue<TreeNode> children = new LinkedList<>();
                while(!parent.isEmpty()) {
                    TreeNode node = parent.poll();
                    if(node!=null) {
                        sb.append(node.val);
                        children.offer(node.left);
                        children.offer(node.right);
                    } else {
                        sb.append("null");
                    }
                    sb.append(" ");
                }
                parent = children;
            }
            return sb.toString().trim();
        }
    
        // Decodes your encoded data to tree.
        public TreeNode deserialize(String data) {
            String[] strs = data.split(" ");
            Queue<TreeNode> parent = new LinkedList<>();
            TreeNode root = strs[0].equals("null") ? null : new TreeNode(Integer.valueOf(strs[0]));
            parent.offer(root);
            int i = 1;
            while(!parent.isEmpty()) {
                Queue<TreeNode> children = new LinkedList<>();
                while(!parent.isEmpty()) {
                    TreeNode node = parent.poll();
                    if(node!=null) {
                        if(i< strs.length && !strs[i].equals("null")){
                            node.left = new TreeNode(Integer.valueOf(strs[i++]));
                        } else {
                            i++;
                        }
                        if(i< strs.length && !strs[i].equals("null")){
                            node.right = new TreeNode(Integer.valueOf(strs[i++]));
                        } else {
                            i++;
                        }
                        children.offer(node.left);
                        children.offer(node.right);
                    }
                }
                parent = children;
            }
            return root;
        }
    }

----------------------------------------------------------------------------------------------------
Easy C# solution
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        if(root == null) return "null";
        return root.val + " " + serialize(root.left) + " " + serialize(root.right);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        List<TreeNode> list = new List<TreeNode>();
        
        if(data == "null") return null;
        
        string[] words = data.Split(' ');
        TreeNode root = new TreeNode(Convert.ToInt32(words[0]));
        list.Add(root);
        
        bool goLeft = true;
        for(int i=1;i<words.Count();++i)
        {
            if(words[i] == "null")
            {
                if(goLeft) goLeft = false;
                else list.RemoveAt(list.Count()-1);
            }
            else
            {
                TreeNode node = new TreeNode(Convert.ToInt32(words[i]));
                if(goLeft)
                {
                    list[list.Count()-1].left = node;
                }
                else
                {
                    list[list.Count()-1].right = node;
                    list.RemoveAt(list.Count()-1);
                }
                list.Add(node);
                goLeft = true;
            }
        }
        
        return root;
    }
}

----------------------------------------------------------------------------------------------------
Java Stack based solution using JSON
    public class Codec {
        public String serialize(TreeNode root) {
    		return root==null?"n":"[v:"+root.val+
    		    ",l:"+serialize(root.left)+",r:"+serialize(root.right)+"]";
        }
        public TreeNode deserialize(String data) {
        	Deque<String> stack = new LinkedList<String>();
        	Deque<TreeNode> nodeStack = new LinkedList<TreeNode>();
        	StringBuilder sb = new StringBuilder();
        	for (char c: data.toCharArray()){
        		if (c == '[' || c == ',' || c == ']'){
        			stack.push(sb.toString());
        			sb.setLength(0);
                    stack.push(String.valueOf(c));
                    if (c == ']'){
            			TreeNode t = new TreeNode(0);
            			String str = null;
            			while (!(str = stack.pop()).equals("["))
            				if (str.startsWith("v:"))
            					t.val = Integer.parseInt(str.substring(2));
            				else if (str.equals("l:"))
            					t.left = nodeStack.pop();
            				else if (str.equals("r:"))
            					t.right = nodeStack.pop();
            			nodeStack.push(t);
            		}
        		}
        		else
        			sb.append(c);
        	}
    		return nodeStack.isEmpty()?null:nodeStack.pop();
    	}
    }

----------------------------------------------------------------------------------------------------
Java runtime beats 99% of submissions
import java.util.StringTokenizer;
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(root, sb);
        return sb.toString();
    }
    
    private void serialize(TreeNode root, StringBuilder sb) {
        if (root == null)
            sb.append("# ");
        else {
            sb.append(root.val + " ");
            serialize(root.left, sb);
            serialize(root.right, sb);
        }
    }

    // ADD "import java.util.StringTokenizer;" AT TOP ==========================
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data == null || data.length() == 0) return null;
        StringTokenizer st = new StringTokenizer(data, " ");
        return deserialize(st);
    }
    
    private TreeNode deserialize(StringTokenizer st) {
        if (!st.hasMoreTokens())
            return null;
        String s = st.nextToken();
        if (s.equals("#"))
            return null;
        TreeNode root = new TreeNode(Integer.valueOf(s));
        root.left = deserialize(st);
        root.right = deserialize(st);
        
        return root;
    }
}

----------------------------------------------------------------------------------------------------
Leetcode way in C++ and Python
C++

    class Codec {
    public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        deque<TreeNode*> nodes{root};
        string ans="";
        while(!nodes.empty()){
            TreeNode* head=nodes.front();
            nodes.pop_front();
            if(head!=NULL){
                ans+= to_string(head->val)+" ";
                nodes.push_back(head->left);
                nodes.push_back(head->right);
            }
            else{
                ans+="null ";
            }
        }
        return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        istringstream in(data);
        vector<TreeNode *> nodes;
        string tmp;
        while(in>>tmp){
            if(tmp!="null"){
                nodes.push_back(new TreeNode(stoi(tmp)));
            }
            else{
                nodes.push_back(NULL);
            }
        }
        int pos=0, offset=1;
        while(offset < nodes.size()){
            if(nodes[pos]!=NULL){
                nodes[pos]->left=nodes[offset++];
                if(offset<nodes.size()) nodes[pos]->right=nodes[offset++];
            }
            pos+=1;
        }
        return nodes[0];
    }
    };

Python

    class Codec:
    def serialize(self, root):
        data = []
        node_queue = [root]
        start = 0
        while start < len(node_queue):
            node = node_queue[start]
            start += 1
            if node:
                data.append(str(node.val))
                node_queue.append(node.left)
                node_queue.append(node.right)
            else:
                data.append("null")
        # Remove the tail null node.
        while data and data[-1] == "null":
            del data[-1]
        return ",".join(data)

    def deserialize(self, data):
        if not data:
            return None

        # Get all the nodes.
        data_list = data.split(",")
        length = len(data_list)
        node_list = [0] * length
        for i in range(length):
            if data_list[i] == "null":
                node_list[i] = None
            else:
                node_list[i] = TreeNode(int(data_list[i]))

        # Build the tree.
        offset = 1
        cur_pos = 0
        while offset < length:
            if node_list[cur_pos]:
                node_list[cur_pos].left = node_list[offset]
                offset += 1
                if offset < length:
                    node_list[cur_pos].right = node_list[offset]
                    offset += 1
                else:
                    break
            else:
                pass
            cur_pos += 1

        return node_list[0]

----------------------------------------------------------------------------------------------------
Tuplify + json, Python
