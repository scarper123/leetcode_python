Accepted iterative solution in Java using stack.
Note that in this solution only right children are stored to stack.

    public List<Integer> preorderTraversal(TreeNode node) {
		List<Integer> list = new LinkedList<Integer>();
		Stack<TreeNode> rights = new Stack<TreeNode>();
		while(node != null) {
			list.add(node.val);
			if (node.right != null) {
				rights.push(node.right);
			}
			node = node.left;
			if (node == null && !rights.isEmpty()) {
				node = rights.pop();
			}
		}
        return list;
    }

----------------------------------------------------------------------------------------------------
Accepted code. Explaination with Algo.
 1. Create an empty stack, Push root node to the stack.
 2. Do following while stack is not empty.

 2.1. pop an item from the stack and print it.
 
 2.2. push the right child of popped item to stack.

 2.3. push the left child of popped item to stack.

 


>     class Solution {
>     public:
>         vector<int> preorderTraversal(TreeNode *root) {
>             stack<TreeNode*> nodeStack;
>             vector<int> result;
>             //base case
>             if(root==NULL)
>             return result;
>             nodeStack.push(root);
>             while(!nodeStack.empty())
>             {
>                 TreeNode* node= nodeStack.top();
>                 result.push_back(node->val);
>                 nodeStack.pop();
>                 if(node->right)
>                 nodeStack.push(node->right);
>                 if(node->left)
>                 nodeStack.push(node->left);
>             }
>             return result;
>             
>         }
>     };

----------------------------------------------------------------------------------------------------
3 Different Solutions
Recursive method with List as returning value:

    	public List<Integer> preorderTraversal(TreeNode root) {
    		List<Integer> pre = new LinkedList<Integer>();
    		if(root==null) return pre;
    		pre.add(root.val);
    		pre.addAll(preorderTraversal(root.left));
    		pre.addAll(preorderTraversal(root.right));
    		return pre;
    	}

Recursive method with Helper method to have a List as paramater, so we can modify the parameter and don't have to instantiate a new List at each recursive call:

    	public List<Integer> preorderTraversal(TreeNode root) {
    		List<Integer> pre = new LinkedList<Integer>();
    		preHelper(root,pre);
    		return pre;
    	}
    	public void preHelper(TreeNode root, List<Integer> pre) {
    		if(root==null) return;
    		pre.add(root.val);
    		preHelper(root.left,pre);
    		preHelper(root.right,pre);
    	}

Iterative method with Stack:

    	public List<Integer> preorderIt(TreeNode root) {
    		List<Integer> pre = new LinkedList<Integer>();
    		if(root==null) return pre;
    		Stack<TreeNode> tovisit = new Stack<TreeNode>();
    		tovisit.push(root);
    		while(!tovisit.empty()) {
    			TreeNode visiting = tovisit.pop();
    			pre.add(visiting.val);
    			if(visiting.right!=null) tovisit.push(visiting.right);
    			if(visiting.left!=null) tovisit.push(visiting.left);
    		}
    		return pre;
    	}

----------------------------------------------------------------------------------------------------
Easy C++ solution using Stack
    class Solution {
    public:
    vector<int> preorderTraversal(TreeNode *root) {
        if (root==NULL) {
            return vector<int>();
        }
        vector<int> result;
        stack<TreeNode *> treeStack;
        treeStack.push(root);
        while (!treeStack.empty()) {
            TreeNode *temp = treeStack.top();
            result.push_back(temp->val);
            treeStack.pop();
            if (temp->right!=NULL) {
                treeStack.push(temp->right);
            }
            if (temp->left!=NULL) {
                treeStack.push(temp->left);
            }
        }
        return result;
    }
    };


----------------------------------------------------------------------------------------------------
Very simple iterative Python solution
Classical usage of stack's LIFO feature, very easy to grasp:

    
    def preorderTraversal(self, root):
        ret = []
        stack = [root]
        while stack:
            node = stack.pop()
            if node:
                ret.append(node.val)
                stack.append(node.right)
                stack.append(node.left)
        return ret

----------------------------------------------------------------------------------------------------
4 solutions in c++
