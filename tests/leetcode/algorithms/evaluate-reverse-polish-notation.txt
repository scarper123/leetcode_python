Straight Forward Java Solution Using Backtracking
Try 1 through 9 for each cell. Details see comments inside code. Let me know your suggestions.

    public class Solution {
        public void solveSudoku(char[][] board) {
            if(board == null || board.length == 0)
                return;
            solve(board);
        }
        
        public boolean solve(char[][] board){
            for(int i = 0; i < board.length; i++){
                for(int j = 0; j < board[0].length; j++){
                    if(board[i][j] == '.'){
                        for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9 for each cell
                            if(isValid(board, i, j, c)){
                                board[i][j] = c; //Put c for this cell
                                
                                if(solve(board))
                                    return true; //If it's the solution return true
                                else
                                    board[i][j] = '.'; //Otherwise go back
                            }
                        }
                        return false;
                    }
                }
            }
            return true;
        }
        
        public boolean isValid(char[][] board, int i, int j, char c){
            //Check colum
            for(int row = 0; row < 9; row++)
                if(board[row][j] == c)
                    return false;
                    
            //Check row
            for(int col = 0; col < 9; col++)
                if(board[i][col] == c)
                    return false;
                    
            //Check 3 x 3 block
            for(int row = (i / 3) * 3; row < (i / 3) * 3 + 3; row++)
                for(int col = (j / 3) * 3; col < (j / 3) * 3 + 3; col++)
                    if(board[row][col] == c)
                        return false;
            return true;
        }
    }

----------------------------------------------------------------------------------------------------
Sharing my 2ms C++ solution with comments and explanations.
Update: there's a [follow-up 0ms solution which is even more optimized][1]

This is one of the fastest Sudoku solvers I've ever written. It is compact enough - just 150 lines of C++ code with comments. I thought it'd be interesting to share it, since it combines several techniques like reactive network update propagation and backtracking with very aggressive pruning.

The algorithm is online - it starts with an empty board and as you add numbers to it, it starts solving the Sudoku.

Unlike in other solutions where you have bitmasks of allowed/disallowed values per row/column/square, this solution track bitmask for every(!) cell, forming a set of constraints for the allowed values for each particular cell. Once a value is written into a cell, new constraints are immediately propagated to row, column and 3x3 square of the cell. If during this process a value of other cell can be unambiguously deduced - then the value is set, new constraints are propagated, so on.... You can think about this as an implicit reactive network of cells.

If we're lucky (and we'll be lucky for 19 of 20 of Sudokus published in magazines) then Sudoku is solved at the end (or even before!) processing of the input.

Otherwise, there will be empty cells which have to be resolved. Algorithm uses backtracking for this purpose. To optimize it, algorithm starts with the cell with the smallest ambiguity. This could be improved even further by using priority queue (but it's not implemented here). Backtracking is more or less standard, however, at each step we guess the number, the reactive update propagation comes back into play and it either quickly proves that the guess is unfeasible or significantly prunes the remaining search space.

It's interesting to note, that in this case taking and restoring snapshots of the compact representation of the state is faster than doing backtracking rollback by "undoing the moves".

    class Solution {
    	struct cell // encapsulates a single cell on a Sudoku board
    	{
    		uint8_t value; // cell value 1..9 or 0 if unset
    		// number of possible (unconstrained) values for the cell
    		uint8_t numPossibilities;
    		// if bitset[v] is 1 then value can't be v
    		bitset<10> constraints;
    		cell() : value(0), numPossibilities(9),constraints() {};
    	};
    	array<array<cell,9>,9> cells;
    
    	// sets the value of the cell to [v]
    	// the function also propagates constraints to other cells and deduce new values where possible
    	bool set(int i, int j, int v)
    	{ 
    		// updating state of the cell
    		cell& c = cells[i][j];
    		if (c.value == v)
    			return true;
    		if (c.constraints[v])
    			return false;
    		c.constraints = bitset<10>(0x3FE); // all 1s
    		c.constraints.reset(v);
    		c.numPossibilities = 1;
    		c.value = v;
    
    		// propagating constraints
    		for (int k = 0; k<9; k++) {
    			// to the row: 
    			if (i != k && !updateConstraints(k, j, v))
    				return false;
    			// to the column:
    			if (j != k && !updateConstraints(i, k, v))
    				return false;
    			// to the 3x3 square:
    			int ix = (i / 3) * 3 + k / 3;
    			int jx = (j / 3) * 3 + k % 3;
    			if (ix != i && jx != j && !updateConstraints(ix, jx, v))
    				return false;
    		}
    		return true;
    	}
    	// update constraints of the cell i,j by excluding possibility of 'excludedValue'
    	// once there's one possibility left the function recurses back into set()
    	bool updateConstraints(int i, int j, int excludedValue)
    	{
    		cell& c = cells[i][j];
    		if (c.constraints[excludedValue]) {
    			return true;
    		}
    		if (c.value == excludedValue) {
    			return false;
    		}
    		c.constraints.set(excludedValue);
    		if (--c.numPossibilities > 1)
    			return true;
    		for (int v = 1; v <= 9; v++) {
    			if (!c.constraints[v]) {
    				return set(i, j, v);
    			}
    		}
    		assert(false);
    	}
    
    	// backtracking state - list of empty cells
    	vector<pair<int, int>> bt;
    
    	// find values for empty cells
    	bool findValuesForEmptyCells()
    	{
    		// collecting all empty cells
    		bt.clear();
    		for (int i = 0; i < 9; i++) {
    			for (int j = 0; j < 9; j++) {
    				if (!cells[i][j].value)
    					bt.push_back(make_pair(i, j));
    			}
    		}
    		// making backtracking efficient by pre-sorting empty cells by numPossibilities
    		sort(bt.begin(), bt.end(), [this](const pair<int, int>&a, const pair<int, int>&b) {
    			return cells[a.first][a.second].numPossibilities < cells[b.first][b.second].numPossibilities; });
    		return backtrack(0);
    	}
    
    	// Finds value for all empty cells with index >=k
    	bool backtrack(int k)
    	{
    		if (k >= bt.size())
    			return true;
    		int i = bt[k].first;
    		int j = bt[k].second;
    		// fast path - only 1 possibility
    		if (cells[i][j].value)
    			return backtrack(k + 1);
    		auto constraints = cells[i][j].constraints;
    		// slow path >1 possibility.
    		// making snapshot of the state
    		array<array<cell,9>,9> snapshot(cells);
    		for (int v = 1; v <= 9; v++) {
    			if (!constraints[v]) {
    				if (set(i, j, v)) {
    					if (backtrack(k + 1))
    						return true;
    				}
    				// restoring from snapshot,
    				// note: computationally this is cheaper
    				// than alternative implementation with undoing the changes
    				cells = snapshot;
    			}
    		}
    		return false;
    	}
    public:
    	void solveSudoku(vector<vector<char>> &board) {
    		cells = array<array<cell,9>,9>(); // clear array
    		// Decoding input board into the internal cell matrix.
    		// As we do it - constraints are propagated and even additional values are set as we go
    		// (in the case if it is possible to unambiguously deduce them).
    		for (int i = 0; i < 9; i++)
    		{
    			for (int j = 0; j < 9; j++) {
    				if (board[i][j] != '.' && !set(i, j, board[i][j] - '0'))
    					return; // sudoku is either incorrect or unsolvable
    			}
    		}
    		// if we're lucky we've already got a solution,
    		// however, if we have empty cells we need to use backtracking to fill them
    		if (!findValuesForEmptyCells())
    			return; // sudoku is unsolvable
    
    		// copying the solution back to the board
    		for (int i = 0; i < 9; i++)
    		{
    			for (int j = 0; j < 9; j++) {
    				if (cells[i][j].value)
    					board[i][j] = cells[i][j].value + '0';
    			}
    		}
    	}
    };


  [1]: https://leetcode.com/discuss/59649/yet-another-0ms-c-solution

----------------------------------------------------------------------------------------------------
Singapore prime minister Lee Hsien Loong&#x27;s Sudoku Solver code runs in 1ms
Singapore's prime minister [Lee Hsien Loong][1] showcased his Sudoku Solver C code. You can read his original Facebook post [here][2] and another news reporting it [here][3].

I have made some slight modification to adapt it so it can be [tested on LeetCode OJ][4]. It passed all 6/6 test cases with a runtime of **1 ms**. Pretty impressive for a prime minister, huh?

    // Original author: Hsien Loong Lee (http://bit.ly/1zfIGMc)
    // Slight modification by @1337c0d3r to adapt to run on LeetCode OJ.
    // https://leetcode.com/problems/sudoku-solver/
    int InBlock[81], InRow[81], InCol[81];
    
    const int BLANK = 0;
    const int ONES = 0x3fe; 	// Binary 1111111110
    
    int Entry[81];	// Records entries 1-9 in the grid, as the corresponding bit set to 1
    int Block[9], Row[9], Col[9];	// Each int is a 9-bit array
    
    int SeqPtr = 0;
    int Sequence[81];
    
    
    
    void SwapSeqEntries(int S1, int S2)
    {
         int temp = Sequence[S2];
         Sequence[S2] = Sequence[S1];
         Sequence[S1] = temp;
    }
    
    
    void InitEntry(int i, int j, int val)
    {
    	 int Square = 9 * i + j;
    	 int valbit = 1 << val;
         int SeqPtr2;
    
         // add suitable checks for data consistency
         
    	 Entry[Square] = valbit;
    	 Block[InBlock[Square]] &= ~valbit;
    	 Col[InCol[Square]] &= ~valbit; // Simpler Col[j] &= ~valbit;
    	 Row[InRow[Square]] &= ~valbit; // Simpler Row[i] &= ~valbit;
    
         SeqPtr2 = SeqPtr;
         while (SeqPtr2 < 81 && Sequence[SeqPtr2] != Square)
               SeqPtr2++ ;
    
         SwapSeqEntries(SeqPtr, SeqPtr2);
         SeqPtr++;
    }
    
    
    void PrintArray(char **board)
    {
         int i, j, valbit, val, Square;
         char ch;
         
         Square = 0;
    
         for (i = 0; i < 9; i++) {
             for (j = 0; j < 9; j++) {
                 valbit = Entry[Square++];
                 if (valbit == 0) ch = '-';
                 else {
                     for (val = 1; val <= 9; val++) 
                         if (valbit == (1 << val)) {
                            ch = '0' + val;
                            break;
                         }
                 }    
                 board[i][j] = ch;
             }
         }
    }
    
    
    int NextSeq(int S)
    {
        int S2, Square, Possibles, BitCount;
        int T, MinBitCount = 100;
    
        for (T = S; T < 81; T++) {
            Square = Sequence[T];
            Possibles = Block[InBlock[Square]] & Row[InRow[Square]] & Col[InCol[Square]];
            BitCount = 0;
            while (Possibles) {
               Possibles &= ~(Possibles & -Possibles);
               BitCount++;
            }
    
            if (BitCount < MinBitCount) {
               MinBitCount = BitCount;
               S2 = T;
            }
        }
    
        return S2;
    }
    
    
    void Place(int S, char** board)
    {
        if (S >= 81) {
            PrintArray(board);
            return;
        }
    
        int S2 = NextSeq(S);
        SwapSeqEntries(S, S2);
    
        int Square = Sequence[S];
    
        int 	BlockIndex = InBlock[Square],
    			RowIndex = InRow[Square],
    			ColIndex = InCol[Square];
    
        int 	Possibles = Block[BlockIndex] & Row[RowIndex] & Col[ColIndex];
        while (Possibles) {
              int valbit = Possibles & (-Possibles); // Lowest 1 bit in Possibles
              Possibles &= ~valbit;
              Entry[Square] = valbit;
              Block[BlockIndex] &= ~valbit;
              Row[RowIndex] &= ~valbit;
              Col[ColIndex] &= ~valbit;
    				
              Place(S + 1, board);
    
              Entry[Square] = BLANK; // Could be moved out of the loop
              Block[BlockIndex] |= valbit;
              Row[RowIndex] |= valbit;
              Col[ColIndex] |= valbit;
    	}
    
        SwapSeqEntries(S, S2);
    }
    
    void solveSudoku(char **board, int m, int n) {
        SeqPtr = 0;
        int i, j, Square;
    
    	for (i = 0; i < 9; i++)
    		for (j = 0; j < 9; j++) {
    			Square = 9 * i + j;
    			InRow[Square] = i;
    			InCol[Square] = j;
    			InBlock[Square] = (i / 3) * 3 + ( j / 3);
    		}
    
    
    	for (Square = 0; Square < 81; Square++) {
            Sequence[Square] = Square;
    		Entry[Square] = BLANK;
        }
        
    	for (i = 0; i < 9; i++) 
    		Block[i] = Row[i] = Col[i] = ONES;
        
        for (int i = 0; i < 9; ++i)
           for (int j = 0; j < 9; ++j) {
               if ('.' != board[i][j])
                    InitEntry(i, j, board[i][j] - '0');
           }
           
        Place(SeqPtr, board);
    }


  [1]: http://en.wikipedia.org/wiki/Lee_Hsien_Loong
  [2]: https://www.facebook.com/leehsienloong/photos/a.344710778924968.83425.125845680811480/905828379479869/?type=3&permPage=1
  [3]: http://arstechnica.com/information-technology/2015/05/04/prime-minister-of-singapore-shares-his-c-code-for-sudoku-solver/
  [4]: https://leetcode.com/problems/sudoku-solver/

----------------------------------------------------------------------------------------------------
Simple and Clean Solution &#x2F; C++

    bool check(vector<vector<char>> &board, int i, int j, char val)
    {
        int row = i - i%3, column = j - j%3;
        for(int x=0; x<9; x++) if(board[x][j] == val) return false;
        for(int y=0; y<9; y++) if(board[i][y] == val) return false;
        for(int x=0; x<3; x++)
        for(int y=0; y<3; y++)
            if(board[row+x][column+y] == val) return false;
        return true;
    }
    bool solveSudoku(vector<vector<char>> &board, int i, int j)
    {
        if(i==9) return true;
        if(j==9) return solveSudoku(board, i+1, 0);
        if(board[i][j] != '.') return solveSudoku(board, i, j+1);

        for(char c='1'; c<='9'; c++)
        {
            if(check(board, i, j, c))
            {
                board[i][j] = c;
                if(solveSudoku(board, i, j+1)) return true;
                board[i][j] = '.';
            }
        }
            
        return false;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        solveSudoku(board, 0, 0);
    }


----------------------------------------------------------------------------------------------------
A simple DFS solution


    class Solution {
    public:
    	bool isValidSudoku(vector<vector<char> > &board) {
    		return true;
    	}
    	void solveSudoku(vector<vector<char> > &board) {
    		util(board, 0);
    	}
    	bool util(vector<vector<char>>& board, int pos)
    	{
    		if (pos >= 81)
    			return true;
    		int i = pos / 9;
    		int j = pos % 9;
    		if (board[i][j] != '.')
    			return util(board, pos + 1);
    		else
    		{
    			for (char c = '1'; c <= '9'; c++)
    			{
    				if (!isInRow(board, i,c) && !isInCol(board, j, c) && !isInRec(board, i, j, c))
    				{
    					board[i][j] = c;
    					if (util(board, pos + 1))
    						return true;
    					else
    						board[i][j] = '.';
    				}
    			}
    			return false;
    		}
    	}
    
    	bool isInRow(vector<vector<char>>& board, int i, char c)
    	{
    		vector<char>& row = board[i];
    		for (int k = 0; k < 9; k++)
    		{
    			if (row[k] == c)
    				return true;
    		}
    		return false;
    	}
    	bool isInCol(vector<vector<char>>& board,int j, char c)
    	{
    		for (int k = 0; k < 9; k++)
    		{
    			if (board[k][j] == c)
    				return true;
    		}
    		return false;
    	}
    	bool isInRec(vector<vector<char>>& board, int i, int j, char c)
    	{
    		int bigrow = i / 3, bigcol = j / 3;
    		for (int m = 3 * bigrow; m < 3 * (bigrow + 1); m++)
    		{
    			for (int n = 3 * bigcol; n < 3 * (bigcol + 1); n++)
    				if (board[m][n] == c)
    					return true;
    		}
    		return false;
    	}
    };

----------------------------------------------------------------------------------------------------
C++ clear solution using dfs, beating 90% c++ coder.
    class Solution {
    public:
        bool col[10][10],row[10][10],f[10][10];
        bool flag = false;
        void solveSudoku(vector<vector<char>>& board) {
             memset(col,false,sizeof(col));
             memset(row,false,sizeof(row));
             memset(f,false,sizeof(f));
             for(int i = 0; i < 9;i++){
                 for(int j = 0; j < 9;j++){
                     if(board[i][j] == '.')   continue;
                     int temp = 3*(i/3)+j/3;
                     int num = board[i][j]-'0';
                     col[j][num] = row[i][num] = f[temp][num] = true;
                 }
             }
             dfs(board,0,0);
        }
        void dfs(vector<vector<char>>& board,int i,int j){
            if(flag == true)  return ;
            if(i >= 9){
                flag = true;
                return ;
            }
            if(board[i][j] != '.'){
                 if(j < 8)  dfs(board,i,j+1);
                 else dfs(board,i+1,0);
                 if(flag)  return;
            }
            
            else{
                int temp = 3*(i/3)+j/3;
                for(int n = 1; n <= 9; n++){
                    if(!col[j][n] && !row[i][n] && !f[temp][n]){
                        board[i][j] = n + '0';
                        col[j][n] = row[i][n] = f[temp][n] = true;
                        if(j < 8)  dfs(board,i,j+1);
                        else dfs(board,i+1,0);
                        col[j][n] = row[i][n] = f[temp][n] = false;
                        if(flag)  return;
                    }
                }
                board[i][j] = '.';
            }
        }
    };

----------------------------------------------------------------------------------------------------
48ms straitforward python DFS solution with explanations
It's similar to how human solve Sudoku. <br>
1. create a hash table (dictionary) `val` to store possible values in every location.<br>
2. Each time, start from the location with fewest possible values, choose one value from it and then update the board and possible values at other locations. If this update is valid, keep solving (DFS). If this update is invalid (leaving zero possible values at some locations) or this value doesn't lead to the solution, undo the updates and then choose the next value. <br>

Since we calculated `val` at the beginning and start filling the board from the location with fewest possible values, the amount of calculation and thus the runtime can be significantly reduced: <br><br>
The run time is 48-68 ms on LeetCode OJ, which seems to be among the fastest python solutions here.<br><br>
The `PossibleVals` function may be further simplified/optimized, but it works just fine for now. (it would look less lengthy if we are allowed to use numpy array for the board lol). <br>

<br>

    def solveSudoku(self, board):
        self.board = board
        self.val = self.PossibleVals()
        self.Solver()

    def PossibleVals(self):
        a = "123456789"
        d, val = {}, {}
        for i in xrange(9):
            for j in xrange(9):
                ele = self.board[i][j]
                if ele != ".":
                    d[("r", i)] = d.get(("r", i), []) + [ele]
                    d[("c", j)] = d.get(("c", j), []) + [ele]
                    d[(i//3, j//3)] = d.get((i//3, j//3), []) + [ele]
                else:
                    val[(i,j)] = []
        for (i,j) in val.keys():
            inval = d.get(("r",i),[])+d.get(("c",j),[])+d.get((i/3,j/3),[])
            val[(i,j)] = [n for n in a if n not in inval ]
        return val

    def Solver(self):
        if len(self.val)==0:
            return True
        kee = min(self.val.keys(), key=lambda x: len(self.val[x]))
        nums = self.val[kee]
        for n in nums:
            update = {kee:self.val[kee]}
            if self.ValidOne(n, kee, update): # valid choice
                if self.Solver(): # keep solving
                    return True
            self.undo(kee, update) # invalid choice or didn't solve it => undo
        return False
        
    def ValidOne(self, n, kee, update):
        self.board[kee[0]][kee[1]] = n
        del self.val[kee]
        i, j = kee
        for ind in self.val.keys():
            if n in self.val[ind]:
                if ind[0]==i or ind[1]==j or (ind[0]/3,ind[1]/3)==(i/3,j/3):
                    update[ind] = n
                    self.val[ind].remove(n)
                    if len(self.val[ind])==0:
                        return False
        return True

    def undo(self, kee, update):
        self.board[kee[0]][kee[1]]="."
        for k in update:            
            if k not in self.val:
                self.val[k]= update[k]
            else:
                self.val[k].append(update[k])
        return None

----------------------------------------------------------------------------------------------------
There is a Dancing Links X Algorithm
