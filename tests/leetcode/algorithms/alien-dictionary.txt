Java implementation using DP in two ways
    public class Solution {
        public boolean wordBreak(String s, Set<String> dict) {
            
            boolean[] f = new boolean[s.length() + 1];
            
            f[0] = true;
            
            
            /* First DP
            for(int i = 1; i <= s.length(); i++){
                for(String str: dict){
                    if(str.length() <= i){
                        if(f[i - str.length()]){
                            if(s.substring(i-str.length(), i).equals(str)){
                                f[i] = true;
                                break;
                            }
                        }
                    }
                }
            }*/
            
            //Second DP
            for(int i=1; i <= s.length(); i++){
                for(int j=0; j < i; j++){
                    if(f[j] && dict.contains(s.substring(j, i))){
                        f[i] = true;
                        break;
                    }
                }
            }
            
            return f[s.length()];
        }
    }

----------------------------------------------------------------------------------------------------
C++ Dynamic Programming simple and fast solution (4ms) with optimization
We use a boolean vector dp[]. dp[***i***] is set to true if a valid word (word sequence) ends there. The optimization is to look from current position ***i*** back and only substring and do dictionary look up in case the preceding position ***j*** with *dp[**j**] == true* is found.

    bool wordBreak(string s, unordered_set<string> &dict) {
            if(dict.size()==0) return false;
            
            vector<bool> dp(s.size()+1,false);
            dp[0]=true;
            
            for(int i=1;i<=s.size();i++)
            {
                for(int j=i-1;j>=0;j--)
                {
                    if(dp[j])
                    {
                        string word = s.substr(j,i-j);
                        if(dict.find(word)!= dict.end())
                        {
                            dp[i]=true;
                            break; //next i
                        }
                    }
                }
            }
            
            return dp[s.size()];
        }

----------------------------------------------------------------------------------------------------
A solution using BFS
People have posted elegant solutions using DP. The solution I post below using BFS is no better than those. Just to share some new thoughts.

We can use a graph to represent the possible solutions. The vertices of the graph are simply the positions of the first characters of the words and each edge actually represents a word. For example, the input string is "nightmare", there are two ways to break it, "night mare" and "nightmare". The graph would be

0-->5-->9

|__ __ _^

The question is simply to check if there is a path from 0 to 9. The most efficient way is traversing the graph using BFS with the help of a queue and a hash set. The hash set is used to keep track of the visited nodes to avoid repeating the same work. 

For this problem, the time complexity is O(n^2) and space complexity is O(n), the same with DP. This idea can be used to solve the problem word break II. We can simple construct the graph using BFS, save it into a map and then find all the paths using DFS. 

    bool wordBreak(string s, unordered_set<string> &dict) {
        // BFS
        queue<int> BFS;
        unordered_set<int> visited;
        
        BFS.push(0);
        while(BFS.size() > 0)
        {
            int start = BFS.front();
            BFS.pop();
            if(visited.find(start) == visited.end())
            {
                visited.insert(start);
                for(int j=start; j<s.size(); j++)
                {
                    string word(s, start, j-start+1);
                    if(dict.find(word) != dict.end())
                    {
                        BFS.push(j+1);
                        if(j+1 == s.size())
                            return true;
                    }
                }
            }
        }
        
        return false;
    }

----------------------------------------------------------------------------------------------------
Simple DP solution in Python with description
The idea is the following:

- d is an array that contains booleans

- d[i] is True if there is a word in the dictionary that *ends* at ith index of s AND d is also True at the beginning of the word


Example:

- s = "leetcode"

- words = ["leet", "code"]

- d[3] is True because there is "leet" in the dictionary that ends at 3rd index of "leetcode"

- d[7] is True because there is "code" in the dictionary that ends at the 7th index of "leetcode" AND d[3] is True

The result is the last index of d.

    def word_break(s, words):
     	d = [False] * len(s)    
     	for i in range(len(s)):
     		for w in words:
     			if w == s[i-len(w)+1:i+1] and (d[i-len(w)] or i-len(w) == -1):
     				d[i] = True
     	return d[-1]



----------------------------------------------------------------------------------------------------
4 lines in Python
`ok[i]` tells whether `s[:i]` can be built.

    def wordBreak(self, s, words):
        ok = [True]
        for i in range(1, len(s)+1):
            ok += any(ok[j] and s[j:i] in words for j in range(i)),
        return ok[-1]

----------------------------------------------------------------------------------------------------
Accepted Java Solution
    public class Solution {
        public boolean wordBreak(String s, Set<String> dict) {
            boolean [] breakable = new boolean[s.length()+1];
            breakable[0] = true;
    
            for(int i=1;i<=s.length();i++){
                for(int j=0;j<i;j++){
                    if(breakable[j]&&dict.contains(s.substring(j,i))){
                        breakable[i] = true;
                        break;
                    }
                }
            }
            return breakable[s.length()];
        }
    }

----------------------------------------------------------------------------------------------------
A concise Java solution. (11-line in wordBreak function)
    public class Solution {
        
        public boolean wordBreak(String s, Set<String> wordDict) {
            int len = s.length();
            boolean[] f = new boolean[len+1];
            f[0] = true;
            for (int i=1; i<len+1; i++)
                for (int j=0; j<i; j++)
                    if (f[j] && wordDict.contains(s.substring(j,i)))
                    {
                        f[i] = true;
                        break;
                    }
            return f[len];
        }
    }

----------------------------------------------------------------------------------------------------
Java DP solution
    public boolean wordBreak(String s, Set<String> dict) {
      if (s == null || s.length() == 0) return false;
      
      int n = s.length();
      
      // dp[i] represents whether s[0...i] can be formed by dict
      boolean[] dp = new boolean[n];
      
      for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
          String sub = s.substring(j, i + 1);
          
          if (dict.contains(sub) && (j == 0 || dp[j - 1])) {
            dp[i] = true;
            break;
          }
        }
      }
      
      return dp[n - 1];
    }

----------------------------------------------------------------------------------------------------
DFS with Path Memorizing Java Solution
I write this method by what I learned from @[mahdy][1] in his post [Decode Ways][2]

Use a set to record all position that cannot find a match in dict. That cuts down the run time of DFS to O(n^2)

    public class Solution {
        public boolean wordBreak(String s, Set<String> dict) {
            // DFS
            Set<Integer> set = new HashSet<Integer>();
            return dfs(s, 0, dict, set);
        }
        
        private boolean dfs(String s, int index, Set<String> dict, Set<Integer> set){
            // base case
            if(index == s.length()) return true;
            // check memory
            if(set.contains(index)) return false;
            // recursion
            for(int i = index+1;i <= s.length();i++){
                String t = s.substring(index, i);
                if(dict.contains(t))
                    if(dfs(s, i, dict, set))
                        return true;
                    else
                        set.add(i);
            }
            set.add(index);
            return false;
        }
    }


  [1]: https://oj.leetcode.com/discuss/user/mahdy
  [2]: https://oj.leetcode.com/discuss/23872/sharing-my-java-memoized-solution

----------------------------------------------------------------------------------------------------
Java solution using DP
    public boolean wordBreak(String s, Set<String> wordDict) {
        if (s == null && wordDict == null)
            return true;
        if (s == null || wordDict == null)
            return false;
        //dp[i] represents if s.substring(0, i) is wordbreakable.
        boolean[] dp = new boolean[s.length()+1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }

----------------------------------------------------------------------------------------------------
My Java DP solution beats 93.83%
    public boolean wordBreak(String s, Set<String> wordDict) {
        int maxWord = getMax(wordDict);
        int len = s.length();
        boolean[] dp = new boolean[len + 1];
        dp[0] = true;
        for (int i = 1; i <= len; i ++) {
            int start = Math.max(1, i - maxWord);
            for (int j = start; j <= i; j++) {
                if (dp[j - 1] && wordDict.contains(s.substring(j - 1, i))) {
                    dp[i] = true; 
                    break;
                }
            }
        }
        return dp[len];
    }
    
    private int getMax(Set<String> wordDict) {
        int max = 0;
        for (String str : wordDict) {
            max = Math.max(max, str.length());
        }
        return max;
    }

----------------------------------------------------------------------------------------------------
Evolve from brute force to optimal, a review of all solutions
    bool wordBreak(string s, unordered_set<string>& wordDict) {
        queue<int> q({0});
        unordered_set<int> vstd;
        int n = s.size();
        while(!q.empty()) {
            int start = q.front();
            q.pop();
            if(vstd.count(start)) continue;
            vstd.insert(start);
            string sub;
            for(int i=start;i<n;i++) 
                if(wordDict.count(sub+=s[i])) {
                    q.push(i+1);
                    if(i+1 == n) return 1;    
                }
        }
        return 0;    
    }


----------------------------------------------------------------------------------------------------
A Java solution with similar DP idea
The idea is pretty similar to other DP solution. 
1)keep all positions which could form substring contained in the set in a linkedlist
2) Iterate the target string, check  substring between current position and stored positions. If new sub string hits the dictionary,add it the front of linkedlist
3)After iteration, check if the front element of linkedlist equals to the length of string.

It consumes 296ms

This solution is still a time O(n^2) and space O(n) one. It is better if dictionary contains long words. 

  

    public class Solution {
        public boolean wordBreak(String s, Set<String> dict) {
            if (s==null||s.length()==0) return false;
            else if (dict.contains(s)) return true;
            
            List<Integer> starts = new LinkedList<Integer>();
            starts.add(0);
           
            for (int end=1;end<=s.length();end++){
            	boolean found=false;
                for (Integer start:starts)
                    if (dict.contains(s.substring(start,end))){
                    	found=true;
                    	break;
                    }
                if(found)  starts.add(0,end);
            }
    
            return (starts.get(0)==s.length());
        }
    }

 

----------------------------------------------------------------------------------------------------
A Simple Python DP solution
    class Solution(object):
        def wordBreak(self, s, wordDict):
            """
            :type s: str
            :type wordDict: Set[str]
            :rtype: bool
            """
            dp = [False] * (len(s) + 1) # dp[i] means s[:i+1] can be segmented into words in the wordDicts 
            dp[0] = True
            for i in range(len(s)):
                for j in range(i, len(s)):
                    if dp[i] and s[i: j+1] in wordDict:
                        dp[j+1] = True
                        
            return dp[-1]

----------------------------------------------------------------------------------------------------
Easy to understand C++ Solution
Using a vector to record if it is possible to have a combination of dictionary of words at point i.

    class Solution {
    public:
        bool wordBreak(string s, unordered_set<string>& wordDict) {
            s = "!" + s;
            vector<bool> dpArray(s.size());
            dpArray[0] = true;
            for(int i=0; i<s.size(); i++){
                for(int j=i+1; j<s.size(); j++) {
                    if(dpArray[j]) continue;
                    if(wordDict.find(s.substr(i+1, j-i))!=wordDict.end() && dpArray[i])
                        dpArray[j] = true;
                }
            }
            return dpArray[dpArray.size()-1];
        }
    };

----------------------------------------------------------------------------------------------------
DP using C++ (4ms)
    class Solution {
    public:
    bool wordBreak(string s, unordered_set<string>& wordDict) {
        int m = s.length();
        
        bool *dp = new bool[m+1];
        for(int i = 0; i <= m; i ++) dp[i] = false;
        
        dp[0] = true;
        for(int i = 1; i <= m; i ++){
            for(int j = 1; j <= i; j ++){
                string tmp = s.substr(i - j, j);
                if(wordDict.find(tmp) != wordDict.end()){
                    dp[i] = dp[i-j];
                    if(dp[i]) break;
                }
            }
        }
        bool res = dp[m];
        delete [] dp;
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Easy to understand 2ms java solution using dp
    public boolean wordBreak(String s, Set<String> wordDict) 
    {
        int n = s.length();
        boolean[] canBreak = new boolean[1 + n];
        canBreak[n] = true;
        
        for(int i = n - 1; i >= 0; --i)
        {
            for(int j = i + 1; j <= n; ++j)
            {
                if(canBreak[j] && wordDict.contains(s.substring(i, j)))
                {
                    canBreak[i] = true;
                    break;
                }
            }
        }
        
        return canBreak[0];
    }


----------------------------------------------------------------------------------------------------
Python code, DP
    class Solution:
        # @param s, a string
        # @param dict, a set of string
        # @return a boolean
    
                
        def wordBreak(self, s, dict):
            if s == '':
                return True
            checklist = [False]*(len(s)+1)
            checklist[len(s)] = True
            for i in range(len(s)-1,-1,-1):
                for j in range(i,len(s)):
                    if s[i:j+1] in dict and checklist[j+1]==True:
                        checklist[i]=True
            return checklist[0]

----------------------------------------------------------------------------------------------------
3ms   DP solution
    class Solution {
    public:
       
       bool wordBreak(string s, unordered_set<string> &dict) {
                bool *table = new bool[s.size()];
            for(int i = 0; i < s.size(); i++)
                table[i] = false;
            int i = 0;
            for(i = 0; i < s.size(); i++) {
                if(dict.find(s.substr(0,i+1)) != dict.end()) {
                    table[i] = true;
                    continue;
                }
                for(int j = i; j > 0; j--) {
              
                    if(table[j-1] && dict.find(s.substr(j,i-j+1)) != dict.end()) {
                        table[i] = true;
                        break;
                    }
                }
            }
            return table[i-1];
           
        }
    };

----------------------------------------------------------------------------------------------------
Dynamic Programming Java solution
public class Solution {

  public boolean wordBreak(String s, Set<String> dict) {
 
       if(s.length() == 0){
           return true;
       }
       if(dict == null){
           return false;
       }    
        
        
        int n = s.length();
        boolean[] d = new boolean[n+1];
        d[0] = true;
        for(int m = 1; m < n; m++){
            d[m] = false;
        }
        
       
        
        for(int i = 1; i < n+1; i++){
            for(int j = 0; j < i; j ++){
                if(d[j] && dict.contains(s.substring(j, i))){
                    d[i] = true;
                    break;
                }
            }
        }
        
        
        return d[n];
    }
}

----------------------------------------------------------------------------------------------------
