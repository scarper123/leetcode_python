Five line Java solution with recursion
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null) return true;
        if(p == null || q == null) return false;
        if(p.val == q.val)
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        return false;
    }

----------------------------------------------------------------------------------------------------
Here&#x27;s a C++ recursion solution in minimal lines of code
    //
    // Algorithm for the recursion:
    // 1)
    // If one of the node is NULL then return the equality result of p an q.
    // This boils down to if both are NULL then return true, 
    // but if one of them is NULL but not the other one then return false
    // 2)
    // At this point both root nodes represent valid pointers.
    // Return true if the root nodes have same value and 
    // the left tree of the roots are same (recursion)
    // and the right tree of the roots are same (recursion). 
    // Otherwise return false. 
    //
    
    bool isSameTree(TreeNode *p, TreeNode *q) {
        if (p == NULL || q == NULL) return (p == q);
        return (p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
    }

----------------------------------------------------------------------------------------------------
My non-recursive method
the idea is to use stack for preorder traverse 

    public boolean isSameTree(TreeNode p, TreeNode q) {
    	     Stack<TreeNode> stack_p = new Stack <> ();       
    	     Stack<TreeNode> stack_q = new Stack <> ();
    	     if (p != null) stack_p.push( p ) ;
    	     if (q != null) stack_q.push( q ) ;
    	     while (!stack_p.isEmpty() && !stack_q.isEmpty()) {
    	    	 TreeNode pn = stack_p.pop() ;
    	    	 TreeNode qn = stack_q.pop() ;	    	
    	    	 if (pn.val != qn.val) return false ;
    	    	 if (pn.right != null) stack_p.push(pn.right) ;
    	    	 if (qn.right != null) stack_q.push(qn.right) ;
    	    	 if (stack_p.size() != stack_q.size()) return false ;
    	    	 if (pn.left != null) stack_p.push(pn.left) ;	    	 	    	 
    	    	 if (qn.left != null) stack_q.push(qn.left) ;
    	    	 if (stack_p.size() != stack_q.size()) return false ;
    	     }		     
    	     return stack_p.size() == stack_q.size() ;	 
    	 }

----------------------------------------------------------------------------------------------------
Shortest+simplest Python
The "proper" way:

    class Solution:
        def isSameTree(self, p, q):
            if p and q:
                return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
            return p == q

The "tupleify" way:

    class Solution:
        def isSameTree(self, p, q):
            def t(n):
                return n and (n.val, t(n.left), t(n.right))
            return t(p) == t(q)

----------------------------------------------------------------------------------------------------
2 Lines Java Code
    public class Solution {
        public boolean isSameTree(TreeNode p, TreeNode q) {
            if (p == null && q == null) return true;
            return p != null && q != null && p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        } }

----------------------------------------------------------------------------------------------------
Simple java solution, both recurison and iteration

    public boolean isSameTree(TreeNode p, TreeNode q) {
        // recurision method
        if (p == null && q == null) return true;
        if (p == null && q != null || p != null && q == null) return false;
        if (p.val != q.val) return false;
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }


----------

    public boolean isSameTree(TreeNode p, TreeNode q) {
        // iteration method
        if (p == null && q == null) return true;
        if (p == null && q != null || p != null && q == null) return false;
        Stack<TreeNode> stackP = new Stack<>();
        Stack<TreeNode> stackQ = new Stack<>();
        stackP.add(p);
        stackQ.add(q);
        while (!stackP.isEmpty() && !stackQ.isEmpty()) {
            TreeNode tmpP = stackP.pop();
            TreeNode tmpQ = stackQ.pop();
            if (tmpP.val != tmpQ.val) return false;
            if (tmpP.left != null && tmpQ.left != null) {
                stackP.push(tmpP.left);
                stackQ.push(tmpQ.left);
            } else if (tmpP.left == null && tmpQ.left == null) {
            } else {
                return false;
            }
            if (tmpP.right != null && tmpQ.right != null) {
                stackP.push(tmpP.right);
                stackQ.push(tmpQ.right);
            } else if (tmpP.right == null && tmpQ.right == null) {
            } else {
                return false;
            }
        }
        if (!stackP.isEmpty() || !stackQ.isEmpty()) return false;
        return true;
    }

----------------------------------------------------------------------------------------------------
2 lines C++ simple solution, easy understanding
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (!p || !q) return q == p;
        return p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }

----------------------------------------------------------------------------------------------------
3 lines Java solution
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) return true;
        if(p==null || q==null) return false;
        return (p.val==q.val) && isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
    }

recursion

----------------------------------------------------------------------------------------------------
Python Recursive solution and DFS Iterative solution with stack and BFS Iterative solution with queue
    def isSameTree1(self, p, q):
        if p and q:
            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
        else:
            return p == q
    
    # DFS with stack        
    def isSameTree2(self, p, q):
        stack = [(p, q)]
        while stack:
            node1, node2 = stack.pop()
            if not node1 and not node2:
                continue
            elif None in [node1, node2]:
                return False
            else:
                if node1.val != node2.val:
                    return False
                stack.append((node1.right, node2.right))
                stack.append((node1.left, node2.left))
        return True
     
    # BFS with queue    
    def isSameTree3(self, p, q):
        queue = [(p, q)]
        while queue:
            node1, node2 = queue.pop(0)
            if not node1 and not node2:
                continue
            elif None in [node1, node2]:
                return False
            else:
                if node1.val != node2.val:
                    return False
                queue.append((node1.left, node2.left))
                queue.append((node1.right, node2.right))
        return True

----------------------------------------------------------------------------------------------------
Three lines Java Solution
public class Same_Tree {

    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null || q == null) return p == q; // if they are null at the same time

        if (p.val != q.val) return false;

        return isSameTree(p.right, q.right) && isSameTree(p.left, q.left);
    }
}


----------------------------------------------------------------------------------------------------
Java one-liner (and the more readable solution it was derived from)
Just for fun;

    return p == null || q == null ? p == null && q == null : p.val != q.val ? false : 
         isSameTree(p.left, q.left) && isSameTree(p.right, q.right);


This is a ternary-if abusing version of the following (much more sensible) solution.

    if (p == null || q == null) {
        return p == null && q == null;
    } else if (p.val == q.val) {
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
    return false;

There's not a whole lot of magic here. We know that if either p or q is null, then if they're not both null, the trees do not share the same shape. 

Otherwise we go on to recursively check the node's children iff the values of p and q are equal, returning false otherwise. 

----------------------------------------------------------------------------------------------------
Oh Java, thou beauty!
    public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) return true;
        if((q==null || p==null)) return false
        return (p.val == q.val) && isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
    }
}

----------------------------------------------------------------------------------------------------
&#91;recursive &amp; non-recursive &#93;&#91;recommend for beginners&#93;clean C++ implementation
> Non-recursive solution

    class Solution {
    public:
        bool isSameTree(TreeNode* p, TreeNode* q) {
            stack<TreeNode*> stack_p;
            stack<TreeNode*> stack_q;
            if(p)   stack_p.push(p);
            if(q)   stack_q.push(q);
            while(!stack_p.empty() && !stack_q.empty()){
                TreeNode* cur_p=stack_p.top();
                TreeNode* cur_q=stack_q.top();
                stack_p.pop();
                stack_q.pop();
                if(cur_p->val!=cur_q->val) return false;
                if(cur_p->left) stack_p.push(cur_p->left);
                if(cur_q->left) stack_q.push(cur_q->left);
                if(stack_p.size() != stack_q.size())    return false;
                if(cur_p->right) stack_p.push(cur_p->right);
                if(cur_q->right) stack_q.push(cur_q->right);
                if(stack_p.size() != stack_q.size())    return false;
            }
            return stack_p.size() == stack_q.size();
        }
    };


> Recursive Solution

    class Solution {
    public:
        bool isSameTree(TreeNode* p, TreeNode* q) {
            if(!p && !q)    return true;
            if(!p || !q)    return false;
            return p->val==q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
        }
    };

----------------------------------------------------------------------------------------------------
0ms simple JAVA solution
public class Solution {
    
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) {
            return true;
        }
        
        if(p==null || q==null) {
            return false;
        }
        
        if(p.val == q.val) {
            boolean left = isSameTree(p.left, q.left);
            boolean right = isSameTree(p.right, q.right);
            return (left & right);
        }

        return false;
    }
}

----------------------------------------------------------------------------------------------------
My one line recursive solutions in 3 languages
I use syntactic sugar to combine stop condition and recursive call together.

Java:

    return (p == null || q == null) ? p == q : p.val == q.val && this.isSameTree(p.left, q.left) && this.isSameTree(p.right, q.right);

C++:

    return (p == NULL || q == NULL) ? p == q : p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);

Python:

    return p == q if p is None or q is None else p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)


----------------------------------------------------------------------------------------------------
Two line java code
    public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null) return true; 
        return p!=null && q!= null && p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}

----------------------------------------------------------------------------------------------------
Python Recursive solution within 36ms
    class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if not q and not p:
            return True
        elif not p or not q:
            return False
        elif p.val!=q.val:
            return False
        else:
            return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)

----------------------------------------------------------------------------------------------------
One Line Java (with recursive)
        return((p==null||q==null)?(p==q):(p.val==q.val && isSameTree(p.left,q.left) && isSameTree(p.right,q.right)));

Not the fastest though...


----------------------------------------------------------------------------------------------------
Simple iterative solution
    public class Solution {
        public boolean isSameTree(TreeNode p, TreeNode q) {
            if(p == null && q == null){
    			return true;
    		}
    		//structure
    		if(p == null || q == null){
    			return false;
    		}
    		//val
    		if(p.val != q.val){
    			return false;
    		}
    		
    		Stack<TreeNode> stk1 = new Stack<TreeNode>();
    		Stack<TreeNode> stk2 = new Stack<TreeNode>();
    		stk1.push(p);
    		stk2.push(q);
    		
    		while( !stk1.isEmpty() && !stk2.isEmpty() ){
    			TreeNode tn1 = stk1.pop();
    			TreeNode tn2 = stk2.pop();
    			
    			if(tn1.val != tn2.val){
    				return false;
    			}
    			//structure different
    			if(tn1.left == null && tn2.left != null){
    				return false;
    			}else if (tn1.left != null && tn2.left == null){
    				return false;
    			}else if (tn1.right == null && tn2.right != null){
    				return false;
    			}else if (tn1.right != null && tn2.right == null) {
    				return false;
    			}
    			
    			if(tn1.left != null && tn2.left != null){
    				stk1.push(tn1.left);
    				stk2.push(tn2.left);
    			}
    			
    			if(tn1.right != null && tn2.right != null){
    				stk1.push(tn1.right);
    				stk2.push(tn2.right);
    			}
    		}
    		
    		return true;
            
        }
    }

----------------------------------------------------------------------------------------------------
Easy java solution
    public class Solution {
    
    boolean isSame = true;
    public boolean isSameTree(TreeNode p, TreeNode q) {
        
        //two nodes are null , return true
        if(p==null && q==null)
            return true;
            
            
        //one node is null, and the other node is not null, return false    
        if(p==null || q==null)
            return false;
        
    
        return (p.val == q.val) && isSameTree(p.left, q.left) && isSameTree(p.right, q.right) ;
        

    }
}

----------------------------------------------------------------------------------------------------
