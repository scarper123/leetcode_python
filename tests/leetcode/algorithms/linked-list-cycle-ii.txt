Detailed Explained 8ms C++ solution
In this problem, we are asked to divide two integers. However, we are not allowed to use division, multiplication and mod operations. So, what else can we use? Yeah, bit manipulations.

Let's do an example and see how bit manipulations work.

Suppose we want to divide `15` by `3`, so `15` is `dividend` and `3` is `divisor`. Well, division simply requires us to find how many times we can subtract the `divisor` from the the `dividend` without making the `dividend` negative.

Let's get started. We subtract `3` from `15` and we get `12`, which is positive. Let's try to subtract more. Well, we **shift** `3` to the left by `1` bit and we get `6`. Subtracting `6` from `15` still gives a positive result. Well, we shift again and get `12`. We subtract `12` from `15` and it is still positive. We shift again, obtaining `24` and we know we can at most subtract `12`. Well, since `12` is obtained by shifting `3` to left twice, we know it is `4` times of `3`. How do we obtain this `4`? Well, we start from `1` and shift it to left twice at the same time. We add `4` to an answer (initialized to be `0`). In fact, the above process is like `15 = 3 * 4 + 3`. We now get part of the quotient (`4`), with a remainder `3`.

Then we repeat the above process again. We subtract `divisor = 3` from the remaining `dividend = 3` and obtain `0`. We know we are done. No shift happens, so we simply add `1 << 0` to the answer.

Now we have the full algorithm to perform division. 

According to the problem statement, we need to handle some exceptions, such as overflow.

Well, two cases may cause overflow:

 1. `divisor = 0`;
 2. `dividend = INT_MIN` and `divisor = -1` (because `abs(INT_MIN) = INT_MAX + 1`).

Of course, we also need to take the sign into considerations, which is relatively easy.

Putting all these together, we have the following code.

    class Solution {
    public:
        int divide(int dividend, int divisor) {
            if (!divisor || (dividend == INT_MIN && divisor == -1))
                return INT_MAX;
            int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;
            long long dvd = labs(dividend);
            long long dvs = labs(divisor);
            int res = 0;
            while (dvd >= dvs) { 
                long long temp = dvs, multiple = 1;
                while (dvd >= (temp << 1)) {
                    temp <<= 1;
                    multiple <<= 1;
                }
                dvd -= temp;
                res += multiple;
            }
            return sign == 1 ? res : -res; 
        }
    };

----------------------------------------------------------------------------------------------------
Clean Java solution with some comment.
  	public int divide(int dividend, int divisor) {
		//Reduce the problem to positive long integer to make it easier.
		//Use long to avoid integer overflow cases.
		int sign = 1;
		if ((dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0))
			sign = -1;
		long ldividend = Math.abs((long) dividend);
		long ldivisor = Math.abs((long) divisor);
		
		//Take care the edge cases.
		if (ldivisor == 0) return Integer.MAX_VALUE;
		if ((ldividend == 0) || (ldividend < ldivisor))	return 0;
		
		long lans = ldivide(ldividend, ldivisor);
		
		int ans;
		if (lans > Integer.MAX_VALUE){ //Handle overflow.
			ans = (sign == 1)? Integer.MAX_VALUE : Integer.MIN_VALUE;
		} else {
			ans = (int) (sign * lans);
		}
		return ans;
	}

	private long ldivide(long ldividend, long ldivisor) {
		// Recursion exit condition
		if (ldividend < ldivisor) return 0;
		
		//  Find the largest multiple so that (divisor * multiple <= dividend), 
		//  whereas we are moving with stride 1, 2, 4, 8, 16...2^n for performance reason.
		//  Think this as a binary search.
		long sum = ldivisor;
		long multiple = 1;
		while ((sum+sum) <= ldividend) {
			sum += sum;
			multiple += multiple;
		}
		//Look for additional value for the multiple from the reminder (dividend - sum) recursively.
		return multiple + ldivide(ldividend - sum, ldivisor);
	}



----------------------------------------------------------------------------------------------------
Simple O((log N) ^ 2) C++ solution
Long division in binary:
The outer loop reduces n by at least half each iteration. So It has O(log N) iterations.
The inner loop has at most log N iterations. 
 So  the overall complexity is O(( log N)^2) 

    typedef long long ll;

    int divide(int n_, int d_) {
        ll ans=0;
        ll n=abs((ll)n_);
        ll d=abs((ll)d_);
        while(n>=d){
            ll a=d;
            ll m=1;
            while((a<<1) < n){a<<=1;m<<=1;}
            ans+=m;
            n-=a;
        }
        if((n_<0&&d_>=0)||(n_>=0&&d_<0))
            return -ans;
        return ans;
    }



----------------------------------------------------------------------------------------------------
Clear python code
    class Solution:
    # @return an integer
    def divide(self, dividend, divisor):
        positive = (dividend < 0) is (divisor < 0)
        dividend, divisor = abs(dividend), abs(divisor)
        res = 0
        while dividend >= divisor:
            temp, i = divisor, 1
            while dividend >= temp:
                dividend -= temp
                res += i
                i <<= 1
                temp <<= 1
        if not positive:
            res = -res
        return min(max(-2147483648, res), 2147483647)

----------------------------------------------------------------------------------------------------
15 line easy understand solution. 129ms
for example, if we want to calc (17/2)

ret = 0;

17-2  ,ret+=1; left=15

15-4  ,ret+=2; left=11

11-8  ,ret+=4; left=3

3-2    ,ret+=1; left=1


ret=8;






    class Solution:
    # @return an integer
    def divide(self, dividend, divisor):
        isMinus= ((dividend<0 and divisor >0) or (dividend>0 and divisor <0));
        ret=0;        
        dividend,divisor=abs(dividend),abs(divisor);
        c,sub=1,divisor;

        while(dividend >= divisor):
            if(dividend>=sub):
                dividend-=sub;
                ret+=c;
                sub=(sub<<1);
                c=(c<<1);
            else:
                sub=(sub>>1);
                c=(c>>1);
        
        if(isMinus):
            ret=-ret;
        return min(max(-2147483648,ret),2147483647);

----------------------------------------------------------------------------------------------------
32 times bit shift operation in C with O(1) solution
we assure the factor `ret`'s binary fomula is

`ret = a0 + a1*2 + a2*2^2 + ...... + a29*2^29 + a30*2^30 + a31*2^31;  ai = 0 or 1, i = 0......31`

the dividend `B` and divisor `A` is non-negative, then

`A(a0 + a1*2 + a2*2^2 + ...... + a29*2^29 + a30*2^30 + a31*2^31) = B;    Eq1`

(1) when `Eq1` divided by `2^31`, we can get  `A*a31 = B>>31`;  then `a31 = (B>>31)/A`;

if `(B>>31) > A`, then `a31 = 1`; else `a31 = 0`;

(2) when `Eq1` divided by `2^30`, we can get  `A*a30 + A*a30*2 = B>>30`;  then `a30 = ((B>>30) - a30*A*2)/A`;  and `(B>>30) - a31*A*2` can be rewritten by `(B-a31*A<<31)>>30`, so we make `B' = B-a31*A<<31`, the formula simplified to `a30 = (B'>>30)/A`

if `(B'>>31) > A`, then `a30 = 1`; else `a30 = 0`;

(3) in the same reason, we can get  `a29 = ((B-a31*A<<31-a30*A<<30)>>29)/A`, we make `B'' = B' - a30*A<<30`, the formula simplified to `a29 = (B''>>29)/A`;

do the same bit operation `32` times, we can get `a31 ..... a0`, so we get the `ret` finally.

the C solution with constant time complexity

    int divide(int dividend, int divisor) {
        //special cases
        if(divisor == 0 || (dividend == INT_MIN && divisor == -1))
            return INT_MAX;
        
        // transform to unsigned int
        bool sign = (dividend > 0)^(divisor > 0);
        unsigned int A = (divisor < 0) ? -divisor : divisor;
        unsigned int B = (dividend < 0) ? -dividend : dividend;
        int ret = 0;
        
        // shift 32 times
        for(int i = 31; i >= 0; i--)
        {
            if((B>>i) >= A)
            {
                ret = (ret<<1)|0x01;
                B -= (A<<i);   // update B
            }
            else
                ret = ret<<1;
        }
        
        if(sign)
            ret = -ret;
        
        return ret;
    }



----------------------------------------------------------------------------------------------------
Accepted Java solution with comments.
    public int divide(int dividend, int divisor) {
		long result = divideLong(dividend, divisor);
		return result > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)result;
    }
	
	// It's easy to handle edge cases when
	// operate with long numbers rather than int
	public long divideLong(long dividend, long divisor) {
		
		// Remember the sign
		boolean negative = dividend < 0 != divisor < 0;
		
		// Make dividend and divisor unsign
		if (dividend < 0) dividend = -dividend;
		if (divisor < 0) divisor = -divisor;
		
		// Return if nothing to divide
		if (dividend < divisor) return 0;
		
		// Sum divisor 2, 4, 8, 16, 32 .... times
        long sum = divisor;
        long divide = 1;
        while ((sum+sum) <= dividend) {
        	sum += sum;
        	divide += divide;
        }
        
        // Make a recursive call for (devided-sum) and add it to the result
        return negative ? -(divide + divideLong((dividend-sum), divisor)) :
        	(divide + divideLong((dividend-sum), divisor));
    }

----------------------------------------------------------------------------------------------------
No Use of Long Java Solution
Integer.MIN_VALUE as dividend is really troublesome. Thus, I turn everything to negative value and keep finding closest 1,2,4,8... multiples and recursive on rest. The only case that will cause overflow is Integer.MIN_VALUE / -1, so I list it alone as an edge case. 


    public class Solution {
        public int divide(int dividend, int divisor) {
    		if(dividend==Integer.MIN_VALUE && divisor==-1) return Integer.MAX_VALUE;
            if(dividend > 0 && divisor > 0) return divideHelper(-dividend, -divisor);
            else if(dividend > 0) return -divideHelper(-dividend,divisor);
            else if(divisor > 0) return -divideHelper(dividend,-divisor);
            else return divideHelper(dividend, divisor);
        }
        
        private int divideHelper(int dividend, int divisor){
            // base case
            if(divisor < dividend) return 0;
            // get highest digit of divisor
            int cur = 0, res = 0;
            while((divisor << cur) >= dividend && divisor << cur < 0 && cur < 31) cur++;
            res = dividend - (divisor << cur-1);
            if(res > divisor) return 1 << cur-1;
            return (1 << cur-1)+divide(res, divisor);
        }
    }

----------------------------------------------------------------------------------------------------
Summary of 3 C++ solutions
-1-  log-based solution
 

       class Solution {
        public:
            int divide(int dividend, int divisor) {
                /** a/b = e^(ln(a))/e^(ln(b)) = e^(ln(a)-ln(b)) **/
                if(dividend==0)  return 0;
                if(divisor==0)  return INT_MAX;
                
                double t1=log(fabs(dividend));
                double t2=log(fabs(divisor));
                long long result=double(exp(t1-t2));
                if((dividend<0) ^ (divisor<0))  result=-result;
                if(result>INT_MAX)  result=INT_MAX;
                return result;
            }
        };


-2-   Binary Index tree idea inspired solution, 

as we can decompose any result number to sum of the power 

of 2.

Here is the C++ implementation.

    class Solution {
    public:
        int divide(int dividend, int divisor) {
            if(!divisor || (dividend==INT_MIN && divisor==-1))   return INT_MAX;
            
            int sign=((dividend<0)^(divisor<0)) ? -1:1;
            long long m=labs(dividend);
            long long n=labs(divisor);
            int result=0;
            
            /** dvd >= 2^k1*dvs + 2^k2*dvs ... **/
            while(m>=n){
                long long temp=n, count=1;
                while(m >= (temp<<1)){
                    temp<<=1;
                    count<<=1;
                }
                m-=temp;
                result+=count;
            }
            
            return sign==1?result:-result;
        }
    };

-3-  concise version of the solution 2

    class Solution {
    public:
        int divide(int dividend, int divisor) {
            long long result=0;
            long long m=abs((long long)dividend);
            long long n=abs((long long)divisor);
            while(m>=n){
                long long s=n, power=1;
                while((s<<1) <= m) { s<<=1; power<<=1; }
                result+=power;
                m-=s;
            }
            
            if( (dividend>0) ^ (divisor>0))  result = -result;
            return result>INT_MAX ? INT_MAX:result;
        }
    };

----------------------------------------------------------------------------------------------------
6 line solution C++
Basic idea: a/b = e^(ln(a))/e^(ln(b)) = e^(ln(a)-ln(b))

    class Solution {
    public:
        int divide(int dividend, int divisor) {
            if (dividend==0) return 0;
            if (divisor==0) return INT_MAX;
            long long res=double(exp(log(fabs(dividend))-log(fabs(divisor))));
            if ((dividend<0)^(divisor<0)) res=-res;
            if (res>INT_MAX) res=INT_MAX;
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
A readable Java implementation
At first, I used dividend / divisor, just to check. But that was cheating.

Then, I implemented a solution which failed the corner cases. I solved it by using long instead of int. But I felt that was also cheating.

At last, I came up with this solution. It handles all the corner cases. Running time analysis after the code.

    public class Solution {
        public int divide(int dividend, int divisor) {
            if (divisor == 1) // Trival case 1
                return dividend;
            
            // Use negative integers to avoid integer overflow
            if (dividend > 0)
                return -divide(-dividend, divisor);
            if (divisor > 0)
                return -divide(dividend, -divisor);
            
            if (dividend > divisor) // Trivial case 2
                return 0;
            
            if ((dividend == Integer.MIN_VALUE) && (divisor == -1)) // Overflow case
                return Integer.MAX_VALUE;
            
            // Find the highest mult = (divisor * 2^shifts) which is <= dividend
            // by shifting mult to the left without causing an overflow.
            // At most (log2(|dividend|) - log2(|divisor|) + 1) iterations.
            int min_divisor = Integer.MIN_VALUE >> 1;
            int mult = divisor; // = divisor * 2^shifts
            int shifts = 0;
            while ((mult >= min_divisor) && (mult > dividend)) {
                mult <<= 1;
                ++shifts;
            }
            
            // Compute the result by shifting mult to the right.
            // At most (log2(|dividend|) - log2(|divisor|) + 1) iterations for the outer loop.
            // At most (log2(|dividend|) - log2(|divisor|) + 1) iterations for the inner loop
            // (in total, not per outer iteration).
            int result = 0;
            int power = 1 << shifts; // = 2^shifts
            while (dividend <= divisor) {
                shifts = 0;
                while (mult < dividend) {
                    mult >>= 1;
                    ++shifts;
                }
                dividend -= mult;
                power >>= shifts;
                result |= power; // Adds power to result
            }
            
            return result;
        }
    }

I see lots of people talking about O(log(n)) solutions. Since n is bounded by -2^31 and 2^31-1, I'm not sure the Big-Oh notation is appropriate here. Anyway, here's a rough worst-case analysis of this code.

The first loop runs (log2(|dividend|) - log2(|divisor|) + 1) times. There are

 - 2 comparisons
 - 1 bit shift
 - 1 increment

The second loop runs between 1 time and (log2(|dividend|) - log2(|divisor|) + 1) times. For worst-case, we take the latter. There are

 - 1 comparison
 - 1 assignment
 - 1 substraction
 - 1 bit shift
 - 1 bitwise or

The inner while loop runs (log2(|dividend|) - log2(|divisor|) + 1) times also (in total, not per outer loop iteration). There are

 - 1 comparison
 - 1 bit shift
 - 1 increment

So, roughly, the overall worst-case running time is 12(log2(dividend) - log2(divisor) + 1) operations. You can notice that (log2(|dividend|) - log2(|divisor|)) = log2(|result|). Thus, the running time is (worst-case) 12(log2(|result|) + 1) operations.

----------------------------------------------------------------------------------------------------
C++ 8ms solution without long long

    class Solution {
    public:
        int divide(int dividend, int divisor) {
            if(!divisor) return INT_MAX;
            if(divisor == 1) return dividend;
            if(divisor == -1){
                if(dividend == INT_MIN) {return INT_MAX;}
                else {return -dividend;}
            }
            
            bool s1 = dividend<0;
            bool s2 = divisor<0;
            
            unsigned int nom = s1?-dividend:dividend;
            unsigned int den = s2?-divisor:divisor;
            
            unsigned int rem = 0;
            unsigned int quot = 0;
            
            for(int i=31; i>=0;--i){
                rem <<= 1;
                rem |= (nom >> i) & 1;
                if(rem >= den){
                    rem -= den;
                    quot |= (1<<i);
                }
            }
    
            return s1^s2?-quot:quot;
        }
    };

----------------------------------------------------------------------------------------------------
Compiler does not actually check for division operator
    return dividend / divisor;

was accepted.

----------------------------------------------------------------------------------------------------
Java, 3ms, using bit operation and  recursion
