Reversing a list is not considered &quot;O(1) space&quot;
It is a common misunderstanding that the space complexity of a program is just how much the size of additional memory space being used besides input. An important prerequisite is neglected the above definition: [the input has to be read-only][1]. By definition, changing the input and change it back is not allowed (or the input size should be counted when doing so). Another way of determining the space complexity of a program is to simply look at how much space it has written to. Reversing a singly linked list requires writing to O(n) memory space, thus the space complexities for all "reverse-the-list"-based approaches are O(n), not O(1).

Solving this problem in O(1) space is theoretically impossible due to two simple facts: (1) a program using O(1) space is computationally equivalent to a finite automata, or a regular expression checker; (2) [the pumping lemma][2] states that the set of palindrome strings does not form a regular set.

Please change the incorrect problem statement.


  [1]: https://en.wikipedia.org/wiki/DSPACE#Machine_models
  [2]: https://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages

----------------------------------------------------------------------------------------------------
Share my C++ solution, O(n) time and O(1) memory
    class Solution {
    public:
        bool isPalindrome(ListNode* head) {
            if(head==NULL||head->next==NULL)
                return true;
            ListNode* slow=head;
            ListNode* fast=head;
            while(fast->next!=NULL&&fast->next->next!=NULL){
                slow=slow->next;
                fast=fast->next->next;
            }
            slow->next=reverseList(slow->next);
            slow=slow->next;
            while(slow!=NULL){
                if(head->val!=slow->val)
                    return false;
                head=head->next;
                slow=slow->next;
            }
            return true;
        }
        ListNode* reverseList(ListNode* head) {
            ListNode* pre=NULL;
            ListNode* next=NULL;
            while(head!=NULL){
                next=head->next;
                head->next=pre;
                pre=head;
                head=next;
            }
            return pre;
        }
    };

----------------------------------------------------------------------------------------------------
11 lines, 12 with restore, O(n) time, O(1) space
O(n) time, O(1) space. The second solution restores the list after changing it.

---

**Solution 1: *Reversed first half == Second half?***

Phase 1: Reverse the first half while finding the middle.  
Phase 2: Compare the reversed first half with the second half.

    def isPalindrome(self, head):
        rev = None
        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            rev, rev.next, slow = slow, rev, slow.next
        if fast:
            slow = slow.next
        while rev and rev.val == slow.val:
            slow = slow.next
            rev = rev.next
        return not rev

---

**Solution 2: *Play Nice***

Same as the above, but while comparing the two halves, restore the list to its original state by reversing the first half back. Not that the OJ or anyone else cares.

    def isPalindrome(self, head):
        rev = None
        fast = head
        while fast and fast.next:
            fast = fast.next.next
            rev, rev.next, head = head, rev, head.next
        tail = head.next if fast else head
        isPali = True
        while rev:
            isPali = isPali and rev.val == tail.val
            head, head.next, rev = rev, head, rev.next
            tail = tail.next
        return isPali


----------------------------------------------------------------------------------------------------
Java, easy to understand
This can be solved by reversing the 2nd half and compare the two halves. Let's start with an example `[1, 1, 2, 1]`.

In the beginning, set two pointers `fast` and `slow` starting at the head.

    1 -> 1 -> 2 -> 1 -> null 
    sf

(1) **Move:** `fast` pointer goes to the end, and `slow` goes to the middle.

    1 -> 1 -> 2 -> 1 -> null 
              s          f
(2) **Reverse:** the right half is reversed, and `slow` pointer becomes the 2nd head.

    1 -> 1    null <- 2 <- 1           
    h                      s

(3) **Compare:** run the two pointers `head` and `slow` together and compare.

    1 -> 1    null <- 2 <- 1             
         h            s

In this end, check if `slow == null`. For this example, since `slow != null`, return `false`.

<hr>

    public boolean isPalindrome(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
    
        while(fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        if(fast != null) slow = slow.next;
    
        slow = reverse(slow);
        while(slow != null && head.val == slow.val) {
            head = head.next;
            slow = slow.next;
        }
        return slow == null;
    }
    
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while(head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }

----------------------------------------------------------------------------------------------------
My easy understand C++ solution
    class Solution {
    public:
        ListNode* temp;
        bool isPalindrome(ListNode* head) {
            temp = head;
            return check(head);
        }
        
        bool check(ListNode* p) {
            if (NULL == p) return true;
            bool isPal = check(p->next) & (temp->val == p->val);
            temp = temp->next;
            return isPal;
        }
    };

----------------------------------------------------------------------------------------------------
Easy understand JAVA solution (O(1) space cost)
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode(int x) { val = x; }
     * }
     */
    public class Solution {
        public boolean isPalindrome(ListNode head) {
            if(head == null) {
                return true;
            }
            ListNode p1 = head;
            ListNode p2 = head;
            ListNode p3 = p1.next;
            ListNode pre = p1;
            //find mid pointer, and reverse head half part
            while(p2.next != null && p2.next.next != null) {
                p2 = p2.next.next;
                pre = p1;
                p1 = p3;
                p3 = p3.next;
                p1.next = pre;
            }
    
            //odd number of elements, need left move p1 one step
            if(p2.next == null) {
                p1 = p1.next;
            }
            else {   //even number of elements, do nothing
                
            }
            //compare from mid to head/tail
            while(p3 != null) {
                if(p1.val != p3.val) {
                    return false;
                }
                p1 = p1.next;
                p3 = p3.next;
            }
            return true;
            
        }
    }

----------------------------------------------------------------------------------------------------
Python easy to understand solution with comments (operate nodes directly).
    def isPalindrome(self, head):
        fast = slow = head
        # find the mid node
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        # reverse the second half
        node = None
        while slow:
            nxt = slow.next
            slow.next = node
            node = slow
            slow = nxt
        # compare the first and second half nodes
        while node: # while node and head:
            if node.val != head.val:
                return False
            node = node.next
            head = head.next
        return True

----------------------------------------------------------------------------------------------------
If you want O(n) time and O(1) space, this problem should not be an &#x27;easy&#x27; one.
For an O(n)-O(1) answer, the common idea can be summarized as:

1.  find the middle.
2.  reverse half of the list (reverse the latter half would be more comprehensible).
3.  easily check for palindromic-ness as if it's a double-link list.
4.  restore the reversed half



    class Solution {
public:
    inline void reverse(ListNode* head) {
        ListNode *node1, *node2, *node3;
        node1 = head;
        node2 = node1->next;
        node1->next = NULL;
        while(node2)
        {
            node3 = node2->next;
            node2->next = node1;
            node1 = node2;
            node2 = node3;
        }
    }
    
    bool isPalindrome(ListNode* head) {
        
        // lengths 0, 1 are palindrome
        if(!head || !head->next)
        {
            return true;
        }
        
        // length 2 goes simple judging
        if(!head->next->next)
        {
            return head->val == head->next->val;
        }

        // step 1: find middle and tail nodes
        ListNode *middle, *rbegin;
        middle = rbegin = head;
        while(rbegin->next)
        {
            if(rbegin->next->next)
            {
                middle = middle->next;
                rbegin = rbegin->next->next;
            }
            else
            {
                rbegin = rbegin->next;
            }
        }
        
        // step 2: reverse the latter half
        reverse(middle->next);

        // step 3: check for palindrome
        bool result = true;
        ListNode* node1 = head;
        ListNode* node2 = rbegin;
        while(node2)
        {
            if(node1->val != node2->val)
            {
                result = false;
                break;
            }
            
            node1 = node1->next;
            node2 = node2->next;
        }
        
        // step 4: restore the reversed latter half
        reverse(rbegin);

        return result;
    }
};

----------------------------------------------------------------------------------------------------
Share my Java answer
    public class Solution {
        ListNode h;
        public boolean isPalindrome(ListNode head) {
            if (head == null) return true;
        
            if (h == null) h = head;

            boolean tmp = true;        
            if (head.next != null) tmp &= isPalindrome(head.next);
        
            tmp &= (head.val == h.val);
            h = h.next;
            return tmp;
        }
    }

----------------------------------------------------------------------------------------------------
Concise O(N), O(N) Java Solution without reversing the list
***Sorry, Since it's a recursive algorithm, it uses O(N) space. Thanks for pointing out this.***

  

    public class Solution {
    public ListNode root;
    public boolean isPalindrome(ListNode head) {
        root = head;
        return (head == null) ? true : _isPalindrome(head);
    }
    
    public boolean _isPalindrome(ListNode head) {
        boolean flag = true;
        if (head.next != null) {
            flag = _isPalindrome(head.next);
        }
        if (flag && root.val == head.val) {
            root = root.next;
            return true;
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
5 lines Python, O(n) time and space
I just realized that the O(1) space is only a follow-up, so here's the obvious one without that.

    def isPalindrome(self, head):
        vals = []
        while head:
            vals += head.val,
            head = head.next
        return vals == vals[::-1]


----------------------------------------------------------------------------------------------------
My java 1ms solution with reverse half list
