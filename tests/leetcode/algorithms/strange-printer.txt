&#91;Java&#x2F;C++&#93; Very simple dfs solution
   int widthOfBinaryTree(TreeNode* root) {
        return dfs(root, 0, 1, vector<pair<int, int>>() = {});
    }
    
    int dfs(TreeNode* root, int level, int order, vector<pair<int, int>>& vec){
        if(root == NULL)return 0;
        if(vec.size() == level)vec.push_back({order, order});
        else vec[level].second = order;
        return max({vec[level].second - vec[level].first + 1, dfs(root->left, level + 1, 2*order, vec), dfs(root->right, level + 1, 2*order + 1, vec)});
    }


----------------------------------------------------------------------------------------------------
&#91;C++&#x2F;Java&#93; * &#91;BFS&#x2F;DFS&#x2F;3liner&#93; Clean Code  With Explanation
import java.util.AbstractMap;
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) return 0;
        int max = 0;
        Queue<Map.Entry<TreeNode, Integer>> q = new LinkedList<Map.Entry<TreeNode, Integer>>();
        q.offer(new AbstractMap.SimpleEntry(root, 1));

        while (!q.isEmpty()) {
            int l = q.peek().getValue(), r = l; // right started same as left
            for (int i = 0, n = q.size(); i < n; i++) {
                TreeNode node = q.peek().getKey();
                r = q.poll().getValue();
                if (node.left != null) q.offer(new AbstractMap.SimpleEntry(node.left, r * 2));
                if (node.right != null) q.offer(new AbstractMap.SimpleEntry(node.right, r * 2 + 1));
            }
            max = Math.max(max, r + 1 - l);
        }

        return maxwidth;
    }
}


----------------------------------------------------------------------------------------------------
Python, Straightforward BFS and DFS solutions
def widthOfBinaryTree(self, root):
    def dfs(node, depth = 0, pos = 0):
        if node:
            yield depth, pos
            yield from dfs(node.left, depth + 1, pos * 2)
            yield from dfs(node.right, depth + 1, pos * 2 + 1)

    left = {}
    right = {}
    ans = 0
    for depth, pos in dfs(root):
        left[depth] = min(left.get(depth, pos), pos)
        right[depth] = max(right.get(depth, pos), pos)
        ans = max(ans, right[depth] - left[depth] + 1)

    return ans


----------------------------------------------------------------------------------------------------
