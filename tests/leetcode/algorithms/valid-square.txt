Java Solution, Sorting. And rough proof of algorithm.
Sd

----------------------------------------------------------------------------------------------------
Please explain: The question doesn&#x27;t make sense.
<p>So if we are given &#91;1.2.3.4&#93;, is this a possibility?</p>
<p>(1,4) and (2,3)</p>
<p>In that case, won&#39;t the correct answer be 5. Our goal is to get the largest possible sum from the above 4 integers. So, how can 4 be the answer?</p>
<p>Thanks</p>


----------------------------------------------------------------------------------------------------
c++ code O(n),beats 100%
class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        vector<int> hashtable(20001,0);
        for(size_t i=0;i<nums.size();i++)
        {
            hashtable[nums[i]+10000]++;
        }
        int ret=0;
        int flag=0;
        for(size_t i=0;i<20001;){
            if((hashtable[i]>0)&&(flag==0)){
                ret=ret+i-10000;
                flag=1;
                hashtable[i]--;
            }else if((hashtable[i]>0)&&(flag==1)){
                hashtable[i]--;
                flag=0;
            }else i++;
        }
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
Python 1 line (sorting is accepted)
class Solution(object):

    def arrayPairSum(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return sum(sorted(nums)[::2])

----------------------------------------------------------------------------------------------------
Python, Simple with Explanation
def arrayPairSum(self, A):
    return sum(sorted(A)[::2])


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Clean Code - 1 sentence explanation
class Solution {
    public int arrayPairSum(int[] nums) {
        int sum = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i += 2) {
            sum += nums[i];
        }
        
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
share my java solution! beat 90%!
public class Solution {
    public int arrayPairSum(int[] nums) {
         int[] hash=new int[20001];
         for(int ele:nums){
             hash[ele+10000]++;
         }
         int sum=0;
         int p=0;
         for(int i=0;i<20001;i++){
             if(hash[i]==0) continue;
             while(hash[i]!=0){
                 if(p%2==0){
                     sum+=(i-10000);
                 }
                 p++;
                 hash[i]--;
             }
         }
         return sum;
    }
}


----------------------------------------------------------------------------------------------------
Java O(n) beats 100%
public class Solution {

	public int arrayPairSum(int[] nums) {
		int[] exist = new int[20001];
		for (int i = 0; i < nums.length; i++) {
			exist[nums[i] + 10000]++;
		}
		int sum = 0;
		boolean odd = true;
		for (int i = 0; i < exist.length; i++) {
			while (exist[i] > 0) {
				if (odd) {
					sum += i - 10000;
				}
				odd = !odd;
				exist[i]--;
			}
		}
		return sum;
	}
	
}


----------------------------------------------------------------------------------------------------
Python 2 lines
 def arrayPairSum(self, nums):
	nums.sort()
	return sum(nums[i] for i in range(len(nums)) if i % 2 == 0)

----------------------------------------------------------------------------------------------------
Intuitive explanation
public class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for (int i = 0; i < nums.length; i += 2) {
            result += nums[i];
        }
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Python solution with detailed explanation
class Solution(object):
    def arrayPairSum(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = [0]*20001
        for x in nums:
            res[x+10000] += 1
        s_so_far, adjust = 0, False
        for idx, freq in enumerate(res):
            if freq:
                freq = freq-1 if adjust else freq
                if freq&1:
                    s_so_far += ((freq//2) + 1)*(idx-10000)
                    adjust = True
                else:
                    s_so_far += ((freq//2))*(idx-10000)
                    adjust = False
        return s_so_far


----------------------------------------------------------------------------------------------------
scala version
  def arrayPairSum(nums: Array[Int]): Int = {
    val srt = nums.sortWith((r1, r2) => r1 < r2)
    var result = 0
    for (i <- srt.indices if i % 2 == 0)
      result += srt(i)
    result
  }


----------------------------------------------------------------------------------------------------
Java short Solution- Sorting based with odd positions sum
public class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int sum=0;
        for(int i=0;i<nums.length;i+=2){
            sum+=nums[i];
        }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
Java solution and straightforward explanation
public class Solution {
    public int arrayPairSum(int[] nums) {
        int[] array = new int[20001];
        for (int i = 0; i < nums.length; i++) {
            array[nums[i] + 10000]++;
        }
        int sum = 0;
        boolean smaller = true;
        for (int i = 0; i < array.length;) {
            if (array[i] > 0) {
                if (smaller) {
                    sum += i - 10000;
                }
                smaller = !smaller;
                array[i]--;
            } else {
                i++;
            }
        }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
4 lines C++
    int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int sum = 0;
        for(int i = 0; i < nums.size(); i += 2) sum += nums[i];
        return sum;
    }


----------------------------------------------------------------------------------------------------
C simple solution
int arrayPairSum(int* nums, int numsSize) {
    int i, bucket[20001]={0};
    int Flag=1,reg=0,count=0;
    for(i=0;i<numsSize;i++)
        bucket[nums[i]+10000]++;
    for(i=0;i<20001&&count<numsSize/2;)   // Use count variable can reduce iteration times
    {
        if(bucket[i]>0)
        {
            if(Flag)
            {
                Flag=0;
                reg+=i-10000;
                bucket[i]--;
                count++;
            }
            else
            {
                Flag=1;
                bucket[i]--;
            }
                
        }
        else i++;
    }
    return reg;
}


----------------------------------------------------------------------------------------------------
C Solution.Do it in a hard way.
    quick_sort(nums, 0, numsSize - 1);
    int sum = 0;
    int k;
    for (k = 0; k < numsSize; k += 2) {
        sum += nums[k];
    }
    return sum;
}
int partition(int* arr, int low, int high){
    int key;
    key = arr[low];
    while(low<high){
        while(low <high && arr[high]>= key )
            high--;
        if(low<high)
            arr[low++] = arr[high];
        while( low<high && arr[low]<=key )
            low++;
        if(low<high)
            arr[high--] = arr[low];
    }
    arr[low] = key;
    return low;
}
void quick_sort(int* arr, int start, int end){
    int pos;
    if (start<end){
        pos = partition(arr, start, end);
        quick_sort(arr,start,pos-1);
        quick_sort(arr,pos+1,end);
    }
    return;
}

----------------------------------------------------------------------------------------------------
