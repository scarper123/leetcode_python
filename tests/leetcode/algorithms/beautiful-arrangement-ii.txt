&#91;C++&#93; &#91;Java&#93; Clean Code 4-liner
class Solution {
    public int[] constructArray(int n, int k) {
        int[] res = new int[n];
        for (int i = 0, l = 1, r = n; l <= r; i++)
            res[i] = k > 1 ? (k-- % 2 != 0 ? l++ : r--) : (k % 2 != 0? l++ : r--);
        return res;
    }
}


----------------------------------------------------------------------------------------------------
C++, concise code, O(n)
class Solution {
public:
    vector<int> constructArray(int n, int k) {
        int l = 1, r = k+1;
        vector<int> ans;
        while (l <= r) {
            ans.push_back(l++);
            if (l <= r) ans.push_back(r--);
        }
        for (int i = k+2; i <= n; i++)
            ans.push_back(i);
        return ans;
    }
};


----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def constructArray(self, n, k):
    ans = range(1, n - k)
    for d in xrange(k+1):
        if d % 2 == 0:
            ans.append(n-k + d/2)
        else:
            ans.append(n - d/2)

    return ans


----------------------------------------------------------------------------------------------------
Unexpected TLE
vector<int> constructArray(int n, int k) {
    vector<int> ret(n);
    int d = n - 1;
    int c = 1;
    bool low = true;
    int idx = 0;
    ret[idx++] = c;
    for (int i = 0; i < k - 1; i++)
    {
        if (low) c += d--;
        else c -= d--;
        ret[idx++] = c;
        low = !low;
    }
    for (int i = k; i < n; i++)
    {
        if (low) c++;
        else c--;
        ret[idx++] = c;
    }
    return ret;
}


----------------------------------------------------------------------------------------------------
3 Lines Python
def constructArray(self, n, k):
    res = range(1, n+1)
    for i in range(2, k+1): res = res[:i-1] + res[i-1:][::-1]
    return res


----------------------------------------------------------------------------------------------------
Python Easy Understand Solution
def constructArray(self, n, k):
        l, r, res = 2, n, [1]
        for _ in range(k - 1):
            if len(res) & 1:
                res.append(r)
                r -= 1
            else:
                res.append(l)
                l += 1
        if len(res) & 1:
            res.extend(range(l, r + 1))
        else:
            res.extend(range(r, l - 1, -1))
        return res

----------------------------------------------------------------------------------------------------
Short+simple with explanation
def construct_array(n, k)
  a = (1..n).to_a
  (1...k).each { |i| a[i..-1] = a[i..-1].reverse }
  a
end


----------------------------------------------------------------------------------------------------
Java O(n) Solution
public int[] constructArray(int n, int k) {
    int[] ret = new int[n];
    int hi = n;
    int lo = 2;
    ret[0] = 1;
    boolean last_hi = false;
    for (int i = 1; i < n; i++) {
        if (k > 1) {
            if (!last_hi){
                ret[i] = hi;
                hi --;
            }
            else {
                ret[i] = lo;
                lo ++;
            }
            last_hi = !last_hi;
            k--;
        }
        else {
            if (last_hi) {
                ret[i] = hi;
                hi--;
            }
            else {
                ret[i] = lo;
                lo++;
            }
        }
    }
    return ret;
}

----------------------------------------------------------------------------------------------------
My construction use 7 as example
class Solution {
    public int[] constructArray(int n, int k) {
        int[] res = new int[n];
        int i, j = 1, m = n, s;
        for(i = 0; i < k; i ++) {
            if(i % 2 == 0) {
                res[i] = j;
                j ++;
            }
            else {
                res[i] = m;
                m --;
            }
        }
        s = i;
        if(s % 2 == 1) {
            for(s = i; s < n; s ++) {
                res[s] = j;
                j ++;
            }
        }
        else {
            for(s = i; s < n; s ++) {
                res[s] = m;
                m --;
            }
        }
        return res;
    }
}



----------------------------------------------------------------------------------------------------
Simple python solution
class Solution:
    def constructArray(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[int]
        """
        ret = [1]
        v = k
        while v:
            if len(ret) % 2:
                ret.append(ret[-1] + v)
            else:
                ret.append(ret[-1] - v)
            v -= 1
        ret.extend(range(2 + k, n + 1))
        return ret


----------------------------------------------------------------------------------------------------
share my java solution, O(n) time complexity!
class Solution {
    public int[] constructArray(int n, int k) {
        int[] nums = new int[n];
        int count = 1;
        int lower = 1;
        int higher = n;
        
        int cnt = 0;
        while(k--!=0){
          if(cnt%2==0){
              nums[cnt]=lower;
              lower++;
          }else{
              nums[cnt]=higher;
              higher--;
          }
          cnt++;
        }
        
        if(cnt%2==1){
            while(cnt<n){
                nums[cnt++]=lower++;
            }
        }else{
            while(cnt<n){
                nums[cnt++]=higher--;
            }
        }
        
        return nums;
    }
}



----------------------------------------------------------------------------------------------------
Python one-line solution
class Solution:
    def constructArray(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[int]
        """
        from functools import reduce 
        return list(reduce(lambda x, y: x + y, [[i, k+2-i] for i in range(1, (k+1) // 2 + 1)])) + ([] if k % 2 != 0 else [k // 2 + 1]) + list(range(k+2, n+1)) 


----------------------------------------------------------------------------------------------------
Easy to Understand Java Solution
class Solution {
    public int[] constructArray(int n, int k) {
        if (n <= 0 || k <= 0 || k > n - 1) return new int[0];
        int count = 0;
        int[] res = new int[n];
        res[0] = 1;
        int head = 2, tail = n;
        int index = 1;
        int last = 1; // 1: head; -1: tail;
        while (head <= tail) {
            if (count == k - 1) break;
            res[index++] = tail--;
            last *= -1;
            count++;

            if (head > tail) break;
            if (count == k - 1) break;
            res[index++] = head++;
            last *= -1;
            count++;
            
        }
        if (count == k - 1) {
            if (last == 1) { // increasing order
                for (int i = head; i <= tail; i++) {
                    res[index++] = i;
                }
            } else { // decreasing order
                for (int i = tail; i >= head; i--) {
                    res[index++] = i;
                }
            }
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Java, easy to understand with explanation
class Solution {
    public int[] constructArray(int n, int k) {
        if(k>=n) return null;
        int[] arr = new int[n];
        int i = 0, small = 1, large = n;        
        while(i<k){ 
            arr[i++] = small++;
            if(i<k) arr[i++] = large--;
        }        
        if(k%2 == 0){ // k==2 ==> 1, 6, 5,4,3,2
            while(i<arr.length) arr[i++] = large--;
        } else { // k==3 ==> 1,6,2,3,4,5
            while(i<arr.length) arr[i++] = small++;
        }
        return arr;
    }
}


----------------------------------------------------------------------------------------------------
c++ O(n) solution with a simple proof
class Solution {
public:
    vector<int> constructArray(int n, int k) {
        //Put 1...k+1 in the first half of the array
        vector<int> array(n);
        int left = 1;
        int right = k + 1;
        int idx = 0;
        while (left <= right) {
            if (left < right) {
                array[idx++] = left;
                array[idx++] = right;
            } else {
                array[idx++] = left;
            }
            left++;
            right--;
        }
        for (int i = idx; i < n; i++) {
            array[i] = k + i - idx + 2;
        }
        return array;
    }
};


----------------------------------------------------------------------------------------------------
C++ code with comments
class Solution {
public:
    vector<int> constructArray(int n, int k) {
        //use 1 to n to construct k 
        
        //
        vector<int> ret;
        
        //in order to make k diff, we need 1 and k + 1
        
        //use 1 to 1 + k to make tail, tail only contribute diff 1, this will make sure in the future we will not add any different diff, so handle the tail first.
        
    
        for(int i = k + 2; i <= n; ++i)
        {
            ret.push_back(i);
        }
        
        //now every high - low couple make a new diff
        int low = 1;
        int high = 1 + k;
        
        while(low <= high)
        {
            if(low != high)
            {
                ret.insert(ret.begin(), high);
                ret.insert(ret.begin(), low);
                --high;
                ++low;
            }
            else
            {
                ret.insert(ret.begin(), high);
                ++low;
                --high;
            }
        }
        
        
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
simple python solution o(n)
class Solution(object):
    def constructArray(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[int]
        """
        
        p = [i for i in range(1, n + 1)]
        if k == 1:
            return p
        
        cc = k + 1
        dd = 1
        
        for i in range(k + 1):
            if i % 2 == 0:
                p[i] = cc
                cc -= 1
            else:
                p[i] = dd
                dd += 1
        return p
                


----------------------------------------------------------------------------------------------------
c++ O(n) easy solution
<p>fetch 1~k + 1 to satisfy the requirement(like 1 , k + 1, 2, k, 3, k - 1,.....)<br/>
&#39;&#39;&#39;<br/>
class Solution {<br/>
public:<br/>
vector&lt;int&gt; constructArray(int n, int k) {<br/>
int x = 1, y = k + 1;<br/>
std::vector&lt;int&gt; v;<br/>
while(x &lt; y)<br/>
{<br/>
v.push_back(x);<br/>
v.push_back(y);<br/>
x++;<br/>
y--;<br/>
}<br/>
if(x == y)<br/>
v.push_back(x);<br/>
for(int i = k + 2; i &lt;= n; i++)<br/>
v.push_back(i);<br/>
return v;<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
Java simple solution
public int[] constructArray(int n, int k) {
    //number 1-n. if ascending order, always has diff = 1. 
    //reorder to be 1, k+1, 2, k, 3 ... so have diff = k,k-1,k-2....1
    int[] res = new int[n];
    int inc = 1, dec = k+1;
    for(int i=0;i<=k;i++){
        if(i%2==0)
            res[i] = inc++;
        else
            res[i] = dec--;
    }
   
    for(int i=k+1;i<n;i++){
        res[i] = i+1;
    }
    
    return res;
}

----------------------------------------------------------------------------------------------------
