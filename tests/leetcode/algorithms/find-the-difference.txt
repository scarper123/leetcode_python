Simple O(N) time, O(1), space Java solution.
    public class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head != null) {
        
            ListNode odd = head, even = head.next, evenHead = even; 
        
            while (even != null && even.next != null) {
                odd.next = odd.next.next; 
                even.next = even.next.next; 
                odd = odd.next;
                even = even.next;
            }
            odd.next = evenHead; 
        }
        return head;
    }}

----------------------------------------------------------------------------------------------------
Straigntforward Java solution, O(1) space, O(n) time
    public ListNode oddEvenList(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode odd=head,ehead=head.next,even=ehead;
        while(even!=null&&even.next!=null){
            odd.next=even.next;
            odd=odd.next;
            even.next=odd.next;
            even=even.next;
        }
        odd.next=ehead;
        return head;
    }

----------------------------------------------------------------------------------------------------
Simple C++ solution, O(n) time, O(1) space
        ListNode* oddEvenList(ListNode* head) 
        {
            if(!head) return head;
            ListNode *odd=head, *evenhead=head->next, *even = evenhead;
            while(even && even->next)
            {
                odd->next = odd->next->next;
                even->next = even->next->next;
                odd = odd->next;
                even = even->next;
            }
            odd->next = evenhead;
            return head;
        }

----------------------------------------------------------------------------------------------------
1ms Java Solution

    public class Solution {
        public ListNode oddEvenList(ListNode head) {
            if(head == null || head.next == null)
                return head;
            ListNode odd = head;
            ListNode even = head.next;
            ListNode evenHead = even;
            while(odd.next != null && even.next != null){
                odd.next = even.next;
                odd = odd.next;
                even.next = odd.next;
                even = even.next;
            }
            odd.next = evenHead;
            return head;
        }
    }

----------------------------------------------------------------------------------------------------
Clear Python Solution
    def oddEvenList(self, head):
        dummy1 = odd = ListNode(0)
        dummy2 = even = ListNode(0)
        while head:
            odd.next = head
            even.next = head.next
            odd = odd.next
            even = even.next
            head = head.next.next if even else None
        odd.next = dummy2.next
        return dummy1.next

----------------------------------------------------------------------------------------------------
Simple Java Solution with Explanation
We just need to form a linked list of all odd nodes(X) and another linked list of all even nodes(Y). Afterwards, we link Y to the end of X, and return the head of X.

    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode odd = head;
        ListNode even = head.next;
        ListNode even_head = head.next;
        while(even != null && even.next != null){
            odd.next = odd.next.next;
            even.next = even.next.next;
            odd = odd.next;
            even = even.next;
        }
        odd.next = even_head;
        return head;
    }

----------------------------------------------------------------------------------------------------
My c++ solution
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {


        if(head == NULL || head->next == NULL)
            return head;
        ListNode *odd = head;
        ListNode *even_head = head->next;
        ListNode *even = even_head;
        
        while(even != NULL && even->next != NULL)
        {
            odd->next = even->next;
            odd = odd->next;
            even->next = odd->next;
            even = even->next;
        }
        odd->next = even_head;
        return head;
    }
};

----------------------------------------------------------------------------------------------------
Java in-place solution.
        
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode p1 = head, p2 = head.next, pre = p2;
        while (p2 != null && p2.next != null) {
            p1.next = p2.next;
            p1 = p1.next;
            p2.next = p1.next;
            p2 = p2.next;
        }
        p1.next = pre;
        return head;
    }

----------------------------------------------------------------------------------------------------
Python solution with two pointers O(N)
    # Definition for singly-linked list.
    # class ListNode(object):
    #     def __init__(self, x):
    #         self.val = x
    #         self.next = None
    
    class Solution(object):
        def oddEvenList(self, head):
            """
            :type head: ListNode
            :rtype: ListNode
            """
            if not head:
                return head
            odd=head
            even=head.next
            while even and even.next!=None:
                temp = even.next
                even.next = even.next.next
                temp.next = odd.next
                odd.next = temp
                odd=odd.next
                even=even.next
            return head


read in two node at a time: 

first node(odd) goes into odd.next 
2nd node(even).next = next even node (node.next.next) 

rinse and repeat

so basically

1 - 2 - 3 - 4- 5- 6 -7-null 
odd = 1 even = 2
temp = 3 
even(2).next = even.next.next(4) 
temp(3).next=odd(1).next(2) 
(this makes sure the end of odd always points to start of even) 
odd(1).next = temp(3) 
odd = odd.next(3) move the pointer 
even = even.next(4) move the pointer

1-3(odd)-2-4(even)-5-null

1-3-5(odd)-2-4-null(even)

1-3-5-7(odd)-2-4-6-null(even)


----------------------------------------------------------------------------------------------------
Java Solution better than 98% of solutions
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode(int x) { val = x; }
     * }
     */
    public class Solution {
        public ListNode oddEvenList(ListNode head) {
            if(head != null){
                if(head.next == null || head.next.next == null){
                    return head;
                }
                else {
                    ListNode odd = head;
                    ListNode even = head.next;
                    ListNode even1 = head.next;
                    while (even != null && even.next != null) {
                        odd.next = even.next;
                        odd = odd.next;
                        even.next = odd.next;
                        even = even.next;
                    }
                    odd.next = even1 ;
                }
            }
            return head;
        }
    }

----------------------------------------------------------------------------------------------------
1ms simple to understand JAVA solution

public class Solution {
    
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }
        
        ListNode even = head.next, odd = head, evenHead = head.next;
        
        while(even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
}

----------------------------------------------------------------------------------------------------
64 ms Python solution
    class Solution(object):
        def oddEvenList(self, head):
            """
            :type head: ListNode
            :rtype: ListNode
            """
            if not head or not head.next or not head.next.next:
                return head
            oddHead = head
            evenHead = head.next
            even = evenHead
            while evenHead and evenHead.next:
                oddHead.next = evenHead.next
                oddHead = oddHead.next
                evenHead.next = oddHead.next
                evenHead = evenHead.next
            oddHead.next = even
            return head

----------------------------------------------------------------------------------------------------
Java 0ms solution,easy to understand
    public ListNode oddEvenList(ListNode head) {
    	if(head!=null){
        	ListNode odd = head;
        	ListNode even = head.next;
        	ListNode p = even;
        	
        	while(odd.next!=null && even.next!=null){
        		odd.next = even.next;
        		odd = odd.next;
        		even.next = odd.next;
        		even = even.next;
        	}
        	odd.next = p;
    	}
		return head;
    } 

----------------------------------------------------------------------------------------------------
Java simple 1 ms solution with explaination
  

The idea is simple. Have a pointer for the beginning of odd and a pointer for beginning of even,
then we have a odd pointer  that points the current odd node and use it to connect to its oddPointer.next.next, same goes for connecting even. When even pointer is null we know it's at the end of the list. Then we just merge two list and return odd head.


       public ListNode oddEvenList(ListNode head) {
        if(head == null)
            return null;
        if(head.next == null || head.next.next == null) // if there are only 1 or 2 nodes then just return head
            return head;

        ListNode oddHead = head;
        ListNode evenHead = head.next;
        ListNode oddP = oddHead, evenP = evenHead;

        while(evenP != null && evenP.next != null){
            oddP.next = oddP.next.next;
            evenP.next = evenP.next.next;
            oddP = oddP.next;
            evenP = evenP.next;
        }
        oddP.next = evenHead;  //merge odd and even 
        return oddHead;
    }


----------------------------------------------------------------------------------------------------
My easy C++ solution
    class Solution {
    public:
    ListNode* oddEvenList(ListNode* head) {
      
    if(!head || !head->next ||!head->next->next)return head;
        ListNode * odd=head;
        ListNode * even=head->next;
        ListNode * tmp=even;
        while(even||odd)//1->1->NULL
        {
            odd->next=odd->next->next;//1->3->5
            even->next=even->next->next;//2->4->null
            
            odd=odd->next; //3
            even=even->next;//4
            if(odd->next==NULL || odd->next->next==NULL)break;
            
        }
       odd->next=tmp;
        return head;
       }
    };

----------------------------------------------------------------------------------------------------
O(1) space and O(n) time,C++ solution
    ListNode* oddEvenList(ListNode* head) {
        if(head == NULL)
            return head;
        ListNode *head_even = head->next;
        ListNode *a = head, *b = head_even;
        
        while(b != NULL && b->next != NULL){
            a->next = b->next;
            a = a->next;
            b->next = a->next;
            
            b = b->next;
        }
        a->next = head_even;
        return head;
    }

----------------------------------------------------------------------------------------------------
1ms Java simple solution
public class OddEvenLinkedList {

	public static ListNode oddEvenList(ListNode head) {
		if (head == null || head.next == null)
			return head;
		ListNode even_head = head.next;
		ListNode odd = head, even = even_head;
		while (even != null && even.next != null) {
			odd.next = even.next;
			even.next = even.next.next;
			odd = odd.next;
			even = even.next;
		}
		odd.next = even_head;
		return head;
	}

}

----------------------------------------------------------------------------------------------------
6 lines 4 ms solution in C
    struct ListNode* oddEvenList(struct ListNode* head) 
    {
         struct ListNode nodes[2] = {{0, NULL}, {0, NULL}};
         struct ListNode * lists[2] = {&nodes[0], &nodes[1]};
         for(int flag = 0; head; head = head->next, flag = !flag) lists[flag] = lists[flag]->next = head;
         lists[0]->next = nodes[1].next;
         lists[1]->next = NULL;
         return nodes[0].next;
    }

----------------------------------------------------------------------------------------------------
Java solution, O(n) time, O(1) space
    public class Solution {
    public ListNode oddEvenList(ListNode head) {
        
        if( head==null || head.next==null )
            return head;
            
        ListNode firstEven = head.next;
        ListNode lastOdd = head;
        ListNode cur = head;
        
        int n=1;
        
        while(true){
            
            if(n%2==1)
                lastOdd = cur;

            
            if(cur.next == null){
                lastOdd.next = firstEven;
                break;
            }
            
        
            ListNode nextNode = cur.next;
            cur.next = cur.next.next;
            cur = nextNode;
            
            n++;
        }
        
        return head;
        
    }
}

----------------------------------------------------------------------------------------------------
6 lines beats 74%
def oddEvenList(self, head):
        if head:
          odd, even, evenHead = head, head.next, head.next
          while even and even.next:
            odd.next, even.next = odd, even = odd.next.next, even.next.next
          odd.next = evenHead
        return head

----------------------------------------------------------------------------------------------------
