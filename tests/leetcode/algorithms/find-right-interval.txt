Java O(n) time, O(1) space iterative solution 130ms
public List<Integer> lexicalOrder(int n) {
        List<Integer> list = new ArrayList<>(n);
        int curr = 1;
        for (int i = 1; i <= n; i++) {
            list.add(curr);
            if (curr * 10 <= n) {
                curr *= 10;
            } else if (curr % 10 != 9 && curr + 1 <= n) {
                curr++;
            } else {
                while ((curr / 10) % 10 == 9) {
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        return list;
    }


----------------------------------------------------------------------------------------------------
Simple Java DFS Solution
public class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> res = new ArrayList<>();
        for(int i=1;i<10;++i){
          dfs(i, n, res); 
        }
        return res;
    }
    
    public void dfs(int cur, int n, List<Integer> res){
        if(cur>n)
            return;
        else{
            res.add(cur);
            for(int i=0;i<10;++i){
                if(10*cur+i>n)
                    return;
                dfs(10*cur+i, n, res);
            }
        }
    }
}



----------------------------------------------------------------------------------------------------
AC 200ms c++ solution, beats 98%
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> res(n);
        int cur = 1;
        for (int i = 0; i < n; i++) {
            res[i] = cur;
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) 
                    cur /= 10;
                cur += 1;
                while (cur % 10 == 0)
                    cur /= 10;
            }
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Python with Sorting
cmp

----------------------------------------------------------------------------------------------------
The most elegant python solution so far. 10 liner. iterative. O(n) time, O(1) space.
class Solution(object):
    def lexicalOrder(self, n):
        ans = [1]
        while len(ans) < n:
            new = ans[-1] * 10
            while new > n:
                new /= 10
                new += 1
                while new % 10 == 0:    # deal with case like 199+1=200 when we need to restart from 2.
                    new /= 10
            ans.append(new)    
        return ans


----------------------------------------------------------------------------------------------------
&quot;Merge Sort&quot; solution (with explanation)
ok

----------------------------------------------------------------------------------------------------
Recursive Java Solution using pre-order traversal
public class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> res = new ArrayList<>();
        lexicalOrderHelper(res, 1, n);
        return res;
    }

    private void lexicalOrderHelper(List<Integer> res, int i, int n) {
        if(i > n) return;
        res.add(i);
        lexicalOrderHelper(res, i * 10, n);
        if(i + 1 <= (i / 10) * 10 + 9) lexicalOrderHelper(res, i + 1, n);
        else return;
    }
}


----------------------------------------------------------------------------------------------------
Java Backtracking Solution, Similar to Subsets
public class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            if (i <= n) {
                helper(result, n, i);
            }
        }
        return result;
    }
    
    private void helper(List<Integer> result, int n, int last) {
        if (last > n) {
            return;
        }

        result.add(last);

        for (int i = 0; i <= 9; i++) {
            helper(result, n, last * 10 + i);
        }
    }
}


----------------------------------------------------------------------------------------------------
Python with DFS
dfs

----------------------------------------------------------------------------------------------------
C++ Solution O(n) time and O(1) space with explanation
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> rs;
        
        int i = 1, j;
        int k;
        for(;;)
        {
            // append as many zeroes as possible to the previous number
            for(k = 0; i*pow(10,k) <= n; ++k) rs.push_back(i*pow(10,k));
            
            // count continuously until we reach a number that ends with consecutive '9's
            for(j = rs.back()+1; j <= n && (j % 10) != 0; ++j) rs.push_back(j);
            
            // backtrace
            if(j % 10 == 0)
            {
                j--;
            }
            else
            {
                j /= 10;
            }

            // find the last non-'9' digit
            while(j % 10 == 9) j /= 10;
            
            // start a new sub-sequence
            i = j+1;
            
            if(rs.size() >= n) break;
        }

        return rs;
    }
};


----------------------------------------------------------------------------------------------------
Simple JAVA Solution By Recursion
public List<Integer> lexicalOrder(int n) {
    List<Integer> ans = new ArrayList<>(n);
    
    for (int i = 1; i <= 9 && i <= n; i++) {
        ans.add(i);
        solve(ans, n, i*10);
    }
    
    return ans;
}

private void solve(List<Integer> ans, int n, int high) {
    for (int i = 0; i <= 9; i++) {
        int newNum = high+i;
        if (newNum > n) return;
        ans.add(newNum);
        solve(ans, n, newNum*10);
    }
}


----------------------------------------------------------------------------------------------------
7 lines simple C++ recursive solution
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> res;
        helper(1, n, res);
        return res;
    }
    
    void helper(int target, int n, vector<int>& res) {
        if (target > n) return;
        res.push_back(target);
        helper(target * 10, n, res);
        if (target % 10 != 9) helper(target+1, n, res);
    }
};


----------------------------------------------------------------------------------------------------
How to think it in the DFS way
n

----------------------------------------------------------------------------------------------------
Simple Java DFS Solution (beats 85%, 12 lines)

public class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> res = new ArrayList<>(n);
        //  from  1 to 9.
        //  0 is can't be a soution.
        dfs(1, 9, n, res);
        return res;
    }
    private void dfs(int start, int end, int n, List<Integer> res){
        // <= n make the solution can't bigger than n
        for (int i = start; i <= end && i <= n; i++){
            res.add(i);
            // 10 -> next recursion: 100(->next recursion 1000), 101,102....
            // next loop: 11 -> next recursion: 110,  111,112....
            // next loop: 12 -> next recursion: 120,  121,122....
            // from 0 to 9 different from the dfs call in method lexicalOrder
            dfs(i * 10, i * 10 + 9, n, res);
        }
    }
}


----------------------------------------------------------------------------------------------------
Share my O(n) time, O(1) space solution
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        vector<int> ans(n);
        int count = 1;
        for (int i = 0; i < n; i++) {
            ans[i] = count;
            if (count * 10 <= n)
                count *= 10;
            else if (count % 10 == 9) {
                count++;
                while (count % 10 == 0)
                    count /= 10;
            }
            else if (count + 1 > n) {
                count /= 10;
                count++;
                while (count % 10 == 0)
                    count /= 10;
            }
            else
                count++;
        }
        return ans;
    }
};

----------------------------------------------------------------------------------------------------
Short C++ Naive Method with Explaination
class Solution {
public:
    vector<int> lexicalOrder(int n) {
        stack<int> nums;
        nums.push(0);
        int i;
        vector<int> result;
        while (!nums.empty()){
            //get a new number
            i=nums.top()+1;
            nums.pop();
            if (i%10==0) continue;
            //then try to go up
            while (i<=n){
                result.emplace_back(i);
                nums.push(i);
                i*=10;
            }
        }
        return result;
    }
};


----------------------------------------------------------------------------------------------------
Based on NextInt cpp code o(n) time and o(1) space
int nextInt(int pi, const int& N){
        if(pi * 10 <= N) return pi*10;
        if(pi == N) pi /= 10;
        pi++;
        while(pi % 10 == 0) pi /= 10;
        return pi;
    }
    vector<int> lexicalOrder(int n) {
        if(n < 1) return vector<int>();
        vector<int> res(n);
        res[0] = 1;
        for(int i = 1; i < n; ++i){
             res[i] = nextInt(res[i-1], n);
        }
        return res;
    }

----------------------------------------------------------------------------------------------------
Java very easy understanding iterative solution, O(n) time and O(1) space
public class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> res=new ArrayList<>();
        int x=0;
        while(res.size()<n ){
            x++;
            while(x<=n){
                if(res.size()==n) return res;
                res.add(x);
                x=x*10;
            }
            x=x/10;
            while((x+1)%10==0){
                x=(x+1)/10-1;
            }
        }
        
        return res;
    }
}


----------------------------------------------------------------------------------------------------
&#91;Short&#93; 5 lines C++ using static map
    vector<int> lexicalOrder(int n) {
        vector<int>res;
        static map<string, int>m;
        if(n > m.size()) for(int i = m.size() + 1; i < n + 1; i++) m[to_string(i)] = i;
        for(auto x: m) if(x.second < n + 1) res.push_back(x.second);
        return res;
    }


----------------------------------------------------------------------------------------------------
Java Recursive solution constant space 160ms
public class Solution {
    
    int n;
    
    private void helper(int pre, List<Integer> res){
        for(int i = 0; i <= 9; i++){
            int ele = 10 * pre + i;
            if(ele > n) break;
            if(ele > 0){
                res.add(ele);
                helper(ele, res);
            }
        }
    }
    
    public List<Integer> lexicalOrder(int n) {
        this.n = n;
        List<Integer> res = new ArrayList<>(n);
        helper(0, res);
        return res;
    }
}


----------------------------------------------------------------------------------------------------
