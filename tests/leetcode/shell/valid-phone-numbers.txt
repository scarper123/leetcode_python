Three different solutions using grep, sed, and awk
Using `grep`:

    grep -P '^(\d{3}-|\(\d{3}\) )\d{3}-\d{4}$' file.txt

Using `sed`:

    sed -n -r '/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/p' file.txt

Using `awk`:

    awk '/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/' file.txt

----------------------------------------------------------------------------------------------------
Grep -e solution with detailed explanation, good for those new to regex
    grep -e '\(^[0-9]\{3\}-[0-9]\{3\}-[0-9]\{4\}$\)' -e '\(^([0-9]\{3\})[ ]\{1\}[0-9]\{3\}-\([0-9]\{4\}\)$\)'  file.txt

1. In Bash, we use `\` to escape next one trailing character;
2. `^` is used to denote the beginning of a line
3. `$` is used to denote the end of a line
4. `{M}` is used to denote to match exactly `M` times of the previous occurence/regex
5. `(...)` is used to group pattern/regex together

Back to this problem: it requires us to match two patterns, for better readability, I used -e and separate the two patterns into two regexes, the first one matches this case: `xxx-xxx-xxxx` and the second one matches this case: `(xxx) xxx-xxxx`

Please vote this post up if you find it helpful for your understanding!

Cheers!

----------------------------------------------------------------------------------------------------
My &quot;grep -E&quot; solution
    # Read from the file file.txt and output all valid phone numbers to stdout.
    
    # use grep -P
    grep -P '^\([0-9]{3}\)\s[0-9]{3}-[0-9]{4}$|^[0-9]{3}-[0-9]{3}-[0-9]{4}$' file.txt

----------------------------------------------------------------------------------------------------
Memory Limit Exceeded,why?
awk '/^[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$|^\([0-9][0-9][0-9]\) [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$/' file.txt 

----------------------------------------------------------------------------------------------------
This is my simple solution
    awk < file.txt '/^[0-9][0-9][0-9]\-[0-9][0-9][0-9]\-[0-9][0-9][0-9][0-9]$/ || /^\([0-9][0-9][0-9]\) [0-9][0-9][0-9]\-[0-9][0-9][0-9][0-9]$/ {print}'

The format for 'awk':
awk < file 'pattern {action}'
or
awk 'pattern {action}' file

Note: 'print' action without any arguments means print out the whole line.

----------------------------------------------------------------------------------------------------
1 Line Solution with Egrep and Regular Expression
    egrep -o "^(([0-9]{3}\-)|(\([0-9]{3}\) )){1}[0-9]{3}\-[0-9]{4}$" file.txt

 1. **egrep -o**: output the exact match
 2. **^**: match the beginning of line
 3. **([0-9]{3}\\-)**: match exactly 3 digits followed by '-', e.g. *xxx-*.
 4. **(\\([0-9]{3}\\) )**: match 3 digits between ( and ) followed by a single
    space, e.g. *(xxx)* .
 5. **(([0-9]{3}\\-)|(\\([0-9]{3}\\) )){1}**: combine the two previous matches from point 3 and 4:
    matches or 3 digits followed by '-', e.g. *xxx-*, or 3 digits between ( and )
    followed by a single space, e.g. *(xxx)* , exactly {1} time, because the phone number can be in the format *(xxx) xxx-xxxx* or *xxx-xxx-xxxx*.
 6. **[0-9]{3}\\-**: match exactly 3 digits followed by '-'
 7. **[0-9]{4}**: match exactly 4 digits
 8. **$**: match end of line

----------------------------------------------------------------------------------------------------
My solution using grep
Just use grep, the case (000) and 000- should handle by or operator.

    grep "^\(\([0-9]\{3\}-\)\|\(([0-9]\{3\}) \)\)[0-9]\{3\}-[0-9]\{4\}$" file.txt

----------------------------------------------------------------------------------------------------
What&#x27;s the difference between &#x5C;d and &#91;0-9&#93; in grep?
first time I submitted

    cat file.txt | grep -E '^(\(\d{3}\) |\d{3}\-)\d{3}\-\d{4}$'

and get wrong answer with following case:
Input: 	123-456-7891
Output: 	
Expected: 	123-456-7891

However, I test my command om my compture (osX 10.10), and it works fine.

then I replaced \d with [0-9]

    grep -E '^(\([0-9]{3}\) |[0-9]{3}\-)[0-9]{3}\-[0-9]{4}$' file.txt

and I got accepted.

so, is there any difference between \d and [0-9]? or I'm just get WA because I used cat first time?

----------------------------------------------------------------------------------------------------
Why my solution is wrong
    cat file.txt | awk '/^ *[0-9]{3}-[0-9]{3}-[0-9]{4} *$/{print $0} /^ *\([0-9]{3}\) [0-9]{3}-[0-9]{4} *$/{print $0}'


my solution faild on 123-456-7891

----------------------------------------------------------------------------------------------------
Why blank made difference?
    grep -P '^(\d{3}-|\(\d{3}\))\d{3}-\d{4}$' file.txt

got error in (001) 345-0000, while

    grep -P '^(\d{3}-|\(\d{3}\) )\d{3}-\d{4}$' file.txt

passed.

Could you guys advise why? thanks

----------------------------------------------------------------------------------------------------
Wrong Output of Shell question &quot;valid phone number&quot;
For Shell Question "valid phone number", I submitted the below code: 

     while read LINE
     do
         if [[ $LINE =~ "^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$" ]] || [[ $LINE =~ "^[0-9]{3}-[0-9]{3}-[0-9]{4}$" ]]; then
             echo $LINE
         fi
     done < 'file.txt'

Finally, Leetcode judge my code to wrong output by one input "123-456-7891".
However, such input can be pass from my own test.

    ytjiang@xxxxx:~/code_practice % sh ValidPhoneNumber.sh
    123-456-7891

Really wired me....

Thanks in advance!





----------------------------------------------------------------------------------------------------
&quot;egrep &#x27;(&#x5C;(&#x5C;d{3}&#x5C;) |&#x5C;d{3}-)&#x5C;d{3}-&#x5C;d{4}&#x27; .&#x2F;file.txt&quot; is wrong ?
why `"egrep '(\(\d{3}\) |\d{3}-)\d{3}-\d{4}' ./file.txt"` to solve the problem is wrong ?

On my mac that is OK.

**Input**:

    987-123-4567
    123 456 7890
    (123) 456-7890


**Output**:

    987-123-4567
    (123) 456-7890



----------------------------------------------------------------------------------------------------
Why my solution is wrong ?
sed -e 's/^[ \t]*\|[ \t]*$//g' file.txt | grep -P '^\d{3}-\d{3}-\d{4}|\(\d{3}\)\s\d{3}-\d{4}$'

----------------------------------------------------------------------------------------------------
My answer (numerous trials....)
sed -rn '/^[0-9]{3}-[0-9]{3}-[0-9]{4}$|^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$/p' file.txt

----------------------------------------------------------------------------------------------------
Sed and posix awk solution
# Sed is needed to catch multiple white space issues
# awk --posix allows awk to use {n} notation to match exactly n counts of a regex
# Read from the file file.txt and output all valid phone numbers to stdout.
cat file.txt | sed 's/  \+/x/g' | awk --posix '{if (NF==2) {if ($1 ~ /^\([0-9]{3}\)/ && $2 ~ /[0-9]{3}-[0-9]{4}$/) print $0} else { if (NF==1 && $1 ~ /^[0-9]{3}-[0-9]{3}-[0-9]{4}$/) {print $0} } }'

----------------------------------------------------------------------------------------------------
Wrong Answer, Why?
egrep "^\d\d\d-\d\d\d-\d\d\d\d$|^\(\d\d\d\) \d\d\d-\d\d\d\d$" file.txt

zsh 5.0.8 (x86_64-apple-darwin15.0)

----------------------------------------------------------------------------------------------------
My easy understand grep -e solution
    grep -e "^[0-9]\{3\}-[0-9]\{3\}-[0-9]\{4\}$" -e "^([0-9]\{3\}) [0-9]\{3\}-[0-9]\{4\}$" file.txt

----------------------------------------------------------------------------------------------------
Why does it fail on 123-456-7891?
<p>My Statement is:<br/>
grep &#39;^(<em>\d{3})</em>&#91;- &#93;\d{3}-\d{4}$&#39; file.txt</p>
<p>When I run this locally against &#39;123-456-7891&#39; it returns it. Leetcode is saying that it doesn&#39;t.</p>


----------------------------------------------------------------------------------------------------
Use grep -P
<p>grep -P &#39;^(&#91;0-9&#93;{3}-|(&#91;0-9&#93;{3}) )&#91;0-9&#93;{3}-&#91;0-9&#93;{4}$&#39; file.txt</p>


----------------------------------------------------------------------------------------------------
my solution
cat file.txt |grep -e "^[0-9]\{3\}-[0-9]\{3\}-[0-9]\{4\}$" -e "^([0-9]\{3\}) [0-9]\{3\}-[0-9]\{4\}$"


----------------------------------------------------------------------------------------------------
