My Solution : Time O(n), Space O(1)
    class Solution {
        public:
        int removeDuplicates(int A[], int n) {
            if(n < 2) return n;
            int id = 1;
            for(int i = 1; i < n; ++i) 
                if(A[i] != A[i-1]) A[id++] = A[i];
            return id;
        }
    };

----------------------------------------------------------------------------------------------------
Share my clean C++ code
    int count = 0;
    for(int i = 1; i < n; i++){
        if(A[i] == A[i-1]) count++;
        else A[i-count] = A[i];
    }
    return n-count;



----------------------------------------------------------------------------------------------------
5 lines C++&#x2F;Java, nicer loops
I don't like old-style indexed looping. I much prefer the "enhanced" (Java) / "range-based" (C++) loops, they make things much cleaner.

---

**C++**

    int removeDuplicates(vector<int>& nums) {
        int i = 0;
        for (int n : nums)
            if (!i || n > nums[i-1])
                nums[i++] = n;
        return i;
    }

And to not need the `!i` check in the loop:

    int removeDuplicates(vector<int>& nums) {
        int i = !nums.empty();
        for (int n : nums)
            if (n > nums[i-1])
                nums[i++] = n;
        return i;
    }

---

**Java**

    public int removeDuplicates(int[] nums) {
        int i = 0;
        for (int n : nums)
            if (i == 0 || n > nums[i-1])
                nums[i++] = n;
        return i;
    }

And to not need the `i == 0` check in the loop:

    public int removeDuplicates(int[] nums) {
        int i = nums.length > 0 ? 1 : 0;
        for (int n : nums)
            if (n > nums[i-1])
                nums[i++] = n;
        return i;
    }


----------------------------------------------------------------------------------------------------
5 lines Java solution
    public int removeDuplicates(int[] A) {
        if (A.length==0) return 0;
        int j=0;
        for (int i=0; i<A.length; i++)
            if (A[i]!=A[j]) A[++j]=A[i];
        return ++j;
    }

----------------------------------------------------------------------------------------------------
Simple Python solution - O(n)
    class Solution:
        # @param a list of integers
        # @return an integer
        def removeDuplicates(self, A):
            if not A:
                return 0
    
            newTail = 0
    
            for i in range(1, len(A)):
                if A[i] != A[newTail]:
                    newTail += 1
                    A[newTail] = A[i]
    
            return newTail + 1

----------------------------------------------------------------------------------------------------
Simple C++ O(n) solution

    int removeDuplicates(vector<int>& nums) {
        int pos = 0;

        for (int i = 0; i < nums.size(); ++i) {
            if (i == 0 || nums[i] != nums[pos - 1])
                nums[pos++] = nums[i];
        }

        return pos;
    }

----------------------------------------------------------------------------------------------------
Java Solution with Explanation
    public class Solution {
        public int removeDuplicates(int[] nums) {
        
            int i = 1; //iterator thru array
            int j = 0; //current index
            for (; i<nums.length; i++) { 
                if (nums[i] != nums[j]) { //new number
                    j++; //move current index
                    nums[j] = nums[i]; //fill current index with new number
                } 
            }
        return j+1;
       }
    }

----------------------------------------------------------------------------------------------------
Simple 1ms Java Solution
    public class Solution
    {
        public int removeDuplicates(int[] nums)
        {
            int dupes = 0;
            
            for (int i = 1; i < nums.length; i++)
            {
                if (nums[i] == nums[i - 1])
                    dupes++;
                
                nums[i - dupes] = nums[i];
            }
            
            return nums.length - dupes;
        }
    }

----------------------------------------------------------------------------------------------------
C++ code, no trick
Use an index last to record the next written position (i.e. copy a new element to last+1).

    class Solution {
    public:
        int removeDuplicates(vector<int>& nums) {
            int last=0, i, len=nums.size();
            if(!len) return 0;
            for(i=0; i<len;++i)
            {
                if(nums[i]!=nums[last]) nums[++last] = nums[i];
            }
            return last+1;
            
        }
    };

----------------------------------------------------------------------------------------------------
Clean 5 Line Java Solution
    public int removeDuplicates(int[] nums) {
        int cur = 0 ; 
        for(int n:nums)
            if(n>nums[cur])
                nums[++cur] = n;
        return cur+1;
    }

----------------------------------------------------------------------------------------------------
My accepted python code via while loop
    class Solution:
    # @param a list of integers
    # @return an integer
    
    def removeDuplicates(self, A):
        if not A:
            return 0
        else:
            ii,jj=1,1
            while jj<len(A):
                if A[ii-1]!=A[jj]:
                    A[ii]=A[jj]
                    ii+=1
                jj+=1
            return ii

the code use a while loop with two indexes ii and jj. jj went through all elements in A and ii is used to record non-duplicated elements in A. Any comments would be appreciated

----------------------------------------------------------------------------------------------------
Simple AC solution in C++ with O(n) time and O(1) space
    class Solution {
    public:
        int removeDuplicates(int A[], int n) {
            int length=n, i,j;
            for(i=1,j=0;i<n;i++){
                if(A[j]<A[i]) A[++j]=A[i];
                else length--;
            }
            return length;
            
        }
    };

----------------------------------------------------------------------------------------------------
1 Line C++ Solution
Only 1 line using STL

     return unique(A, A+n)-A;

The unique algorithm record the positions of the unique elements, and then remove duplicates using unique_copy(). The above code has a 41 ms time cost.

Below is my 33ms solution without STL.

    class Solution {
    public:
        int removeDuplicates(int A[], int n) {
           int mark=1;
           for(int i=1;i<n;i++)
            {
                if(A[i]!=A[i-1])
                    A[mark++]=A[i];
            }
            return min(mark,n);
        }
    };

----------------------------------------------------------------------------------------------------
1ms Java solution O(N) time O(1) space
    public int removeDuplicates(int[] nums) 
    {
        if (nums.length<2)
            return nums.length;
                
        int swapped = 1;
        
        for (int i=1; i<nums.length;i++)
            if(nums[i-1]<nums[i])
            {
                nums[swapped] = nums[i];
                swapped++;
            }
        
        return swapped;
    }

----------------------------------------------------------------------------------------------------
Can my Java solution be improved?
My two pointers solution with O(n) time+ O(1) space.
The idea is to user 2 pointers. j finds out each different element it meets. i record the insert position of the next different element and eventually it records the length of the new Array without duplicate.

This is accepted. Just want to know is there any better algorithms or thoughts.

    public class Solution {
        public int removeDuplicates(int[] A) {
            if(A.length<=1)return A.length;
            int i = 0;
            int j = 0;
            int cur = A[j];
            while(j<A.length){
                if(A[j]!=cur){
                    cur = A[j];
                    A[i+1] = cur;
                    i++;
                }
                j++;
            }
            return i+1;
        }
    }

----------------------------------------------------------------------------------------------------
My C++ O(n) solution
    class Solution {
    public:
        int removeDuplicates(vector<int>& nums) {
            if(nums.size() == 0)
                return 0;
            int i = 0,j = 1;
            while(j < nums.size())
            {
                if(nums[j] != nums[i])
                    nums[++i] = nums[j];
                j++;
            }
            return i + 1;
        }
    };

----------------------------------------------------------------------------------------------------
My one-pass solution
    class Solution {
    public:
        int removeDuplicates(int A[], int n) {
            if (n == 0)
            {
                return n;
            }
            int k = 0;
            for (int i = 1; i < n; i++)
            {
                if (A[i] != A[k])
                {
                    A[++k] = A[i];
                }
            }
            return k + 1;
        }
    };

----------------------------------------------------------------------------------------------------
O(n) solution with O(1) space in Java
Two pointers. One denotes the position to insert an element which is different from previous values. Another iterates the array until the end. The length equals the index of last position needs to be inserted with a value.

    public class Solution {
        public int removeDuplicates(int[] A) {
            if (A == null) {
                return 0;
            }
            if (A.length <= 1) {
                return A.length;
            }
            int insert = 1, index = 1;
            while (index < A.length) {
                if (A[index] != A[insert - 1]) {
                    A[insert] = A[index];
                    insert++;
                }
                index++;
            }
            return insert;
        }
    }

----------------------------------------------------------------------------------------------------
My Concise Java Solution
    public class Solution {
        public int removeDuplicates(int[] A) {
            if (A == null || A.length == 0) return 0;
            int tail = 0;
            for (int i=1; i<A.length; i++) {
                if (A[i] != A[tail]) {
                    A[++tail] = A[i];
                } 
            }
            return tail+1;
        }
    }

----------------------------------------------------------------------------------------------------
Accepted python solution
After reading from comments I realized the question don't want us to remove elements from the list, but to put non-duplicated list in the beginning and return the size of it. And OJ doesn't care about the rest of the list.

I don't understand why this question don't allow us to use del to remove element from the list. Maybe because of the definition of  Array structure in C? 

    class Solution:
        # @param a list of integers
        # @return an integer
        def removeDuplicates(self, A):
            if not A:
                return 0
            end = len(A)
            read = 1
            write = 1
            while read < end:
                if A[read] != A[read-1]:
                    A[write] = A[read]
                    write += 1
                read += 1
            return write

----------------------------------------------------------------------------------------------------
