A simple solution
  

      int candy(vector<int> &ratings)
     {
    	 int size=ratings.size();
    	 if(size<=1)
    		 return size;
    	 vector<int> num(size,1);
    	 for (int i = 1; i < size; i++)
    	 {
    		 if(ratings[i]>ratings[i-1])
    			 num[i]=num[i-1]+1;
    	 }
    	 for (int i= size-1; i>0 ; i--)
    	 {
    		 if(ratings[i-1]>ratings[i])
    			 num[i-1]=max(num[i]+1,num[i-1]);
    	 }
    	 int result=0;
    	 for (int i = 0; i < size; i++)
    	 {
    		 result+=num[i];
    		// cout<<num[i]<<" ";
    	 }
    	 return result;
     }

----------------------------------------------------------------------------------------------------
One-pass constant space Java solution
Hi guys!

This solution picks each element from the input array only once. First, we give a candy to the first child. Then for each child we have three cases:

 1. His/her rating is equal to the previous one -> give 1 candy.
 2. His/her rating is greater than the previous one -> give him (previous + 1) candies.
 3. His/her rating is less than the previous one -> don't know what to do yet, let's just count the number of such consequent cases.
 
When we enter 1 or 2 condition we can check our count from 3. If it's not zero then we know that we were descending before and we have everything to update our total candies amount: number of children in descending sequence of raitings - coundDown, number of candies given at peak - prev (we don't update prev when descending). Total number of candies for "descending" children can be found through arithmetic progression formula (1+2+...+countDown). Plus we need to update our peak child if his number of candies is less then or equal to countDown. 

Here's a pretty concise code below.

----------

    public class Solution {
        public int candy(int[] ratings) {
            if (ratings == null || ratings.length == 0) return 0;
            int total = 1, prev = 1, countDown = 0;
            for (int i = 1; i < ratings.length; i++) {
                if (ratings[i] >= ratings[i-1]) {
                    if (countDown > 0) {
                        total += countDown*(countDown+1)/2; // arithmetic progression
                        if (countDown >= prev) total += countDown - prev + 1;
                        countDown = 0;
                        prev = 1;
                    }
                    prev = ratings[i] == ratings[i-1] ? 1 : prev+1;
                    total += prev;
                } else countDown++;
            }
            if (countDown > 0) { // if we were descending at the end
                total += countDown*(countDown+1)/2;
                if (countDown >= prev) total += countDown - prev + 1;
            }
            return total;
        }
    }

Have a nice coding!

----------------------------------------------------------------------------------------------------
Simple O(n) Java solution with comments
    public int candy(int[] ratings) {
        int candies[] = new int[ratings.length];        
        Arrays.fill(candies, 1);// Give each child 1 candy 
        	
        for (int i = 1; i < candies.length; i++){// Scan from left to right, to make sure right higher rated child gets 1 more candy than left lower rated child
	        if (ratings[i] > ratings[i - 1]) candies[i] = (candies[i - 1] + 1);
	    }
	     
	    for (int i = candies.length - 2; i >= 0; i--) {// Scan from right to left, to make sure left higher rated child gets 1 more candy than right lower rated child
		    if (ratings[i] > ratings[i + 1]) candies[i] = Math.max(candies[i], (candies[i + 1] + 1));
	    }
	    
        int sum = 0;        
        for (int candy : candies)  
        	sum += candy;        
        return sum;
	}

----------------------------------------------------------------------------------------------------
Very Simple Java Solution with detail explanation
    We take ratings array as [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]

In the given problem each student will have at least 1 candy. So distribute 1 candy to each.

    ratings:     [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
    candies:     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

Now traverse the array from left to right. If the rating of (n+1) child is greater than (n) child then set the candy of (n+1) child as one candy more than the (n) child candies.

    ratings:     [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
    candies:     [1, 2, 1, 1, 2, 3, 4, 1, 1, 1, 2, 1]

Now  traverse the array from right to left. If the (n) child rating is more than (n+1) child and (n) child candies is less than one more than (n+1) child candies then update the candies of (n) child as 1+ (n+1) candies.

    ratings:     [5, 6, 2, 2, 4, 8, 9, 5, 4, 0, 5, 1]
    candies:     [1, 2, 1, 1, 2, 3, 4, 3, 2, 1, 2, 1]

Total minimum candies: 23

    public int candy(int[] ratings) {
            int sum=0;
            int[] a=new int[ratings.length];
            for(int i=0;i<a.length;i++)
            {
                a[i]=1;
            }
            for(int i=0;i<ratings.length-1;i++)
            {
                if(ratings[i+1]>ratings[i])
                {
                    a[i+1]=a[i]+1;
                }
            }
            for(int i=ratings.length-1;i>0;i--)
            {
                if(ratings[i-1]>ratings[i])
                {
                    if(a[i-1]<(a[i]+1))
                    {
                        a[i-1]=a[i]+1;
                    }
                }
            }
            for(int i=0;i<a.length;i++)
            {
                sum+=a[i];
            }
            return sum;
        }

----------------------------------------------------------------------------------------------------
Two C++ solutions given with explanation (both with O(N) time, one with O(1) space, the other with O(N) space)
The question requires us to make sure a child with a higher rate has more candies than its left and right neighbors. One simple solution is to do two scans: one foward scan (from 1 to N-1) to make sure child i has more candies than its left neighbor if its rate is higher than its left neighbor. After the forward scan, we can guarantee that the left neighbor relationship is correct but we have to do more to make the right neighbor relationship in order; so we do the backwarad scan (from N-2 to 0) to make child i has more candies than its right neighbor i+1 if its rate is higher than its right neighbor. In the following implementation, we need a O(N) array number to save the number of candies needed for children, so it has O(N) space complexity and we do two linear scans so the time complexity is O(N) 

    class Solution {
    public:
        int candy(vector<int>& ratings) {
            int len = ratings.size(), res = 0, i;
            if(len>0)
            {
                vector<int> number(len,0); // to save the number of candies for child[0:N-1]
                number[0] = 1; 
    // forward scan to calculate how many candies needed for child i to make sure it has more candies than its left neighbor if it has a higher rate, otherwise, give one candy to it
                for(i=1; i<len;++i) number[i] = ratings[i]>ratings[i-1]?number[i-1]+1:1;
    
    // backward scan to calculate to make sure child i has more candies than its right neighbor if it has a higher rate, pick the bigger one from forward and backward scans as the final number for child i
                for(i=len-2, res = number[len-1]; i>=0;--i)
                {
                    if( (ratings[i]>ratings[i+1]) && number[i]<(number[i+1]+1) ) number[i] = number[i+1]+1;
                    res += number[i];
                }
            }
            return res;
        }
    };

Now, the question is can we do better? Do we really need two scans? If we do only forward scan, then the problem is we can not guarantee the right neighbor relationship holds. i.e. we don't know if the following order is descending (i>i+1>i+2>...). and that may cause issues. To fix that, we will detect the dips (the points at which the order switchs from increasing to decreasng). We will make sure all the local dips (minimum points) has only one candy and update its previous neighbors (which has hgher rates than its rate) accordingly. To do such update, we need to know when the decrease starts, so we use pPos to save that starting points. 
So the solution becomes: do the forward scan, if it is in an increasing order (child i rate > child i-1 order), check if it is a local dip (neg_peak == true): if so, update the candy number to make sure child i-1 has one candy. if not, just give one more candy to child i. If it is in an decreasing order (child i rate < child i-1 order)
, just give one less candy to i. don't forget at last, we still need to make sure child N-1 has one or more candy. So O(1) space , O(N) time

        class Solution {
        public:
            int candy(vector<int>& ratings) {
                const int len = ratings.size();
                if(len<=1) return len;
                
                int i, pPos, res=1, peak=1; // peak: # candies given to the i-1 child
                bool neg_peak = false; // flag to indicate if it is a local dip
                for(i=1; i<len;i++)
                {
                    if(ratings[i] >= ratings[i-1]) 
                    {   // it is increasing
                        if(neg_peak) 
                        {  // it is a local dip, we need to make sure i-1 has one candy
                            res -= (peak-1) * (i-pPos - (peak>0));
                            peak = 1;
                            neg_peak = false;
                        }
                       // update child i candy number, if equal, set to 1
                        peak = (ratings[i] == ratings[i-1])? 1:++peak;
                        res += peak;
                    }
                    else
                    { // decreasing, just give one less candy, if it is the starting point of a decrease, update pPos
                        if(!neg_peak) {pPos = i-1; neg_peak = true;}
                        res += --peak;
                    }
                }
    // don't forget to update res, if the last one is a local dip
                return !neg_peak? res : res - (peak-1) * (i-pPos - (peak>0));
        
            }
        };




----------------------------------------------------------------------------------------------------
C++ easy to understand? Solution with lot of comments ( O(n), constant space, one pass)
Let me know if you find it easy please.

    Ratings:
                        Peak
            Peak        |
            |           | |
          | |           | | |   
        | | | |       | | | | |       | | |
      | | | | | |   | | | | | | |     | | |
    | | | | | | | | | | | | | | | | | | | |
                    Candies:
    1 2 3 4 5 3 2 1 2 3 5 4 3 2 1 1 1 2 1 1
    x---a---x
            x--b--x    





    



 It seems easy to track the length of the slopes of the mountains (sequence of all ascending or 
 all descending ratings)
 and then sum the candies for the two slopes (an easy n*(n+1)/2), with land sequences adding +1 each 
 rating value. 

 It almost works.
 Big problem is we don't know who the peak belongs (left or right slope?)

 Example: the first sequence "a" is made of 5 ascending elements. 
    The second sequence "b" is made of 4 descending elements.
    Which slope gets the peak? 

 Answer: the longest. So for the first mountain "a" slope is
 
    L(a)=4    ==>  4+3+2+1 candies 

and "b" is 

    L(b)=3 ==> 3+2+1 candies

Peak is 

    max(L(a),L(b)) + 1 ==>5 candies.
         

 Unfortunately we can know the longer side of the mountain at the end of the mountain only.

 So we use "up" and "down" variable to track the length of the slopes. We sum the candies 
 at the end of each mountain and then we reset the slopes to zero.

 Special case: we have same rating twice (land). This ends a mountain even if it was ascending 
 (that means: descending slope of length = 0)

 And to make things more complicated, the last element of a sequence 
 is also the beginning of the next sequence (another mountain or land),
 so we take that into account.


    class Solution {
    public:
        // Candies for a slope of n elements
        int slope(int n)
        {
            return (n*(n+1))/2;
        }
    
        int candy(vector<int> &ratings) {
            if (ratings.size() <= 1 )
            {
                return ratings.size();
            }
            int tot = 0;        // The final amount of candies
            int up = 0;         // Lenght of the last ascending slope
            int down = 0;       // Lenght of the last descending slope
            int oldsign = 0;    // Previous ratings trend (1 = ascending, -1 == descending, 0 = stable) 
    
            for (int i = 1; i< ratings.size(); i++)
            {
                            // Current ratings trend, same meaning as oldsign
                int newsign = ratings[i] > ratings[i-1] ? 1 : 
                              ratings[i] < ratings[i-1] ? -1 : 0;
                            // We can calculate the contribution of a slope 
                            // when that slope ends and it's not the peak of a mountain,
                            // that's why we have "newsign == 0" and not "newsign <= 0"
                if ((oldsign > 0 && newsign == 0)  ||
                    (oldsign < 0  && newsign >= 0) )
                    {
                            // The peak of the mountain should have max(up,down)+1
                            // candies, but the end of the mountain is the beginning of
                            // the next sequence, so we don't the candy at the end of 
                            // the mountain
                        tot += slope(up) + slope(down) + std::max(up, down);
                        up = 0;
                        down = 0;
                    }
    
                if(newsign > 0)
                    up++;
                if(newsign < 0)
                    down++;
                        // Same rating of the previous child?
                        // Take one candy.If you are better then the next child
                        // the descending slope will take that into account, don't worry
                if(newsign == 0)
                    tot++;
                    
                oldsign = newsign;
            }
            
                        // Final sequence has to be closed
                        // Why +1? Because we don't have a sequence next!
            tot += ramp(up) + ramp(down) + std::max(up, down) + 1;
            return tot;
        }
    };



----------------------------------------------------------------------------------------------------
Why two adjacent children with equal rating don&#x27;t get equal candies?
The expect Output of [1,2,2] is 4, not 5. I think it's not reasonable.

----------------------------------------------------------------------------------------------------
My two 36ms Codes - one pass O(1) space  plus another easy to understand code C++
    class Solution { // O(n) single pass
    public:
        int candy(vector<int>& ratings) {
            int ans = 0;
            int i = 1; int dip = 1;
            if(ratings.size() == 1) return 1;
            while(i < ratings.size())
            {  
                int len2 = 1;
                while( i < ratings.size() && ratings[i] == ratings[i-1]){
                    i++; ans += len2;
                }
                while(i < ratings.size() && ratings[i-1] < ratings[i]){
                    len2++; i++;
                } ans += len2*(len2+1)/2;
                while( i < ratings.size() && ratings[i] == ratings[i-1]){
                    i++; ans += 1;
                    len2 = 1;
                }
                len2--;
                int len = 0;
                while( i < ratings.size() && ratings[i-1] > ratings[i]){
                    len++;  i++;
                }
                if( i-1 != ratings.size()-1 ) { ans -= 1; }
                ans += len*(len+1)/2;
                if(len > len2) ans += len-len2;
            }
            return ans;
        }
    };

Easy to understand 2 pass code:    
Idea: Forward pass is intuitively ok and gives min candies, the second reverse pass doesn't break any thing from the previous pass and completes the reverse direction requirements too.

    class Solution {
    public:
        int candy(vector<int>& arr) {
            int cand[100001] = {0};
            int n = arr.size();
            for(int i = 1; i < n; i++) 
                if(arr[i] > arr[i-1]) cand[i] = cand[i-1] + 1;
            for(int i = n-2; i>= 0; i--) 
                if(arr[i] > arr[i+1]) cand[i] = max(cand[i], cand[i+1] + 1);
            int sum = n;
            for(int i = 0; i < n; i++) sum += cand[i];
            return sum;
        }
    };



----------------------------------------------------------------------------------------------------
Does anyone have a better idea?
My code is accepted with **a run-time complexity of O(n)** and **a space complexity of nearly O(1), less than O(n)**.

I deal with it for two times:

1st, from left to right, I add all the rising points, including the right edges without the left edges.

2nd, from right to left, I add all the rising points, which are falling points at the 1st time, including the right and left edges.

There are 4 points should be noticed:

1) The right edges must be dealt with for two times, so I only add the difference values or 0. I use a stack to mark every tops' candies except for the last child.

2) The left edges are not dealt with for the 1st time, but they are dealt with for the 2nd time.

3) For the flat parts, the left edges are dealt with as rising points, while the right edges are dealt with by adding 1 for the 1st time. So for the 2nd time, I add the values they should have then minus 1 when meeting the right edges. The rest are dealt with by adding 1 for the 1st time and not dealt with for the 2nd time.

4) As to the point 0, I deal with it if it's less than or equal to point 1 by adding 1. If it's larger than point 1, I don't deal with it until the 2nd time is finished.

Here is the code:

    class Solution {
    public:
    	int candy(vector<int> &ratings) {
    		// IMPORTANT: Please reset any member data you declared, as
    		// the same Solution instance will be reused for each test case.
    		if( ratings.size()<2 )
    			return ratings.size();
    		int len=1, sum=0, flat=1, tmp;
    		vector<int> tops;
    		sum += ratings[0]>ratings[1] ? 0 : len ;
    		for(int i=1; i<ratings.size(); ++i)
    		{
    			if( ratings[i]>ratings[i-1] )
    				sum += ++len;
    			else if( ratings[i]==ratings[i-1] )
    			{
    				len = 1;
    				sum += 1;
    			}
    			else if( ratings[i]<ratings[i-1] && len!=1 )
    			{
    				tops.push_back(len);
    				len=1;
    			}
    		}
    		len=1;
    		for(int i=ratings.size()-1; i>0; --i)
    		{
    			if( ratings[i]<ratings[i-1] )
    				sum += len++;
    			if( ratings[i]==ratings[i-1] )
    			{
    				sum += len-1;
    				len = 1;
    			}
    			else if( ratings[i]>ratings[i-1] && len!=1 )
    			{
    				tmp = tops.back();
    				tops.pop_back();
    				sum += len>tmp?(len-tmp):0;
    				len = 1;
    			}
    		}
    		sum += ratings[0]>ratings[1] ? len : 0 ;
    		return sum;
    	}
    };

Does anyone have a better idea? My code has a complicated judgement and seems not elegant enough.

----------------------------------------------------------------------------------------------------
Simple python solution with two passes
    class Solution:
        # @param {integer[]} ratings
        # @return {integer}
        def candy(self, ratings):
            # use two pass scan from left to right and vice versa to keep the candy level up to now
            # similar to like the Trapping Rain Water question
            res = [1]*len(ratings) # also compatable with [] input
            lbase = rbase = 1
            # left scan
            for i in xrange(1, len(ratings)):
                lbase = lbase + 1 if ratings[i] > ratings[i-1] else 1
                res[i] = lbase
            # right scan
            for i in xrange(len(ratings)-2, -1, -1):
                rbase = rbase + 1 if ratings[i] > ratings[i+1] else 1
                res[i] = max(rbase, res[i])
            return sum(res)
        
        
        

----------------------------------------------------------------------------------------------------
Candy problem - why expected output of &#91;1,2,2&#93; is 4 ?
I got wrong answer here :

Input:	[1,2,2]
Output:	5
Expected:	4


The requirement is : Children with a higher rating get more candies than their neighbors.
How about equal ratings ? Guys, how do you understand such requirement ?

----------------------------------------------------------------------------------------------------
Neighbers can have equal rating or not?
If yes, their candies are equal?
if ratings are [1, 3, 3, 4], candies can be 1, 2, 2, 3 ? or 1, 2, 1, 2?

----------------------------------------------------------------------------------------------------
The simplest and well-explained solution accepted as best submission in C
When we first encounter such problem, the *least* is the keyword here. There are two constraints: 

 - each child will have candy which means at least one candy;
 - children with higher ratings will have more candies, which means their amount of candies is larger than neighboring children - to the left and to the right;

Since the problem is resolved into these two constraints, then it can be easy to be handled now. The basic idea is as follows: 

 -  traverse from the left to the right to determine the minimal amount of candies for each child that is constrained by the left; 
 - traverse from the right to the left and  determine the minimal amount of candies for each child that is constrained by the right;
 - finally we can get the minimal constrained by both the left and the right neighbors for each child by retrieving the them from the results of the above two. 

Okay, by now you might be wonder how to determine the minimal constrained by the left or the right; actually it's quite intuitive that suppose we are traversing from the left to the right and set the leftmost child to 1 candy and then 

 - if the next child ratings is higher ratings[i+1]>ratings[i] then **limits[i+1]=limits[i]+1**; 
 - if the next child ratings is equal to the current one ratings[i+1]==ratings[i] then **limits[i+1]=limits[i]**;
 - if the next child ratings is smaller (ratings[i+1] < ratings[i]) then the child is not constrained by the left now and can be any but we need to reach global minimal so **limits[i]=1**;

Each child will be either constrained by the left or the right or both, but since it's constrained by *the higher ratings more candies rule* the minimal can only be achieved by following it; then it's the valid least amount of candies we can reach.

Merging the two results into final limits traversing from the left to the right: 

 - if the ratings[i+1] > ratings[i] then obviously limits[i+1] will be determined by the max(limits[i]+1, limits[i]) - the second parameter limits[i] here is the previous traversal (from right to left) result limits[i] constrained by the right. We have to meet the constraints of both side, so we select the higher limit here;
 - if the ratings[i+] <= ratings[i] then limits[i+1] should be less than limits[i]  determined by the left but limits[i+1] which is determined by the right in the previous traversal (from right to left) is already less then limits[i]; so limits[i+1] in from-right-to-left is the valid minimal value we can get here; 

Since we have to store the limits for each child either from left to right or from right to left, so space cost will be O(n) but as an optimized option we can reuse it to reduce the space cost from 2*n to n. As for time cost, we are traversing, man! Obviously it will be O(n), to further reduce the time cost we can sum them up at the second traversal to reduce the time cost from 3 traversals to 2 traversals only.

 - Space cost O(n)
 - Time cost O(n)


----------

    #define MAX(a, b) ((a) > (b) ? (a) : (b))
    #define MIN(a, b) ((a) < (b) ? (a) : (b))
    //AC - 16ms;
    int candy(int* ratings, int size)
    {
        if(!size) return 0;
        int* limits = (int*)malloc(sizeof(int)*size);
        limits[size-1] = 1;
        for(int i = size-2; i >-1; i--) //from right to left;
            if(ratings[i] > ratings[i+1]) limits[i] = limits[i+1]+1;
            else limits[i] = 1;
        int sum = limits[0];
        for(int i = 1; i < size; i++) //from left to right and collect the results;
        {
            if(ratings[i] > ratings[i-1]) limits[i] = MAX(limits[i], limits[i-1]+1);
            else limits[i] = MIN(limits[i-1]-1, limits[i]);
            sum += limits[i];
        }
        return sum;
    }




----------------------------------------------------------------------------------------------------
Input: &#91;1,2,2&#93;   Expected answer is 4?
Wrong Anser:
Input:	 [1,2,2]      
Output:	5        
Expected:	4  

Why expected answer is 4?
i think that should be given 1,2,2 candy. 5 in total.
Anyone can explain it to me?

----------------------------------------------------------------------------------------------------
My accepted solution is quite neat, but not sure if can further optimize it.
    public class Solution {
        public int candy(int[] ratings) {
    
            if(ratings.length < 2) return ratings.length;
            int[] leftTrav = new int[ratings.length];
            int[] rightTrav = new int[ratings.length];
            for(int i=0; i<length; i++) {
                leftTrav[i] = 1;
                rightTrav[i] = 1;
            }
            
            for(int i=0; i<length - 1; i++) {
                int j = (length - 1) - i;
                if(ratings[i+1] > ratings[i]) leftTrav[i+1] = leftTrav[i] + 1;
                if(ratings[j-1] > ratings[j]) rightTrav[j-1] = rightTrav[j] + 1;
            }
            int total = 0;
            for(int i=0; i<length; i++) total += Math.max(leftTrav[i], rightTrav[i]);
            return total;
        }
    }

----------------------------------------------------------------------------------------------------
Concise Java Solution
In the forward pass, if we meet r[i] < r[i+1] , assign candy[i+1] = candy[i]+1;

In the backward pass, the only difference is the case when r[i-1] < r[i] > r[i+1], need to compare candy[i+1]+1, and candy[i] (which is calculated in forward side).


    public class Solution {
        public int candy(int[] ratings) {
            // initialize
            int candy[] = new int[ratings.length];
            int sum = 0;
            Arrays.fill(candy,1); // crucial step!
            
            // forward pass, assign candy for increasing ones
            for(int i = 1;i < ratings.length;i++)
                if(ratings[i] > ratings[i-1])
                    candy[i] = candy[i-1]+1;
                    
            // backforward pass, assign candy for decreasing ones
            for(int i = ratings.length-2;i >= 0;i--)
                if(ratings[i] > ratings[i+1]){
                    if(i-1 >= 0 && ratings[i-1] <= ratings[i])
                        candy[i] = Math.max(candy[i+1]+1, candy[i]);
                    else
                        candy[i] = candy[i+1] + 1;
                }
            
            // sum up candy
            for(int i = 0;i < candy.length;i++)
                sum += candy[i];
            return sum;
        }
    }

----------------------------------------------------------------------------------------------------
Candy problem on OJ
> There are N children standing in a line. Each child is assigned a
> rating value. You are giving candies to these children subjected to
> the following requirements:
>      Each child must have at least one candy.      Children with a higher rating get more candies than their neighbors.           What is
> the minimum candies you must give?


I thought I got it correctly, but my code seems to fail for some test cases. The logic I was following:   
initialize an array of size n, called candies, with all values set to 0    
set first value to 1    
iterate through ratings array, starting at one, and check:   
  for element i in array rating:   

 1. if rating[i] is greater than rating[i-1], set current candy nr. to
    previous nr.+1
 2. if rating[i] is equal to rating[i-1], set current candy nr. to the same nr. as previous
 3. if rating[i] is less than rating[i-1], there are two possible  situations:

 
 - a) we can safely subtract 1 for previous candy number and still get a number that is greater than one; in that case set current candy nr.  to 1   
 - b) setting the current candy nr. to previous-1 would be less than 1; in    that case we need to backtrack; continue backtracking     while    previous rating is greater than the current && previous  candy    nr.    is less than or equal to the current; in each   iteration increase       the previous candy nr.


I think my code now is pretty straighforward:

    public int candy(int[] ratings) {
             
                if (ratings== null) return -1;
                int n = ratings.length;
                int[] candies = new int[n];
                if (n==0) return 0;
                candies[0] = 1;
                int sum = 1;
                for (int i=1; i<n; i++) {
                    if (ratings[i] > ratings[i-1]) {

                        candies[i] = candies[i-1] + 1;
                        sum+=candies[i];

                    } else if (ratings[i] == ratings[i-1]) {
                        
                        candies[i] = candies[i-1];
                        sum+=candies[i];
                    
                   }else {
                        if (candies[i-1]-1 >= 1) {
                             candies[i] = 1;
                            sum+= candies[i];
                        } else {
                            int k = i;
                            candies[k]++;
                            sum++;
                            while (k>0 && ratings[k]<ratings[k-1] && candies[k-1]<=candies[k]) {
                                candies[k-1]++;
                                sum++;
                                k--;
                            }
                        } 
                    }
                }
                return sum;
            }

[UPDATE:] Here is the failed case: [58,21,72,77,48,9,38,71,68,77,82,47,25,94,89,54,26,54,54,99,64,71,76,63,81,82,60,64,29,51,87,87,72,12,16,20,21,54,43,41,83,77,41,61,72,82,15,50,36,69,49,53,92,77,16,73,12,28,37,41,79,25,80,3,37,48,23,10,55,19,51,38,96,92,99,68,75,14,18,63,35,19,68,28,49,36,53,61,64,91,2,43,68,34,46,57,82,22,67,89]

Expected: 208, I got: 210.


----------------------------------------------------------------------------------------------------
My accepted O(n) , O(1) solution
    class Solution {
    public:
    	int candy(vector<int> &ratings) 
    	{
    		int i = 0; // start of the sequence
    		int count = 1; //total number of candy needed
    		int n = ratings.size();  //number of childen
    		int lastCandy=1; //number of Candy the last child of previous sequence hold
    		while ( i < n - 1)
    		{
    			int j = i+1; // j is the next node of end of this sequence
    			int tmp =0;
    			if (ratings[j] > ratings[i])
    			{//find the whole upside sequence, it's from i to j - 1, 
    				while(j < n && ratings[j]>ratings[j-1]) j++;
    				tmp = j - i - 1; // total number in up sequence, count them from 2 to (count +1) because the first one is already included in previous sequence
    				count += (tmp*(tmp+3)/2); // add them up
    				lastCandy = tmp+lastCandy;
    				i = j - 1;
    			}
    			else if (ratings[j] < ratings[i]) 
    			{//find the downside sequence, it's from i to j - 1;
    				while(j<n && ratings[j]<ratings[j-1]) j++;
    				// total number in down sequence, count them from (count - 1) to 1,
    				tmp = j - i - 1; 
    				count += (tmp*(tmp+1)/2);
    				// if the last child in previous sequence has less candy than he/she should have, add it up by the down sequence number
    				if (tmp >= lastCandy)
    					count += (tmp + 1 - lastCandy);
    				lastCandy = 1;
    				i = j - 1;
    			}
    			else
    			{//same rating as previous one, start with only 1 candy
    				count++;
    				lastCandy = 1;
    				i = j;
    			}
    		}
    		return count;
    	}
    };

----------------------------------------------------------------------------------------------------
My C++ O(n) Solution With Good Explanation
The key of my solution is to eliminate backtrace and that can be achieved by introducing a decrease array, which stores the length of degressive sub arrary starting from any index. 

For example, if the ratings array is [ 5, 1, 2, 3, 4, 9, 5, 3, 2, 2, 8 ], it's corresponding decrease array should look like this: [ 2, 1, 1, 1, 1, 4, 3, 2, 1, 1, 1 ]. sub array [ 9, 5, 3, 2 ] is degressive and its length is 4, that's where the 4 comes from. Any single-element sub array can make a degressive array of length 1. Obviously, this decrease array can be easily created by scanning ratings array from tail to head. 

With this decrease array constructed, we can calculate candies for each child without backtrace.

    int candy(vector<int>& ratings) {
        if( ratings.empty()) return 0;
        vector<int> decrease(ratings.size());
        decrease[ratings.size()-1] = 1;
        for( int i=ratings.size()-2; i>=0; i-- ) {
            if( ratings[i] > ratings[i+1] ) decrease[i] = decrease[i+1]+1;
            else decrease[i] = 1;
        }        
        vector<int> candy(ratings.size());
        candy[0] = decrease[0];
        int sum = candy[0];
        for( int i=1; i<ratings.size(); i++ ) {
            if( ratings[i] > ratings[i-1] ) candy[i] = max( decrease[i], candy[i-1]+1);
            else if( ratings[i] == ratings[i-1] ) {
                candy[i] = max( decrease[i], 1);
            }
            else candy[i] = min(candy[i-1]-1, decrease[i]);
            sum += candy[i];
        }
        return sum;
    }

And, if you want to save more space, you can reuse the decrease array.

    int candy(vector<int>& ratings) {
        if( ratings.empty()) return 0;
        vector<int> decrease(ratings.size());
        decrease[ratings.size()-1] = 1;
        for( int i=ratings.size()-2; i>=0; i-- ) {
            decrease[i] = ratings[i] > ratings[i+1] ? decrease[i+1] + 1 : 1;
        }        
        int sum = decrease[0];
        for( int i=1; i<ratings.size(); i++ ) {
            if( ratings[i] > ratings[i-1] ) 
                decrease[i] = max( decrease[i], decrease[i-1]+1);
            else if( ratings[i] == ratings[i-1] ) 
                decrease[i] = max( decrease[i], 1);
            else 
                decrease[i] = min(decrease[i-1]-1, decrease[i]);
            sum += decrease[i];
        }
        return sum;
    }

----------------------------------------------------------------------------------------------------
A concise C++ solution for STL lovers
If you like C++ and STL, you may also like the following solution:

    class Solution {
    public:
        int candy(vector<int> &ratings) {
            
            // Corner case:
            if (ratings.size( ) <= 1)
            {
                return ratings.size( ); // Zero or one.
            }
            
            vector<int> candies(ratings.size(), 1);             // One candy per children at least.
            extraCandies(begin(candies), end(candies),          // Extra candies, left to right.
                         begin(ratings));
            extraCandies(candies.rbegin(), candies.rend(),      // Extra candies, right to left.
                         ratings.rbegin());
            return accumulate(begin(candies), end(candies), 0); // Total summ of candies.
        }
        
        template<typename It>
        int extraCandies(It candyIt, It candyEnd, It ratingIt)
        {
            int prevCandy = *candyIt;
            int prevRating = *ratingIt;
            while(candyIt != candyEnd)
            {
                if (*ratingIt > prevRating
                    && *candyIt <= prevCandy)
                {
                    // Bingo, extra candies for him!
                    (*candyIt) = prevCandy + 1;
                }
                
                prevRating = *ratingIt;
                prevCandy = *candyIt;
                ++candyIt;
                ++ratingIt;
            }
        }
    };

Complexity:
 - CPU: O(n)
 - Memory: O(n)



----------------------------------------------------------------------------------------------------
