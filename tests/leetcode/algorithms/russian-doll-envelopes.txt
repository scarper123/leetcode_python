4 Line Simple Java Bit Manipulate Solution with Explaination
The basic idea is to use XOR operation. We all know that a^b^b =a, which means two xor operations with the same number will eliminate the number and reveal the original number.
In this solution, I apply XOR operation to both the index and value of the array. In a complete array with no missing numbers, the index and value should be perfectly corresponding( nums[index] = index), so in a missing array, what left finally is the missing number.



    public int missingNumber(int[] nums) {

        int xor = 0, i = 0;
		for (i = 0; i < nums.length; i++) {
			xor = xor ^ i ^ nums[i];
		}

		return xor ^ i;
    }


----------------------------------------------------------------------------------------------------
3 different ideas: XOR, SUM, Binary Search. Java code
1.XOR
-----

    public int missingNumber(int[] nums) { //xor
        int res = nums.length;
        for(int i=0; i<nums.length; i++){
            res ^= i;
            res ^= nums[i];
        }
        return res;
    }

2.SUM
-----

    public int missingNumber(int[] nums) { //sum
        int len = nums.length;
        int sum = (0+len)*(len+1)/2;
        for(int i=0; i<len; i++)
            sum-=nums[i];
        return sum;
    }

3.Binary Search
---------------

    public int missingNumber(int[] nums) { //binary search
        Arrays.sort(nums);
        int left = 0, right = nums.length, mid= (left + right)/2;
        while(left<right){
            mid = (left + right)/2;
            if(nums[mid]>mid) right = mid;
            else left = mid+1;
        }
        return left;
    }

Summary:
--------

If the array is in order, I prefer `Binary Search` method. Otherwise, the `XOR` method is better. 

----------------------------------------------------------------------------------------------------
C++ solution using bit manipulation
    class Solution {
    public:
        int missingNumber(vector<int>& nums) {
            int result = nums.size();
            int i=0;
            
            for(int num:nums){
                result ^= num;
                result ^= i;
                i++;
            }
            
            return result;
        }
    };

There are several similar problems in the problem list. 

----------------------------------------------------------------------------------------------------
Java solution O(1) space and O(n) in time
Pretty simple since we are  told that we are missing only one number in [1,n], we just need to look at the difference between the sum([1,n]) = n * (n+1) / 2 and the sum of nums in our array.  

    public class Solution {
        public int missingNumber(int[] nums) {
            int sum = 0;
            for(int num: nums)
                sum += num;
                
            return (nums.length * (nums.length + 1) )/ 2 - sum;
        }
    }


With a slight mod to the return statement the situation for large n is taken care of.  The needed modification is 

    return ( (nums.length * (nums.length + 1) ) - 2 * sum ) / 2;

----------------------------------------------------------------------------------------------------
1+ lines Ruby, Python, Java, C++
Several different solutions, some with O(1) extra space, some with O(n).

---

**Sum of 0..n minus sum of the given numbers is the missing one.**

These only use O(1) extra space.

Ruby

    def missing_number(nums)
      (n = nums.size) * (n+1) / 2 - nums.reduce(:+)
    end

Python

    def missingNumber(self, nums):
        n = len(nums)
        return n * (n+1) / 2 - sum(nums)

Java

    public int missingNumber(int[] nums) {
        long n = nums.length;
        return (int) (n * (n+1) / 2 - IntStream.of(nums).sum());
    }

C++

    int missingNumber(vector<int>& nums) {
        long n = nums.size();
        return n * (n+1) / 2 - accumulate(begin(nums), end(nums), 0);
    }

Using `long` for Java and C++ to prevent overflow (the n*(n+1) overflows ints already for n=46341, and then the /2 causes an actual wrong result).

---

**Xor-ing the given numbers and 0..n.**

These use O(n) extra space, but I like them anyway.

Ruby

    def missing_number(nums)
      nums.zip(1.step).flatten.reduce(:^)
    end

Python

    def missingNumber(self, nums):
        return reduce(operator.xor, nums + range(len(nums)+1))

---

**Xor-ing with O(1) space**

Saw this from ts before. Xoring 0..n results in [n, 1, n+1, 0][n % 4]. You can also spot the pattern by looking at xors of such ranges, and it's easy to explain as well.

Ruby

    def missing_number(nums)
      n = nums.size
      nums.reduce(:^) ^ [n, 1, n+1, 0][n % 4]
    end

Python

    def missingNumber(self, nums):
        n = len(nums)
        return reduce(operator.xor, nums) ^ [n, 1, n+1, 0][n % 4]

---

**Sum, without formula.**

Java and C++:

        int miss = 0, i = 0;
        for (int num : nums)
            miss += ++i - num;
        return miss;

In Java I believe this is safe, overflow might happen but not cause a wrong result (because another overflow will fix it). In C++ I believe it's *probably safe* in the same way, except that that behavior isn't defined in the standard(s) but is a de-facto standard anyway. In any case, I could just use 64-bit ints again to be safe.

---

**Set/array difference**

Don't know about Ruby's runtime, might not be linear. Python's sets are hash sets and the difference is linear time on average. Don't know about its worst case, and apparently neither does the [TimeComplexity page](https://wiki.python.org/moin/TimeComplexity).

Ruby

    def missing_number(nums)
      ((0..nums.size).to_a - nums)[0]
    end

Python

    def missingNumber(self, nums):
        return (set(range(len(nums)+1)) - set(nums)).pop()



----------------------------------------------------------------------------------------------------
Java solution: Time O(n), Space O(1), no XOR, no Gauss&#x27; math method
This solution is easy for understanding. Suppose the input is [0,1,3,4], the numbers in the array have indices [0,1,2,3], so the difference of each number between its corresponding index is [0,0,1,1], add up the differences, subtract it from the length of the array, we can get the missing number from which the difference occurs.  Please leave any comments for discussing the solution.

    public int missingNumber(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++)
            sum += nums[i] - i;
        return nums.length - sum;
    }

----------------------------------------------------------------------------------------------------
Clear C++ solution that can avoid overflow
    class Solution {
    public:
        int missingNumber(vector<int>& nums) {
            int result = 0;
            for (int i = 0; i < nums.size(); i++)
                result ^= nums[i]^(i+1);
            return result;
        }
    };

----------------------------------------------------------------------------------------------------
Swapping numbers to the same index cell
1.swapping number solution

    public int MissingNumber(int[] nums) {
        for(int i = 0; i < nums.Length; i++)
        {
            while(i < nums.Length && nums[i] == i) i++;
            while(i < nums.Length && nums[i] != i)
            {
                if(nums[i] >= nums.Length || nums[i] < 0) break;
                nums[i] = nums[i] ^ nums[nums[i]] ^ (nums[nums[i]] = nums[i]);
            }
        }
        for(int i = 0; i < nums.Length; i++)
            if(nums[i] != i) return i;
        return nums.Length;
    }

1.2 Another swapping solution by avoiding the 2nd loop. Idea from novostary.

    public int MissingNumber(int[] nums) {
        int lastIndex = nums.Length;
        for(int i = 0; i < nums.Length; )
            if(nums[i] == i) i++;
            else if(nums[i] < nums.Length)
                nums[i] = nums[i] ^ nums[nums[i]] ^ (nums[nums[i]] = nums[i]);
            else lastIndex = i++;
        return lastIndex;
    }

2.Bitwise operation solution

    public int MissingNumber(int[] nums) {
        int xorResult = 0;
        for(int i = 0; i < nums.Length; i++)
            xorResult ^= nums[i] ^ i;
        xorResult ^= nums.Length;
        return xorResult;
    }

3.Math solution by sum total

    public int MissingNumber(int[] nums) {
        int result = nums.Length * (nums.Length + 1) / 2;
        for(int i = 0; i < nums.Length; i++)
            result -= nums[i];
        return result;
    }

----------------------------------------------------------------------------------------------------
Simple C++ codes
Using bit XOR operatons, just like the "find missing number (all elements except one occur twice, find the one that occurs once)" one 
The reason I didn't use sum[1..n] - sum(nums) is that calculating sum has potential to cause overflow. XOR bit operation is much safer.

    class Solution {
    public:
        int missingNumber(vector<int>& nums) {
            int missing =0;
            for(int i=0; i<nums.size();++i) 
                missing ^= ((i+1)^nums[i]);
            return missing;
        }
    };

----------------------------------------------------------------------------------------------------
Java O(N) O(1) solution using math knowledge
From elementary school math, we have a popular math trick which is the sum of 1+2+...+n = n*(n+1)/2, it can be used here.  Since we are finding the missing number, just get the sum of all the n number first using the formula, and the minus it to the sum of all the numbers in the array, we get the missing number.

    public class Solution {
        public int missingNumber(int[] nums) {
            int n = nums.length;
            int total = n * (n + 1) / 2;
            int sum = 0;
            for(int num : nums) {
                sum += num;
            }
            return total - sum;
        }
    }

----------------------------------------------------------------------------------------------------
Java single pass without additional space

    public class Solution {
        public int missingNumber(int[] nums) {
            int check = 0;
            for (int i=0; i<nums.length; i++) {
                check ^= nums[i] ^ i+1;
            }
            return check;
        }
    }


----------------------------------------------------------------------------------------------------
Java bit-manipulation solution, O(n) time, O(1) space
Same idea as the Single Number question, for any integer a, a xor a = 0 and a xor 0 = a. If we xor all numbers in the array and then xor all numbers from 1 to n, effectively all non-missing numbers xor against themselves, generating zero, and this zero is finally xor against the missing number, yielding the result:

    public int missingNumber(int[] nums) {
        int sum = 0;
        for (int i = 0; i <= nums.length; ++i) sum ^= i;
        for (int i = 0; i < nums.length; ++i) sum ^= nums[i];
        return sum;
    }

----------------------------------------------------------------------------------------------------
Java Sol O(n) time O(1) space
public class Solution {
    public int missingNumber(int[] nums) {
        int len = nums.length;
        
        int sum = (0+nums.length)*(nums.length+1)/2;
        for(int a:nums){
            sum-=a;
        }
        
        return sum;
    }
}

----------------------------------------------------------------------------------------------------
1ms java solution without bit manipulation
    public class Solution {
    public int missingNumber(int[] nums) {
        int sum = 0, i = 0;

        for (; i < nums.length; i++)
            sum = sum + i - nums[i];
        
        return (sum + i);
    }
}

----------------------------------------------------------------------------------------------------
Share four different solutions
    // sort + binary seach 
    // O(nlogn) time, O(1) space
    int missingNumber1(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int m = 0;
        int l = 0, r = nums.size() - 1;
        while (l < r) {
            m = (l + r ) / 2;
            if (nums[m] == m) l = m + 1;
            else r = m - 1;
        }
        
        return nums[l] == l ? l + 1 : l;
    }
    
    // arithmetic progression
    // O(n) time, O(1) space
    int missingNumber2(vector<int>& nums) {
        int sum1 = 0;
        for (int x : nums) sum1 += x;
        int minV = 0, maxV = nums.size();
        int sum2 =  (minV + maxV) * (nums.size() + 1) / 2;
        return sum2 - sum1;
    }
    
    // XOR 
    // O(n) time, O(1) space
    int missingNumber3(vector<int>& nums) {
        int ans = 0;
        for (int i = 0; i <= nums.size(); ++i)
            ans ^= (i == nums.size()) ? i : i ^ nums[i];
        return ans;
    }
    
    // map table
    // O(n) time, O(1) space
    int missingNumber(vector<int>& nums) {
        for (int i = 0; i < nums.size(); ++i) {
            while (nums[i] != i && nums[i] < nums.size() && nums[i] != nums[nums[i]]) 
                swap(nums[i], nums[nums[i]]);
        }
        
        for (int i = 0; i < nums.size(); ++i)
            if (nums[i] != i) return i;
            
        return nums.size();
    }

----------------------------------------------------------------------------------------------------
1 line Python Solution
    class Solution(object):
        def missingNumber(self, nums):
            return sum(range(len(nums)+1)) - sum(nums)

----------------------------------------------------------------------------------------------------
Java simplest solution O(1) space O(n) time
Knowing n ^ n = 0 and n ^ 0 = n this would be very simple. 

    public int missingNumber(int[] nums) {
        int result = 0;
        for (int i = 1; i <= nums.length; i++) {
            result ^= nums[i - 1];
            result ^= i;
        }
        return result;
    }

----------------------------------------------------------------------------------------------------
4 Lines O(1) space O(n) time C++ solution without xor!
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int sum=0, s=nums.size();
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
        }
        
        return (s*(s+1)/2)-sum;
        
    }
};

----------------------------------------------------------------------------------------------------
C++ two solutions, math and bit-manipulation
1.bit manipulation. 

It is like there are 2n+1 numbers from 0 to n. One number appears once, all the others appear twice. Then, find the one appears only once.

    int missingNumber(vector<int>& nuts)
     {
        int res=0;
        for (int i=0;i<nums.size();i++){
            res^=nums[i]^i;
        }
        res^=nums.size();
        return res;
    }

2.math 

    int missingNumber(vector<int>& nums) {
        int n=nums.size();
        int total = n*(n+1)/2;
        for (auto &x:nums){
            total-=x;
        }
        return total;
    }

----------------------------------------------------------------------------------------------------
C++ 4 lines XOR simple solution
      int missingNumber(vector<int>& nums) {
            int res = 0;
            for (int i = 1; i <= nums.size(); i++) 
              {  res ^= i ^ nums[i-1]; }
            return res;
        }

----------------------------------------------------------------------------------------------------
