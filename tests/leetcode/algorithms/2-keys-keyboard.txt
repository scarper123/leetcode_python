Java O(n) Time O(1) Space
public static int[] findErrorNums(int[] nums) {
    int[] res = new int[2];
    for (int i : nums) {
        if (nums[Math.abs(i) - 1] < 0) res[0] = Math.abs(i);
	else nums[Math.abs(i) - 1] *= -1;
    }
    for (int i=0;i<nums.length;i++) {
        if (nums[i] > 0) res[1] = i+1;
    }
    return res;
}


----------------------------------------------------------------------------------------------------
Simple Java O(n) solution - HashSet
public int[] findErrorNums(int[] nums) {
    Set<Integer> set = new HashSet<>();
    int duplicate = 0, n = nums.length;
    long sum = (n * (n+1)) / 2;
    for(int i : nums) {
        if(set.contains(i)) duplicate = i;
        sum -= i;
        set.add(i);
    }
    return new int[] {duplicate, (int)sum + duplicate};
}

----------------------------------------------------------------------------------------------------
Python, Straightforward with Explanation
def findErrorNums(self, A):
    N = len(A)
    alpha = sum(A) - N*(N+1)/2
    beta = (sum(x*x for x in A) - N*(N+1)*(2*N+1)/6) / alpha
    return (alpha + beta) / 2, (beta - alpha) / 2


----------------------------------------------------------------------------------------------------
&#91;C++&#93; 6 lines solution with explanation
vector<int> findErrorNums(vector<int>& nums) {
        for(int i = 0; i<nums.size(); i++){
            while(nums[i] != nums[nums[i] - 1])swap(nums[i], nums[nums[i] - 1]);
        }
        for(int i = 0; i<nums.size() ; i++){
            if(nums[i] != i + 1)return {nums[i], i + 1};
        }
    }


----------------------------------------------------------------------------------------------------
XOR, one pass
    public int[] findErrorNums(int[] nums) {
        int[] ans = new int[2];
        for(int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]);
            ans[1] ^= (i+1) ^ val;
            if (nums[val-1] < 0) ans[0] = val;
            else nums[val-1] = -nums[val-1];
        }
        ans[1] ^= ans[0];
        return ans;
    }


----------------------------------------------------------------------------------------------------
Java solution, array swap
public class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] result = new int[2];
        
        for (int i = 0; i < nums.length; i++) {
            while (nums[i] - 1 != i && nums[nums[i] - 1] != nums[i]) {
                swap(nums, i, nums[i] - 1);
            }
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] - 1 != i) {
                result[0] = nums[i];
                result[1] = i + 1;
                break;
            }
        }
        
        return result;
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


----------------------------------------------------------------------------------------------------
Very Simple - Using Array and Bit
public int[] findErrorNums(int[] nums) {
    BitSet bs = new BitSet(nums.length+1);
    int a=0;
    for(int i:nums){
          if(bs.get(i)) a=i;
          bs.set(i);            
    }
    return new int[]{a,bs.nextClearBit(1)};
}

----------------------------------------------------------------------------------------------------
Java Two methods, using sign and swap
    public int[] findErrorNums(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            while (nums[nums[i]-1] != nums[i]) {
                swap(nums, i, nums[i]-1);
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != i+1) return new int[]{nums[i], i+1};
        }
        return null;
    }


----------------------------------------------------------------------------------------------------
Simple Java Solution - runtime 9ms, Time Complexity O(n), Space Complexity O(n)
public int[] findErrorNums(int[] nums) {
    	int len = nums.length;
        int[] res = new int[2], arr = new int[len];
        for (int i = 0; i < len; i++) {
            if (arr[nums[i] - 1] == nums[i]) res[0] = nums[i];
            else arr[nums[i] - 1] = nums[i];
        }
        for (int i = 0; i < len; i++)
            if (arr[i] == 0) res[1] = i + 1;
        return res;
}


----------------------------------------------------------------------------------------------------
Oneliner Python
def findErrorNums(self, nums):
    return [sum(nums) - sum(set(nums)), sum(range(1, len(nums)+1)) - sum(set(nums))]

----------------------------------------------------------------------------------------------------
Java O(n) Solution without extra space with explanation
public class Solution {
    public int[] findErrorNums(int[] nums) {
        int duplicate = 0;
        int missing = 0;
        for (int i = 0; i < nums.length; i ++) {
            while (nums[i] > 0){
                int idx = nums[i] - 1;
                int tmp = nums[i];
                nums[i] = nums[idx];
                nums[idx] = -tmp;
            }
            if (-nums[i] != i + 1){
                missing = i + 1;
            }
        }
        return new int[] {-nums[missing - 1], missing};
    }
}


----------------------------------------------------------------------------------------------------
Simple solution using map o(n) complexity
<p>class Solution {<br/>
public:<br/>
vector&lt;int&gt; findErrorNums(vector&lt;int&gt;&amp; v) {<br/>
map&lt;int,int&gt; mp;<br/>
vector&lt;int&gt; res;<br/>
for(int i=0;i&lt;v.size();i++)<br/>
{<br/>
mp&#91;v&#91;i&#93;&#93;++;<br/>
}<br/>
for(int i=1;i&lt;=v.size();i++)<br/>
{<br/>
if(mp&#91;i&#93;&gt;1)<br/>
res.push_back(i);<br/>
}<br/>
for(int i=1;i&lt;=v.size();i++)<br/>
{<br/>
if(mp&#91;i&#93;==0)<br/>
res.push_back(i);<br/>
}<br/>
return res;<br/>
}<br/>
};</p>


----------------------------------------------------------------------------------------------------
Three different way to solve this problem.
public class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] res = new int[2];
        for(int num : nums){
            if(nums[Math.abs(num) - 1] < 0){
                res[0] = Math.abs(num);
            }
            else{
                nums[Math.abs(num) - 1] *= -1;
            }
        }
        
        for(int i = 0;i< nums.length;i++){
            if(nums[i] > 0){
                res[1] = i + 1;
            }
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
Java solution with explanation &#91;O(n) time and O(n) space&#93; - HashSet
public class Solution {
    public int[] findErrorNums(int[] nums) {
        Set<Integer> set = new HashSet<>();
        int repeating = -1; int sum = 0;
        for(int num : nums) {
            boolean added = set.add(num);
            if(!added) {
                repeating = num;
            }
            sum += num;
        }
        
        int error = nums.length * (nums.length + 1) / 2 - sum;
        int[] result = new int[2];
        result[0] = repeating;
        result[1] = repeating + error;
        
        return result;
    }
}


----------------------------------------------------------------------------------------------------
O(n) solution w&#x2F; Python &amp; C++
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n = nums.size();
        vector<int> counter(n + 1);
        int expect = n * (n + 1) / 2;
        int actual = accumulate(nums.begin(), nums.end(), 0);
        for ( int i : nums ) {
            if ( 1 == counter[i] )
                return {i, expect - actual + i};
            ++counter[i];
        }
    }
};


----------------------------------------------------------------------------------------------------
Simple Java Solution
public class Solution {
    public int longestPalindromeSubseq(String s) {
        int[][] dp = new int[s.length()][s.length()];
        for (int i = s.length() - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i+1; j < s.length(); j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i+1][j-1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        return dp[0][s.length()-1];
    }
}


----------------------------------------------------------------------------------------------------
AC Java O(n) Solution
public int[] findErrorNums(int[] nums) {
        if(nums==null||nums.length==0||nums.length==1) return new int[0];
        int n = nums.length;
        int res [] = new int [2];
        int [] tmp = new int [n];
        for(int num : nums){
            tmp[num-1]++;
        }

        for(int i = 0;i<n;i++){
            if(tmp[i]==2){
                res[0] = i+1;
            }else if(tmp[i]==0){
                res[1] = i + 1;
            }
        }
        return res;
    }


----------------------------------------------------------------------------------------------------
&#91;C++&#93; Solution O(1) space O(N) time
/**
 * For every number num, if it is not in the right seat, send it home, mark the seat as empty by 0;
 * If its seat is occupied by another number other, send the other home;
 * If its seat is occupied by a same number, it is duplicate.
 * scan the array for 0, means empty seat;
 */
class Solution {
public:
    vector<int> findErrorNums(vector<int>& a) {
        vector<int> res(2);
        int n = a.size();
        for (int i = 0; i < n; i++) {
            if (a[i] != i + 1 && a[i] != 0) {
                int j = i;
                int k = a[j];
                a[j] = 0;
                while (k != j + 1) {
                    j = k - 1;
                    // dup
                    if (a[j] == 0) {
                        a[j] = k;
                    }
                    else if (a[k - 1] == k) {
                        res[0] = k;
                    }
                    else {
                        int other = a[j];
                        a[j] = k;
                        k = other;
                    }
                }
            }
        }

        // scan the array for 0, means empty seat;
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                res[1] = i + 1;
                break;
            }
        }
        
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Simple python solution
class Solution(object):
    def findErrorNums(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        ans = []
        if nums:
            s = set()
            for x in nums:
                if x in s:
                    ans.append(x)
                s.add(x)
            n = len(nums)
            
            ans.append( sum(range(1,n+1)) - sum(s) )
            
        return ans

----------------------------------------------------------------------------------------------------
Simple Java O(n) solution using Arrays - 8 lines
public static int[] findErrorNums(int[] nums) {
        int[] res = new int[2];
	int[] count = new int[nums.length + 1];
	for (int i = 0; i < nums.length; i++)	count[nums[i]]++;
	for (int i = 1; i < count.length; i++) {
		if (count[i] == 2)  res[0] = i;
		if (count[i] == 0)  res[1] = i;
	}
	return res;
}


----------------------------------------------------------------------------------------------------
