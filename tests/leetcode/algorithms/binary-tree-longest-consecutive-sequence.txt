My Java Solution to share
    public  String largestNumber(int[] num) {
		if(num==null || num.length==0)
			return "";
		String[] Snum = new String[num.length];
		for(int i=0;i<num.length;i++)
			Snum[i] = num[i]+"";
		
		Comparator<String> comp = new Comparator<String>(){
			@Override
			public int compare(String str1, String str2){
				String s1 = str1+str2;
				String s2 = str2+str1;
				return s1.compareTo(s2);
			}
		};
		
		Arrays.sort(Snum,comp);
        if(Snum[Snum.length-1].charAt(0)=='0')
            return "0";
            
		StringBuilder sb = new StringBuilder();

		for(String s: Snum)
			sb.insert(0, s);
		
		return sb.toString();
		
	}

----------------------------------------------------------------------------------------------------
A simple C++ solution
    class Solution {
    public:
        string largestNumber(vector<int> &num) {
            vector<string> arr;
            for(auto i:num)
                arr.push_back(to_string(i));
            sort(begin(arr), end(arr), [](string &s1, string &s2){ return s1+s2>s2+s1; });
            string res;
            for(auto s:arr)
                res+=s;
            while(res[0]=='0' && res.length()>1)
                res.erase(0,1);
            return  res;
        }
    };

----------------------------------------------------------------------------------------------------
My 3-lines code in Java and Python
The logic is pretty straightforward. Just compare number by convert it to string.

Thanks for Java 8, it makes code beautiful.

Java:

    public class Solution {
        public String largestNumber(int[] num) {
            String[] array = Arrays.stream(num).mapToObj(String::valueOf).toArray(String[]::new);
            Arrays.sort(array, (String s1, String s2) -> (s2 + s1).compareTo(s1 + s2));
            return Arrays.stream(array).reduce((x, y) -> x.equals("0") ? y : x + y).get();
        }
    }

Python:

    class Solution:
        # @param num, a list of integers
        # @return a string
        def largestNumber(self, num):
            num = [str(x) for x in num]
            num.sort(cmp=lambda x, y: cmp(y+x, x+y))
            return ''.join(num).lstrip('0') or '0'

----------------------------------------------------------------------------------------------------
Share a short code in c++
    class Solution {
    public:
        string largestNumber(vector<int> &num) {
            sort(num.begin(), num.end(), [](int a, int b){
                return to_string(a)+to_string(b) > to_string(b)+to_string(a);
            });
            string ans;
            for(int i=0; i<num.size(); i++){
                ans += to_string(num[i]);
            }
            return ans[0]=='0' ? "0" : ans;
        }
    };

----------------------------------------------------------------------------------------------------
Share my fast JAVA solution, beat 98.64%!
    public class Solution {
        public String largestNumber(int[] nums) {
            if (nums == null || nums.length == 0) return "";
            String[] strs = new String[nums.length];
            for (int i = 0; i < nums.length; i++) {
                strs[i] = nums[i]+"";
            }
            Arrays.sort(strs, new Comparator<String>() {
                @Override
                public int compare(String i, String j) {
                    String s1 = i+j;
                    String s2 = j+i;
                    return s1.compareTo(s2);
                }
            });
            if (strs[strs.length-1].charAt(0) == '0') return "0";
            String res = new String();
            for (int i = 0; i < strs.length; i++) {
                res = strs[i]+res;
            }
            return res;
        }
    }

----------------------------------------------------------------------------------------------------
Python simple solution in 4 lines
It's all about comparison . We define a func that compares two strings a ,b. we consider a bigger than b if a+b > b+a . then we sort the numbers and concatenate them .


    class Solution:
    # @param num, a list of integers
    # @return a string
    def largestNumber(self, num):
        comp=lambda a,b:1 if a+b>b+a else -1 if a+b<b+a else 0
        num=map(str,num)
        num.sort(cmp=comp,reverse=True)
        return str(int("".join(num)))


**UPDATE**

More explanation 

1-we define a function that compares two string (a,b) . we consider a bigger than b if a+b>b+a
for example : (a="2",b="11") a is bigger than b because "211" >"112"

2-convert all elements of the list from int to string

3-sort the list descendingly using the comparing function we defined
for example sorting this list ["2","11","13"] using the function defined in step 1 would produce ["2","13","11"]

4-we concatatenate the list "21311"

----------------------------------------------------------------------------------------------------
Simple 10-line C++ Solution
 

     class Solution {
        public:
            string largestNumber(vector<int>& nums) {
                string ret;
                sort(nums.begin(),nums.end(),
                    [](const int &m,const int&n){
                        return to_string(m)+to_string(n)>to_string(n)+to_string(m);});
                for(int i=0;i<nums.size();++i){
                    ret+=to_string(nums[i]);
                }
                if(ret[0]=='0') //for the case nums are all zeros
                    return "0";
                return ret;
            }  
        }; 

----------------------------------------------------------------------------------------------------
Mathematical proof of correctness of sorting method
