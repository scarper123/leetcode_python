Simple and clean Java code, backtracking.
     public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList<>();
        combination(ans, new ArrayList<Integer>(), k, 1, n);
        return ans;
    }

	private void combination(List<List<Integer>> ans, List<Integer> comb, int k,  int start, int n) {
		if (comb.size() == k && n == 0) {
			List<Integer> li = new ArrayList<Integer>(comb);
			ans.add(li);
			return;
		}
		for (int i = start; i <= 9; i++) {
			comb.add(i);
			combination(ans, comb, k, i+1, n-i);
			comb.remove(comb.size() - 1);
		}
	}


----------------------------------------------------------------------------------------------------
My C++ solution, backtracking.
    class Solution {
    public:
      void combination(vector<vector<int>>& result, vector<int> sol, int k, int n) {
        if (sol.size() == k && n == 0) { result.push_back(sol); return ; }
        if (sol.size() < k) {
          for (int i = sol.empty() ? 1 : sol.back() + 1; i <= 9; ++i) {
            if (n - i < 0) break;
            sol.push_back(i);
            combination(result, sol, k, n - i);
            sol.pop_back();
          }
        }
      }
    
      vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> result;
        vector<int> sol;
        combination(result, sol, k, n);
        return result;
      }
    };

----------------------------------------------------------------------------------------------------
Use backtrack c++ solution, easy to understand.
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> result;
        vector<int> path;
        backtrack(result, path, 1, k, n);
        return result;
    }
    
    void backtrack(vector<vector<int>> &result, vector<int> &path, int start, int k, int target){
        if(target==0&&k==0){
            result.push_back(path);
            return;
        }
        for(int i=start;i<=10-k&&i<=target;i++){
            path.push_back(i);
            backtrack(result,path,i+1,k-1,target-i);
            path.pop_back();
        }
    }

----------------------------------------------------------------------------------------------------
Fast, easy Java code, with explanation!
Used backtracking to solve this.
Build an array to apply to "subset" template. Each time we add an element to the "list", for the next step, target= target - num[i]. Since we have already added one element, for the next step, we can only add k-1 elements. Since no duplicated elements accept, for the next loop, the "start" should point to the next index of current index. The `list.remove(list.size() - 1)` here means, we need to change the element here. I know it is hard to understand it, let me give you an example.
When `k=3, n=9`, my answer works like this:
[1]->[1,2]->[1,2,3]. Since now sum is not 9, no more backtracking, so after  `list.remove(list.size() - 1)`, it is [1,2]. Then next follows [1,2,4], sum is not 9, repeat process above untill [1,2,6]. When go to next backtracking, the list will be added to `result`, and for this list, no more backtracking.
Now we can go back to a previous backtracking, which is [1,3]->[1,3,4], fail. [1,4,]->[1,4,5], fail. And so one.
So the point of  `list.remove(list.size() - 1)` is, after each "fail" or "success", since we don't need to do further attempts given such a condition, we delete the last element, and then end current backtracking. Next step is, add the next element to the deleted index, go on attempting. 

If you have other questions, just reply me. 




  

    public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] num = {1,2,3,4,5,6,7,8,9};
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        helper(result, new ArrayList<Integer>(), num, k, n,0);
        return result;
        }
    
    public void helper(List<List<Integer>> result, List<Integer> list, int[] num, int k, int target, int start){
        if (k == 0 && target == 0){
            result.add(new ArrayList<Integer>(list));
        } else {
            for (int i = start; i < num.length && target > 0 && k >0; i++){
                list.add(num[i]);
                helper(result, list, num, k-1,target-num[i],i+1);
                list.remove(list.size()-1);
            }
        }
    }
}

----------------------------------------------------------------------------------------------------
Accepted recursive Java solution, easy to understand
The idea is to choose proper number for 1,2..kth position in ascending order, and for each position, we only iterate through (prev_num, n/k]. Time comlexity O(k)

    public class Solution {
        private List<List<Integer>> res = new ArrayList<List<Integer>>();
        public List<List<Integer>> combinationSum3(int k, int n) {
            findCombo( k, n, 1, new LinkedList<Integer>() );
            return res;
        }
        public void findCombo(int k, int n, int start, List<Integer> list){
            if( k == 1 ){
                if( n < start || n > 9 ) return;
                list.add( n );
                res.add( list );
                return;
            }
            for( int i = start; i <= n / k && i < 10; i++ ){
                List<Integer> subList = new LinkedList<Integer>( list );
                sub.add( i );
                findCombo( k - 1, n - i, i + 1, subList );
            }
        }
    }

----------------------------------------------------------------------------------------------------
Concise python solution using DFS
    class Solution:
        # @param {integer} k
        # @param {integer} n
        # @return {integer[][]}
        def combinationSum3(self, k, n):
            if n > sum([i for i in range(1, 11)]):
                return []
    
            res = []
            self.sum_help(k, n, 1, [], res)
            return res
    
    
        def sum_help(self, k, n, curr, arr, res):
            if len(arr) == k:
                if sum(arr) == n:
                    res.append(list(arr))
                return
    
            if len(arr) > k or curr > 9:
                return
            
            for i in range(curr, 10):
                arr.append(i)
                self.sum_help(k, n, i + 1, arr, res)
                arr.pop()

----------------------------------------------------------------------------------------------------
Combination Sum I, II and III Java solution (see the similarities yourself)
Combination Sum I

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(list, new ArrayList<Integer>(), candidates, target, 0);
        return list;
    }

    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] cand, int remain, int start) {
        if (remain < 0) return; /** no solution */
        else if (remain == 0) list.add(new ArrayList<>(tempList));
        else{
            for (int i = start; i < cand.length; i++) { 
                tempList.add(cand[i]);
                backtrack(list, tempList, cand, remain-cand[i], i);
                tempList.remove(tempList.size()-1);
            } 
        }

    }

Combination Sum II

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
       List<List<Integer>> list = new LinkedList<List<Integer>>();
       Arrays.sort(candidates);
       backtrack(list, new ArrayList<Integer>(), candidates, target, 0);
       return list;
    }
    
    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] cand, int remain, int start) {
       
       if(remain < 0) return; /** no solution */
       else if(remain == 0) list.add(new ArrayList<>(tempList));
       else{
          for (int i = start; i < cand.length; i++) {
             if(i > start && cand[i] == cand[i-1]) continue; /** skip duplicates */
             tempList.add(cand[i]);
             backtrack(list, tempList, cand, remain - cand[i], i+1);
             tempList.remove(tempList.size() - 1);
          }
       }
    }

Combination Sum III

    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list, new ArrayList<Integer>(), k, n, 1);
        return list;
    }
    
    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int k, int remain, int start) {
        if(tempList.size() > k) return; /** no solution */
        else if(tempList.size() == k && remain == 0) list.add(new ArrayList<>(tempList));
        else{
            for (int i = start; i <= 9; i++) {
                tempList.add(i);
                backtrack(list, tempList, k, remain-i, i+1);
                tempList.remove(tempList.size() - 1);
            }
        }
    }


----------------------------------------------------------------------------------------------------
Clean 1&#x2F;6&#x2F;7-liners (AC)
**Batteries Included**  
AC in 44ms

First the obligatory *"use the darn library"* solution. Create all k-combinations of digits and keep those with sum n:

    from itertools import combinations

    class Solution:
        def combinationSum3(self, k, n):
            return [c for c in combinations(range(1, 10), k) if sum(c) == n]

---

**Recursive**  
AC in 48 ms

But it's more interesting to do it on your own. Here I use a recursive helper function getting the same k and n as the main function, and an additional cap under which all the numbers have to be:

    class Solution:
        def combinationSum3(self, k, n):
            def combs(k, n, cap):
                if not k:
                    return [[]] * (not n)
                return [comb + [last]
                        for last in range(1, cap)
                        for comb in combs(k-1, n-last, last)]
            return combs(k, n, 10)

---

**Iterative**  
AC in 56 ms

And an iterative version doing pretty much the same thing, except this time I prepend elements on the left, and use the first element of a partial combination as the cap.

    class Solution:
        def combinationSum3(self, k, n):
            combs = [[]]
            for _ in range(k):
                combs = [[first] + comb
                         for comb in combs
                         for first in range(1, comb[0] if comb else 10)]
            return [c for c in combs if sum(c) == n]

---

**Reduce**  
AC in 44 ms

And here's a "one-liner" version of the iterative solution using `reduce` instead of the loop:

    class Solution:
        def combinationSum3(self, k, n):
            return [c for c in
                    reduce(lambda combs, _: [[first] + comb
                                             for comb in combs
                                             for first in range(1, comb[0] if comb else 10)],
                           range(k), [[]])
                    if sum(c) == n]

---

I note that all these solutions also correctly solve the cases with k=0 and/or n=0 (but leetcode sadly doesn't test those).

----------------------------------------------------------------------------------------------------
Easy to understand Python solution (backtracking).
    def combinationSum3(self, k, n):
        res = []
        self.dfs(xrange(1,10), k, n, 0, [], res)
        return res
        
    def dfs(self, nums, k, n, index, path, res):
        if k < 0 or n < 0: # backtracking 
            return 
        if k == 0 and n == 0: 
            res.append(path)
        for i in xrange(index, len(nums)):
            self.dfs(nums, k-1, n-nums[i], i+1, path+[nums[i]], res)

----------------------------------------------------------------------------------------------------
Input &#91;1, 100&#93;, why expected &lsqb;&lsqb;100&rsqb;&rsqb;
when I provide the input k = 1, n = 100, the oj gives me the answer [[100]]. I think it is not correct, cause we can only use number 1-9. Any comment?

----------------------------------------------------------------------------------------------------
Simple python code using generator
    def combination(self, k, n, left):
        if k == 1 and n in left:
            yield [n]
        for i in range(len(left)):
            for rest in self.combination(k-1, n-left[i], left[i+1:]):
                rest.insert(0, left[i])
                yield rest
    
    def combinationSum3(self, k, n):
        return list(self.combination(k, n, range(1, 10)))

----------------------------------------------------------------------------------------------------
Simple DFS Solution
    def combinationSum3(self, k, n):
        res = []
        self.dfs(range(1,10), 0, [], k, n, res)
        return res
    
    def dfs(self, nums, idx, path, k, n, res):
        if n < 0:
            return
        if len(path) == k and n == 0:
            res.append(path)
            return
        for i in range(idx, len(nums)):
            self.dfs(nums, i+1, path+[nums[i]], k, n-nums[i], res)

----------------------------------------------------------------------------------------------------
Java easy to understand recursive solution.
        
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            nums.add(i);
        }
        List<List<Integer>> ret = new ArrayList<>();
        dfs(nums, k, n, 0, new ArrayList<>(), ret);
        return ret;
    }
    
    private void dfs(List<Integer> nums, int k, int n, int idx, List<Integer> path, List<List<Integer>> ret) {
        if (k <= 0 && n <= 0) {
            if (k == 0 && n == 0) {
                ret.add(path);
            }
            return; // backtracking
        }
        for (int i = idx; i < nums.size(); i++) {
            List<Integer> p = new ArrayList<>(path);
            p.add(nums.get(i));
            dfs(nums, k-1, n-nums.get(i), i+1, p, ret);
        }
    } 

----------------------------------------------------------------------------------------------------
Accepted C++ Solution Standard Backtracking
    class Solution {
    public:
        vector<vector<int>> combinationSum3(int k, int n) {
        	vector<vector<int>> ret;
        	vector<int> partial;
        
        	backTrackingFun(n,k,1,partial,ret);
        	return ret;
        }
        
        void backTrackingFun(int n,int k,int idx,vector<int> partial,vector<vector<int>> &ret){
        	if(1==k){
        		if(idx<=n && n<10){
        			partial.push_back(n);
        			ret.push_back(partial);
        		}
        		return;
        	}
        
        	for(auto i=idx;i<10;++i){
        		if(i<n){
        			partial.push_back(i);
        			backTrackingFun(n-i,k-1,i+1,partial,ret);
        			partial.pop_back();
        		}else{
        			break;
        		}
        	}
        }
    };

well, there is not too much to say.it's not tricky at all.

----------
combinationSum2 and combinationSum below.
content of the caller function is the same only backTrackingFun is different.

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    	vector<vector<int>> ret;
    	vector<int> partial;
    	sort(candidates.begin(),candidates.end());
    	backTrackingFun(candidates,target,0,partial,ret);
    
    	return ret;
    }


----------

combinationSum2

    void backTrackingFun(const vector<int>& candidates, int target,int idx,vector<int> partial,vector<vector<int>> &ret){
    	if(0==target){
    		ret.push_back(partial);
    		return;
    	}
    
    	int size=candidates.size();
    	for(auto i=idx;i<size;++i){
    		int v=candidates[i];
    		// remove dups
    		if(i>idx && v==candidates[i-1]) continue;
    
    		if(v<=target){
    			partial.push_back(v);
    			backTrackingFun(candidates,target-v,i+1,partial,ret);
    			partial.pop_back();
    		}else{
    			break;
    		}
    	}
    }

combinationSum

    void backTrackingFun(const vector<int>& candidates, int target,int idx,vector<int> partial,vector<vector<int>> &ret){
    	if(0==target){
    		ret.push_back(partial);
    		return;
    	}
    
    	int size=candidates.size();
    	for(auto i=idx;i<size;++i){
    		int v=candidates.at(i);
    		if(v<=target){
    			partial.push_back(v);
    			backTrackingFun(candidates,target-v,i,partial,ret);
    			partial.pop_back();
    		}else{
    			break;
    		}
    	}
    }

----------------------------------------------------------------------------------------------------
Test Case(k=1, n=10)
The expected answer is [[10]]. Should it be []?

----------------------------------------------------------------------------------------------------
My C++ solution, DFS 4ms
    {class Solution {
public:

    void dfs(int k, int n, int start, vector<int> vec, vector<vector<int> > & res)
    {
        if (k == 0 && n == 0)
        {
            res.push_back(vec);
        }
        if (k < 0 || n < 0)
            return;
        for(int i = start; i <= 9; i ++)
        {
            vec.push_back(i);
            dfs(k - 1, n - i, i + 1, vec, res);
            vec.erase(vec.end() - 1);
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int> > res;
        vector<int> vec;
        dfs(k, n, 1, vec, res);
        return res;
    }
};}

----------------------------------------------------------------------------------------------------
Simple Java Recursive solution
    public class Solution {
        public List<List<Integer>> combinationSum3(int k, int n) {
            List<List<Integer>> res=new ArrayList<List<Integer>>();
            recur(new ArrayList<Integer>(),res,n,1,k);
            return res;
        }
        public void recur(List<Integer> temp,List<List<Integer>> res, int tar,int k,int count){
            if(tar==0&&count==0){
                res.add(temp);
                return;
            }
            if(count==0||tar<=0)return;
            
            for(int i=k;i<=9;i++){
                temp.add(i);
                recur(new ArrayList<Integer>(temp),res,tar-i,i+1,count-1);
                temp.remove(temp.size()-1);
            }
        }
    }

----------------------------------------------------------------------------------------------------
An accepted Java solution
    public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<Integer> item = new ArrayList<Integer>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(k,n,1,item,res);
        return res;
    }
    private void helper(int k, int target, int start, List<Integer> item, List<List<Integer>> res){
        if(k==0 && target==0){
            res.add(new ArrayList(item));
            return;
        }
        if(k==0 || target<=0){
            return;
        }
        for(int i=start; i<=9; i++){
            item.add(i);
            helper(k-1, target-i, i+1, item, res);
            item.remove(item.size()-1);
        }
    }
}

----------------------------------------------------------------------------------------------------
Share my Python solution with Iterative Backtracking
    class Solution:
    # @param {integer} k
    # @param {integer} n
    # @return {integer[][]}
    def combinationSum3(self, k, n):
        # Iterative backtracking: AC in 60 ms
        # -----------------------------------
        #
        ans = []
        stack = [(0, 1, [])]  # (total, start, combination)
        while stack:
            total, start, comb = stack.pop()
            if total == n and len(comb) == k:
                ans.append(comb)
                continue

            for i in range(start, 10):
                tmp_total = total + i
                if tmp_total > n:
                    break
                stack.append((tmp_total, i + 1, comb + [i]))
        return ans



----------------------------------------------------------------------------------------------------
Non-recursive C++ 0ms Solution.
    class Solution {
    public:
        vector<vector<int>> combinationSum3(int k, int n) {
            vector<vector<int>> ret;
            vector<int> path(k);
            int i = 0;
            int curSum = 0;
            
            while(i!=-1){
                path[i]++;
                curSum++;
                if(path[i]>9 || curSum > n || (i!=k-1 && curSum+path[i] >= n) ){
                    curSum -= path[i];
                    i--;
                }else if(i == k-1){
                    if(curSum == n) ret.push_back(path);
                }else if(curSum+path[i] < n){
                    path[i+1] = path[i];
                    curSum += path[i];
                    i++;
                }
            }
            return ret;
        }
    };

----------------------------------------------------------------------------------------------------
