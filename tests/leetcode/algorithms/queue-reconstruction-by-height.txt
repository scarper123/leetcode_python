Solution to 3rd follow-up question
> What if elements of nums2 are stored on disk, and the memory is
> limited such that you cannot load all elements into the memory at
> once?

- If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.

- If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.

----------------------------------------------------------------------------------------------------
AC solution using Java HashMap
    public class Solution {
        public int[] intersect(int[] nums1, int[] nums2) {
            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
            ArrayList<Integer> result = new ArrayList<Integer>();
            for(int i = 0; i < nums1.length; i++)
            {
                if(map.containsKey(nums1[i])) map.put(nums1[i], map.get(nums1[i])+1);
                else map.put(nums1[i], 1);
            }
        
            for(int i = 0; i < nums2.length; i++)
            {
                if(map.containsKey(nums2[i]) && map.get(nums2[i]) > 0)
                {
                    result.add(nums2[i]);
                    map.put(nums2[i], map.get(nums2[i])-1);
                }
            }
        
           int[] r = new int[result.size()];
           for(int i = 0; i < result.size(); i++)
           {
               r[i] = result.get(i);
           }
        
           return r;
        }
    }

----------------------------------------------------------------------------------------------------
C++ hash table solution and sort + two pointers solution with time and space complexity
m: nums1.size     n: nums2.size

Hash table solution: 
Time: O(m + n)   Space: O(m + n)

    class Solution {
    public:
        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
            unordered_map<int, int> dict;
            vector<int> res;
            for(int i = 0; i < (int)nums1.size(); i++) dict[nums1[i]]++;
            for(int i = 0; i < (int)nums2.size(); i++)
                if(--dict[nums2[i]] >= 0) res.push_back(nums2[i]);
            return res;
        }
    };

Hash table solution2:
Time: O(m + n)    Space: O(m)

    class Solution {
    public:
        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
            unordered_map<int, int> dict;
            vector<int> res;
            for(int i = 0; i < (int)nums1.size(); i++) dict[nums1[i]]++;
            for(int i = 0; i < (int)nums2.size(); i++)
                if(dict.find(nums2[i]) != dict.end() && --dict[nums2[i]] >= 0) res.push_back(nums2[i]);
            return res;
        }
    };

Sort and two pointers Solution:
Time: O(max(m, n) log(max(m, n)))   Space: O(m + n)

    class Solution {
    public:
        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
            sort(nums1.begin(), nums1.end());
            sort(nums2.begin(), nums2.end());
            int n1 = (int)nums1.size(), n2 = (int)nums2.size();
            int i1 = 0, i2 = 0;
            vector<int> res;
            while(i1 < n1 && i2 < n2){
                if(nums1[i1] == nums2[i2]) {
                    res.push_back(nums1[i1]);
                    i1++;
                    i2++;
                }
                else if(nums1[i1] > nums2[i2]){
                    i2++;
                }
                else{
                    i1++;
                }
            }
            return res;
        }
    };

----------------------------------------------------------------------------------------------------
2 lines in Python
    from collections import Counter
    
    class Solution(object):
        def intersect(self, nums1, nums2):
            c1, c2 = Counter(nums1), Counter(nums2)
            return sum([[num] * min(c1[num], c2[num]) for num in c1 & c2], [])
                
            

----------------------------------------------------------------------------------------------------
Short Python &#x2F; C++
Python
-

    def intersect(self, nums1, nums2):
        a, b = map(collections.Counter, (nums1, nums2))
        return list((a & b).elements())

Variations:

    def intersect(self, nums1, nums2):
        C = collections.Counter
        return list((C(nums1) & C(nums2)).elements())
        
    def intersect(self, nums1, nums2):
        return list((collections.Counter(nums1) & collections.Counter(nums2)).elements())

---

C++
-

    vector<int> intersect(vector<int>& a, vector<int>& b) {
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        a.erase(set_intersection(a.begin(), a.end(), b.begin(), b.end(), a.begin()), a.end());
        return a;
    }

Another:

    vector<int> intersect(vector<int>& a, vector<int>& b) {
        unordered_map<int, int> ctr;
        for (int i : a)
            ctr[i]++;
        vector<int> out;
        for (int i : b)
            if (ctr[i]-- > 0)
                out.push_back(i);
        return out;
    }


----------------------------------------------------------------------------------------------------
4ms java solution
            Arrays.sort(nums1);
            Arrays.sort(nums2);
            int pnt1 = 0;
            int pnt2 = 0;
            ArrayList<Integer> myList = new ArrayList<Integer>();
            while((pnt1 < nums1.length) &&(pnt2< nums2.length)){
                if(nums1[pnt1]<nums2[pnt2]){
                    pnt1++;
                }
                else{
                    if(nums1[pnt1]>nums2[pnt2]){
                        pnt2++;
                    }
                    else{
                        myList.add(nums1[pnt1]);
                        pnt1++;
                        pnt2++;
                    }
                }
            }
            int[] res = new int[myList.size()];
            for(int i = 0; i<res.length; i++){
                res[i] = (Integer)myList.get(i);
            }
            return res;

----------------------------------------------------------------------------------------------------
A dictionary based solution in python
class Solution(object):

    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        dict1 = dict()
        for i in nums1:
            if i not in dict1:
                dict1[i] = 1
            else:
                dict1[i] += 1
        ret = []
        for i in nums2:
            if i in dict1 and dict1[i]>0:
                ret.append(i)
                dict1[i] -= 1
        return ret

----------------------------------------------------------------------------------------------------
Two C++ solutions: hashtable &amp; sort+binary search. Time &amp; space complexity analyzed.
Let **m**=nums1.size(), and **n**=nums2.size()

**Solution 1: hashtable** (using unordered_map).

 - time complexity: max(O(m), O(n))
 - space complexity: choose one O(m) or O(n)   <--- So choose the
   smaller one if you can


----------


    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) return intersect(nums2, nums1);
        vector<int> ret;
        unordered_map<int,int> map1;
        for(int num:nums1) map1[num]++;
        for(int num:nums2) {
            if(map1.find(num)!=map1.end() && map1[num]>0) {
                ret.push_back(num);
                map1[num]--;
            }
        }
        return ret;
    }


**Solution 2: sort + binary search**

 - time complexity: max(O(mlgm), O(nlgn), **O(mlgn)**)  or max(O(mlgm),
   O(nlgn), **O(nlgm)**)
 - O(mlgm) <-- sort first array
 - O(nlgn) <--- sort second array
 - O(mlgn) <--- for each element in nums1, do binary search in nums2
 - O(nlgm) <--- for each element in nums2, do binary search in nums1
 - space complexity: depends on the space complexity used in your
   sorting algorithm, bounded by max(O(m), O(n))

----------

    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ret;
        if(nums1.empty() || nums2.empty()) return ret;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int j=0;
        for(int i=0; i<nums1.size(); ) {
            int index = lower_bound(nums2, nums1[i]);
            int count2 = 0;
            while(index<nums2.size() && nums2[index]==nums1[i]) {
                count2++; 
                index++;
            }
            int count1 = 0;
            while(nums1[j]==nums1[i]) {
                count1++;
                j++;
            }
            ret.insert(ret.end(),min(count1,count2),nums1[i]);
            i=j;
        } 
        return ret;
    }

    int lower_bound(const vector<int>& nums, int target) {
        int l=0, r=nums.size()-1;
        while(l<r) {
            int m=l+(r-l)/2;
            if(nums[m]<target) {l=m+1;}
            else {r=m;}
        }
        return r;
    }


----------

So if two arrays are already sorted, and say m is much smaller than n, 
we should choose the algorithm that for each element 
in nums1, do binary search in nums2, 
so that the complexity is O(mlgn). 
In this case, if memory is limited and nums2 is stored 
in disk, partition it and send portions of nums2 piece 
by piece. keep a pointer for nums1 indicating the
current position, and it should be working fine~




----------------------------------------------------------------------------------------------------
JavaScript solution with reduce and filter
var intersect = function(nums1, nums2) {
    // track how often each number occurs in first list
    var store = nums1.reduce(function(map, n) {
        map[n] = (map[n] + 1) || 1;
        
        return map;
    }, {});
    
    // filter out numbers from second list based on
    // how often they occurred in the first list
    return nums2.filter(function(n) {
        if (store[n]) {
            store[n]--;
            
            return true;
        } else {
            return false;
        }
    });
};


----------------------------------------------------------------------------------------------------
Three Python Solutions
**two pointers:**

    class Solution(object):
        def intersect(self, nums1, nums2):

            nums1, nums2 = sorted(nums1), sorted(nums2)
            pt1 = pt2 = 0
            res = []

            while True:
                try:
                    if nums1[pt1] > nums2[pt2]:
                        pt2 += 1
                    elif nums1[pt1] < nums2[pt2]:
                        pt1 += 1
                    else:
                        res.append(nums1[pt1])
                        pt1 += 1
                        pt2 += 1
                except IndexError:
                    break

            return res

**use `dictionary` to count:**

    class Solution(object):
        def intersect(self, nums1, nums2):

            counts = {}
            res = []

            for num in nums1:
                counts[num] = counts.get(num, 0) + 1

            for num in nums2:
                if num in counts and counts[num] > 0:
                    res.append(num)
                    counts[num] -= 1

            return res

**use `Counter` to make it cleaner:**

    class Solution(object):
        def intersect(self, nums1, nums2):
    
            counts = collections.Counter(nums1)
            res = []

            for num in nums2:
                if counts[num] > 0:
                    res += num,
                    counts[num] -= 1

            return res

----------------------------------------------------------------------------------------------------
Solution with three follow-ups
nums2

----------------------------------------------------------------------------------------------------
Straightforward python solution based on sort
    class Solution(object):
        def intersect(self, nums1, nums2):
            """
            :type nums1: List[int]
            :type nums2: List[int]
            :rtype: List[int]
            """
            nums1.sort()
            nums2.sort()
            res = []
            a = 0
            b = 0
            while a < len(nums1) and b < len(nums2):
                if nums1[a] == nums2[b]:
                    res.append(nums1[a])
                    a += 1
                    b += 1
                elif nums1[a] < nums2[b]:
                    a += 1
                else:
                    b += 1
            return res

----------------------------------------------------------------------------------------------------
Compact Python solution
    class Solution(object):
        def intersect(self, nums1, nums2):
            c1 = collections.Counter(nums1)
            c2 = collections.Counter(nums2)
            result = []
            for n in c1:
                if n in c2:
                    result += [n] * min(c1[n], c2[n])
            return result

----------------------------------------------------------------------------------------------------
my two pointers solution and the answers of the follow up questions.

    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        ArrayList<Integer> ret = new ArrayList<>();
        for(int i = 0, j = 0; i < nums1.length && j < nums2.length; ){
            if(nums1[i] < nums2[j]){
                i++;
            }else if(nums1[i] > nums2[j]){
                j++;
            }else{
                ret.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] myret = new int[ret.size()];
        int index = 0;
        for(int num : ret){
            myret[index++] = num;
        }
        return myret;
    }



----------------------------------------------------------------------------------------------------
C++ two pointers 8ms
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
    	sort(nums1.begin(),nums1.end());
    	sort(nums2.begin(),nums2.end());
    	int i1=0,i2=0;
    	int n1=nums1.size(),n2=nums2.size();
    	vector<int>res;
    	while(i1<n1&&i2<n2) {
    		if(nums1[i1]==nums2[i2]) {
    			res.push_back(nums1[i1]);
    			i1++,i2++;
    		} 
    		else if(nums1[i1]>nums2[i2]) {
    			i2++;
    		} 
    		else {
    			i1++;
    		}
    	}
    	return res;
    }

----------------------------------------------------------------------------------------------------
Python dictionary solution with clear explanation
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        dic = dict()
        res = []
        for v in nums1:
            if v not in dic:
                # [counter in nums1, counter in nums2]
                dic[v] = [1,0] 
            else:
                dic[v][0] += 1
        for v in nums2:
            if v in dic:
                dic[v][1] += 1
        for k,v in dic.items():
            # v appear in both lists
            if v[0]*v[1] > 0: 
                for i in range(min(v[0],v[1])):
                    res.append(k)
        return res


----------------------------------------------------------------------------------------------------
Short Python code
    class Solution(object):
        def intersect(self, nums1, nums2):
            """
            :type nums1: List[int]
            :type nums2: List[int]
            :rtype: List[int]
                    """
            inter_s=[]
            for x in set(nums1):
                if x in nums2:
                    n=min(nums1.count(x),nums2.count(x))
                    inter_s=inter_s+[x for i in range(n)]
            return inter_s

----------------------------------------------------------------------------------------------------
Java O(m+n) using Hash &amp; List
-Hash nums1 into the hashtable and increase values.

-Put nums2 into the array list and decrease values in hashtable.

-Convert ArrayList to array of integers.

    public class Solution {
      public int[] intersect(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> s = new HashMap<>();
        List<Integer> l = new ArrayList<Integer>();
        for (int i:nums1) 
            if (!s.containsKey(i)) s.put(i,1);
            else s.put(i,s.get(i)+1);
        for (int i:nums2) if(s.containsKey(i) && s.get(i) > 0) {
            l.add(i);
            s.put(i,s.get(i)-1);
        }
        int[] result = new int[l.size()];
        for (int i = 0; i < l.size();i++) {
            result[i] = l.get(i);  
        }
        return result;
      }
    }

----------------------------------------------------------------------------------------------------
50ms Python solution using two pointers
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        result = []
        
        # If the lists are sorted, then the time complexity is O(N)
        # Otherwise it is O(NlgN)
        
        if not all(nums1[i] <= nums1[i+1] for i in range(len(nums1) - 1)):
            nums1.sort()
        if not all(nums2[i] <= nums2[i+1] for i in range(len(nums2) - 1)):
            nums2.sort()
        
        # Two pointers
        p1, p2 = 0, 0 
        while p1 < len(nums1) and p2 < len(nums2):
            diff = nums1[p1] - nums2[p2]
            
            if diff == 0:
                result.append(nums1[p1])
                p1 += 1
                p2 += 1

            elif diff < 0:
                p1 += 1

            else:
                p2 += 1
        
        return result

----------------------------------------------------------------------------------------------------
Python O(n) simple solution
    def intersect(self, nums1, nums2):
            n1_dict = dict()
            result = []
            for n1 in nums1:
                n1_dict[n1] = n1_dict.get(n1, 0) + 1
            for n2 in nums2:
                if n2 in n1_dict and n1_dict.get(n2, 0) > 0:
                    result.append(n2)
                    n1_dict[n2] -= 1
            return result

----------------------------------------------------------------------------------------------------
