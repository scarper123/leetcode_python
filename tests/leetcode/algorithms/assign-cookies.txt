Java iterative and recursive solutions
public int sumOfLeftLeaves(TreeNode root) {
    if(root == null) return 0;
    int ans = 0;
    Stack<TreeNode> stack = new Stack<TreeNode>();
    stack.push(root);
    
    while(!stack.empty()) {
        TreeNode node = stack.pop();
        if(node.left != null) {
            if (node.left.left == null && node.left.right == null)
                ans += node.left.val;
            else
                stack.push(node.left);
        }
        if(node.right != null) {
            if (node.right.left != null || node.right.right != null)
                stack.push(node.right);
        }
    }
    return ans;
}


----------------------------------------------------------------------------------------------------
Java Solution using BFS
public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null || root.left == null && root.right == null) return 0;
        
        int res = 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while(!queue.isEmpty()) {
            TreeNode curr = queue.poll();

            if(curr.left != null && curr.left.left == null && curr.left.right == null) res += curr.left.val;
            if(curr.left != null) queue.offer(curr.left);
            if(curr.right != null) queue.offer(curr.right);
        }
        return res;
    }
}


----------------------------------------------------------------------------------------------------
3-line c++ solution
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if (!root) return 0;
        if (root->left && !root->left->left && !root->left->right) return root->left->val + sumOfLeftLeaves(root->right);
        return sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);
    }
};


----------------------------------------------------------------------------------------------------
3 line recursive c++ solution, no need to explain
int sumOfLeftLeaves(TreeNode* root, bool isleft = false) {
    if (!root) return 0;
    if (!root->left && !root->right) return isleft ? root->val : 0;
    return sumOfLeftLeaves(root->left, true) + sumOfLeftLeaves(root->right, false);
}


----------------------------------------------------------------------------------------------------
4 Lines Python Recursive AC Solution
class Solution(object):
    def sumOfLeftLeaves(self, root):
        if not root: return 0
        if root.left and not root.left.left and not root.left.right:
            return root.left.val + self.sumOfLeftLeaves(root.right)
        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)   # isn't leave


----------------------------------------------------------------------------------------------------
Java solution with Stack
    public int sumOfLeftLeaves(TreeNode root) {
        int res = 0;

        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            if (node != null) {
                if (node.left != null && node.left.left == null && node.left.right == null)
                    res += node.left.val;
                stack.push(node.left);
                stack.push(node.right);
            }
        }

        return res;
    }


----------------------------------------------------------------------------------------------------
Java, clean, no helper, recursive
public class Solution {
    public int sumOfLeftLeaves(TreeNode n) {
        if(n==null ||(n.left==null && n.right ==null))return 0;
        int l=0,r=0;
        if(n.left!=null)l=(n.left.left==null && n.left.right==null)?n.left.val:sumOfLeftLeaves(n.left);
        if(n.right!=null)r=sumOfLeftLeaves(n.right);
        return l+r;
    }
}


----------------------------------------------------------------------------------------------------
Accepted Java solution using Recursion, simple, easy to understand
public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        return sumOfLeftLeavesHelper(root, false);
    }
    
    public int sumOfLeftLeavesHelper(TreeNode root, boolean b) {
        if (root == null) return 0;
        if (root.left == null && root.right == null) {
            if (b) return root.val;
            else return 0;
        }
        return sumOfLeftLeavesHelper(root.left, true) + sumOfLeftLeavesHelper(root.right, false);
    }
}


----------------------------------------------------------------------------------------------------
5-line easy Python recursion
class Solution(object):
    def sumOfLeftLeaves(self, root):
        if not root:
            return 0
        if root.left and not root.left.left and not root.left.right:
            return root.left.val + self.sumOfLeftLeaves(root.right)
        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)

----------------------------------------------------------------------------------------------------
Short Python
n

----------------------------------------------------------------------------------------------------
Python Iterative solution using stack
class Solution(object):
    def sumOfLeftLeaves(self, root):
        if not root: return 0

        s = [root]
        res = 0
        while s:
            tmp = s.pop()
            if tmp.left:
                s.append(tmp.left)
                if not tmp.left.left and not tmp.left.right:
                    res += tmp.left.val
            if tmp.right:
                s.append(tmp.right)
        return res

----------------------------------------------------------------------------------------------------
Java Clean Recursive Solution
public class Solution {
    private int sum = 0;
    public int sumOfLeftLeaves(TreeNode root) {
        helper(root, false);
        return sum;
    }

    private void helper(TreeNode root, boolean isLeft) {
        if (root == null) {
            return;
        }
        if (isLeft == true && root.left == null && root.right == null) {
            sum += root.val;
        }
        helper(root.left, true);
        helper(root.right, false);
    }
}


----------------------------------------------------------------------------------------------------
Easy Python recursive solution
class Solution(object):
    def sumOfLeftLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        sum = 0
        if not root:
            return 0
        if root.left and not root.left.left and not root.left.right:
            sum += root.left.val
        sum += self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)
        return sum


----------------------------------------------------------------------------------------------------
C++ recursive and iterative solution, both 3 ms
    int sumOfLeftLeaves(TreeNode* root) {
        if(!root) return 0;
        int sum = 0;
        helper(root, sum);
        return sum;
    }
    
    void helper(TreeNode * root, int& sum){
        if(root->left)
            if (!root->left->left && !root->left->right)
                sum += root->left->val;
            else helper(root->left,sum);
        if(root->right)
            helper(root->right,sum);
    }


----------------------------------------------------------------------------------------------------
2 line concise JAVA
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null) return 0;
        return (root.left!=null&&root.left.left==null&&root.left.right==null?root.left.val:0)+sumOfLeftLeaves(root.left)+sumOfLeftLeaves(root.right);
    }


----------------------------------------------------------------------------------------------------
Very easy java solution
public int sumOfLeftLeaves(TreeNode root) {
        return sumOfLeftTreeNodes(false, 0, root);
    }
    

    public int sumOfLeftTreeNodes(boolean isLeft, int sum, TreeNode root){
        // if you end up here, means parent wasn't a left or it was not a right subtree
        if(root==null) return sum;
       // pre determine if its a left subtree and a leaf, so you add sum and return
        if(root.left==null && root.right==null && isLeft) return sum + root.val; 
       // collect whats from left subtree
        int leftsum = sumOfLeftTreeNodes(true, sum, root.left);
       // collect and return the right subtree sum
       return sumOfLeftTreeNodes(false, leftsum, root.right);
        
    }

----------------------------------------------------------------------------------------------------
Recursive Java Solution
public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null) return 0;
        int t = 0;
        if(root.left!=null && root.left.left == null && root.left.right == null){
            t = root.left.val;
        }
        return t + sumOfLeftLeaves(root.right) + sumOfLeftLeaves(root.left);
    }
}


----------------------------------------------------------------------------------------------------
C++ non-recursive solution
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        
        int res=0;
        stack<TreeNode*> s;
        
        if(!root) return 0;
        s.push(root);
        
        while(!s.empty()){
            TreeNode *current=s.top();
            s.pop();
            if(current->left){
                if(!current->left->left && !current->left->right) res+=current->left->val;
                else s.push(current->left);
            } 
            if(current->right){
                if(current->right->left || current->right->right) s.push(current->right);
            }
        }
        
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Depth First Search Very Easy to Understand!
class Solution {
    static boolean leftChild=false, rightChild = false;
    int sum=0;
    public int sumOfLeftLeaves(TreeNode root) {
            if(root ==null) return sum;
        
            if(root.left!=null){
                rightChild=false;
                leftChild=true;
                sumOfLeftLeaves(root.left);
            }

            if((root.left ==null && root.right==null) && leftChild && !rightChild) sum+= root.val;

            if(root.right!=null){
                rightChild=true;
                leftChild=false;
                sumOfLeftLeaves(root.right);
            }
        return sum;
    }
}


----------------------------------------------------------------------------------------------------
Easy Java solution with comment
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /*
 Basic idea: the sum of a node = f(leftSubTree) + f(rightSubtree)
 However we need to distinguish between left leaf or right leaf
 */
 
public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        return helper(root, false);
    }
    
    private int helper(TreeNode root, boolean isLeft){
        if(root == null) return 0;
        /*This node is a leaf, if it's a left leaf, we return the value
          if it's a right leaf we return 0 since right leaf doesn't count*/
        if(root.left == null && root.right == null){
            if(isLeft){
                return root.val;
            }
            return 0;
        }
        return helper(root.left, true) + helper(root.right, false);
    }    
    
}````

----------------------------------------------------------------------------------------------------
