Standard binary search
Just binary search, each time check citations[mid]
case 1: citations[mid] == len-mid, then it means there are citations[mid] papers that have at least citations[mid] citations.
case 2: citations[mid] > len-mid, then it means there are citations[mid] papers that have moret than citations[mid] citations, so we should continue searching in the left half
case 3:  citations[mid] < len-mid, we should continue searching in the right side
After iteration, it is guaranteed that right+1 is the one we need to find (i.e. len-(right+1) papars have at least len-(righ+1) citations)


    class Solution {
    public:
        int hIndex(vector<int>& citations) {
            int left=0, len = citations.size(), right= len-1,  mid;
            while(left<=right)
            {
                mid=(left+right)>>1;
                if(citations[mid]== (len-mid)) return citations[mid];
                else if(citations[mid] > (len-mid)) right = mid - 1;
                else left = mid + 1;
            }
            return len - (right+1);
        }
    };

or simplified version

    class Solution {
    public:
        int hIndex(vector<int>& citations) {
            int left=0, len = citations.size(), right= len-1,  mid;
            while(left<=right)
            {
                mid=left+ (right-left)/2;
                if(citations[mid] >= (len-mid)) right = mid - 1;
                else left = mid + 1;
            }
            return len - left;
        }
    };

----------------------------------------------------------------------------------------------------
O(logN)-time O(1)-space Easy Solution with Detailed Explanations (C++&#x2F;Java&#x2F;Python)
The basic idea of this solution is to use **binary search** to find the minimum `index` such that

    citations[index] >= length(citations) - index

After finding this `index`, the answer is `length(citations) - index`.

This logic is very similar to the C++ function `lower_bound` or `upper_bound`.

----------

Complexities:

- Time: O(log *n*)
- Space: O(1)

----------


**C++:**

    class Solution {
    public:
        int hIndex(vector<int>& citations) {
            int size = citations.size();

            int first = 0;
            int mid;
            int count = size;
            int step;
            
            while (count > 0) {
                step = count / 2;
                mid = first + step;
                if (citations[mid] < size - mid) {
                    first = mid + 1;
                    count -= (step + 1);
                }
                else {
                    count = step;
                }
            }
            
            return size - first;
        }
    };




**Java:**

    public class Solution {
        public int hIndex(int[] citations) {
            int len = citations.length;

            int first = 0;
            int mid;
            int count = len;
            int step;
            
            while (count > 0) {
                step = count / 2;
                mid = first + step;
                if (citations[mid] < len - mid) {
                    first = mid + 1;
                    count -= (step + 1);
                }
                else {
                    count = step;
                }
            }
            
            return len - first;
        }
    }

**Python:**

    class Solution(object):
        def hIndex(self, citations):
            """
            :type citations: List[int]
            :rtype: int
            """
            
            length = len(citations)
            
            first = 0
            count = length
            
            while count > 0:
                step = count / 2
                mid = first + step
                if citations[mid] < length - mid:
                    first = mid + 1
                    count -= (step + 1)
                else:
                    count = step
            
            return length - first
            
------------------

**@daviantan1890  @ruichang** Thank you for your comments and discussions.

I am very sure that two-branch binary search is more efficient than three branch binary search.
and (low + high) is not good idea since it may rely on the overflow behavior.
In fact, using `count` `step` `first` `mid` is the standard implement way of C++, so I do not think there are better ways to implement the binary search.




----------------------------------------------------------------------------------------------------
Java binary search, simple and clean
The idea is to search for the first index from the sorted array so that :
<br> <i>citations[index] >= length(citations) - index.</I> <br>
And return (length - index) as the result.
Here is the code:

    public int hIndex(int[] citations) {
		int len = citations.length;
		int lo = 0, hi = len - 1;
		while (lo <= hi) {
			int med = (hi + lo) / 2;
			if (citations[med] == len - med) {
				return len - med;
			} else if (citations[med] < len - med) {
				lo = med + 1;
			} else { 
				//(citations[med] > len-med), med qualified as a hIndex,
			    // but we have to continue to search for a higher one.
				hi = med - 1;
			}
		}
		return len - lo;
	}

----------------------------------------------------------------------------------------------------
Share my C O(logN) solution with explanation.
The basic idea comes from the description **h of his/her N papers have at least h citations each**.
Therefore, we know `if "mid + 1" is a valid h index, it means value of position "citationsSize - mid - 1" must exceed "mid"`. After we find a valid h index, we go on searching on the right part to see if we can find a larger h index.
If it's not a valid h index, the h index can be found in the left part and we simply follow the standard binary search to solve this problem. 
    
    int hIndex(int* citations, int citationsSize) {
        int lo = 0, hi = citationsSize, mid, index = 0;
        while (lo <= hi) {
            mid = lo + ((hi - lo) >> 1);
            if (citations[citationsSize - mid - 1] > mid) {
                lo = mid + 1;
                index = lo;
            } else {
                hi = mid - 1;
            }
        }
        return index;
    }

----------------------------------------------------------------------------------------------------
Short Python O(log n) Solution
The idea is to do binary search to find the min index such that `citations[i] >= len(citations) - i`, then the answer is `len(citations)-i`

    def hIndex(self, citations):
        n = len(citations)
        l, r = 0, n-1
        while l <= r:
            mid = (l+r)/2
            if citations[mid] >= n-mid:
                r = mid - 1
            else:
                l = mid + 1
        return n-l

----------------------------------------------------------------------------------------------------
C++ binary search
    class Solution {
    public:
        int hIndex(vector<int>& citations) {
            if (citations.empty()) return 0;
            int start = 0, len = citations.size(), end = len - 1;
            while (start <= end) {
                int mid = (start + end)/2;
                if (citations[mid] < len - mid)
                    start = mid + 1;
                else if (citations[mid] > len - mid)
                    end = mid - 1;
                else return len - mid;
            }
            return len - start;
        }
    };

----------------------------------------------------------------------------------------------------
Very standard binary search using (start + 1 &lt; end)
    public class Solution {
        public int hIndex(int[] citations) {
            int length = citations.length;
            if (length == 0) return 0;
            int start = 0, end = length-1;
            while (start + 1 < end) {
                int mid = start + (end-start)/2;
                if (citations[mid] == length-mid) {
                    return length-mid;
                } else if (citations[mid] > length-mid) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
            // once jump out, always check start & end
            if (citations[start] >= length-start) return length-start;
            if (citations[end] >= length-end) return length-end;
            return 0;
        }
    }

----------------------------------------------------------------------------------------------------
C++ binary search H-Index II
    int hIndex(vector<int>& citations) {
        const int size_c = citations.size();
        int left = 0, right = size_c - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (citations[mid] < size_c - mid) left = mid + 1;
            else right = mid - 1;
        }
        return size_c - left;
    }

----------------------------------------------------------------------------------------------------
Most clear explanation: Binary Search Java Solution
public class Solution {
    public int hIndex(int[] citations) {
        int n=citations.length;
        int l=0, h=citations.length;
        while(l<h){
            int m=l+h>>>1;
            if(citations[m]==n-m)
                return n-m;
            else if(citations[m]<n-m){
                l=m+1;
            }else{
                h=m;
            }
        }
        return n-l;
    }
}



----------------------------------------------------------------------------------------------------
Binary Search in Python
Binary Search With Runtime Complexity of O(log n):

    class Solution(object):
        def hIndex(self, citations):
            """
            :type citations: List[int]
            :rtype: int
            """
            N = len(citations)
            low, high = 0, N - 1
            while low <= high:
                mid = (low + high) / 2
                if N - mid > citations[mid]:
                    low = mid + 1
                else:
                    high = mid - 1
            return N - low

Ref: [http://bookshadow.com/weblog/2015/09/04/leetcode-h-index-ii/][1]


  [1]: http://bookshadow.com/weblog/2015/09/04/leetcode-h-index-ii/

----------------------------------------------------------------------------------------------------
Two solutions: O(log n), O(n)
1. O(lg n)

        int hIndex(vector<int>& citations) {
		   int left = 0;
	       int right = citations.size() - 1;
  		   int n = citations.size();
		   int last = 0;

		   while (left <= right) {
		  	  int mid = left + (right - left) / 2;
			  if (citations[mid] == n - mid)
			  	return n - mid;

			  if (n - mid < citations[mid]) {
				right = mid - 1;
				last = n - mid;
			  }
			  else
				left = mid + 1;
		   }

		   return last;
	    }




2. O(n)

        int hIndex(vector<int>& citations) {
           int n = citations.size();
           for(int i = 0; i<citations.size(); i++) {
              if(n - i <= citations[i])
                   return n - i;
           }
        
           return 0;
        }

----------------------------------------------------------------------------------------------------
