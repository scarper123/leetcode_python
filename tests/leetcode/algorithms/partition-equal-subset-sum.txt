C++ Clean and Short Solution
class Solution {
    const int base = 1337;
    int powmod(int a, int k) //a^k mod 1337 where 0 <= k <= 10
    {
        a %= base;
        int result = 1;
        for (int i = 0; i < k; ++i)
            result = (result * a) % base;
        return result;
    }
public:
    int superPow(int a, vector<int>& b) {
        if (b.empty()) return 1;
        int last_digit = b.back();
        b.pop_back();
        return powmod(superPow(a, b), 10) * powmod(a, last_digit) % base;
    }
};


----------------------------------------------------------------------------------------------------
Math solusion based on Euler&#x27;s theorem, power called only ONCE, C++&#x2F;Java&#x2F;1-line-Python
if (p == 0) p += 1140;

----------------------------------------------------------------------------------------------------
Java 4ms solution using the remainder repeat pattern
public class Solution {
    int DIV = 1337;
    
    List<Integer> findLoop(int a){
        List<Integer> index = new ArrayList<>();
        boolean[] set = new boolean[DIV];
        int rem = a % DIV;
        while ( ! set[rem] ) {
            set[rem]=true;
            index.add(rem);
            rem = (rem*a) % DIV;
        }
        return index;
    }
    
    int modBy(int[] b, int m){
        int rem = 0;
        for (int i=0; i < b.length; i++) {
            rem = (rem*10+b[i]) % m;
        }
        return rem;
    }

    public int superPow(int a, int[] b) {
        if (a==0 || a==DIV || b==null || b.length == 0) return 0;
        if (a==1) return 1;
        if (a > DIV) return superPow( a % DIV, b);
        List<Integer> index = findLoop(a);
        int loopsize = index.size();
        int rem = modBy(b, loopsize);
        rem = rem==0? loopsize: rem;
        return index.get(rem-1);
    }
}


----------------------------------------------------------------------------------------------------
What&#x27;s the point of this kind of question?
<p>Just to test whether the candidate knows <a href="https://en.wikipedia.org/wiki/Modular_exponentiation" rel="nofollow">https://en.wikipedia.org/wiki/Modular_exponentiation</a>?</p>
<p>Which company has asked this question? Curious.</p>


----------------------------------------------------------------------------------------------------
1-liners &amp; other with explanations
def superPow(self, a, b):
    result = 1
    apower = a
    for digit in reversed(b):
        result = result * pow(apower, digit, 1337) % 1337
        apower = pow(apower, 10, 1337)
    return result


----------------------------------------------------------------------------------------------------
Fermat and Chinese Remainder
int superPow(int a, vector<int>& b) {
    return (764 * superPow(a, b, 7) + 574 * superPow(a, b, 191)) % 1337;
}

int superPow(int a, vector<int>& b, int prime) {
    if (!(a %= prime)) return 0;
    int e = 0, mod = prime - 1;
    for (int digit : b)
        e = (e * 10 + digit) % mod;
    int pow = 1;
    while (e) {
        if (e & 1)
            pow = pow * a % prime;
        a = a * a % prime;
        e >>= 1;
    }
    return pow;
}


----------------------------------------------------------------------------------------------------
8ms JAVA solution using fast power
private static final int M = 1337;

    public int normalPow(int a, int b) {
        int result = 1;
        while (b != 0) {
            if (b % 2 != 0)
                result = result * a % M;
            a = a * a % M;
            b /= 2;
        }
        return result;
    }

    public int superPow(int a, int[] b) {
        a %= M;
        int result = 1;
        for (int i = b.length - 1; i >= 0; i--) {
            result = result * normalPow(a, b[i]) % M;
            a = normalPow(a, 10);
        }
        return result;
    }


----------------------------------------------------------------------------------------------------
Simple python solution using recursion
class Solution(object):
    def superPow(self, a, b):
        if not b:
            return 1
        return pow(a, b.pop(), 1337)*self.superPow(pow(a, 10, 1337), b)%1337


----------------------------------------------------------------------------------------------------
Java 16 lines AC solution 11ms
public class Solution {
    int base =1337;
    public int superPow(int a, int[] b) {
        return helper(a,b,b.length-1);
    }
    int helper(int a,int[]b,int endidx){
        if(endidx==-1) return 1;
        int last_digit=b[endidx];
        return powmod(helper(a,b,endidx-1),10)*powmod(a,last_digit)%base;
    }
    int powmod(int a,int k){
        a%=base;
        int result=1;
        for(int i=0;i<k;i++){
            result=(result*a)%base;
        }
        return result;
    }
}


----------------------------------------------------------------------------------------------------
C++ AC recursive solution
class Solution {
public:
 long long myPow(long long num, int k) {
   if (k == 0) return 1;
   if (k == 1) return (num % 1337);
   long long ret = myPow(num % 1337, k / 2) % 1337;
   return (ret * ret * ((k%2) ? num : 1))%1337;
 }

 int superPow(int a, vector<int>& b) {
   int L = b.size();
   long long ret = 1;
   for (int i = 0; i < L; i++) {
     ret = (long long)(myPow(ret, 10) * (long long)myPow(a, b[i])) % 1337;
   }
   return ret;
 }
};
```'

----------------------------------------------------------------------------------------------------
16ms C++ solution
	const int D = 1337;
	int A = a % D;
	vector<int> v(10, 0);
	v[0] = 1;
	for (int i = 1; i < 10; i++)
	{
		v[i] = (v[i - 1] * A) % 1337;
	}

	int L = v[b[0]];

	for (int i = 1; i < b.size(); i++)
	{
		int M = 1;
		for (int i = 0; i < 10; i++)
		{
			M = M*L % D;
		}

		M = M*v[b[i]] % D;
		L = M;
	}

	return L;
}


----------------------------------------------------------------------------------------------------
Simple python solution by find the loop
class Solution(object):
    def superPow(self, a, b):
        """
        :type a: int
        :type b: List[int]
        :rtype: int
        """
        s = 1
        idx = 0
        d = {1:0}
        res = [1]
        while True:
            idx += 1
            s = (s * a) % 1337
            if s in d:
                break
            res.append(s)
            d[s] = idx
        ib = int(''.join(map(str, b)))
        idx1 = (ib - d[s]) % (idx - d[s])
        return res[d[s]+idx1]


----------------------------------------------------------------------------------------------------
My easy understood JAVA solution with explanation. Any idea how to make it faster?
import java.math.BigInteger;

public class Solution {
    public int superPow(int a, int[] b) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < b.length; i++){
            sb.append(b[i]);
        }
        BigInteger numB = new BigInteger(sb.toString());
        return helper((long)a, numB, 1);
        
    }
    public int helper(long a, BigInteger b, long remainder){
        if (a == 1 || (b.compareTo(BigInteger.valueOf(1)) <= 0)) 
            return (int)(((a % 1337)*(remainder % 1337)) % 1337);
        
        BigInteger powNeed = BigInteger.valueOf((long)(Math.log(1337)/Math.log(a)) + 1);
        long newA = (b.compareTo(powNeed) < 0) ? 1 : (long)(Math.pow(a,powNeed.intValue()) % 1337);
        long newRemainder = (long)(((remainder % 1337)*(Math.pow(a, b.mod(powNeed).intValue()) % 1337)) % 1337);
        return helper(newA, b.divide(powNeed), newRemainder);
    }
}


----------------------------------------------------------------------------------------------------
Really strange result, anyone can help?
    public int pow(int a, int b){
        if(b == 0) return 1;
        if(b == 1) return a % 1337;
        return pow(a % 1337, b/2)*pow(a % 1337, b/2)*pow(a % 1337, b - b/2 - b/2) % 1337;
    }


----------------------------------------------------------------------------------------------------
7ms JAVA Solution using fast power algorithm
public class Solution {

private static final int NUM = 1337;
public int superPow(int a, int[] b) {
    int ans = 1;
    //not expecting to be a part of input
    if(b==null||b.length==0)
        return 0;
    a = a%NUM;
    int len = b.length;
    for (int i = 0; i < len; i++) {
        ans = ((pow(ans,10)*pow(a,b[i]))%NUM);
    }
    return ans;
}

private int pow(int a, int b){
    if(b==1)
        return a;
    if(b==0)
        return 1;
    int x = pow(a,b/2);
    x = (x*x)%NUM;
    if((b&1)==1)
        x = (x*a)%NUM;
    return x;
}
}

----------------------------------------------------------------------------------------------------
14ms,  O(size of b) iterative solution ( C++)
class Solution {
public:
    int superPow(int a, vector<int>& b) {
        int n = b.size();
        int result = 1;
        for(int i = n-1; i >=0; i--) {
            result = ((result * modPower(a, b[i])) % 1337);
            a = modPower(a, 10);
        }
        return result;
    }
private:
    int modPower(int a, int e) {
        int result = 1;    
        a = a%1337;
   
        while (e > 0) {
            if (e & 1) {
                result = ((result * a) % 1337);
            }
            e >>= 1;
            a = ((a * a) % 1337);
        }
        return result;
    }
};


----------------------------------------------------------------------------------------------------
Non-recursive, O(n) time complexity. (C++ Code with some hints)
    // O(c): for this problem, c=1337, so...O(1).
    int findLoopLength(long long a, long long c)
    {
        unordered_set<long long> unset;  // can also use array of length c
        long long t = a%c;
        while(unset.find(t)==unset.end())
        {
            unset.insert(t);
            t = (t*a)%c;
        }
        return unset.size();
    }
    
    // return b%c
    int bigMod(vector<int>&b, int c)
    {
        int p = 0;
        for(auto d:b)
        {
            p = (p*10 + d)%c;
        }
        return p;
    }
    
    int superPow(int a, vector<int>& b) {
        if(a==1) return 1;
        
        int loop = findLoopLength(a, 1337);    // O(1)
        int m = bigMod(b, loop);               // O(n), where n is the length of b
        
        // costs no more than findLoopLength(...). If the results were stored during the process of finding loop length, this while-loop could be avoided.
        long long r = a%1337;                         
        while(m>1)    
        {
            --m;
            r = (r*a)%1337;
        }
        return r;
    }


----------------------------------------------------------------------------------------------------
Share my C++ solution with a brief explanation, easy to understand
class Solution {
public:
    const int MOD = 1337;

    int superPow(int a, vector<int>& b) {
        int n = b.size();
        int ret = 1;
        
        for (int i = n-1; i >= 0; i--)
        {
            ret = ret * pow_help(a, b[i]) % MOD;
            a = pow_help(a, 10);
        }
        
        return ret;
    }
    
    int pow_help(int a, int b)
    {
        int ret = 1;
        a %= MOD;
        
        while (b > 0)
        {
            if (b & 1)
                ret = ret * a % MOD;
            
            b >>= 1;
            a = a * a % MOD;
        }
        
        return ret;
    }
};


----------------------------------------------------------------------------------------------------
my C++ Solution
class Solution {
const int DIV = 1337;
public:
    int superPow(int a, vector<int>& b) 
    {
        int rem = a%DIV, rempow = 1;
        int result = 1;
        for(int i = b.size() - 1; i >= 0; i--)
        {
            int k = 0;
            while(k < 10)
            {
                if(b[i] == k)
                    result = rempow*result%DIV;

                k++;
                rempow *= rem;
                if(rempow >= DIV)
                    rempow %= DIV;
            }
            rem = rempow;
            rempow = 1;
        }
        return result%DIV;
    }
};


----------------------------------------------------------------------------------------------------
Java solution, Pigeonhole principle.
public int superPow(int a, int[] b) {
	int []pows = new int[1337];    // max cycle is 1337 	
    Set<Integer> set = new HashSet<Integer>();
    
    // pigeon hole principle dictates that must be a duplicate among the power from 1 to 1337 if moded by 1337
    int cycle = 0;
    int val = 1;
    for (int i = 0; i < 1337; i++)  {
        val = (int)(((long)val * a) % 1337);
        // cycle found
        if (set.contains(val)) break;
        set.add(val);
        pows[cycle++] = val;
    }
    
    // b: String -> BigInteger
    StringBuilder str = new StringBuilder();
    for(int v: b) str.append(v);
    BigInteger bVal = new BigInteger(str.toString());
    
    bVal = bVal.subtract(new BigInteger("1")).mod(new BigInteger("" + cycle));
    return pows[bVal.intValue()];
}

----------------------------------------------------------------------------------------------------
