My solution for your reference.
    int removeElement(int A[], int n, int elem) {
        int begin=0;
        for(int i=0;i<n;i++) if(A[i]!=elem) A[begin++]=A[i];
        return begin;
    }

----------------------------------------------------------------------------------------------------
Accepted java solution
public class Solution {

    public int removeElement(int[] A, int elem) {
       int m = 0;    
       for(int i = 0; i < A.length; i++){
           
           if(A[i] != elem){
               A[m] = A[i];
               m++;
           }
       }
       
       return m;
    }
}

----------------------------------------------------------------------------------------------------
9-line java solution
The basic idea is when elem is found at index i, let A[i] = the last element in the modifying array, then repeat searching until elem is not found.


    public int removeElement(int[] A, int elem) {
        int len = A.length;
        for (int i = 0 ; i< len; ++i){
            while (A[i]==elem && i< len) {
                A[i]=A[--len];
            }
        }
        return len;
    }

----------------------------------------------------------------------------------------------------
Very simple and optimal c++ solution.
    int removeElement(vector<int>& nums, int val) {
        int cnt = 0;
        for(int i = 0 ; i < nums.size() ; ++i) {
            if(nums[i] == val)
                cnt++;
            else
                nums[i-cnt] = nums[i];
        }
        return nums.size()-cnt;
    }

----------------------------------------------------------------------------------------------------
Fast &amp; Short Java Solution
    public int removeElement(int[] A, int elem) {
        int l = A.length;
        for (int i=0; i<l; i++) {
            if (A[i] == elem) {
                A[i--] = A[l-- -1];
            }
        }
        return l;
    }

----------------------------------------------------------------------------------------------------
Simple Python O(n) two pointer in place solution
Starting from the left every time we find a value that is the target value we swap it out with an item starting from the right.  We decrement end each time as we know that the final item is the target value and only increment start once we know the value is ok.  Once start reaches end we know all items after that point are the target value so we can stop there.


      def removeElement(self, nums, val):
        start, end = 0, len(nums) - 1
        while start <= end:
            if nums[start] == val:
                nums[start], nums[end], end = nums[end], nums[start], end - 1
            else:
                start +=1
        return start

----------------------------------------------------------------------------------------------------
Really concise one-pass Java code
    public int removeElement(int[] A, int elem) {
        int next = 0;
        for(int i = 0; i < A.length; i++) {
            if(A[i] != elem) {
                A[next++] = A[i];
            }
        }
        return next;
    }

I use "next" to track the position to put the next "non-elem" integer. 

----------------------------------------------------------------------------------------------------
6 lines of c++ solution
    int removeElement(int a[], int n, int elem) {
            int count = 0;
            for (int i = 0; i < n; ++i) {
                if (a[i] != elem) {
                    a[count++] = a[i];
                }
            }
            return count;
        }

----------------------------------------------------------------------------------------------------
7 lines Java Solution
    public class Solution {
        public int removeElement(int[] nums, int val) {
            int idx = 0;
            for (int i = 0; i < nums.length; i++){
                if (nums[i] != val){
                    nums[idx++] = nums[i]; 
                }
            }
            return idx;
        }
    }

----------------------------------------------------------------------------------------------------
Share my 3 lines c++ code
        int removeElement(int A[], int n, int elem) {
                int i=0;
                while(i<n)A[i]==elem?A[i]=A[--n]:i++;
                return n;
        }

----------------------------------------------------------------------------------------------------
Java short and clean
    public class Solution {
	public int removeElement(int[] nums, int val) {
		int i = 0;
		for (int n : nums)
			if (n != val)
				nums[i++] = n;
		return i;
	} }

----------------------------------------------------------------------------------------------------
4ms C++ solution
    int removeElement(vector<int>& nums, int val) {
        int i=0;
        
        for (int j=0; j<nums.size(); j++){
            
            if (nums[j]!=val) nums[i++]=nums[j];
        }
     return i;   
    }

----------------------------------------------------------------------------------------------------
0ms and clean Java solution
    public class Solution {
        public int removeElement(int[] nums, int val) {
            int lastIndex = nums.length - 1;
            
            for (int i = 0; i < lastIndex + 1; i++)
            {
                if (nums[i] == val)
                {
                    nums[i] = nums[lastIndex];
                    lastIndex--;
                    i--;
                }
            }
            
            return lastIndex + 1;
        }
    }

----------------------------------------------------------------------------------------------------
Short python solution
    def removeElement(self, nums, val):
        try:
            while True:
                nums.remove(val)
        except:
            return len(nums)

----------------------------------------------------------------------------------------------------
6lines Java solution
    
    public class Solution {
    public int removeElement(int[] nums, int val) {
        int len = 0;
        for(int num: nums) {
            if(num != val) {
                nums[len] = num;
                len++;
            }
        }
        return len;
    }
}

----------------------------------------------------------------------------------------------------
Accepted Java Solution
    public int removeElement(int[] nums, int val) {
        int start = 0, end = nums.length-1;
        while(start<=end){
            if(nums[start] == val){
                if(nums[end] == val)
                    end--;    
                else{
                    nums[start] = nums[end];
                    start++; end --;
                }
            }else{
                start++;
            }
        }
        return start;
    }

----------------------------------------------------------------------------------------------------
My O(n) solution
    class Solution {
    public:
        int removeElement(int A[], int n, int elem) {
            int index = 0;
            int tail = n - 1;
            
            while(index <= tail){
                if(A[index] == elem){
                    A[index] = A[tail];
                    tail -= 1;
                }else{
                    index++;
                }     
            }
            
            return tail + 1;
        }
    };

----------------------------------------------------------------------------------------------------
A simple c++ solution
    int removeElement(vector<int>& nums, int val) {
        int idx=0;
        for(int i=0;i<nums.size();i++) {
            if(nums[i]!=val) {
                nums[idx] = nums[i];
                idx ++;
            }
        }
        return idx;
    }



----------------------------------------------------------------------------------------------------
Beat 90% Fast Java Simple Solution with Explanation
The basic idea is to use two pointers, one left and one right. Left pointer starts from the beginning and right pointer starts from ending. While right pointer is pointing to the target value, move it to left until it is not pointing the target value or meets the left pointer. If the left pointer is pointing to the target value, change the value to what the right pointer is pointing, and move right pointer one step to left. Then move left pointer to right. Repeat that process until the two pointers meet.

    if (nums.length < 1)
			return 0;
		int left = 0, right = nums.length - 1;

		while (left <= right) {

			while (right > left && nums[right] == val)
				right--;
			if (nums[left] == val) {
				nums[left] = nums[right];
				right--;
			}
			left++;
		}

		return right + 1;

----------------------------------------------------------------------------------------------------
0ms 4 lines C code
    int removeElement(int* nums, int numsSize, int val) {
        int i, j;
        for(i = j = numsSize - 1; i >= 0; i--)
            if(nums[i] == val && i != j--) nums[i] = nums[j+1] ;
        return j+1;
    }

----------------------------------------------------------------------------------------------------
