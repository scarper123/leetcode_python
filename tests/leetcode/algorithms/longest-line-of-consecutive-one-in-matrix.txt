Java O(n) solution - one Hashmap, easy to understand
public class Solution {
    public int findPairs(int[] nums, int k) {
        if (nums == null || nums.length == 0 || k < 0)   return 0;
        
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (k == 0) {
                //count how many elements in the array that appear more than twice.
                if (entry.getValue() >= 2) {
                    count++;
                } 
            } else {
                if (map.containsKey(entry.getKey() + k)) {
                    count++;
                }
            }
        }
        
        return count;
    }
}


----------------------------------------------------------------------------------------------------
Two-pointer Approach
public int findPairs(int[] nums, int k) {
    int ans = 0;
    Arrays.sort(nums);
    for (int i = 0, j = 0; i < nums.length; i++) {
        for (j = Math.max(j, i + 1); j < nums.length && (long) nums[j] - nums[i] < k; j++) ;
        if (j < nums.length && (long) nums[j] - nums[i] == k) ans++;
        while (i + 1 < nums.length && nums[i] == nums[i + 1]) i++;
    }
    return ans;
}


----------------------------------------------------------------------------------------------------
1-liner in Python, O(n) time
    def findPairs(self, nums, k):
        if k>0:
            return len(set(nums)&set(n+k for n in nums))
        elif k==0:
            sum(v>1 for v in collections.Counter(nums).values())
        else:
            return 0


----------------------------------------------------------------------------------------------------
&#91;C++&#93; &#91;Java&#93; Clean Code with Explanation &#91;set&#93; &#91;map&#93;
public class Solution {
    public int findPairs(int[] nums, int k) {
        if (k < 0) { return 0; }

        Set<Integer> starters = new HashSet<Integer>();
        Set<Integer> uniqs = new HashSet<Integer>();
        for (int i = 0; i < nums.length; i++) {
            if (uniqs.contains(nums[i] - k)) starters.add(nums[i] - k);
            if (uniqs.contains(nums[i] + k)) starters.add(nums[i]);
            uniqs.add(nums[i]);
        }

        return starters.size();
    }
}


----------------------------------------------------------------------------------------------------
Easy understand Python solution
def findPairs(self, nums, k):
        c = collections.Counter(nums)
        return  sum(k > 0 and i + k in c or k == 0 and c[i] > 1 for i in c)

----------------------------------------------------------------------------------------------------
O(n) concise solution, C++
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(k < 0) return 0;
        unordered_map<int,int> m;
        for(int i = 0; i < nums.size(); ++i)
           ++m[nums[i]];
        int res = 0;
        if(k != 0) {
            for(auto it = m.begin(); it != m.end(); ++it)
               if(m.find(it->first+k) != m.end())
                   ++res;
        } else {
            for(auto it = m.begin(); it != m.end(); ++it)
               if(it->second > 1)
                   ++res;
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
Interesting Java Solution&#x2F; HashSet Only
public class Solution {
    public int findPairs(int[] nums, int k) {
        
        int ans = 0;
        
        if(k<0) return ans;
        
        Set<Integer> set1 = new HashSet<Integer> ();
        Set<Integer> set2 = new HashSet<Integer> ();
        
        if(k==0){
                for(int n:nums){
                    if(!set1.contains(n))
                        {set1.add(n);}
                    else{
                        set1.remove(n);
                        if(!set2.contains(n)) ans++;
                        set2.add(n);
                        }
                }
        }
        else{
            for(int n:nums){
                set1.add(n);
                set2.add(n+k);
            }
            set1.retainAll(set2);
            ans = set1.size();
        }
        
        return ans;
    }
}


----------------------------------------------------------------------------------------------------
Self-explained AC Java Sliding Window
 public  int findPairs(int[] nums, int k) {
	if(k<0 || nums.length<=1){
	    return 0;
	}
		 
         Arrays.sort(nums);
         int count = 0;
         int left = 0;
         int right = 1;
         
         while(right<nums.length){
             int firNum = nums[left];
             int secNum = nums[right];
             // If less than k, increase the right index
             if(secNum-firNum<k){
                 right++;
             }
             // If larger than k, increase the left index
             else if(secNum - firNum>k){
                 left++;   
             }
             // If equal, move left and right to next different number
             else{
                 count++;
                 while(left<nums.length && nums[left]==firNum){
                     left++;
                 }
                 while(right<nums.length && nums[right]==secNum){
                     right++;
                 }
                             
             }
             //left and right should not be the same number
             if(right==left){
             	right++;
             }
         }
        return count;
    }


----------------------------------------------------------------------------------------------------
C++ O(N) Time with unordered_map
// OJ: https://leetcode.com/problems/k-diff-pairs-in-an-array
// Author: github.com/lzl124631x
// Time: O(N)
// Space: O(N)
class Solution {
public:
  int findPairs(vector<int>& nums, int k) {
    if (k < 0) return 0;
    unordered_map<int, int> m;
    for (int n : nums) m[n]++;
    int cnt = 0;
    for (auto p : m) {
      if ((!k && p.second > 1)
        || (k && m.count(p.first + k))) ++cnt;
    }
    return cnt;
  }
};


----------------------------------------------------------------------------------------------------
Simple Idea O(nlogn) time + O(1) space Java Solution
public class Solution {
    public int findPairs(int[] nums, int k) {
        if (nums == null || nums.length < 2) return 0;
        int res = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            if (helper(nums, i + 1, nums[i] + k)) res++;
        }
        return res;
    }
    private boolean helper(int[] nums, int l, int target) {
        int r = nums.length - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == target) return true;
            if (nums[mid] < target) l = mid + 1;
            else r = mid - 1;
        }
        return false;
    }
}


----------------------------------------------------------------------------------------------------
Simple Java O(n) with single For-loop &amp; single HashMap
public int findPairs(int[] nums, int k) {
    if(k < 0) return 0;
    Map<Integer, Boolean> map = new HashMap<Integer, Boolean>();
    int ret = 0;
    for(int n : nums){
        /* if smaller matched value exists */
        if(map.containsKey(n-k) && !map.get(n-k)){
            map.put(n-k,true);
            ret++;
        }
        /* if larger matched value exists */
        if(map.containsKey(n+k) && (!map.containsKey(n) || !map.get(n))){
            map.put(n, true);
            ret++;
        }
        /* if current value has not yet been added*/
        if(!map.containsKey(n)){
            map.put(n, false);
        }
    }
    return ret;
}


----------------------------------------------------------------------------------------------------
Short Java Solution, but two HashSets
public class Solution {
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        Set<Integer> seenNum = new HashSet<>();
        Set<String> seenPair = new HashSet<>();
        int result = 0;
        
        for (int i = 0; i < nums.length; i++) {
            int prev = nums[i] - k;
            if (seenNum.contains(prev) && !seenPair.contains(prev + "," + nums[i])) {
                result++;
                seenPair.add(prev + "," + nums[i]);
            }
            seenNum.add(nums[i]);
        }
        return result;
    }
}


----------------------------------------------------------------------------------------------------
Java O(n) time O(n) space - One Map
public int findPairs(int[] nums, int k) {
    if (k < 0) return 0; 
    Map<Integer, Integer> map = new HashMap();
    int count = 0, n = nums.length;
    for (int i=0, j=0; j<2*n; j++, i=j%n) {
        if (!map.containsKey(nums[i])) map.put(nums[i], i);
        Integer upper = map.getOrDefault(nums[i]+k, -1);
        if (upper != -1 && upper != i) {
            count++;
            map.put(nums[i]+k, -1);
        }
    }
    return count;
}


----------------------------------------------------------------------------------------------------
O(n) with one HashMap
    public int findPairs(int[] nums, int k) {
        if ((nums == null) || (nums.length < 1) || (k < 0)) {
            return 0;
        }

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

        int count = 0;
        for (int i = 0; i < nums.length; i++) {

            int currentNum = nums[i];
            if ((k == 0) && (map.containsKey(currentNum) && (map.get(currentNum) == 1))) {
                count++;
            } else if (!map.containsKey(currentNum)) {
                if (map.containsKey(currentNum + k)) {
                    count++;
                }
                if (map.containsKey(currentNum - k)) {
                    count++;
                }
                if (!map.containsKey(currentNum)) {
                    map.put(currentNum, 0);
                }
            }
            map.put(currentNum, map.get(currentNum) + 1);

        }
        return count;
    }



----------------------------------------------------------------------------------------------------
Two bad habits + One excellent  preprocessing from &quot;anorange0409&quot;
class Solution {
public:
    int findPairs(vector<int>& nums, int K) {
        if (K < 0) return 0;
        int n = nums.size();
        unordered_map<int, int> M;
        for (auto x:nums) M[x]++;
        int ans = 0;
        for (auto t:M) {
            int x = t.first;
            int y = x + K;
            if (y == x) {
                if (M[x] > 1) ans ++;
            }
            else {
                if (M.find(y) != M.end()) ans++;
            }
        }
        return ans;
    }
};


----------------------------------------------------------------------------------------------------
Why the output is wrong ??
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        set<pair<int,int> > s;
        if(nums.size()==0){
            return 0;
        }
        sort(nums.begin(),nums.end());
        if(k==0){
            for(int i=0;i<nums.size()-1;i++){
                if(nums[i]==nums[i+1]){
                    s.insert(make_pair(nums[i],nums[i+1]));
                }
            }
            return s.size();
        }
        
        for(int i=0;i<nums.size();i++){
            if(binary_search(nums.begin(),nums.end(),nums[i]+k)){
                s.insert(make_pair(nums[i],nums[i]+k));
            }
        }
        return s.size();
    }
};


----------------------------------------------------------------------------------------------------
Java O(n) One HashMap simple solution with explanation
public class Solution {
    public int findPairs(int[] nums, int k) {
        if (k < 0)   return 0;
        HashMap<Integer,Integer> freqmap = new HashMap<Integer,Integer>();
        int count = 0;
        for(int num:nums){
            int f = (int)freqmap.getOrDefault(num, 0)+1;
            freqmap.put(num, f);
        }
        for (Integer key : freqmap.keySet()) {
            int a = (int)key;
            int b = a + k;
            if(!freqmap.containsKey(b)) continue;
            int bfreq = freqmap.get(b);
            int minfreq = a==b ? 2:1;
            if(bfreq>=minfreq ){
                count++;
                freqmap.put(a,1);
            }
        }
        return count;
    }
}

----------------------------------------------------------------------------------------------------
C++ 8-line O(n) solution using unordered_map &#x2F; O(nlgn) solution using two pointers (beats 99%)
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(k<0) return 0;
        int res = 0;
        sort(nums.begin(), nums.end());
        for(int i=0, j=1, n=nums.size(); i<n && j<n; ){
            if(i==j || nums[j]-nums[i]<k) j++;
            else if(nums[j]-nums[i]>k) i++;
            else {
                res++;
                while(j<n && nums[j]-nums[i]==k) j++;
                while(j<n-1 && nums[j]==nums[j+1]) j++;
                int i0 = i;
                while(i<j && nums[i0]==nums[i]) i++;
            }
        }
        return res;
    }
};


----------------------------------------------------------------------------------------------------
JAVA Easy Solution ,Beat 93.82%
public class Solution {
    public int findPairs(int[] nums, int k) {
        if (nums == null || nums.length < 2) return 0;
        int len = nums.length, count = 0;
        int start = 0, end = 1, last = 0;
        Arrays.sort(nums);
        while (end < len && start < len) {
            if (nums[start] + k == nums[end]) {
                count++;
                start++;
                end++;
                while (start < len  && nums[start] == nums[start-1]) {
                    start++;
                }
                if (start == end) end++;
            } else if (nums[start] + k > nums[end]) {
                end++;
            } else {
                start++;
                if (start == end) end++;
            }
        }
        
        return count;
    }
}

----------------------------------------------------------------------------------------------------
Java solution
public class Solution {
    public int findPairs(int[] nums, int k) {
        // If k is less than 0, then return 0;
        if (k < 0) {
            return 0;
        }
        // Initialize a new hashMap and use the numbers in the array as key, and use a boolean to represent if the number has appeared before
        HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            
            if (map.containsKey(nums[i])) {
                if (k == 0 && map.get(nums[i])) {
                    count++;
                }
                map.put(nums[i], false);
            }
            else {
                int left = nums[i] - k;
                int right = nums[i] + k;
                int leftCount = map.containsKey(left) ? 1 : 0;
                int rightCount = map.containsKey(right) ? 1 : 0;
                count += leftCount + rightCount;
                map.put(nums[i], true);
            }
        }
        return count;
    }
}


----------------------------------------------------------------------------------------------------
