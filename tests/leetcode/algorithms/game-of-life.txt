Accepted small Java solution.
This code assumes that next level is zero if no mo levels in shorter version number. And than compare levels.


    public int compareVersion(String version1, String version2) {
        String[] levels1 = version1.split("\\.");
        String[] levels2 = version2.split("\\.");
        
        int length = Math.max(levels1.length, levels2.length);
        for (int i=0; i<length; i++) {
        	Integer v1 = i < levels1.length ? Integer.parseInt(levels1[i]) : 0;
        	Integer v2 = i < levels2.length ? Integer.parseInt(levels2[i]) : 0;
        	int compare = v1.compareTo(v2);
        	if (compare != 0) {
        		return compare;
        	}
        }
        
        return 0;
    }

----------------------------------------------------------------------------------------------------
My 2ms easy solution with C&#x2F;C++
    int compareVersion(string version1, string version2) {
        int i = 0; 
        int j = 0;
        int n1 = version1.size(); 
        int n2 = version2.size();
        
        int num1 = 0;
        int num2 = 0;
        while(i<n1 || j<n2)
        {
            while(i<n1 && version1[i]!='.'){
                num1 = num1*10+(version1[i]-'0');
                i++;
            }
            
            while(j<n2 && version2[j]!='.'){
                num2 = num2*10+(version2[j]-'0');;
                j++;
            }
            
            if(num1>num2) return 1;
            else if(num1 < num2) return -1;
            
            num1 = 0;
            num2 = 0;
            i++;
            j++;
        }
        
        return 0;
    }

----------------------------------------------------------------------------------------------------
Java solution with fewer if logic
I checked other Java solution and the basic idea is the same. In addition, I simply the logic by making the two version number same length. For example, if version1 = "1.0.2", and version2 = "1.0", the I will convert the version2 to "1.0.0".

>     public int compareVersion(String version1, String version2) {
>         
>         String[] v1 = version1.split("\\.");
>         String[] v2 = version2.split("\\.");
>         
>         for ( int i = 0; i < Math.max(v1.length, v2.length); i++ ) {
>             int num1 = i < v1.length ? Integer.parseInt( v1[i] ) : 0;
>             int num2 = i < v2.length ? Integer.parseInt( v2[i] ) : 0;
>             if ( num1 < num2 ) {
>                 return -1;
>             } else if ( num1 > num2 ) {
>                 return +1;
>             }
>         } 
>         
>         return 0;
>     } 

----------------------------------------------------------------------------------------------------
Cudos on who invent such a boring question
Why would anyone have a version number of:
"19.8.3.17.5.01.0.0.4.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.000000"

This guy must be bored to hell.

----------------------------------------------------------------------------------------------------
My JAVA solution without split
    public class Solution {
    public int compareVersion(String version1, String version2) {
        int temp1 = 0,temp2 = 0;
        int len1 = version1.length(),len2 = version2.length();
        int i = 0,j = 0;
        while(i<len1 || j<len2) {
            temp1 = 0;
            temp2 = 0;
            while(i<len1 && version1.charAt(i) != '.') {
                temp1 = temp1*10 + version1.charAt(i++)-'0';
                
            }
            while(j<len2 && version2.charAt(j) != '.') {
                temp2 = temp2*10 + version2.charAt(j++)-'0';
                
            }
            if(temp1>temp2) return 1;
            else if(temp1<temp2) return -1;
            else {
                i++;
                j++;
                
            }
            
        }
        return 0;
        
    }
    
}


----------------------------------------------------------------------------------------------------
10 line concise solution. (C++)
This is a concise solution using stringstream to format string into int.
 
    int compareVersion(string version1, string version2) {
        for(auto& w : version1) if (w == '.') w=' ';
        for(auto& w : version2) if (w == '.') w=' ';
        istringstream s1(version1), s2(version2);
        while(1) {
            int n1,n2;
            if (not(s1 >> n1) ) n1 = 0;
            if (not(s2 >> n2) ) n2 = 0;
            if (not s1 and not s2) return 0;
            if (n1<n2) return -1;
            if (n1>n2) return 1;
        }
    }

----------------------------------------------------------------------------------------------------
My solutions in 3 languages
Java, >400ms:

    public class Solution {
        public int compareVersion(String version1, String version2) {
            String[] v1 = version1.split("\\.");
            String[] v2 = version2.split("\\.");
            for (int i = 0; i < Math.max(v1.length, v2.length); i++) {
                int gap = (i < v1.length ? Integer.parseInt(v1[i]) : 0) - (i < v2.length ? Integer.parseInt(v2[i]) : 0);
                if (gap != 0) {
                    return gap > 0 ? 1 : -1;
                }
            }
            return 0;
        }
    }

C++, 4ms:

    class Solution {
    public:
        int compareVersion(string version1, string version2) {
            for (; version1 != version2; version1 = nextSubstr(version1), version2 = nextSubstr(version2)) {
                int gap = stoi(version1) - stoi(version2);
                if (gap != 0) {
                    return gap > 0 ? 1 : -1;
                }
            }
            return 0;
        }
        
        string nextSubstr(string str) {
            for (int i = 0; i < str.size(); i++) {
                if (str.at(i) == '.') {
                    return str.substr(i + 1);
                }
            }
            return "0";
        }
    };

Python, around 100ms:

    class Solution:
        # @param a, a string
        # @param b, a string
        # @return a boolean
        def compareVersion(self, version1, version2):
            v1 = version1.split('.')
            v2 = version2.split('.')
            for i in range(max(len(v1), len(v2))):
                gap = (int(v1[i]) if i < len(v1) else 0) - (int(v2[i]) if i < len(v2) else 0)
                if gap != 0:
                    return 1 if gap > 0 else -1
            return 0

----------------------------------------------------------------------------------------------------
Simple JAVA Solution
    public class Solution {
        public int compareVersion(String version1, String version2) {
            String[] v1 = version1.split("\\.");
            String[] v2 = version2.split("\\.");
            
            int longest = v1.length > v2.length? v1.length: v2.length;
            
            for(int i=0; i<longest; i++)
            {
                int ver1 = i<v1.length? Integer.parseInt(v1[i]): 0;
                int ver2 = i<v2.length? Integer.parseInt(v2[i]): 0;
                
                if(ver1> ver2) return 1;
                if(ver1 < ver2) return -1;
            }
            return 0;
        }
    }

Any comments would be appreciated.
Basically I split the string with regex "." (it was written "\\." since "." only means any character), then using looping, I tried to find out the value of the version using parseInt. 
If one version has a lesser subversion than the others, it will be filled with zeros.

for example: 1 vs 1.01 --> 1.00 vs 1.01

it ran in about 230ms, any suggestion to make it faster with Java language?
What can be optimized?


----------------------------------------------------------------------------------------------------
2-4 lines Python, 3 different ways
**Solution 1: *Pad with `izip_longest` with `fillvalue=0`***

    def compareVersion(self, version1, version2):
        splits = (map(int, v.split('.')) for v in (version1, version2))
        return cmp(*zip(*itertools.izip_longest(*splits, fillvalue=0)))

**Solution 2: *Pad with `[0] * lengthDifference`***

    def compareVersion(self, version1, version2):
        v1, v2 = (map(int, v.split('.')) for v in (version1, version2))
        d = len(v2) - len(v1)
        return cmp(v1 + [0]*d, v2 + [0]*-d)

**Solution 3: *Recursive, add zeros on the fly***

    def compareVersion(self, version1, version2):
        main1, _, rest1 = ('0' + version1).partition('.')
        main2, _, rest2 = ('0' + version2).partition('.')
        return cmp(int(main1), int(main2)) or \
               len(rest1+rest2) and self.compareVersion(rest1, rest2)


----------------------------------------------------------------------------------------------------
Python 10 lines solution
    def compareVersion(self, version1, version2):
            versions1 = [int(v) for v in version1.split(".")]
            versions2 = [int(v) for v in version2.split(".")]
            for i in range(max(len(versions1),len(versions2))):
                v1 = versions1[i] if i < len(versions1) else 0
                v2 = versions2[i] if i < len(versions2) else 0
                if v1 > v2:
                    return 1
                elif v1 < v2:
                    return -1;
            return 0;

----------------------------------------------------------------------------------------------------
My solution in C( 0 ms) using only while loop;
    int compareVersion(char* version1, char* version2) 
    {
        
        int num1=0, num2=0;
        
        while(1)
        {
            num1=0;
            num2=0;
            while(version1[0]!='.' && version1[0]!='\0')
            {
                num1=num1*10+version1[0]-'0';
                version1++;
            }
            while(version2[0]!='.' && version2[0]!='\0')
            {
                num2=num2*10+version2[0]-'0';
                version2++;
            }
            if(version1[0]=='.') version1++;
            if(version2[0]=='.') version2++;
            
            if(num1>num2)return 1;
            else if(num2>num1)return -1;
            else if(version1[0]=='\0' && version2[0]=='\0')
            return 0;
        }
        
        
    }

----------------------------------------------------------------------------------------------------
7 lines simple java solution
     String[]v1=version1.split("\\."),v2=version2.split("\\.");
            int i;
            for( i =0;i<v1.length&&i<v2.length;i++)
            if(Integer.parseInt(v1[i])!=Integer.parseInt(v2[i]))return Integer.parseInt(v1[i])>Integer.parseInt(v2[i])?1:-1;
            for(;i<v1.length;i++)if(Integer.parseInt(v1[i])!=0)return 1;
            for(;i<v2.length;i++)if(Integer.parseInt(v2[i])!=0)return -1;
            return 0;
            

----------------------------------------------------------------------------------------------------
The problem description is very unclear and misleading.
<p>The problem description does not give a precise description on the format of the version, which makes it necessary to do try-and-error. In addition, its vague description misleads the reader to think it follows a <strong>major.minor</strong> format, which is not the case.</p>
<p>Without a concise format definition, it is impossible to get it right in the first attempt, considering the variety of versioning schemes out there. Such description might be acceptable during a on-site interview where clarification can be done promptly. But not for such online tests.</p>


----------------------------------------------------------------------------------------------------
4 ms runtime C++ easy to understand solution with algorithm description
Here's the algorithm:
Assumption is that the strings are properly formatted so no checking.
Valid strings are 123, 01, 123.01.5.16
I extracted the string into a C style char array for speed.
Scan both the strings one sub-version at a time in a loop if result is still 0 and one (or both) of the strings still have characters left to parse.  So basically, once the result is 1 or -1 we don't need further parsing. I'm using strtol so that we can pick each sub-version number and move the scan pointer to the "." preceding next sub-version number. If one of the strings is done before the other (example: 1.0 and 1) then make sure to the sub-version of finished string to 0.

    int compareVersion(string version1, string version2) {
    	int result = 0;
    	char *vStr1 = (char*) version1.c_str();
    	char *vStr2 = (char*) version2.c_str();

    	while (result == 0 && (*vStr1 != '\0' || *vStr2 != '\0')) {
    		long v1 = *vStr1 == '\0' ? 0 : strtol(vStr1, &vStr1, 10);
    		long v2 = *vStr2 == '\0' ? 0 : strtol(vStr2, &vStr2, 10);
    		if (v1 > v2) result = 1;
    		else if (v2 > v1) result = -1;
    		else {
    			if (*vStr1 != '\0') vStr1++;
    			if (*vStr2 != '\0') vStr2++;
    		}
    	}        

        return result;
    }

----------------------------------------------------------------------------------------------------
1ms solution in C
Without using bit field or some other fancy techniques, neat solution with just while loop. 

    int compareVersion(char *version1, char *version2){
        int v1 = 0, v2 = 0;
        do {
            v1 = 0; v2 = 0;
            if (version1[0] == '.') version1++;
            if (version2[0] == '.') version2++;
            for (; version1[0] != '.' && version1[0] != '\0'; version1++) {
                v1 *= 10;
                v1 += (version1[0] - '0');
            }
            for (; version2[0] != '.' && version2[0] != '\0'; version2++) {
                v2 *= 10;
                v2 += (version2[0] - '0');
            }
            if (v1 > v2) return 1;
            else if (v1 < v2) return -1;
            else if (version1[0] == '\0' \
                  && version2[0] == '\0') return 0;
        } while (version1[0] == '.' || version2[0] == '.');
    }
Hope you guys find it useful :-)

----------------------------------------------------------------------------------------------------
C++ solution (10 lines). very clean coding using istringstream to read input
     int compareVersion(string version1, string version2) {
        istringstream ver1(version1 + "."), ver2(version2 + ".");
        int val1 = 0, val2 = 0;
        char dot = '.';
        while (ver1.good() || ver2.good()) {
            if (ver1.good()) ver1 >> val1 >> dot;
            if (ver2.good()) ver2 >> val2 >> dot;
            if (val1 > val2) return 1;
            else if (val1 < val2) return -1;
            val1 = val2 = 0;
        }
        return 0;
    }

----------------------------------------------------------------------------------------------------
My O(N) solution C++
    class Solution {
    public:
        int compareVersion(string version1, string version2) {
            
            string v1 = version1;
            string v2 = version2;
            
            if(v1.length() == 0 || v2.length() == 0)
                return 0;
            
            int i=0;
            int j=0;
            
            int n1;
            int n2;
            
            while(i<v1.length() || j<v2.length())
            {
                n1 = 0;
                n2 = 0;
                
                while(i<v1.length() && v1[i] != '.')
                {
                    n1 = n1*10+(v1[i]-'0');
                    i++;
                }
                
                while(j<v2.length() && v2[j] != '.')
                {
                    n2 = n2*10+(v2[j]-'0');
                    j++;
                }
                
                if(n1>n2)
                    return 1;
                else if(n1<n2)
                    return -1;
                
                if(v1[i] == '.')
                    i++;
                if(v2[j] == '.')
                    j++;
            }
            
            return 0;
        }
    };

----------------------------------------------------------------------------------------------------
Solution using two pointer (Java)
Keep two pointer to get the substring until next "." or the end. Then compare the substring parsed. If one string is ended, assign 0 value for comparing.

    public class Solution {
        public int compareVersion(String version1, String version2) {
            int i = 0,j = 0;
            int pre1 = i, pre2 = j;
            while(i < version1.length() || j < version2.length()){
                while(i < version1.length()){
                    if(version1.charAt(i)=='.')
                        break;
                    i++;
                }
                while(j < version2.length()){
                    if(version2.charAt(j)=='.')
                        break;
                    j++;
                }
                int int1 = pre1 < i?Integer.parseInt(version1.substring(pre1,i)):0;
                int int2 = pre2 < j?Integer.parseInt(version2.substring(pre2,j)):0;
                if(int1 > int2)
                    return 1;
                else if(int1 < int2)
                    return -1;
                pre1 = ++i;
                pre2 = ++j;
            }
            return 0;
        }
    }

----------------------------------------------------------------------------------------------------
MY C++ Solution(2ms)
    class Solution {
    public:
    	int compareVersion(string version1, string version2) {
    		long res1=0, res2 = 0;
    		unsigned int i=0, j=0;
    		while (i < version1.size() || j < version2.size()){
    			for (; i < version1.size(); i++)
    			        if (isdigit(version1[i]))
    				        res1 = res1 * 10 + version1[i] - '0';
    			        else
    				        break;
    
    			for (; j < version2.size(); j++)
    			        if (isdigit(version2[j]))
    				       res2 = res2 * 10 + version2[j] - '0';
    			       else
    				       break;
    
    			if (res1 > res2)      return  1;
    			else if (res1 < res2) return -1;
    			i++;
    			j++;
    			res1 = 0;
    			res2 = 0;
    	    }
    	    return 0;
    	}
    };

----------------------------------------------------------------------------------------------------
Easy solution c++
    int compareVersion(string version1, string version2) {
            int ver1 = 0, ver2 = 0;
            int i = 0, j = 0;
            while( (i < version1.length())||(j < version2.length()) ){
                // calc each version num
                while(isdigit(version1[i])&&(i < version1.length())) 
                    ver1 = ver1*10 + version1[i++]-'0';  
                while(isdigit(version2[j])&&(j < version2.length()))
                    ver2 = ver2*10 + version2[j++]-'0';
                if(ver1 < ver2)
                    return -1;
                if(ver1 > ver2)
                    return 1;
                ver1 = 0, ver2 = 0;
                 i++; // get rid of '.'
                 j++;
            }
            return 0;
        }

----------------------------------------------------------------------------------------------------
