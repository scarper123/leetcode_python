My recursive Java code with O(n) time and O(n) space
The the basic idea is to take the last element in postorder array as the root, find the position of the root in the inorder array; then locate the range for left sub-tree and right sub-tree and do recursion. Use a HashMap to record the index of root in the inorder array.

    public TreeNode buildTreePostIn(int[] inorder, int[] postorder) {
    	if (inorder == null || postorder == null || inorder.length != postorder.length)
    		return null;
    	HashMap<Integer, Integer> hm = new HashMap<Integer,Integer>();
    	for (int i=0;i<inorder.length;++i)
    		hm.put(inorder[i], i);
    	return buildTreePostIn(inorder, 0, inorder.length-1, postorder, 0, 
                              postorder.length-1,hm);
    }
    
    private TreeNode buildTreePostIn(int[] inorder, int is, int ie, int[] postorder, int ps, int pe, 
                                     HashMap<Integer,Integer> hm){
    	if (ps>pe || is>ie) return null;
    	TreeNode root = new TreeNode(postorder[pe]);
    	int ri = hm.get(postorder[pe]);
    	TreeNode leftchild = buildTreePostIn(inorder, is, ri-1, postorder, ps, ps+ri-is-1, hm);
    	TreeNode rightchild = buildTreePostIn(inorder,ri+1, ie, postorder, ps+ri-is, pe-1, hm);
    	root.left = leftchild;
    	root.right = rightchild;
    	return root;
    }

----------------------------------------------------------------------------------------------------
My comprehension of O(n) solution from &#64;hongzhi
Below is the O(n) solution from @hongzhi but that discuss is closed now 'cause @hongzhi says little about his code. 

https://oj.leetcode.com/discuss/6334/here-is-my-o-n-solution-is-it-neat

I've modified some of and tried this code and got AC.
Just share about some comprehension about his code.

I've modified vtn(vector) to stn(stack) in that **stack** is probably what this algs means and needs.

What matters most is the meaning of *stn*. 

Only nodes whoes left side **hasn't been** handled will be pushed into *stn*.

And inorder is organized as (inorder of left) root (inorder of right),

And postorder is as (postorder of left) (postorder of right) root.

So at the very begin, we only have root in stn and we check if *inorder.back() == root->val* and in most cases it's **false**(see Note 1). Then we make this node root's right sub-node and push it into stn. 

**Note 1: this is actually *(inorder of right).back() == (postorder of right).back()*, so if only there's no right subtree or the answer will always be false.**

**Note 2: we delete one node from *postorder* as we push one into stn.**

Now we have [root, root's right] as stn and we check *inorder.back() == stn.top()->val* again. 

 - **true** means *inorder.back()* is the root node and needs handled left case.
 - **false** means *inorder.back()* is the next right sub-node

So when we encounter a true, we will cache *stn.top()* as p and **delete both nodes from inorder and stn**. 

Then we check inorder.size(), if there's no nodes left, it means p has no left node. 

Else the next node in inorder could be *p's left node* or *p's father* which equals to the now *stn.top()* (remember we popped *p* from *stn* above). 

If the latter happens, it means *p* has **no left node** and we need to move on to *p's father(stn.top())*.

If the former happens, it means *p* has one left node and it's *postorder.back()*, so we put it to p's left and delete it from the *postorder* and push the left node into *stn* 'cause **it** should be the next check node as the *postorder* is organized as above.

That's all of it. The algs just build a binary tree. :)

Inform me if there's anything vague or wrong, I'm open to any suggestions.

    class Solution {
    public:
        TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
            if(inorder.size() == 0)return NULL;
            TreeNode *p;
            TreeNode *root;
            stack<TreeNode *> stn;
            
            root = new TreeNode(postorder.back()); 
            stn.push(root); 
            postorder.pop_back(); 
            
            while(true)
            {
                if(inorder.back() == stn.top()->val) 
                {
                    p = stn.top();
                    stn.pop(); 
                    inorder.pop_back(); 
                    if(inorder.size() == 0) break;
                    if(stn.size() && inorder.back() == stn.top()->val)
                        continue;
                    p->left = new TreeNode(postorder.back()); 
                    postorder.pop_back();
                    stn.push(p->left);
                }
                else 
                {
                    p = new TreeNode(postorder.back());
                    postorder.pop_back();
                    stn.top()->right = p; 
                    stn.push(p); 
                }
            }
            return root;
        }
    };

----------------------------------------------------------------------------------------------------
Sharing my straightforward recursive solution
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        return create(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1);
    }
    
    TreeNode* create(vector<int> &inorder, vector<int> &postorder, int is, int ie, int ps, int pe){
        if(ps > pe){
            return nullptr;
        }
        TreeNode* node = new TreeNode(postorder[pe]);
        int pos;
        for(int i = is; i <= ie; i++){
            if(inorder[i] == node->val){
                pos = i;
                break;
            }
        }
        node->left = create(inorder, postorder, is, pos - 1, ps, ps + pos - is - 1);
        node->right = create(inorder, postorder, pos + 1, ie, pe - ie + pos, pe - 1);
        return node;
    }

Actually, this problem is pretty similar as the previous one. 

[Here is a like to that solution. ][1]


  [1]: https://oj.leetcode.com/discuss/18101/sharing-my-straightforward-recursive-solution

----------------------------------------------------------------------------------------------------
A Python recursive solution
    # Definition for a  binary tree node
    # class TreeNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.left = None
    #         self.right = None
    
    class Solution:
        # @param inorder, a list of integers
        # @param postorder, a list of integers
        # @return a tree node
        # 12:00
        def buildTree(self, inorder, postorder):
            if not inorder or not postorder:
                return None
            
            root = TreeNode(postorder.pop())
            inorderIndex = inorder.index(root.val)
    
            root.right = self.buildTree(inorder[inorderIndex+1:], postorder)
            root.left = self.buildTree(inorder[:inorderIndex], postorder)
    
            return root
            

----------------------------------------------------------------------------------------------------
Java iterative solution with explanation

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder.length == 0 || postorder.length == 0) return null;
        int ip = inorder.length - 1;
        int pp = postorder.length - 1;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode prev = null;
        TreeNode root = new TreeNode(postorder[pp]);
        stack.push(root);
        pp--;
        
        while (pp >= 0) {
            while (!stack.isEmpty() && stack.peek().val == inorder[ip]) {
                prev = stack.pop();
                ip--;
            }
            TreeNode newNode = new TreeNode(postorder[pp]);
            if (prev != null) {
                prev.left = newNode;
            } else if (!stack.isEmpty()) {
                TreeNode currTop = stack.peek();
                currTop.right = newNode;
            }
            stack.push(newNode);
            prev = null;
            pp--;
        }
        
        return root;
    }

This is my iterative solution, think about "Constructing Binary Tree from inorder and preorder array", the idea is quite similar. Instead of scanning the preorder array from beginning to end and using inorder array as a kind of mark, in this question, the key point is to scanning the postorder array from end to beginning and also use inorder array from end to beginning as a mark because the logic is more clear in this way. ***The core idea is: Starting from the last element of the postorder and inorder array, we put elements from postorder array to a stack and each one is the right child of the last one until an element in postorder array is equal to the element on the inorder array. Then, we pop as many as elements we can from the stack and decrease the mark in inorder array until the peek() element is not equal to the mark value or the stack is empty. Then, the new element that we are gonna scan from postorder array is the left child of the last element we have popped out from the stack.***

----------------------------------------------------------------------------------------------------
Python short solution (recursively).
        
    def buildTree(self, inorder, postorder):
        if inorder:
            ind = inorder.index(postorder.pop())
            root = TreeNode(inorder[ind])
            root.right = self.buildTree(inorder[ind+1:], postorder)
            root.left = self.buildTree(inorder[:ind], postorder)
            return root

----------------------------------------------------------------------------------------------------
Simple and clean Java solution with comments, recursive.
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTree(inorder, inorder.length-1, 0, postorder, postorder.length-1);
    }

	private TreeNode buildTree(int[] inorder, int inStart, int inEnd, int[] postorder,
			int postStart) {
		if (postStart < 0 || inStart < inEnd)
			return null;
		
		//The last element in postorder is the root.
		TreeNode root = new TreeNode(postorder[postStart]);
		
		//find the index of the root from inorder. Iterating from the end.
		int rIndex = inStart;
		for (int i = inStart; i >= inEnd; i--) {
			if (inorder[i] == postorder[postStart]) {
				rIndex = i;
				break;
			}
		}
		//build right and left subtrees. Again, scanning from the end to find the sections.
		root.right = buildTree(inorder, inStart, rIndex + 1, postorder, postStart-1);
		root.left = buildTree(inorder, rIndex - 1, inEnd, postorder, postStart - (inStart - rIndex) -1);
		return root;
	}


----------------------------------------------------------------------------------------------------
Here is my O(n) solution. Is it neat?
    class Solution {
    public:
        TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
            if(inorder.size() == 0)return NULL;
            TreeNode* p;
            TreeNode* root;
            vector<int> vint;
            vector<TreeNode*> vtn;
            root = new TreeNode(postorder.back());
            vtn.push_back(root);
            postorder.pop_back();
            while(true)
            {
                if(inorder.back() == vtn.back()->val)
                {
                    p = vtn.back();
                    vtn.pop_back();
                    inorder.pop_back();
                    if(inorder.size() == 0) break;
    				if(vtn.size())
    					if(inorder.back() == vtn.back()->val)continue;
                    p->left = new TreeNode(postorder.back());
    				postorder.pop_back();
                    vtn.push_back(p->left);
                }
                else
                {
                    p = new TreeNode(postorder.back());
                    postorder.pop_back();
                    vtn.back()->right = p;
                    vtn.push_back(p);
                }
            }
    		return root;
        }
    };

----------------------------------------------------------------------------------------------------
My C++ Solution
